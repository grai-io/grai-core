# Generated by Django 4.2.1 on 2023-06-13 15:35

from django.db import migrations


def batch_iter(iterable, n=10000):
    l = len(iterable)
    for ndx in range(0, l, n):
        yield iterable[ndx : min(ndx + n, l)]


class MigrateNode:
    def migrate(self, apps, schema_editor):
        node = apps.get_model("lineage", "Node")
        ids = node.objects.filter(metadata__grai__node_type="Node").values_list("id", flat=True)
        for batch in batch_iter(ids):
            nodes = node.objects.filter(id__in=batch)
            for item in nodes:
                item.metadata["grai"]["node_type"] = "Generic"
            node.objects.bulk_update(nodes, ["metadata"])

    def reverse(self, apps, schema_editor):
        node = apps.get_model("lineage", "Node")
        ids = node.objects.filter(metadata__grai__node_type="Generic").values_list("id", flat=True)
        for batch in batch_iter(ids):
            nodes = node.objects.filter(id__in=batch)
            for item in nodes:
                item.metadata["grai"]["node_type"] = "Node"
            node.objects.bulk_update(nodes, ["metadata"])


class MigrateEdge:
    def migrate(self, apps, schema_editor):
        edge = apps.get_model("lineage", "Edge")
        ids = edge.objects.filter(metadata__grai__edge_type="Edge").values_list("id", flat=True)
        for batch in batch_iter(ids):
            edges = edge.objects.filter(id__in=batch)
            for item in edges:
                item.metadata["grai"]["edge_type"] = "Generic"
            edge.objects.bulk_update(edges, ["metadata"])

    def reverse(self, apps, schema_editor):
        edge = apps.get_model("lineage", "Edge")
        ids = edge.objects.filter(metadata__grai__edge_type="Generic").values_list("id", flat=True)
        for batch in batch_iter(ids):
            edges = edge.objects.filter(id__in=batch)
            for item in edges:
                item.metadata["grai"]["edge_type"] = "Edge"
            edge.objects.bulk_update(edges, ["metadata"])


node_migrate = MigrateNode()
edge_migrate = MigrateEdge()


class Migration(migrations.Migration):
    dependencies = [
        ("lineage", "0008_alter_edge_managers_alter_node_managers_and_more"),
    ]

    operations = [
        migrations.RunPython(node_migrate.migrate, node_migrate.reverse),
        migrations.RunPython(edge_migrate.migrate, edge_migrate.reverse),
    ]
