openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/v1/auth/api-token/:
    post:
      operationId: auth_api_token_create
      tags:
      - auth
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /api/v1/auth/is-authenticated/:
    get:
      operationId: auth_is_authenticated_retrieve
      tags:
      - auth
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/auth/jwttoken/:
    post:
      operationId: auth_jwttoken_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/v1/auth/jwttoken/refresh/:
    post:
      operationId: auth_jwttoken_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/auth/token/verify/:
    post:
      operationId: auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/v1/connections/:
    get:
      operationId: connections_list
      tags:
      - connections
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connection'
          description: ''
    post:
      operationId: connections_create
      tags:
      - connections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connection'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Connection'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Connection'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: ''
  /api/v1/connections/{id}/:
    get:
      operationId: connections_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this connection.
        required: true
      tags:
      - connections
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: ''
    put:
      operationId: connections_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this connection.
        required: true
      tags:
      - connections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connection'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Connection'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Connection'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: ''
    patch:
      operationId: connections_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this connection.
        required: true
      tags:
      - connections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedConnection'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedConnection'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedConnection'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: ''
    delete:
      operationId: connections_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this connection.
        required: true
      tags:
      - connections
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/connectors/:
    get:
      operationId: connectors_list
      tags:
      - connectors
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connector'
          description: ''
  /api/v1/connectors/{id}/:
    get:
      operationId: connectors_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this connector.
        required: true
      tags:
      - connectors
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
          description: ''
  /api/v1/external-runs/:
    post:
      operationId: external_runs_create
      tags:
      - external-runs
      security:
      - jwtAuth: []
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/lineage/edges/:
    get:
      operationId: lineage_edges_list
      tags:
      - lineage
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Edge'
          description: ''
    post:
      operationId: lineage_edges_create
      tags:
      - lineage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Edge'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Edge'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Edge'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edge'
          description: ''
  /api/v1/lineage/edges/{id}/:
    get:
      operationId: lineage_edges_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this edge.
        required: true
      tags:
      - lineage
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edge'
          description: ''
    put:
      operationId: lineage_edges_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this edge.
        required: true
      tags:
      - lineage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Edge'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Edge'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Edge'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edge'
          description: ''
    patch:
      operationId: lineage_edges_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this edge.
        required: true
      tags:
      - lineage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEdge'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEdge'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEdge'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edge'
          description: ''
    delete:
      operationId: lineage_edges_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this edge.
        required: true
      tags:
      - lineage
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/lineage/nodes/:
    get:
      operationId: lineage_nodes_list
      tags:
      - lineage
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
          description: ''
    post:
      operationId: lineage_nodes_create
      tags:
      - lineage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Node'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Node'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
          description: ''
  /api/v1/lineage/nodes/{id}/:
    get:
      operationId: lineage_nodes_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this node.
        required: true
      tags:
      - lineage
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
          description: ''
    put:
      operationId: lineage_nodes_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this node.
        required: true
      tags:
      - lineage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Node'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Node'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
          description: ''
    patch:
      operationId: lineage_nodes_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this node.
        required: true
      tags:
      - lineage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNode'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
          description: ''
    delete:
      operationId: lineage_nodes_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this node.
        required: true
      tags:
      - lineage
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/memberships/:
    get:
      operationId: memberships_list
      tags:
      - memberships
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Membership'
          description: ''
  /api/v1/memberships/{id}/:
    get:
      operationId: memberships_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this membership.
        required: true
      tags:
      - memberships
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
          description: ''
  /api/v1/runs/:
    get:
      operationId: runs_list
      tags:
      - runs
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Run'
          description: ''
  /api/v1/runs/{id}/:
    get:
      operationId: runs_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - runs
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
          description: ''
  /api/v1/workspaces/:
    get:
      operationId: workspaces_list
      tags:
      - workspaces
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workspace'
          description: ''
  /api/v1/workspaces/{id}/:
    get:
      operationId: workspaces_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this workspace.
        required: true
      tags:
      - workspaces
      security:
      - cookieAuth: []
      - tokenAuth: []
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: ''
  /schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - jwtAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
components:
  schemas:
    AuthToken:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        token:
          type: string
          readOnly: true
      required:
      - password
      - token
      - username
    Connection:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        connector:
          type: string
          format: uuid
        namespace:
          type: string
          maxLength: 255
        name:
          type: string
          maxLength: 255
        metadata:
          type: object
          additionalProperties: {}
        is_active:
          type: boolean
        workspace:
          type: string
          format: uuid
      required:
      - connector
      - id
      - name
      - workspace
    Connector:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        metadata:
          type: object
          additionalProperties: {}
        is_active:
          type: boolean
      required:
      - id
      - name
    Edge:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        display_name:
          type: string
        namespace:
          type: string
          maxLength: 255
        data_source:
          type: string
          maxLength: 255
        metadata:
          type: object
          additionalProperties: {}
        is_active:
          type: boolean
        source:
          type: string
          format: uuid
        destination:
          type: string
          format: uuid
      required:
      - data_source
      - destination
      - id
      - source
    Membership:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        role:
          $ref: '#/components/schemas/RoleEnum'
        is_active:
          type: boolean
        user:
          type: string
          format: uuid
        workspace:
          type: string
          format: uuid
      required:
      - id
      - user
      - workspace
    Node:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        namespace:
          type: string
          maxLength: 255
        name:
          type: string
          maxLength: 255
        display_name:
          type: string
        data_source:
          type: string
          maxLength: 255
        metadata:
          type: object
          additionalProperties: {}
        is_active:
          type: boolean
      required:
      - data_source
      - id
      - name
    PatchedConnection:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        connector:
          type: string
          format: uuid
        namespace:
          type: string
          maxLength: 255
        name:
          type: string
          maxLength: 255
        metadata:
          type: object
          additionalProperties: {}
        is_active:
          type: boolean
        workspace:
          type: string
          format: uuid
    PatchedEdge:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        display_name:
          type: string
        namespace:
          type: string
          maxLength: 255
        data_source:
          type: string
          maxLength: 255
        metadata:
          type: object
          additionalProperties: {}
        is_active:
          type: boolean
        source:
          type: string
          format: uuid
        destination:
          type: string
          format: uuid
    PatchedNode:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        namespace:
          type: string
          maxLength: 255
        name:
          type: string
          maxLength: 255
        display_name:
          type: string
        data_source:
          type: string
          maxLength: 255
        metadata:
          type: object
          additionalProperties: {}
        is_active:
          type: boolean
    RoleEnum:
      enum:
      - admin
      - member
      - read_only
      type: string
    Run:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        connection:
          type: string
          format: uuid
        status:
          type: string
          maxLength: 255
        metadata:
          type: object
          additionalProperties: {}
        workspace:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
          nullable: true
      required:
      - connection
      - id
      - status
      - workspace
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    Workspace:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - id
      - name
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
