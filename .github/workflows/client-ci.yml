name: Grai Client CI
on:
  pull_request:
    paths:
      - "grai-client/**"
      - "grai-server/**"
      - ".github/workflows/client-ci.yml"

concurrency:
  group: ${{ github.ref }}-client-ci
  cancel-in-progress: true

env:
  py_ver: "3.10"
  poetry_ver: "1.2.2"
  project_dir: "grai-client"

jobs:
  lint-client:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.project_dir }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ env.py_ver }}"

      - run: pip install black isort

      - run: |
          black . --check
          isort . --profile black --check

  build-server:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    outputs:
      image-digest: ${{ steps.docker-build.outputs.digest }}

    defaults:
      run:
        working-directory: grai-server/app

    steps:
      - uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/grai-server-temp

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Build
        id: docker-build
        uses: docker/build-push-action@v4
        with:
          context: grai-server/app
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          target: grai-server
          tags: ghcr.io/grai-io/grai-core/grai-server-temp:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  tests-client:
    needs:
      - lint-client
      - build-server
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.project_dir }}
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: grai
          POSTGRES_PASSWORD: grai
          POSTGRES_DB: grai
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 2s --health-timeout 5s --health-retries 15
      the_guide:
        image: ghcr.io/grai-io/grai-core/grai-server-temp@${{ needs.build-server.outputs.image-digest }}
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
        env:
          DB_USER: grai
          DB_PASSWORD: grai
          DB_NAME: grai
          DB_PORT: "5432"
          DB_HOST: "postgres"
          DJANGO_SUPERUSER_USERNAME: null@grai.io
          DJANGO_SUPERUSER_PASSWORD: super_secret
          CELERY_BROKER_URL: redis://redis:6379/0
          CELERY_RESULT_BACKEND: redis://redis:6379/0
          REDIS_GRAPH_CACHE_HOST: redis
          DEBUG: true
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/health/ || exit 1"
          --health-interval 2s
          --health-retries 10
          --health-start-period 30s
      redis:
        image: redis/redis-stack-server:6.2.6-v9
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "${{ env.py_ver }}"

      - run: |
          pip install pytest
          pip install .

      - run: pytest
