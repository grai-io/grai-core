name: "Review App"

on: pull_request

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    defaults:
      run:
        working-directory: grai-frontend

    steps:
      - uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/grai-frontend

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      # - name: Docker cache layers
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-single-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-single-buildx

      - name: Build
        uses: docker/build-push-action@v3
        with:
          context: grai-frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,dest=/tmp/.buildx-cache-new

      # - name: Move cache
      #   run: |
      #     rm -rf /tmp/.buildx-cache
      #     mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  build-server:
    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    defaults:
      run:
        working-directory: grai-server/app

    steps:
      - uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/grai-server

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      # - name: Docker cache layers
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-single-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-single-buildx

      - name: Build
        uses: docker/build-push-action@v3
        with:
          context: grai-server/app
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,dest=/tmp/.buildx-cache-new

      # - name: Move cache
      #   run: |
      #     rm -rf /tmp/.buildx-cache
      #     mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: [build-frontend, build-server]

    runs-on: ubuntu-latest

    env:
      PR_NAME: pr-${{ github.event.number }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update deployment file
        run: sed -i 's|<PR-NUM>|'${PR_NAME}'|' $GITHUB_WORKSPACE/deployment/values.yml

      - name: Create namespace
        uses: ianbelcher/eks-kubectl-action@master
        with:
          cluster_name: ${{ secrets.CLUSTER_NAME }}
          args: create namespace $PR_NAME --dry-run=client -o yaml | kubectl apply -f -

      - name: Helm apply
        uses: "deliverybot/helm@v1"
        with:
          release: $PR_NAME
          namespace: $PR_NAME
          chart: "grai/grai"
          token: "${{ github.token }}"
          repo: "https://charts.grai.io"
          repo-alias: grai
          value-files: >-
          [
            "deployment/values.yml"
          ]
        env:
          KUBECONFIG_FILE: "${{ secrets.KUBECONFIG }}"

  delete-untagged:
    needs: deploy

    runs-on: ubuntu-latest

    steps:
      - name: Delete untagged ghcr - frontend
        uses: Chizkiyahu/delete-untagged-ghcr-action@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          package_name: grai-frontend
      - name: Delete untagged ghcr - server
        uses: Chizkiyahu/delete-untagged-ghcr-action@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          package_name: grai-server
