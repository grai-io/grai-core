name: "Review App"

on: pull_request

jobs:
  # build-frontend:
  #   runs-on: ubuntu-latest

  #   env:
  #     REGISTRY: ghcr.io
  #     IMAGE_NAME: ${{ github.repository }}

  #   defaults:
  #     run:
  #       working-directory: grai-frontend

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Log in to the Container registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GH_TOKEN }}

  #     - name: Extract metadata (tags, labels) for Docker
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/grai-frontend

  #     - name: Set up Docker Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@master

  #     # - name: Docker cache layers
  #     #   uses: actions/cache@v2
  #     #   with:
  #     #     path: /tmp/.buildx-cache
  #     #     key: ${{ runner.os }}-single-buildx-${{ github.sha }}
  #     #     restore-keys: |
  #     #       ${{ runner.os }}-single-buildx

  #     - name: Build
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: grai-frontend
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         # cache-from: type=local,src=/tmp/.buildx-cache
  #         # cache-to: type=local,dest=/tmp/.buildx-cache-new

  #     # - name: Move cache
  #     #   run: |
  #     #     rm -rf /tmp/.buildx-cache
  #     #     mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # build-server:
  #   runs-on: ubuntu-latest

  #   env:
  #     REGISTRY: ghcr.io
  #     IMAGE_NAME: ${{ github.repository }}

  #   defaults:
  #     run:
  #       working-directory: grai-server/app

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Log in to the Container registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GH_TOKEN }}

  #     - name: Extract metadata (tags, labels) for Docker
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/grai-server

  #     - name: Set up Docker Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@master

  #     # - name: Docker cache layers
  #     #   uses: actions/cache@v2
  #     #   with:
  #     #     path: /tmp/.buildx-cache
  #     #     key: ${{ runner.os }}-single-buildx-${{ github.sha }}
  #     #     restore-keys: |
  #     #       ${{ runner.os }}-single-buildx

  #     - name: Build
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: grai-server/app
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  # cache-from: type=local,src=/tmp/.buildx-cache
  # cache-to: type=local,dest=/tmp/.buildx-cache-new

  # - name: Move cache
  #   run: |
  #     rm -rf /tmp/.buildx-cache
  #     mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    # needs: [build-frontend, build-server]

    runs-on: ubuntu-latest

    env:
      PR_NAME: pr-${{ github.event.number }}

    steps:
      - uses: actions/checkout@v3

      - name: Update deployment file
        run: sed -i 's|<PR-NUM>|'${PR_NAME}'|' $GITHUB_WORKSPACE/deployment/values.yml

      - name: Helm apply
        uses: bitovi/github-actions-deploy-eks-helm@v1.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          cluster-name: ${{ secrets.CLUSTER_NAME }}
          config-files: deployment/values.yml
          chart-path: grai/grai
          namespace: pr-${{ github.event.number }}
          name: pr-${{ github.event.number }}
          chart-repository: https://charts.grai.io
          # atomic: true

  delete-untagged:
    needs: deploy

    runs-on: ubuntu-latest

    steps:
      - name: Delete untagged ghcr - frontend
        uses: Chizkiyahu/delete-untagged-ghcr-action@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          package_name: grai-frontend
          owner_type: org
      - name: Delete untagged ghcr - server
        uses: Chizkiyahu/delete-untagged-ghcr-action@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          package_name: grai-server
          owner_type: org
