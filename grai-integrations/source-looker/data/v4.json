{"swagger": "2.0", "info": {"version": "4.0.23.10", "x-looker-release-version": "23.10.64", "title": "Looker API 4.0 Reference", "description": "\nAPI 4.0 is the current release of the Looker API. API 3.1 is deprecated.\n\n### Authorization\n\nThe classic method of API authorization uses Looker **API** credentials for authorization and access control.\nLooker admins can create API credentials on Looker's **Admin/Users** page.\n\nAPI 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.\n\nFor details, see [Looker API Authorization](https://cloud.google.com/looker/docs/r/api/authorization).\n\n\n### API Explorer\n\nThe API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs.\n\nFor details, see the [API Explorer documentation](https://cloud.google.com/looker/docs/r/api/explorer).\n\n\n### Looker Language SDKs\n\nThe Looker API is a RESTful system that should be usable by any programming language capable of making\nHTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker\nhas an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several\nlanguage SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically\nauthenticate API requests when needed.\n\nFor details on available Looker SDKs, see [Looker API Client SDKs](https://cloud.google.com/looker/docs/r/api/client_sdks).\n\n\n### API Versioning\n\nFuture releases of Looker expand the latest API version release-by-release to securely expose more and more of the core\npower of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without\nwarning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking\nchanges in future releases.\n\nFor details, see [Looker API Versioning](https://cloud.google.com/looker/docs/r/api/versioning).\n\n\n### In This Release\n\nAPI 4.0 version was introduced to make adjustments to API functions, parameters, and response types to\nfix bugs and inconsistencies. These changes fall outside the bounds of non-breaking additive changes we can\nmake to the previous API 3.1.\n\nOne benefit of these type adjustments in API 4.0 is dramatically better support for strongly\ntyped languages like TypeScript, Kotlin, Swift, Go, C#, and more.\n\nSee the [API 4.0 GA announcement](https://developers.looker.com/api/advanced-usage/version-4-ga) for more information\nabout API 4.0.\n\nThe API Explorer can be used to [interactively compare](https://cloud.google.com/looker/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.\n\n\n### API and SDK Support Policies\n\nLooker API versions and language SDKs have varying support levels. Please read the API and SDK\n[support policies](https://cloud.google.com/looker/docs/r/api/support-policy) for more information.\n\n\n", "contact": {"name": "Looker Team", "url": "https://help.looker.com"}, "license": {"name": "EULA", "url": "https://9fb5bcd5-f335-4f56-8d51-a6b89011bef0.looker.app/eula"}}, "basePath": "/api/4.0", "consumes": ["application/json"], "produces": ["application/json"], "host": "9fb5bcd5-f335-4f56-8d51-a6b89011bef0.looker.app:443", "schemes": ["https"], "tags": [{"name": "Alert", "description": "Alert"}, {"name": "ApiAuth", "description": "API Authentication"}, {"name": "Artifact", "description": "Artifact Storage"}, {"name": "Auth", "description": "Manage User Authentication Configuration"}, {"name": "Board", "description": "Manage Boards"}, {"name": "ColorCollection", "description": "Manage Color Collections"}, {"name": "Config", "description": "Manage General Configuration"}, {"name": "Connection", "description": "Manage Database Connections"}, {"name": "Content", "description": "Manage Content"}, {"name": "Dashboard", "description": "Manage Dashboards"}, {"name": "DataAction", "description": "Run Data Actions"}, {"name": "Datagroup", "description": "Manage Datagroups"}, {"name": "DerivedTable", "description": "View Derived Table graphs"}, {"name": "Folder", "description": "Manage Folders"}, {"name": "Group", "description": "Manage Groups"}, {"name": "Homepage", "description": "Manage Homepage"}, {"name": "Integration", "description": "Manage Integrations"}, {"name": "Look", "description": "Run and Manage Looks"}, {"name": "LookmlModel", "description": "Manage LookML Models"}, {"name": "Metadata", "description": "Connection Metadata Features"}, {"name": "Project", "description": "Manage Projects"}, {"name": "Query", "description": "Run and Manage Queries"}, {"name": "RenderTask", "description": "Manage Render Tasks"}, {"name": "Role", "description": "Manage Roles"}, {"name": "ScheduledPlan", "description": "Manage Scheduled Plans"}, {"name": "Session", "description": "Session Information"}, {"name": "Theme", "description": "Manage Themes"}, {"name": "User", "description": "Manage Users"}, {"name": "UserAttribute", "description": "Manage User Attributes"}, {"name": "Workspace", "description": "Manage Workspaces"}], "paths": {"/query_tasks": {"post": {"tags": ["Query"], "operationId": "create_query_task", "summary": "Run Query Async", "description": "### Create an async query task\n\nCreates a query task (job) to run a previously created query asynchronously. Returns a Query Task ID.\n\nUse [query_task(query_task_id)](#!/Query/query_task) to check the execution status of the query task.\nAfter the query task status reaches \"Complete\", use [query_task_results(query_task_id)](#!/Query/query_task_results) to fetch the results of the query.\n", "parameters": [{"name": "body", "in": "body", "description": "Query parameters", "required": true, "schema": {"$ref": "#/definitions/CreateQueryTask"}}, {"name": "limit", "in": "query", "description": "Row limit (may override the limit in the saved query).", "required": false, "type": "integer", "format": "int64"}, {"name": "apply_formatting", "in": "query", "description": "Apply model-specified formatting to each result.", "required": false, "type": "boolean"}, {"name": "apply_vis", "in": "query", "description": "Apply visualization options to results.", "required": false, "type": "boolean"}, {"name": "cache", "in": "query", "description": "Get results from cache if available.", "required": false, "type": "boolean"}, {"name": "generate_drill_links", "in": "query", "description": "Generate drill links (only applicable to 'json_detail' format.", "required": false, "type": "boolean"}, {"name": "force_production", "in": "query", "description": "Force use of production models even if the user is in development mode. Note that this flag being false does not guarantee development models will be used.", "required": false, "type": "boolean"}, {"name": "cache_only", "in": "query", "description": "Retrieve any results from cache even if the results have expired.", "required": false, "type": "boolean"}, {"name": "path_prefix", "in": "query", "description": "Prefix to use for drill links (url encoded).", "required": false, "type": "string"}, {"name": "rebuild_pdts", "in": "query", "description": "Rebuild PDTS used in query.", "required": false, "type": "boolean"}, {"name": "server_table_calcs", "in": "query", "description": "Perform table calculations on query results", "required": false, "type": "boolean"}, {"name": "image_width", "in": "query", "description": "DEPRECATED. Render width for image formats. Note that this parameter is always ignored by this method.", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "image_height", "in": "query", "description": "DEPRECATED. Render height for image formats. Note that this parameter is always ignored by this method.", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "fields", "in": "query", "description": "Requested fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "query_task", "schema": {"$ref": "#/definitions/QueryTask"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/query_tasks/multi_results": {"get": {"tags": ["Query"], "operationId": "query_task_multi_results", "summary": "Get Multiple Async Query Results", "description": "### Fetch results of multiple async queries\n\nReturns the results of multiple async queries in one request.\n\nFor Query Tasks that are not completed, the response will include the execution status of the Query Task but will not include query results.\nQuery Tasks whose results have expired will have a status of 'expired'.\nIf the user making the API request does not have sufficient privileges to view a Query Task result, the result will have a status of 'missing'\n", "parameters": [{"name": "query_task_ids", "in": "query", "description": "List of Query Task IDs", "required": true, "type": "array", "items": {"type": "string"}, "collectionFormat": "csv"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Multiple query results", "schema": {"type": "object", "additionalProperties": {"type": "any", "format": "any"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/query_tasks/{query_task_id}": {"get": {"tags": ["Query"], "operationId": "query_task", "summary": "Get Async Query Info", "description": "### Get Query Task details\n\nUse this function to check the status of an async query task. After the status\nreaches \"Complete\", you can call [query_task_results(query_task_id)](#!/Query/query_task_results) to\nretrieve the results of the query.\n\nUse [create_query_task()](#!/Query/create_query_task) to create an async query task.\n", "parameters": [{"name": "query_task_id", "in": "path", "description": "ID of the Query Task", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "query_task", "schema": {"$ref": "#/definitions/QueryTask"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/query_tasks/{query_task_id}/results": {"get": {"tags": ["Query"], "operationId": "query_task_results", "summary": "Get Async Query Results", "description": "### Get Async Query Results\n\nReturns the results of an async query task if the query has completed.\n\nIf the query task is still running or waiting to run, this function returns 204 No Content.\n\nIf the query task ID is invalid or the cached results of the query task have expired, this function returns 404 Not Found.\n\nUse [query_task(query_task_id)](#!/Query/query_task) to check the execution status of the query task\nCall query_task_results only after the query task status reaches \"Complete\".\n\nYou can also use [query_task_multi_results()](#!/Query/query_task_multi_results) retrieve the\nresults of multiple async query tasks at the same time.\n\n#### SQL Error Handling:\nIf the query fails due to a SQL db error, how this is communicated depends on the result_format you requested in `create_query_task()`.\n\nFor `json_detail` result_format: `query_task_results()` will respond with HTTP status '200 OK' and db SQL error info\nwill be in the `errors` property of the response object. The 'data' property will be empty.\n\nFor all other result formats: `query_task_results()` will respond with HTTP status `400 Bad Request` and some db SQL error info\nwill be in the message of the 400 error response, but not as detailed as expressed in `json_detail.errors`.\nThese data formats can only carry row data, and error info is not row data.\n", "produces": ["text", "application/json"], "parameters": [{"name": "query_task_id", "in": "path", "description": "ID of the Query Task", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "The Query Task Id was not found or the results have expired.", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "The query results.", "schema": {"type": "string"}}, "204": {"description": "The query is not finished", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/queries/{query_id}": {"get": {"tags": ["Query"], "operationId": "query", "summary": "Get Query", "description": "### Get a previously created query by id.\n\nA Looker query object includes the various parameters that define a database query that has been run or\ncould be run in the future. These parameters include: model, view, fields, filters, pivots, etc.\nQuery *results* are not part of the query object.\n\nQuery objects are unique and immutable. Query objects are created automatically in Looker as users explore data.\nLooker does not delete them; they become part of the query history. When asked to create a query for\nany given set of parameters, Looker will first try to find an existing query object with matching\nparameters and will only create a new object when an appropriate object can not be found.\n\nThis 'get' method is used to get the details about a query for a given id. See the other methods here\nto 'create' and 'run' queries.\n\nNote that some fields like 'filter_config' and 'vis_config' etc are specific to how the Looker UI\nbuilds queries and visualizations and are not generally useful for API use. They are not required when\ncreating new queries and can usually just be ignored.\n\n", "parameters": [{"name": "query_id", "in": "path", "description": "Id of query", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Query", "schema": {"$ref": "#/definitions/Query"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/queries/slug/{slug}": {"get": {"tags": ["Query"], "operationId": "query_for_slug", "summary": "Get Query for Slug", "description": "### Get the query for a given query slug.\n\nThis returns the query for the 'slug' in a query share URL.\n\nThe 'slug' is a randomly chosen short string that is used as an alternative to the query's id value\nfor use in URLs etc. This method exists as a convenience to help you use the API to 'find' queries that\nhave been created using the Looker UI.\n\nYou can use the Looker explore page to build a query and then choose the 'Share' option to\nshow the share url for the query. Share urls generally look something like 'https://looker.yourcompany/x/vwGSbfc'.\nThe trailing 'vwGSbfc' is the share slug. You can pass that string to this api method to get details about the query.\nThose details include the 'id' that you can use to run the query. Or, you can copy the query body\n(perhaps with your own modification) and use that as the basis to make/run new queries.\n\nThis will also work with slugs from Looker explore urls like\n'https://looker.yourcompany/explore/ecommerce/orders?qid=aogBgL6o3cKK1jN3RoZl5s'. In this case\n'aogBgL6o3cKK1jN3RoZl5s' is the slug.\n", "parameters": [{"name": "slug", "in": "path", "description": "Slug of query", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Query", "schema": {"$ref": "#/definitions/Query"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/queries": {"post": {"tags": ["Query"], "operationId": "create_query", "summary": "Create Query", "description": "### Create a query.\n\nThis allows you to create a new query that you can later run. Looker queries are immutable once created\nand are not deleted. If you create a query that is exactly like an existing query then the existing query\nwill be returned and no new query will be created. Whether a new query is created or not, you can use\nthe 'id' in the returned query with the 'run' method.\n\nThe query parameters are passed as json in the body of the request.\n\n", "parameters": [{"name": "body", "in": "body", "description": "Query", "required": true, "schema": {"$ref": "#/definitions/Query"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Query", "schema": {"$ref": "#/definitions/Query"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/queries/{query_id}/run/{result_format}": {"get": {"tags": ["Query"], "operationId": "run_query", "summary": "Run Query", "description": "### Run a saved query.\n\nThis runs a previously saved query. You can use this on a query that was generated in the Looker UI\nor one that you have explicitly created using the API. You can also use a query 'id' from a saved 'Look'.\n\nThe 'result_format' parameter specifies the desired structure and format of the response.\n\nSupported formats:\n\n| result_format | Description\n| :-----------: | :--- |\n| json | Plain json\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| md | Simple markdown\n| xlsx | MS Excel spreadsheet\n| sql | Returns the generated SQL rather than running the query\n| png | A PNG image of the visualization of the query\n| jpg | A JPG image of the visualization of the query\n\n\n", "produces": ["text", "application/json", "image/png", "image/jpeg"], "parameters": [{"name": "query_id", "in": "path", "description": "Id of query", "required": true, "type": "string"}, {"name": "result_format", "in": "path", "description": "Format of result", "required": true, "type": "string"}, {"name": "limit", "in": "query", "description": "Row limit (may override the limit in the saved query).", "required": false, "type": "integer", "format": "int64"}, {"name": "apply_formatting", "in": "query", "description": "Apply model-specified formatting to each result.", "required": false, "type": "boolean"}, {"name": "apply_vis", "in": "query", "description": "Apply visualization options to results.", "required": false, "type": "boolean"}, {"name": "cache", "in": "query", "description": "Get results from cache if available.", "required": false, "type": "boolean"}, {"name": "image_width", "in": "query", "description": "Render width for image formats.", "required": false, "type": "integer", "format": "int64"}, {"name": "image_height", "in": "query", "description": "Render height for image formats.", "required": false, "type": "integer", "format": "int64"}, {"name": "generate_drill_links", "in": "query", "description": "Generate drill links (only applicable to 'json_detail' format.", "required": false, "type": "boolean"}, {"name": "force_production", "in": "query", "description": "Force use of production models even if the user is in development mode. Note that this flag being false does not guarantee development models will be used.", "required": false, "type": "boolean"}, {"name": "cache_only", "in": "query", "description": "Retrieve any results from cache even if the results have expired.", "required": false, "type": "boolean"}, {"name": "path_prefix", "in": "query", "description": "Prefix to use for drill links (url encoded).", "required": false, "type": "string"}, {"name": "rebuild_pdts", "in": "query", "description": "Rebuild PDTS used in query.", "required": false, "type": "boolean"}, {"name": "server_table_calcs", "in": "query", "description": "Perform table calculations on query results", "required": false, "type": "boolean"}, {"name": "source", "in": "query", "description": "Specifies the source of this call.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Query", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/queries/run/{result_format}": {"post": {"tags": ["Query"], "operationId": "run_inline_query", "summary": "Run Inline Query", "description": "### Run the query that is specified inline in the posted body.\n\nThis allows running a query as defined in json in the posted body. This combines\nthe two actions of posting & running a query into one step.\n\nHere is an example body in json:\n```\n{\n  \"model\":\"thelook\",\n  \"view\":\"inventory_items\",\n  \"fields\":[\"category.name\",\"inventory_items.days_in_inventory_tier\",\"products.count\"],\n  \"filters\":{\"category.name\":\"socks\"},\n  \"sorts\":[\"products.count desc 0\"],\n  \"limit\":\"500\",\n  \"query_timezone\":\"America/Los_Angeles\"\n}\n```\n\nWhen using the Ruby SDK this would be passed as a Ruby hash like:\n```\n{\n :model=>\"thelook\",\n :view=>\"inventory_items\",\n :fields=>\n  [\"category.name\",\n   \"inventory_items.days_in_inventory_tier\",\n   \"products.count\"],\n :filters=>{:\"category.name\"=>\"socks\"},\n :sorts=>[\"products.count desc 0\"],\n :limit=>\"500\",\n :query_timezone=>\"America/Los_Angeles\",\n}\n```\n\nThis will return the result of running the query in the format specified by the 'result_format' parameter.\n\nSupported formats:\n\n| result_format | Description\n| :-----------: | :--- |\n| json | Plain json\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| md | Simple markdown\n| xlsx | MS Excel spreadsheet\n| sql | Returns the generated SQL rather than running the query\n| png | A PNG image of the visualization of the query\n| jpg | A JPG image of the visualization of the query\n\n\n", "produces": ["text", "application/json", "image/png", "image/jpeg"], "parameters": [{"name": "result_format", "in": "path", "description": "Format of result", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "inline query", "required": true, "schema": {"$ref": "#/definitions/Query"}}, {"name": "limit", "in": "query", "description": "Row limit (may override the limit in the saved query).", "required": false, "type": "integer", "format": "int64"}, {"name": "apply_formatting", "in": "query", "description": "Apply model-specified formatting to each result.", "required": false, "type": "boolean"}, {"name": "apply_vis", "in": "query", "description": "Apply visualization options to results.", "required": false, "type": "boolean"}, {"name": "cache", "in": "query", "description": "Get results from cache if available.", "required": false, "type": "boolean"}, {"name": "image_width", "in": "query", "description": "Render width for image formats.", "required": false, "type": "integer", "format": "int64"}, {"name": "image_height", "in": "query", "description": "Render height for image formats.", "required": false, "type": "integer", "format": "int64"}, {"name": "generate_drill_links", "in": "query", "description": "Generate drill links (only applicable to 'json_detail' format.", "required": false, "type": "boolean"}, {"name": "force_production", "in": "query", "description": "Force use of production models even if the user is in development mode. Note that this flag being false does not guarantee development models will be used.", "required": false, "type": "boolean"}, {"name": "cache_only", "in": "query", "description": "Retrieve any results from cache even if the results have expired.", "required": false, "type": "boolean"}, {"name": "path_prefix", "in": "query", "description": "Prefix to use for drill links (url encoded).", "required": false, "type": "string"}, {"name": "rebuild_pdts", "in": "query", "description": "Rebuild PDTS used in query.", "required": false, "type": "boolean"}, {"name": "server_table_calcs", "in": "query", "description": "Perform table calculations on query results", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Query Result", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/queries/models/{model_name}/views/{view_name}/run/{result_format}": {"get": {"tags": ["Query"], "operationId": "run_url_encoded_query", "summary": "Run Url Encoded Query", "description": "### Run an URL encoded query.\n\nThis requires the caller to encode the specifiers for the query into the URL query part using\nLooker-specific syntax as explained below.\n\nGenerally, you would want to use one of the methods that takes the parameters as json in the POST body\nfor creating and/or running queries. This method exists for cases where one really needs to encode the\nparameters into the URL of a single 'GET' request. This matches the way that the Looker UI formats\n'explore' URLs etc.\n\nThe parameters here are very similar to the json body formatting except that the filter syntax is\ntricky. Unfortunately, this format makes this method not currently callable via the 'Try it out!' button\nin this documentation page. But, this is callable when creating URLs manually or when using the Looker SDK.\n\nHere is an example inline query URL:\n\n```\nhttps://looker.mycompany.com:19999/api/3.0/queries/models/thelook/views/inventory_items/run/json?fields=category.name,inventory_items.days_in_inventory_tier,products.count&f[category.name]=socks&sorts=products.count+desc+0&limit=500&query_timezone=America/Los_Angeles\n```\n\nWhen invoking this endpoint with the Ruby SDK, pass the query parameter parts as a hash. The hash to match the above would look like:\n\n```ruby\nquery_params =\n{\n  fields: \"category.name,inventory_items.days_in_inventory_tier,products.count\",\n  :\"f[category.name]\" => \"socks\",\n  sorts: \"products.count desc 0\",\n  limit: \"500\",\n  query_timezone: \"America/Los_Angeles\"\n}\nresponse = ruby_sdk.run_url_encoded_query('thelook','inventory_items','json', query_params)\n\n```\n\nAgain, it is generally easier to use the variant of this method that passes the full query in the POST body.\nThis method is available for cases where other alternatives won't fit the need.\n\nSupported formats:\n\n| result_format | Description\n| :-----------: | :--- |\n| json | Plain json\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| md | Simple markdown\n| xlsx | MS Excel spreadsheet\n| sql | Returns the generated SQL rather than running the query\n| png | A PNG image of the visualization of the query\n| jpg | A JPG image of the visualization of the query\n\n\n", "produces": ["text", "application/json", "image/png", "image/jpeg"], "parameters": [{"name": "model_name", "in": "path", "description": "Model name", "required": true, "type": "string"}, {"name": "view_name", "in": "path", "description": "View name", "required": true, "type": "string"}, {"name": "result_format", "in": "path", "description": "Format of result", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Query", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/login": {"post": {"tags": ["ApiAuth"], "operationId": "login", "summary": "Login", "description": "### Present client credentials to obtain an authorization token\n\nLooker API implements the OAuth2 [Resource Owner Password Credentials Grant](https://cloud.google.com/looker/docs/r/api/outh2_resource_owner_pc) pattern.\nThe client credentials required for this login must be obtained by creating an API key on a user account\nin the Looker Admin console. The API key consists of a public `client_id` and a private `client_secret`.\n\nThe access token returned by `login` must be used in the HTTP Authorization header of subsequent\nAPI requests, like this:\n```\nAuthorization: token 4QDkCyCtZzYgj4C2p2cj3csJH7zqS5RzKs2kTnG4\n```\nReplace \"4QDkCy...\" with the `access_token` value returned by `login`.\nThe word `token` is a string literal and must be included exactly as shown.\n\nThis function can accept `client_id` and `client_secret` parameters as URL query params or as www-form-urlencoded params in the body of the HTTP request. Since there is a small risk that URL parameters may be visible to intermediate nodes on the network route (proxies, routers, etc), passing credentials in the body of the request is considered more secure than URL params.\n\nExample of passing credentials in the HTTP request body:\n````\nPOST HTTP /login\nContent-Type: application/x-www-form-urlencoded\n\nclient_id=CGc9B7v7J48dQSJvxxx&client_secret=nNVS9cSS3xNpSC9JdsBvvvvv\n````\n\n### Best Practice:\nAlways pass credentials in body params. Pass credentials in URL query params **only** when you cannot pass body params due to application, tool, or other limitations.\n\nFor more information and detailed examples of Looker API authorization, see [How to Authenticate to Looker API](https://github.com/looker/looker-sdk-ruby/blob/master/authentication.md).\n", "consumes": ["application/x-www-form-urlencoded"], "parameters": [{"name": "client_id", "in": "query", "description": "client_id part of API Key.", "required": false, "type": "string"}, {"name": "client_secret", "in": "query", "description": "client_secret part of API Key.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Access token with metadata.", "schema": {"$ref": "#/definitions/AccessToken"}}}, "x-looker-status": "stable", "x-looker-activity-type": "none"}}, "/login/{user_id}": {"post": {"tags": ["ApiAuth"], "operationId": "login_user", "summary": "Login user", "description": "### Create an access token that runs as a given user.\n\nThis can only be called by an authenticated admin user. It allows that admin to generate a new\nauthentication token for the user with the given user id. That token can then be used for subsequent\nAPI calls - which are then performed *as* that target user.\n\nThe target user does *not* need to have a pre-existing API client_id/client_secret pair. And, no such\ncredentials are created by this call.\n\nThis allows for building systems where api user authentication for an arbitrary number of users is done\noutside of Looker and funneled through a single 'service account' with admin permissions. Note that a\nnew access token is generated on each call. If target users are going to be making numerous API\ncalls in a short period then it is wise to cache this authentication token rather than call this before\neach of those API calls.\n\nSee 'login' for more detail on the access token and how to use it.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user.", "required": true, "type": "string"}, {"name": "associative", "in": "query", "description": "When true (default), API calls using the returned access_token are attributed to the admin user who created the access_token. When false, API activity is attributed to the user the access_token runs as. False requires a looker license.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Access token with metadata.", "schema": {"$ref": "#/definitions/AccessToken"}}}, "x-looker-status": "stable", "x-looker-activity-type": "none"}}, "/logout": {"delete": {"tags": ["ApiAuth"], "operationId": "logout", "summary": "Logout", "description": "### Logout of the API and invalidate the current access token.\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Logged out successfully.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "none"}}, "/alerts/{alert_id}/follow": {"post": {"tags": ["Alert"], "operationId": "follow_alert", "summary": "Follow an alert", "description": "Follow an alert.", "parameters": [{"name": "alert_id", "in": "path", "description": "ID of an alert", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully followed an alert."}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Alert"], "operationId": "unfollow_alert", "summary": "Unfollow an alert", "description": "Unfollow an alert.", "parameters": [{"name": "alert_id", "in": "path", "description": "ID of an alert", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully unfollowed an alert."}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/alerts/search": {"get": {"tags": ["Alert"], "operationId": "search_alerts", "summary": "Search Alerts", "description": "### Search Alerts\n", "parameters": [{"name": "limit", "in": "query", "description": "(Optional) Number of results to return (used with `offset`).", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "(Optional) Number of results to skip before returning any (used with `limit`).", "required": false, "type": "integer", "format": "int64"}, {"name": "group_by", "in": "query", "description": "(Optional) Dimension by which to order the results(`dashboard` | `owner`)", "required": false, "type": "string"}, {"name": "fields", "in": "query", "description": "(Optional) Requested fields.", "required": false, "type": "string"}, {"name": "disabled", "in": "query", "description": "(Optional) Filter on returning only enabled or disabled alerts.", "required": false, "type": "boolean"}, {"name": "frequency", "in": "query", "description": "(Optional) Filter on alert frequency, such as: monthly, weekly, daily, hourly, minutes", "required": false, "type": "string"}, {"name": "condition_met", "in": "query", "description": "(Optional) Filter on whether the alert has met its condition when it last executed", "required": false, "type": "boolean"}, {"name": "last_run_start", "in": "query", "description": "(Optional) Filter on the start range of the last time the alerts were run. Example: 2021-01-01T01:01:01-08:00.", "required": false, "type": "string"}, {"name": "last_run_end", "in": "query", "description": "(Optional) Filter on the start range of the last time the alerts were run. Example: 2021-01-01T01:01:01-08:00.", "required": false, "type": "string"}, {"name": "all_owners", "in": "query", "description": "(Admin only) (Optional) Filter for all owners.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Alert.", "schema": {"type": "array", "items": {"$ref": "#/definitions/Alert"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/alerts/{alert_id}": {"get": {"tags": ["Alert"], "operationId": "get_alert", "summary": "Get an alert", "description": "### Get an alert by a given alert ID\n", "parameters": [{"name": "alert_id", "in": "path", "description": "ID of an alert", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Alert", "schema": {"$ref": "#/definitions/Alert"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Alert"], "operationId": "update_alert_field", "summary": "Update select fields on an alert", "description": "### Update select alert fields\n# Available fields: `owner_id`, `is_disabled`, `disabled_reason`, `is_public`, `threshold`\n#\n", "parameters": [{"name": "alert_id", "in": "path", "description": "ID of an alert", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Alert", "required": true, "schema": {"$ref": "#/definitions/AlertPatch"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "The alert is saved.", "schema": {"$ref": "#/definitions/Alert"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "put": {"tags": ["Alert"], "operationId": "update_alert", "summary": "Update an alert", "description": "### Update an alert\n# Required fields: `owner_id`, `field`, `destinations`, `comparison_type`, `threshold`, `cron`\n#\n", "parameters": [{"name": "alert_id", "in": "path", "description": "ID of an alert", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Alert", "required": true, "schema": {"$ref": "#/definitions/Alert"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "The alert is saved.", "schema": {"$ref": "#/definitions/Alert"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Alert"], "operationId": "delete_alert", "summary": "Delete an alert", "description": "### Delete an alert by a given alert ID\n", "parameters": [{"name": "alert_id", "in": "path", "description": "ID of an alert", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Alert successfully deleted."}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/alerts": {"post": {"tags": ["Alert"], "operationId": "create_alert", "summary": "Create an alert", "description": "### Create a new alert and return details of the newly created object\n\nRequired fields: `field`, `destinations`, `comparison_type`, `threshold`, `cron`\n\nExample Request:\nRun alert on dashboard element '103' at 5am every day. Send an email to 'test@test.com' if inventory for Los Angeles (using dashboard filter `Warehouse Name`) is lower than 1,000\n```\n{\n  \"cron\": \"0 5 * * *\",\n  \"custom_title\": \"Alert when LA inventory is low\",\n  \"dashboard_element_id\": 103,\n  \"applied_dashboard_filters\": [\n    {\n      \"filter_title\": \"Warehouse Name\",\n      \"field_name\": \"distribution_centers.name\",\n      \"filter_value\": \"Los Angeles CA\",\n      \"filter_description\": \"is Los Angeles CA\"\n    }\n  ],\n  \"comparison_type\": \"LESS_THAN\",\n  \"destinations\": [\n    {\n      \"destination_type\": \"EMAIL\",\n      \"email_address\": \"test@test.com\"\n    }\n  ],\n  \"field\": {\n    \"title\": \"Number on Hand\",\n    \"name\": \"inventory_items.number_on_hand\"\n  },\n  \"is_disabled\": false,\n  \"is_public\": true,\n  \"threshold\": 1000\n}\n```\n", "parameters": [{"name": "body", "in": "body", "description": "Alert", "required": true, "schema": {"$ref": "#/definitions/Alert"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "405": {"description": "Resource Can't Be Modified", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "The alert is saved.", "schema": {"$ref": "#/definitions/Alert"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/alerts/{alert_id}/enqueue": {"post": {"tags": ["Alert"], "operationId": "enqueue_alert", "summary": "Enqueue an alert", "description": "### Enqueue an Alert by ID\n", "parameters": [{"name": "alert_id", "in": "path", "description": "ID of an alert", "required": true, "type": "string"}, {"name": "force", "in": "query", "description": "Whether to enqueue an alert again if its already running.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Alert successfully added to the queue. Does not indicate it has been run"}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query", "x-looker-rate-limited": true}}, "/alert_notifications": {"get": {"tags": ["Alert"], "operationId": "alert_notifications", "summary": "Alert Notifications", "description": "# Alert Notifications.\n  The endpoint returns all the alert notifications received by the user on email in the past 7 days. It also returns whether the notifications have been read by the user.\n\n", "parameters": [{"name": "limit", "in": "query", "description": "(Optional) Number of results to return (used with `offset`).", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "(Optional) Number of results to skip before returning any (used with `limit`).", "required": false, "type": "integer", "format": "int64"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "It shows all the alert notifications received by the user on email.", "schema": {"type": "array", "items": {"$ref": "#/definitions/AlertNotifications"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/alert_notifications/{alert_notification_id}": {"patch": {"tags": ["Alert"], "operationId": "read_alert_notification", "summary": "Read a Notification", "description": "# Reads a Notification\n  The endpoint marks a given alert notification as read by the user, in case it wasn't already read. The AlertNotification model is updated for this purpose. It returns the notification as a response.\n", "parameters": [{"name": "alert_notification_id", "in": "path", "description": "ID of a notification", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "It updates that the given alert notification has been read by the user", "schema": {"$ref": "#/definitions/AlertNotifications"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/artifact/usage": {"get": {"tags": ["Artifact"], "operationId": "artifact_usage", "summary": "Artifact store usage", "description": "Get the maximum configured size of the entire artifact store, and the currently used storage in bytes.\n\n**Note**: The artifact storage API can only be used by Looker-built extensions.\n\n", "parameters": [{"name": "fields", "in": "query", "description": "Comma-delimited names of fields to return in responses. Omit for all fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Artifact store statistics", "schema": {"$ref": "#/definitions/ArtifactUsage"}}}, "x-looker-status": "alpha", "x-looker-activity-type": "non_query"}}, "/artifact/namespaces": {"get": {"tags": ["Artifact"], "operationId": "artifact_namespaces", "summary": "Get namespaces and counts", "description": "Get all artifact namespaces and the count of artifacts in each namespace\n\n**Note**: The artifact storage API can only be used by Looker-built extensions.\n\n", "parameters": [{"name": "fields", "in": "query", "description": "Comma-delimited names of fields to return in responses. Omit for all fields", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "Number of results to return. (used with offset)", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any. (used with limit)", "required": false, "type": "integer", "format": "int64"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Artifact store namespace counts", "schema": {"type": "array", "items": {"$ref": "#/definitions/ArtifactNamespace"}}}}, "x-looker-status": "alpha", "x-looker-activity-type": "non_query", "x-looker-rate-limited": true}}, "/artifact/{namespace}/value": {"get": {"tags": ["Artifact"], "operationId": "artifact_value", "summary": "Get an artifact value", "description": "### Return the value of an artifact\n\nThe MIME type for the API response is set to the `content_type` of the value\n\n**Note**: The artifact storage API can only be used by Looker-built extensions.\n\n", "parameters": [{"name": "namespace", "in": "path", "description": "Artifact storage namespace", "required": true, "type": "string"}, {"name": "key", "in": "query", "description": "Artifact storage key. Namespace + Key must be unique", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Artifact value", "schema": {"type": "string"}}}, "x-looker-status": "alpha", "x-looker-activity-type": "non_query"}}, "/artifact/{namespace}/purge": {"delete": {"tags": ["Artifact"], "operationId": "purge_artifacts", "summary": "Purge artifacts", "description": "Remove *all* artifacts from a namespace. Purged artifacts are permanently deleted\n\n**Note**: The artifact storage API can only be used by Looker-built extensions.\n\n", "parameters": [{"name": "namespace", "in": "path", "description": "Artifact storage namespace", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "All artifacts are purged."}}, "x-looker-status": "alpha", "x-looker-activity-type": "non_query", "x-looker-rate-limited": true}}, "/artifact/{namespace}/search": {"get": {"tags": ["Artifact"], "operationId": "search_artifacts", "summary": "Search artifacts", "description": "### Search all key/value pairs in a namespace for matching criteria.\n\nReturns an array of artifacts matching the specified search criteria.\n\nKey search patterns use case-insensitive matching and can contain `%` and `_` as SQL LIKE pattern match wildcard expressions.\n\nThe parameters `min_size` and `max_size` can be used individually or together.\n\n- `min_size` finds artifacts with sizes greater than or equal to its value\n- `max_size` finds artifacts with sizes less than or equal to its value\n- using both parameters restricts the minimum and maximum size range for artifacts\n\n**NOTE**: Artifacts are always returned in alphanumeric order by key.\n\nGet a **single artifact** by namespace and key with [`artifact`](#!/Artifact/artifact)\n\n**Note**: The artifact storage API can only be used by Looker-built extensions.\n\n", "parameters": [{"name": "namespace", "in": "path", "description": "Artifact storage namespace", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Comma-delimited names of fields to return in responses. Omit for all fields", "required": false, "type": "string"}, {"name": "key", "in": "query", "description": "Key pattern to match", "required": false, "type": "string"}, {"name": "user_ids", "in": "query", "description": "Ids of users who created or updated the artifact (comma-delimited list)", "required": false, "type": "string"}, {"name": "min_size", "in": "query", "description": "Minimum storage size of the artifact", "required": false, "type": "integer", "format": "int64"}, {"name": "max_size", "in": "query", "description": "Maximum storage size of the artifact", "required": false, "type": "integer", "format": "int64"}, {"name": "limit", "in": "query", "description": "Number of results to return. (used with offset)", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any. (used with limit)", "required": false, "type": "integer", "format": "int64"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Artifacts", "schema": {"type": "array", "items": {"$ref": "#/definitions/Artifact"}}}}, "x-looker-status": "alpha", "x-looker-activity-type": "non_query", "x-looker-rate-limited": true}}, "/artifact/{namespace}": {"get": {"tags": ["Artifact"], "operationId": "artifact", "summary": "Get one or more artifacts", "description": "### Get one or more artifacts\n\nReturns an array of artifacts matching the specified key value(s).\n\n**Note**: The artifact storage API can only be used by Looker-built extensions.\n\n", "parameters": [{"name": "namespace", "in": "path", "description": "Artifact storage namespace", "required": true, "type": "string"}, {"name": "key", "in": "query", "description": "Comma-delimited list of keys. Wildcards not allowed.", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Comma-delimited names of fields to return in responses. Omit for all fields", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "Number of results to return. (used with offset)", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any. (used with limit)", "required": false, "type": "integer", "format": "int64"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Created or updated artifacts", "schema": {"type": "array", "items": {"$ref": "#/definitions/Artifact"}}}}, "x-looker-status": "alpha", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Artifact"], "operationId": "delete_artifact", "summary": "Delete one or more artifacts", "description": "### Delete one or more artifacts\n\nTo avoid rate limiting on deletion requests, multiple artifacts can be deleted at the same time by using a comma-delimited list of artifact keys.\n\n**Note**: The artifact storage API can only be used by Looker-built extensions.\n\n", "parameters": [{"name": "namespace", "in": "path", "description": "Artifact storage namespace", "required": true, "type": "string"}, {"name": "key", "in": "query", "description": "Comma-delimited list of keys. Wildcards not allowed.", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "The artifact is deleted."}}, "x-looker-status": "alpha", "x-looker-activity-type": "non_query", "x-looker-rate-limited": true}}, "/artifacts/{namespace}": {"put": {"tags": ["Artifact"], "operationId": "update_artifacts", "summary": "Create or update artifacts", "description": "### Create or update one or more artifacts\n\nOnly `key` and `value` are required to _create_ an artifact.\nTo _update_ an artifact, its current `version` value must be provided.\n\nIn the following example `body` payload, `one` and `two` are existing artifacts, and `three` is new:\n\n```json\n[\n  { \"key\": \"one\", \"value\": \"[ \\\"updating\\\", \\\"existing\\\", \\\"one\\\" ]\", \"version\": 10, \"content_type\": \"application/json\" },\n  { \"key\": \"two\", \"value\": \"updating existing two\", \"version\": 20 },\n  { \"key\": \"three\", \"value\": \"creating new three\" },\n]\n```\n\nNotes for this body:\n\n- The `value` for `key` **one** is a JSON payload, so a `content_type` override is needed. This override must be done **every** time a JSON value is set.\n- The `version` values for **one** and **two** mean they have been saved 10 and 20 times, respectively.\n- If `version` is **not** provided for an existing artifact, the entire request will be refused and a `Bad Request` response will be sent.\n- If `version` is provided for an artifact, it is only used for helping to prevent inadvertent data overwrites. It cannot be used to **set** the version of an artifact. The Looker server controls `version`.\n- We suggest encoding binary values as base64. Because the MIME content type for base64 is detected as plain text, also provide `content_type` to correctly indicate the value's type for retrieval and client-side processing.\n\nBecause artifacts are stored encrypted, the same value can be written multiple times (provided the correct `version` number is used). Looker does not examine any values stored in the artifact store, and only decrypts when sending artifacts back in an API response.\n\n**Note**: The artifact storage API can only be used by Looker-built extensions.\n\n", "parameters": [{"name": "namespace", "in": "path", "description": "Artifact storage namespace", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Artifacts to create or update", "required": true, "schema": {"type": "array", "items": {"$ref": "#/definitions/UpdateArtifact"}}}, {"name": "fields", "in": "query", "description": "Comma-delimited names of fields to return in responses. Omit for all fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Created or updated artifacts", "schema": {"type": "array", "items": {"$ref": "#/definitions/Artifact"}}}}, "x-looker-status": "alpha", "x-looker-activity-type": "non_query", "x-looker-rate-limited": true}}, "/cloud_storage": {"get": {"tags": ["Config"], "operationId": "cloud_storage_configuration", "summary": "Get Cloud Storage", "description": "Get the current Cloud Storage Configuration.\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Current Cloud Storage Configuration", "schema": {"$ref": "#/definitions/BackupConfiguration"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Config"], "operationId": "update_cloud_storage_configuration", "summary": "Update Cloud Storage", "description": "Update the current Cloud Storage Configuration.\n", "parameters": [{"name": "body", "in": "body", "description": "Options for Cloud Storage Configuration", "required": true, "schema": {"$ref": "#/definitions/BackupConfiguration"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "New state for specified model set.", "schema": {"$ref": "#/definitions/BackupConfiguration"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/color_collections": {"get": {"tags": ["ColorCollection"], "operationId": "all_color_collections", "summary": "Get all Color Collections", "description": "### Get an array of all existing Color Collections\nGet a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)\n\nGet all **standard** color collections with [ColorCollection](#!/ColorCollection/color_collections_standard)\n\nGet all **custom** color collections with [ColorCollection](#!/ColorCollection/color_collections_custom)\n\n**Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "ColorCollections", "schema": {"type": "array", "items": {"$ref": "#/definitions/ColorCollection"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["ColorCollection"], "operationId": "create_color_collection", "summary": "Create ColorCollection", "description": "### Create a custom color collection with the specified information\n\nCreates a new custom color collection object, returning the details, including the created id.\n\n**Update** an existing color collection with [Update Color Collection](#!/ColorCollection/update_color_collection)\n\n**Permanently delete** an existing custom color collection with [Delete Color Collection](#!/ColorCollection/delete_color_collection)\n\n**Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n\n", "parameters": [{"name": "body", "in": "body", "description": "ColorCollection", "required": true, "schema": {"$ref": "#/definitions/ColorCollection"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "ColorCollection", "schema": {"$ref": "#/definitions/ColorCollection"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/color_collections/custom": {"get": {"tags": ["ColorCollection"], "operationId": "color_collections_custom", "summary": "Get all Custom Color Collections", "description": "### Get an array of all existing **Custom** Color Collections\nGet a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)\n\nGet all **standard** color collections with [ColorCollection](#!/ColorCollection/color_collections_standard)\n\n**Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "ColorCollections", "schema": {"type": "array", "items": {"$ref": "#/definitions/ColorCollection"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/color_collections/standard": {"get": {"tags": ["ColorCollection"], "operationId": "color_collections_standard", "summary": "Get all Standard Color Collections", "description": "### Get an array of all existing **Standard** Color Collections\nGet a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)\n\nGet all **custom** color collections with [ColorCollection](#!/ColorCollection/color_collections_custom)\n\n**Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "ColorCollections", "schema": {"type": "array", "items": {"$ref": "#/definitions/ColorCollection"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/color_collections/default": {"put": {"tags": ["ColorCollection"], "operationId": "set_default_color_collection", "summary": "Set Default Color Collection", "description": "### Set the global default Color Collection by ID\n\nReturns the new specified default Color Collection object.\n**Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n\n", "parameters": [{"name": "collection_id", "in": "query", "description": "ID of color collection to set as default", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "ColorCollection", "schema": {"$ref": "#/definitions/ColorCollection"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "get": {"tags": ["ColorCollection"], "operationId": "default_color_collection", "summary": "Get Default Color Collection", "description": "### Get the default color collection\n\nUse this to retrieve the default Color Collection.\n\nSet the default color collection with [ColorCollection](#!/ColorCollection/set_default_color_collection)\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "ColorCollection", "schema": {"$ref": "#/definitions/ColorCollection"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/color_collections/{collection_id}": {"get": {"tags": ["ColorCollection"], "operationId": "color_collection", "summary": "Get Color Collection by ID", "description": "### Get a Color Collection by ID\n\nUse this to retrieve a specific Color Collection.\nGet a **single** color collection by id with [ColorCollection](#!/ColorCollection/color_collection)\n\nGet all **standard** color collections with [ColorCollection](#!/ColorCollection/color_collections_standard)\n\nGet all **custom** color collections with [ColorCollection](#!/ColorCollection/color_collections_custom)\n\n**Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n\n", "parameters": [{"name": "collection_id", "in": "path", "description": "Id of Color Collection", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "ColorCollection", "schema": {"$ref": "#/definitions/ColorCollection"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["ColorCollection"], "operationId": "update_color_collection", "summary": "Update Custom Color collection", "description": "### Update a custom color collection by id.\n**Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n\n", "parameters": [{"name": "collection_id", "in": "path", "description": "Id of Custom Color Collection", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "ColorCollection", "required": true, "schema": {"$ref": "#/definitions/ColorCollection"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "ColorCollection", "schema": {"$ref": "#/definitions/ColorCollection"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["ColorCollection"], "operationId": "delete_color_collection", "summary": "Delete ColorCollection", "description": "### Delete a custom color collection by id\n\nThis operation permanently deletes the identified **Custom** color collection.\n\n**Standard** color collections cannot be deleted\n\nBecause multiple color collections can have the same label, they must be deleted by ID, not name.\n**Note**: Only an API user with the Admin role can call this endpoint. Unauthorized requests will return `Not Found` (404) errors.\n\n", "parameters": [{"name": "collection_id", "in": "path", "description": "Id of Color Collection", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Success"}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/content_favorite/search": {"get": {"tags": ["Content"], "operationId": "search_content_favorites", "summary": "Search Favorite Contents", "description": "### Search Favorite Content\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n", "parameters": [{"name": "id", "in": "query", "description": "Match content favorite id(s)", "required": false, "type": "string"}, {"name": "user_id", "in": "query", "description": "Match user id(s).To create a list of multiple ids, use commas as separators", "required": false, "type": "string"}, {"name": "content_metadata_id", "in": "query", "description": "Match content metadata id(s).To create a list of multiple ids, use commas as separators", "required": false, "type": "string"}, {"name": "dashboard_id", "in": "query", "description": "Match dashboard id(s).To create a list of multiple ids, use commas as separators", "required": false, "type": "string"}, {"name": "look_id", "in": "query", "description": "Match look id(s).To create a list of multiple ids, use commas as separators", "required": false, "type": "string"}, {"name": "board_id", "in": "query", "description": "Match board id(s).To create a list of multiple ids, use commas as separators", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "Number of results to return. (used with offset)", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any. (used with limit)", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Favorite Content", "schema": {"type": "array", "items": {"$ref": "#/definitions/ContentFavorite"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/content_favorite/{content_favorite_id}": {"get": {"tags": ["Content"], "operationId": "content_favorite", "summary": "Get Favorite Content", "description": "### Get favorite content by its id", "parameters": [{"name": "content_favorite_id", "in": "path", "description": "Id of favorite content", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Favorite Content", "schema": {"$ref": "#/definitions/ContentFavorite"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Content"], "operationId": "delete_content_favorite", "summary": "Delete Favorite Content", "description": "### Delete favorite content", "parameters": [{"name": "content_favorite_id", "in": "path", "description": "Id of favorite content", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/content_favorite": {"post": {"tags": ["Content"], "operationId": "create_content_favorite", "summary": "Create Favorite Content", "description": "### Create favorite content", "parameters": [{"name": "body", "in": "body", "description": "Favorite Content", "required": true, "schema": {"$ref": "#/definitions/ContentFavorite"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Favorite Content", "schema": {"$ref": "#/definitions/ContentFavorite"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/content_metadata": {"get": {"tags": ["Content"], "operationId": "all_content_metadatas", "summary": "Get All Content Metadatas", "description": "### Get information about all content metadata in a space.\n", "parameters": [{"name": "parent_id", "in": "query", "description": "Parent space of content.", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Content Metadata", "schema": {"type": "array", "items": {"$ref": "#/definitions/ContentMeta"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/content_metadata/{content_metadata_id}": {"patch": {"tags": ["Content"], "operationId": "update_content_metadata", "summary": "Update Content Metadata", "description": "### Move a piece of content.\n", "parameters": [{"name": "content_metadata_id", "in": "path", "description": "Id of content metadata", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Content Metadata", "required": true, "schema": {"$ref": "#/definitions/ContentMeta"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Content Metadata", "schema": {"$ref": "#/definitions/ContentMeta"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "get": {"tags": ["Content"], "operationId": "content_metadata", "summary": "Get Content Metadata", "description": "### Get information about an individual content metadata record.\n", "parameters": [{"name": "content_metadata_id", "in": "path", "description": "Id of content metadata", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Content Metadata", "schema": {"$ref": "#/definitions/ContentMeta"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/content_metadata_access": {"post": {"tags": ["Content"], "operationId": "create_content_metadata_access", "summary": "Create Content Metadata Access", "description": "### Create content metadata access.\n", "parameters": [{"name": "body", "in": "body", "description": "Content Metadata Access", "required": true, "schema": {"$ref": "#/definitions/ContentMetaGroupUser"}}, {"name": "send_boards_notification_email", "in": "query", "description": "Optionally sends notification email when granting access to a board.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Content Metadata Access", "schema": {"$ref": "#/definitions/ContentMetaGroupUser"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query", "x-looker-rate-limited": true}, "get": {"tags": ["Content"], "operationId": "all_content_metadata_accesses", "summary": "Get All Content Metadata Accesses", "description": "### All content metadata access records for a content metadata item.\n", "parameters": [{"name": "content_metadata_id", "in": "query", "description": "Id of content metadata", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Content Metadata Access", "schema": {"type": "array", "items": {"$ref": "#/definitions/ContentMetaGroupUser"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/content_metadata_access/{content_metadata_access_id}": {"put": {"tags": ["Content"], "operationId": "update_content_metadata_access", "summary": "Update Content Metadata Access", "description": "### Update type of access for content metadata.\n", "parameters": [{"name": "content_metadata_access_id", "in": "path", "description": "Id of content metadata access", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Content Metadata Access", "required": true, "schema": {"$ref": "#/definitions/ContentMetaGroupUser"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Content Metadata Access", "schema": {"$ref": "#/definitions/ContentMetaGroupUser"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Content"], "operationId": "delete_content_metadata_access", "summary": "Delete Content Metadata Access", "description": "### Remove content metadata access.\n", "parameters": [{"name": "content_metadata_access_id", "in": "path", "description": "Id of content metadata access", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/content/{terms}": {"get": {"tags": ["Content"], "operationId": "search_content", "summary": "Search Content", "description": "### Search across looks, dashboards, and lookml dashboards. The terms field will be matched against the\ntitle and description of the content and the closest results are returned. Content that has been frequently\nviewed and those pieces of content stored in public folders will be ranked more highly in the results.\n\nThis endpoint does not return a full description of these content types. For more specific information\nabout each type please refer to the individual content specific API endpoints.\n\nGet the **full details** of a specific dashboard (or lookml dashboard) by id with [dashboard()](#!/Dashboard/dashboard)\nGet the **full details** of a specific look by id with [look()](#!/Look/look)\n", "parameters": [{"name": "terms", "in": "path", "description": "Search terms", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "types", "in": "query", "description": "Content types requested (dashboard, look, lookml_dashboard).", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "Number of results to return. (used with offset and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "page", "in": "query", "description": "Requested page.", "required": false, "type": "integer", "format": "int64"}, {"name": "per_page", "in": "query", "description": "Results per page.", "required": false, "type": "integer", "format": "int64"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "content", "schema": {"type": "array", "items": {"$ref": "#/definitions/ContentSearch"}}}}, "x-looker-status": "beta", "x-looker-activity-type": "non_query"}}, "/content_thumbnail/{type}/{resource_id}": {"get": {"tags": ["Content"], "operationId": "content_thumbnail", "summary": "Get Content Thumbnail", "description": "### Get an image representing the contents of a dashboard or look.\n\nThe returned thumbnail is an abstract representation of the contents of a dashbord or look and does not\nreflect the actual data displayed in the respective visualizations.\n", "produces": ["image/svg+xml", "image/png"], "parameters": [{"name": "type", "in": "path", "description": "Either dashboard or look", "required": true, "type": "string"}, {"name": "resource_id", "in": "path", "description": "ID of the dashboard or look to render", "required": true, "type": "string"}, {"name": "reload", "in": "query", "description": "Whether or not to refresh the rendered image with the latest content", "required": false, "type": "string"}, {"name": "theme", "in": "query", "description": "Light or dark background. Default is \"light\"", "required": false, "type": "string"}, {"name": "format", "in": "query", "description": "A value of png produces a thumbnail in PNG format instead of SVG (default)", "required": false, "type": "string"}, {"name": "width", "in": "query", "description": "The width of the image if format is supplied", "required": false, "type": "integer", "format": "int64"}, {"name": "height", "in": "query", "description": "The height of the image if format is supplied", "required": false, "type": "integer", "format": "int64"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Content thumbnail", "schema": {"type": "string"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/content_validation": {"get": {"tags": ["Content"], "operationId": "content_validation", "summary": "Validate Content", "description": "### Validate All Content\n\nPerforms validation of all looks and dashboards\nReturns a list of errors found as well as metadata about the content validation run.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Content validation results", "schema": {"$ref": "#/definitions/ContentValidation"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/content_view/search": {"get": {"tags": ["Content"], "operationId": "search_content_views", "summary": "Search Content Views", "description": "### Search Content Views\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n", "parameters": [{"name": "view_count", "in": "query", "description": "Match view count", "required": false, "type": "string"}, {"name": "group_id", "in": "query", "description": "Match Group Id", "required": false, "type": "string"}, {"name": "look_id", "in": "query", "description": "Match look_id", "required": false, "type": "string"}, {"name": "dashboard_id", "in": "query", "description": "Match dashboard_id", "required": false, "type": "string"}, {"name": "content_metadata_id", "in": "query", "description": "Match content metadata id", "required": false, "type": "string"}, {"name": "start_of_week_date", "in": "query", "description": "Match start of week date (format is \"YYYY-MM-DD\")", "required": false, "type": "string"}, {"name": "all_time", "in": "query", "description": "True if only all time view records should be returned", "required": false, "type": "boolean"}, {"name": "user_id", "in": "query", "description": "Match user id", "required": false, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "Number of results to return. Use with `offset` to manage pagination of results", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning data", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by", "required": false, "type": "string"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Content View", "schema": {"type": "array", "items": {"$ref": "#/definitions/ContentView"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/credentials_email/search": {"get": {"tags": ["User"], "operationId": "search_credentials_email", "summary": "Search CredentialsEmail", "description": "### Search email credentials\n\nReturns all credentials_email records that match the given search criteria.\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "Number of results to return (used with `offset`).", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any (used with `limit`).", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "id", "in": "query", "description": "Match credentials_email id.", "required": false, "type": "string"}, {"name": "email", "in": "query", "description": "Match credentials_email email.", "required": false, "type": "string"}, {"name": "emails", "in": "query", "description": "Find credentials_email that match given emails.", "required": false, "type": "string"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Credentials Email", "schema": {"type": "array", "items": {"$ref": "#/definitions/CredentialsEmailSearch"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/custom_welcome_email": {"get": {"tags": ["Config"], "operationId": "custom_welcome_email", "summary": "Get Custom Welcome Email", "description": "### Get the current status and content of custom welcome emails\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Custom Welcome Email", "schema": {"$ref": "#/definitions/CustomWelcomeEmail"}}}, "deprecated": true, "x-looker-status": "deprecated", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Config"], "operationId": "update_custom_welcome_email", "summary": "Update Custom Welcome Email Content", "description": "Update custom welcome email setting and values. Optionally send a test email with the new content to the currently logged in user.\n", "parameters": [{"name": "body", "in": "body", "description": "Custom Welcome Email setting and value to save", "required": true, "schema": {"$ref": "#/definitions/CustomWelcomeEmail"}}, {"name": "send_test_welcome_email", "in": "query", "description": "If true a test email with the content from the request will be sent to the current user after saving", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Custom Welcome Email", "schema": {"$ref": "#/definitions/CustomWelcomeEmail"}}}, "deprecated": true, "x-looker-status": "deprecated", "x-looker-activity-type": "non_query"}}, "/custom_welcome_email_test": {"put": {"tags": ["Config"], "operationId": "update_custom_welcome_email_test", "summary": "Send a test welcome email to the currently logged in user with the supplied content ", "description": "Requests to this endpoint will send a welcome email with the custom content provided in the body to the currently logged in user.\n", "parameters": [{"name": "body", "in": "body", "description": "Subject, header, and Body of the email to be sent.", "required": true, "schema": {"$ref": "#/definitions/WelcomeEmailTest"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Send Test Welcome Email", "schema": {"$ref": "#/definitions/WelcomeEmailTest"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboards": {"get": {"tags": ["Dashboard"], "operationId": "all_dashboards", "summary": "Get All Dashboards", "description": "### Get information about all active dashboards.\n\nReturns an array of **abbreviated dashboard objects**. Dashboards marked as deleted are excluded from this list.\n\nGet the **full details** of a specific dashboard by id with [dashboard()](#!/Dashboard/dashboard)\n\nFind **deleted dashboards** with [search_dashboards()](#!/Dashboard/search_dashboards)\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "dashboards", "schema": {"type": "array", "items": {"$ref": "#/definitions/DashboardBase"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Dashboard"], "operationId": "create_dashboard", "summary": "Create Dashboard", "description": "### Create a new dashboard\n\nCreates a new dashboard object and returns the details of the newly created dashboard.\n\n`Title` and `space_id` are required fields.\n`Space_id` must contain the id of an existing space.\nA dashboard's `title` must be unique within the space in which it resides.\n\nIf you receive a 422 error response when creating a dashboard, be sure to look at the\nresponse body for information about exactly which fields are missing or contain invalid data.\n\nYou can **update** an existing dashboard with [update_dashboard()](#!/Dashboard/update_dashboard)\n\nYou can **permanently delete** an existing dashboard with [delete_dashboard()](#!/Dashboard/delete_dashboard)\n", "parameters": [{"name": "body", "in": "body", "description": "Dashboard", "required": true, "schema": {"$ref": "#/definitions/Dashboard"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Dashboard", "schema": {"$ref": "#/definitions/Dashboard"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboards/search": {"get": {"tags": ["Dashboard"], "operationId": "search_dashboards", "summary": "Search Dashboards", "description": "### Search Dashboards\n\nReturns an array of **user-defined dashboard** objects that match the specified search criteria.\nNote, [search_dashboards()](#!/Dashboard/search_dashboards) does not return LookML dashboard objects.\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n\nThe parameters `limit`, and `offset` are recommended for fetching results in page-size chunks.\n\nGet a **single dashboard** by id with [dashboard()](#!/Dashboard/dashboard)\n", "parameters": [{"name": "id", "in": "query", "description": "Match dashboard id.", "required": false, "type": "string"}, {"name": "slug", "in": "query", "description": "Match dashboard slug.", "required": false, "type": "string"}, {"name": "title", "in": "query", "description": "Match Dashboard title.", "required": false, "type": "string"}, {"name": "description", "in": "query", "description": "Match Dashboard description.", "required": false, "type": "string"}, {"name": "content_favorite_id", "in": "query", "description": "Filter on a content favorite id.", "required": false, "type": "string"}, {"name": "folder_id", "in": "query", "description": "Filter on a particular space.", "required": false, "type": "string"}, {"name": "deleted", "in": "query", "description": "Filter on dashboards deleted status.", "required": false, "type": "string"}, {"name": "user_id", "in": "query", "description": "Filter on dashboards created by a particular user.", "required": false, "type": "string"}, {"name": "view_count", "in": "query", "description": "Filter on a particular value of view_count", "required": false, "type": "string"}, {"name": "content_metadata_id", "in": "query", "description": "Filter on a content favorite id.", "required": false, "type": "string"}, {"name": "curate", "in": "query", "description": "Exclude items that exist only in personal spaces other than the users", "required": false, "type": "boolean"}, {"name": "last_viewed_at", "in": "query", "description": "Select dashboards based on when they were last viewed", "required": false, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return only page N of paginated results", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "per_page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return N rows of data per page", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "limit", "in": "query", "description": "Number of results to return. (used with offset and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "One or more fields to sort by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :folder_id, :description, :view_count, :favorite_count, :slug, :content_favorite_id, :content_metadata_id, :deleted, :deleted_at, :last_viewed_at, :last_accessed_at]", "required": false, "type": "string"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression", "required": false, "type": "boolean"}, {"name": "not_owned_by", "in": "query", "description": "Filter out the dashboards owned by the user passed at the :user_id params", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "dashboards", "schema": {"type": "array", "items": {"$ref": "#/definitions/Dashboard"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboards/{lookml_dashboard_id}/import/{space_id}": {"post": {"tags": ["Dashboard"], "operationId": "import_lookml_dashboard", "summary": "Import LookML Dashboard", "description": "### Import a LookML dashboard to a space as a UDD\nCreates a UDD (a dashboard which exists in the Looker database rather than as a LookML file) from the LookML dashboard\nand places it in the space specified. The created UDD will have a lookml_link_id which links to the original LookML dashboard.\n\nTo give the imported dashboard specify a (e.g. title: \"my title\") in the body of your request, otherwise the imported\ndashboard will have the same title as the original LookML dashboard.\n\nFor this operation to succeed the user must have permission to see the LookML dashboard in question, and have permission to\ncreate content in the space the dashboard is being imported to.\n\n**Sync** a linked UDD with [sync_lookml_dashboard()](#!/Dashboard/sync_lookml_dashboard)\n**Unlink** a linked UDD by setting lookml_link_id to null with [update_dashboard()](#!/Dashboard/update_dashboard)\n", "parameters": [{"name": "lookml_dashboard_id", "in": "path", "description": "Id of LookML dashboard", "required": true, "type": "string"}, {"name": "space_id", "in": "path", "description": "Id of space to import the dashboard to", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Dashboard", "required": false, "schema": {"$ref": "#/definitions/Dashboard"}}, {"name": "raw_locale", "in": "query", "description": "If true, and this dashboard is localized, export it with the raw keys, not localized.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "201": {"description": "dashboard", "schema": {"$ref": "#/definitions/Dashboard"}}, "200": {"description": "Dashboard", "schema": {"$ref": "#/definitions/Dashboard"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboards/{lookml_dashboard_id}/sync": {"patch": {"tags": ["Dashboard"], "operationId": "sync_lookml_dashboard", "summary": "Sync LookML Dashboard", "description": "### Update all linked dashboards to match the specified LookML dashboard.\n\nAny UDD (a dashboard which exists in the Looker database rather than as a LookML file) which has a `lookml_link_id`\nproperty value referring to a LookML dashboard's id (model::dashboardname) will be updated so that it matches the current state of the LookML dashboard.\n\nFor this operation to succeed the user must have permission to view the LookML dashboard, and only linked dashboards\nthat the user has permission to update will be synced.\n\nTo **link** or **unlink** a UDD set the `lookml_link_id` property with [update_dashboard()](#!/Dashboard/update_dashboard)\n", "parameters": [{"name": "lookml_dashboard_id", "in": "path", "description": "Id of LookML dashboard, in the form 'model::dashboardname'", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Dashboard", "required": true, "schema": {"$ref": "#/definitions/Dashboard"}}, {"name": "raw_locale", "in": "query", "description": "If true, and this dashboard is localized, export it with the raw keys, not localized.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Ids of all the dashboards that were updated by this operation", "schema": {"type": "array", "items": {"type": "integer", "format": "int64"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboards/{dashboard_id}": {"delete": {"tags": ["Dashboard"], "operationId": "delete_dashboard", "summary": "Delete Dashboard", "description": "### Delete the dashboard with the specified id\n\nPermanently **deletes** a dashboard. (The dashboard cannot be recovered after this operation.)\n\n\"Soft\" delete or hide a dashboard by setting its `deleted` status to `True` with [update_dashboard()](#!/Dashboard/update_dashboard).\n\nNote: When a dashboard is deleted in the UI, it is soft deleted. Use this API call to permanently remove it, if desired.\n", "parameters": [{"name": "dashboard_id", "in": "path", "description": "Id of dashboard", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "405": {"description": "Resource Can't Be Modified", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Dashboard"], "operationId": "update_dashboard", "summary": "Update Dashboard", "description": "### Update a dashboard\n\nYou can use this function to change the string and integer properties of\na dashboard. Nested objects such as filters, dashboard elements, or dashboard layout components\ncannot be modified by this function - use the update functions for the respective\nnested object types (like [update_dashboard_filter()](#!/3.1/Dashboard/update_dashboard_filter) to change a filter)\nto modify nested objects referenced by a dashboard.\n\nIf you receive a 422 error response when updating a dashboard, be sure to look at the\nresponse body for information about exactly which fields are missing or contain invalid data.\n", "parameters": [{"name": "dashboard_id", "in": "path", "description": "Id of dashboard", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Dashboard", "required": true, "schema": {"$ref": "#/definitions/Dashboard"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "405": {"description": "Resource Can't Be Modified", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Dashboard", "schema": {"$ref": "#/definitions/Dashboard"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "get": {"tags": ["Dashboard"], "operationId": "dashboard", "summary": "Get Dashboard", "description": "### Get information about a dashboard\n\nReturns the full details of the identified dashboard object\n\nGet a **summary list** of all active dashboards with [all_dashboards()](#!/Dashboard/all_dashboards)\n\nYou can **Search** for dashboards with [search_dashboards()](#!/Dashboard/search_dashboards)\n", "parameters": [{"name": "dashboard_id", "in": "path", "description": "Id of dashboard", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Dashboard", "schema": {"$ref": "#/definitions/Dashboard"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboards/aggregate_table_lookml/{dashboard_id}": {"get": {"tags": ["Dashboard"], "operationId": "dashboard_aggregate_table_lookml", "summary": "Get Aggregate Table LookML for a dashboard", "description": "### Get Aggregate Table LookML for Each Query on a Dahboard\n\nReturns a JSON object that contains the dashboard id and Aggregate Table lookml\n\n", "parameters": [{"name": "dashboard_id", "in": "path", "description": "Id of dashboard", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "JSON for Aggregate Table LookML", "schema": {"$ref": "#/definitions/DashboardAggregateTableLookml"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboards/lookml/{dashboard_id}": {"get": {"tags": ["Dashboard"], "operationId": "dashboard_lookml", "summary": "Get lookml of a UDD", "description": "### Get lookml of a UDD\n\nReturns a JSON object that contains the dashboard id and the full lookml\n\n", "parameters": [{"name": "dashboard_id", "in": "path", "description": "Id of dashboard", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "json of dashboard", "schema": {"$ref": "#/definitions/DashboardLookml"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboards/{dashboard_id}/move": {"patch": {"tags": ["Dashboard"], "operationId": "move_dashboard", "summary": "Move Dashboard", "description": "### Move an existing dashboard\n\nMoves a dashboard to a specified folder, and returns the moved dashboard.\n\n`dashboard_id` and `folder_id` are required.\n`dashboard_id` and `folder_id` must already exist, and `folder_id` must be different from the current `folder_id` of the dashboard.\n", "parameters": [{"name": "dashboard_id", "in": "path", "description": "Dashboard id to move.", "required": true, "type": "string"}, {"name": "folder_id", "in": "query", "description": "Folder id to move to.", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Dashboard", "schema": {"$ref": "#/definitions/Dashboard"}}, "201": {"description": "dashboard", "schema": {"$ref": "#/definitions/Dashboard"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboards/lookml": {"post": {"tags": ["Dashboard"], "operationId": "import_dashboard_from_lookml", "summary": "Import Dashboard from LookML", "description": "### Creates a dashboard object based on LookML Dashboard YAML, and returns the details of the newly created dashboard.\n\nIf a dashboard exists with the YAML-defined \"preferred_slug\", the new dashboard will overwrite it. Otherwise, a new\ndashboard will be created. Note that when a dashboard is overwritten, alerts will not be maintained.\n\nIf a folder_id is specified: new dashboards will be placed in that folder, and overwritten dashboards will be moved to it\nIf the folder_id isn't specified: new dashboards will be placed in the caller's personal folder, and overwritten dashboards\nwill remain where they were\n\nLookML must contain valid LookML YAML code. It's recommended to use the LookML format returned\nfrom [dashboard_lookml()](#!/Dashboard/dashboard_lookml) as the input LookML (newlines replaced with \n).\n\nNote that the created dashboard is not linked to any LookML Dashboard,\ni.e. [sync_lookml_dashboard()](#!/Dashboard/sync_lookml_dashboard) will not update dashboards created by this method.\n", "parameters": [{"name": "body", "in": "body", "description": "DashboardLookML", "required": true, "schema": {"$ref": "#/definitions/DashboardLookml"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "dashboard", "schema": {"$ref": "#/definitions/Dashboard"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboards/from_lookml": {"post": {"tags": ["Dashboard"], "operationId": "create_dashboard_from_lookml", "summary": "Create Dashboard from LookML", "description": "# DEPRECATED:  Use [import_dashboard_from_lookml()](#!/Dashboard/import_dashboard_from_lookml)\n", "parameters": [{"name": "body", "in": "body", "description": "DashboardLookML", "required": true, "schema": {"$ref": "#/definitions/DashboardLookml"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "dashboard", "schema": {"$ref": "#/definitions/Dashboard"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboards/{dashboard_id}/copy": {"post": {"tags": ["Dashboard"], "operationId": "copy_dashboard", "summary": "Copy Dashboard", "description": "### Copy an existing dashboard\n\nCreates a copy of an existing dashboard, in a specified folder, and returns the copied dashboard.\n\n`dashboard_id` is required, `dashboard_id` and `folder_id` must already exist if specified.\n`folder_id` will default to the existing folder.\n\nIf a dashboard with the same title already exists in the target folder, the copy will have '(copy)'\n  or '(copy <# of copies>)' appended.\n", "parameters": [{"name": "dashboard_id", "in": "path", "description": "Dashboard id to copy.", "required": true, "type": "string"}, {"name": "folder_id", "in": "query", "description": "Folder id to copy to.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Dashboard", "schema": {"$ref": "#/definitions/Dashboard"}}, "201": {"description": "dashboard", "schema": {"$ref": "#/definitions/Dashboard"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboard_elements/search": {"get": {"tags": ["Dashboard"], "operationId": "search_dashboard_elements", "summary": "Search Dashboard Elements", "description": "### Search Dashboard Elements\n\nReturns an **array of DashboardElement objects** that match the specified search criteria.\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n", "parameters": [{"name": "dashboard_id", "in": "query", "description": "Select elements that refer to a given dashboard id", "required": false, "type": "string"}, {"name": "look_id", "in": "query", "description": "Select elements that refer to a given look id", "required": false, "type": "string"}, {"name": "title", "in": "query", "description": "Match the title of element", "required": false, "type": "string"}, {"name": "deleted", "in": "query", "description": "Select soft-deleted dashboard elements", "required": false, "type": "boolean"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression", "required": false, "type": "boolean"}, {"name": "sorts", "in": "query", "description": "Fields to sort by. Sortable fields: [:look_id, :dashboard_id, :deleted, :title]", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Dashboard elements", "schema": {"type": "array", "items": {"$ref": "#/definitions/DashboardElement"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboard_elements/{dashboard_element_id}": {"get": {"tags": ["Dashboard"], "operationId": "dashboard_element", "summary": "Get DashboardElement", "description": "### Get information about the dashboard element with a specific id.", "parameters": [{"name": "dashboard_element_id", "in": "path", "description": "Id of dashboard element", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "DashboardElement", "schema": {"$ref": "#/definitions/DashboardElement"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Dashboard"], "operationId": "delete_dashboard_element", "summary": "Delete DashboardElement", "description": "### Delete a dashboard element with a specific id.", "parameters": [{"name": "dashboard_element_id", "in": "path", "description": "Id of dashboard element", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Dashboard"], "operationId": "update_dashboard_element", "summary": "Update DashboardElement", "description": "### Update the dashboard element with a specific id.", "parameters": [{"name": "dashboard_element_id", "in": "path", "description": "Id of dashboard element", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "DashboardElement", "required": true, "schema": {"$ref": "#/definitions/DashboardElement"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "DashboardElement", "schema": {"$ref": "#/definitions/DashboardElement"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboards/{dashboard_id}/dashboard_elements": {"get": {"tags": ["Dashboard"], "operationId": "dashboard_dashboard_elements", "summary": "Get All DashboardElements", "description": "### Get information about all the dashboard elements on a dashboard with a specific id.", "parameters": [{"name": "dashboard_id", "in": "path", "description": "Id of dashboard", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "DashboardElement", "schema": {"type": "array", "items": {"$ref": "#/definitions/DashboardElement"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboard_elements": {"post": {"tags": ["Dashboard"], "operationId": "create_dashboard_element", "summary": "Create DashboardElement", "description": "### Create a dashboard element on the dashboard with a specific id.", "parameters": [{"name": "body", "in": "body", "description": "DashboardElement", "required": true, "schema": {"$ref": "#/definitions/DashboardElement"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "apply_filters", "in": "query", "description": "Apply relevant filters on dashboard to this tile", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "DashboardElement", "schema": {"$ref": "#/definitions/DashboardElement"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboard_filters/{dashboard_filter_id}": {"get": {"tags": ["Dashboard"], "operationId": "dashboard_filter", "summary": "Get Dashboard Filter", "description": "### Get information about the dashboard filters with a specific id.", "parameters": [{"name": "dashboard_filter_id", "in": "path", "description": "Id of dashboard filters", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Dashboard Filter", "schema": {"$ref": "#/definitions/DashboardFilter"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Dashboard"], "operationId": "delete_dashboard_filter", "summary": "Delete Dashboard Filter", "description": "### Delete a dashboard filter with a specific id.", "parameters": [{"name": "dashboard_filter_id", "in": "path", "description": "Id of dashboard filter", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Dashboard"], "operationId": "update_dashboard_filter", "summary": "Update Dashboard Filter", "description": "### Update the dashboard filter with a specific id.", "parameters": [{"name": "dashboard_filter_id", "in": "path", "description": "Id of dashboard filter", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Dashboard Filter", "required": true, "schema": {"$ref": "#/definitions/DashboardFilter"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Dashboard Filter", "schema": {"$ref": "#/definitions/DashboardFilter"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboards/{dashboard_id}/dashboard_filters": {"get": {"tags": ["Dashboard"], "operationId": "dashboard_dashboard_filters", "summary": "Get All Dashboard Filters", "description": "### Get information about all the dashboard filters on a dashboard with a specific id.", "parameters": [{"name": "dashboard_id", "in": "path", "description": "Id of dashboard", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Dashboard Filter", "schema": {"type": "array", "items": {"$ref": "#/definitions/DashboardFilter"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboard_filters": {"post": {"tags": ["Dashboard"], "operationId": "create_dashboard_filter", "summary": "Create Dashboard Filter", "description": "### Create a dashboard filter on the dashboard with a specific id.", "parameters": [{"name": "body", "in": "body", "description": "Dashboard Filter", "required": true, "schema": {"$ref": "#/definitions/CreateDashboardFilter"}}, {"name": "fields", "in": "query", "description": "Requested fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Dashboard Filter", "schema": {"$ref": "#/definitions/DashboardFilter"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboard_layout_components/{dashboard_layout_component_id}": {"get": {"tags": ["Dashboard"], "operationId": "dashboard_layout_component", "summary": "Get DashboardLayoutComponent", "description": "### Get information about the dashboard elements with a specific id.", "parameters": [{"name": "dashboard_layout_component_id", "in": "path", "description": "Id of dashboard layout component", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "DashboardLayoutComponent", "schema": {"$ref": "#/definitions/DashboardLayoutComponent"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Dashboard"], "operationId": "update_dashboard_layout_component", "summary": "Update DashboardLayoutComponent", "description": "### Update the dashboard element with a specific id.", "parameters": [{"name": "dashboard_layout_component_id", "in": "path", "description": "Id of dashboard layout component", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "DashboardLayoutComponent", "required": true, "schema": {"$ref": "#/definitions/DashboardLayoutComponent"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "DashboardLayoutComponent", "schema": {"$ref": "#/definitions/DashboardLayoutComponent"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboard_layouts/{dashboard_layout_id}/dashboard_layout_components": {"get": {"tags": ["Dashboard"], "operationId": "dashboard_layout_dashboard_layout_components", "summary": "Get All DashboardLayoutComponents", "description": "### Get information about all the dashboard layout components for a dashboard layout with a specific id.", "parameters": [{"name": "dashboard_layout_id", "in": "path", "description": "Id of dashboard layout component", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "DashboardLayoutComponent", "schema": {"type": "array", "items": {"$ref": "#/definitions/DashboardLayoutComponent"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboard_layouts/{dashboard_layout_id}": {"get": {"tags": ["Dashboard"], "operationId": "dashboard_layout", "summary": "Get DashboardLayout", "description": "### Get information about the dashboard layouts with a specific id.", "parameters": [{"name": "dashboard_layout_id", "in": "path", "description": "Id of dashboard layouts", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "DashboardLayout", "schema": {"$ref": "#/definitions/DashboardLayout"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Dashboard"], "operationId": "delete_dashboard_layout", "summary": "Delete DashboardLayout", "description": "### Delete a dashboard layout with a specific id.", "parameters": [{"name": "dashboard_layout_id", "in": "path", "description": "Id of dashboard layout", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Dashboard"], "operationId": "update_dashboard_layout", "summary": "Update DashboardLayout", "description": "### Update the dashboard layout with a specific id.", "parameters": [{"name": "dashboard_layout_id", "in": "path", "description": "Id of dashboard layout", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "DashboardLayout", "required": true, "schema": {"$ref": "#/definitions/DashboardLayout"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "DashboardLayout", "schema": {"$ref": "#/definitions/DashboardLayout"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboards/{dashboard_id}/dashboard_layouts": {"get": {"tags": ["Dashboard"], "operationId": "dashboard_dashboard_layouts", "summary": "Get All DashboardLayouts", "description": "### Get information about all the dashboard elements on a dashboard with a specific id.", "parameters": [{"name": "dashboard_id", "in": "path", "description": "Id of dashboard", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "DashboardLayout", "schema": {"type": "array", "items": {"$ref": "#/definitions/DashboardLayout"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dashboard_layouts": {"post": {"tags": ["Dashboard"], "operationId": "create_dashboard_layout", "summary": "Create DashboardLayout", "description": "### Create a dashboard layout on the dashboard with a specific id.", "parameters": [{"name": "body", "in": "body", "description": "DashboardLayout", "required": true, "schema": {"$ref": "#/definitions/DashboardLayout"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "DashboardLayout", "schema": {"$ref": "#/definitions/DashboardLayout"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/data_actions": {"post": {"tags": ["DataAction"], "operationId": "perform_data_action", "summary": "Send a Data Action", "description": "Perform a data action. The data action object can be obtained from query results, and used to perform an arbitrary action.", "parameters": [{"name": "body", "in": "body", "description": "Data Action Request", "required": true, "schema": {"$ref": "#/definitions/DataActionRequest"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Data Action Response", "schema": {"$ref": "#/definitions/DataActionResponse"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/data_actions/form": {"post": {"tags": ["DataAction"], "operationId": "fetch_remote_data_action_form", "summary": "Fetch Remote Data Action Form", "description": "For some data actions, the remote server may supply a form requesting further user input. This endpoint takes a data action, asks the remote server to generate a form for it, and returns that form to you for presentation to the user.", "parameters": [{"name": "body", "in": "body", "description": "Data Action Request", "required": true, "schema": {"type": "object", "additionalProperties": {"type": "string"}}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Data Action Form", "schema": {"$ref": "#/definitions/DataActionForm"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/datagroups": {"get": {"tags": ["Datagroup"], "operationId": "all_datagroups", "summary": "Get All Datagroups", "description": "### Get information about all datagroups.\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Datagroup", "schema": {"type": "array", "items": {"$ref": "#/definitions/Datagroup"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/datagroups/{datagroup_id}": {"get": {"tags": ["Datagroup"], "operationId": "datagroup", "summary": "Get Datagroup", "description": "### Get information about a datagroup.\n", "parameters": [{"name": "datagroup_id", "in": "path", "description": "ID of datagroup.", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Datagroup", "schema": {"$ref": "#/definitions/Datagroup"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Datagroup"], "operationId": "update_datagroup", "summary": "Update Datagroup", "description": "### Update a datagroup using the specified params.\n", "parameters": [{"name": "datagroup_id", "in": "path", "description": "ID of datagroup.", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Datagroup", "required": true, "schema": {"$ref": "#/definitions/Datagroup"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Datagroup", "schema": {"$ref": "#/definitions/Datagroup"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/connections": {"get": {"tags": ["Connection"], "operationId": "all_connections", "summary": "Get All Connections", "description": "### Get information about all connections.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Connection", "schema": {"type": "array", "items": {"$ref": "#/definitions/DBConnection"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Connection"], "operationId": "create_connection", "summary": "Create Connection", "description": "### Create a connection using the specified configuration.\n", "parameters": [{"name": "body", "in": "body", "description": "Connection", "required": true, "schema": {"$ref": "#/definitions/DBConnection"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Connection", "schema": {"$ref": "#/definitions/DBConnection"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/connections/{connection_name}": {"get": {"tags": ["Connection"], "operationId": "connection", "summary": "Get Connection", "description": "### Get information about a connection.\n", "parameters": [{"name": "connection_name", "in": "path", "description": "Name of connection", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Connection", "schema": {"$ref": "#/definitions/DBConnection"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Connection"], "operationId": "update_connection", "summary": "Update Connection", "description": "### Update a connection using the specified configuration.\n", "parameters": [{"name": "connection_name", "in": "path", "description": "Name of connection", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Connection", "required": true, "schema": {"$ref": "#/definitions/DBConnection"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Connection", "schema": {"$ref": "#/definitions/DBConnection"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Connection"], "operationId": "delete_connection", "summary": "Delete Connection", "description": "### Delete a connection.\n", "parameters": [{"name": "connection_name", "in": "path", "description": "Name of connection", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/connections/{connection_name}/connection_override/{override_context}": {"delete": {"tags": ["Connection"], "operationId": "delete_connection_override", "summary": "Delete Connection Override", "description": "### Delete a connection override.\n", "parameters": [{"name": "connection_name", "in": "path", "description": "Name of connection", "required": true, "type": "string"}, {"name": "override_context", "in": "path", "description": "Context of connection override", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/connections/{connection_name}/test": {"put": {"tags": ["Connection"], "operationId": "test_connection", "summary": "Test Connection", "description": "### Test an existing connection.\n\nNote that a connection's 'dialect' property has a 'connection_tests' property that lists the\nspecific types of tests that the connection supports.\n\nThis API is rate limited.\n\nUnsupported tests in the request will be ignored.\n", "parameters": [{"name": "connection_name", "in": "path", "description": "Name of connection", "required": true, "type": "string"}, {"name": "tests", "in": "query", "description": "Array of names of tests to run", "required": false, "type": "array", "items": {"type": "string"}, "collectionFormat": "csv"}], "responses": {"429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Test results", "schema": {"type": "array", "items": {"$ref": "#/definitions/DBConnectionTestResult"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query", "x-looker-rate-limited": true}}, "/connections/test": {"put": {"tags": ["Connection"], "operationId": "test_connection_config", "summary": "Test Connection Configuration", "description": "### Test a connection configuration.\n\nNote that a connection's 'dialect' property has a 'connection_tests' property that lists the\nspecific types of tests that the connection supports.\n\nThis API is rate limited.\n\nUnsupported tests in the request will be ignored.\n", "parameters": [{"name": "body", "in": "body", "description": "Connection", "required": true, "schema": {"$ref": "#/definitions/DBConnection"}}, {"name": "tests", "in": "query", "description": "Array of names of tests to run", "required": false, "type": "array", "items": {"type": "string"}, "collectionFormat": "csv"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Test results", "schema": {"type": "array", "items": {"$ref": "#/definitions/DBConnectionTestResult"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query", "x-looker-rate-limited": true}}, "/projects/{project_id}/manifest/lock_all": {"post": {"tags": ["Project"], "operationId": "lock_all", "summary": "Lock All", "description": "      ### Generate Lockfile for All LookML Dependencies\n\n      Git must have been configured, must be in dev mode and deploy permission required\n\n      Install_all is a two step process\n      1. For each remote_dependency in a project the dependency manager will resolve any ambiguous ref.\n      2. The project will then write out a lockfile including each remote_dependency with its resolved ref.\n\n", "parameters": [{"name": "project_id", "in": "path", "description": "Id of project", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Project Dependency Manager", "schema": {"type": "string"}}, "204": {"description": "Returns 204 if dependencies successfully installed, otherwise 400 with an error message"}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/derived_table/graph/model/{model}": {"get": {"tags": ["DerivedTable"], "operationId": "graph_derived_tables_for_model", "summary": "Get Derived Table graph for model", "description": "### Discover information about derived tables\n", "parameters": [{"name": "model", "in": "path", "description": "The name of the Lookml model.", "required": true, "type": "string"}, {"name": "format", "in": "query", "description": "The format of the graph. Valid values are [dot]. Default is `dot`", "required": false, "type": "string"}, {"name": "color", "in": "query", "description": "Color denoting the build status of the graph. Grey = not built, green = built, yellow = building, red = error.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Derived Table", "schema": {"$ref": "#/definitions/DependencyGraph"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/derived_table/graph/view/{view}": {"get": {"tags": ["DerivedTable"], "operationId": "graph_derived_tables_for_view", "summary": "Get subgraph of derived table and dependencies", "description": "### Get the subgraph representing this derived table and its dependencies.\n", "parameters": [{"name": "view", "in": "path", "description": "The derived table's view name.", "required": true, "type": "string"}, {"name": "models", "in": "query", "description": "The models where this derived table is defined.", "required": false, "type": "string"}, {"name": "workspace", "in": "query", "description": "The model directory to look in, either `dev` or `production`.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Graph of the derived table component, represented in the DOT language.", "schema": {"$ref": "#/definitions/DependencyGraph"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/derived_table/{model_name}/{view_name}/start": {"get": {"tags": ["DerivedTable"], "operationId": "start_pdt_build", "summary": "Start a PDT materialization", "description": "Enqueue materialization for a PDT with the given model name and view name", "parameters": [{"name": "model_name", "in": "path", "description": "The model of the PDT to start building.", "required": true, "type": "string"}, {"name": "view_name", "in": "path", "description": "The view name of the PDT to start building.", "required": true, "type": "string"}, {"name": "force_rebuild", "in": "query", "description": "Force rebuild of required dependent PDTs, even if they are already materialized.", "required": false, "type": "string"}, {"name": "force_full_incremental", "in": "query", "description": "Force involved incremental PDTs to fully re-materialize.", "required": false, "type": "string"}, {"name": "workspace", "in": "query", "description": "Workspace in which to materialize selected PDT ('dev' or default 'production').", "required": false, "type": "string"}, {"name": "source", "in": "query", "description": "The source of this request.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Derived Table", "schema": {"$ref": "#/definitions/MaterializePDT"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/derived_table/{materialization_id}/status": {"get": {"tags": ["DerivedTable"], "operationId": "check_pdt_build", "summary": "Check status of a PDT materialization", "description": "Check status of PDT materialization", "parameters": [{"name": "materialization_id", "in": "path", "description": "The materialization id to check status for.", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Derived Table", "schema": {"$ref": "#/definitions/MaterializePDT"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/derived_table/{materialization_id}/stop": {"get": {"tags": ["DerivedTable"], "operationId": "stop_pdt_build", "summary": "Stop a PDT materialization", "description": "Stop a PDT materialization", "parameters": [{"name": "materialization_id", "in": "path", "description": "The materialization id to stop.", "required": true, "type": "string"}, {"name": "source", "in": "query", "description": "The source of this request.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Derived Table", "schema": {"$ref": "#/definitions/MaterializePDT"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/dialect_info": {"get": {"tags": ["Connection"], "operationId": "all_dialect_infos", "summary": "Get All Dialect Infos", "description": "### Get information about all dialects.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Dialect Info", "schema": {"type": "array", "items": {"$ref": "#/definitions/DialectInfo"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/digest_emails_enabled": {"get": {"tags": ["Config"], "operationId": "digest_emails_enabled", "summary": "Get Digest_emails", "description": "### Retrieve the value for whether or not digest emails is enabled\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Digest_emails", "schema": {"$ref": "#/definitions/DigestEmails"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Config"], "operationId": "update_digest_emails_enabled", "summary": "Update Digest_emails", "description": "### Update the setting for enabling/disabling digest emails\n", "parameters": [{"name": "body", "in": "body", "description": "Digest_emails", "required": true, "schema": {"$ref": "#/definitions/DigestEmails"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Digest_emails", "schema": {"$ref": "#/definitions/DigestEmails"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/digest_email_send": {"post": {"tags": ["Config"], "operationId": "create_digest_email_send", "summary": "Deliver digest email contents", "description": "### Trigger the generation of digest email records and send them to Looker's internal system. This does not send\nany actual emails, it generates records containing content which may be of interest for users who have become inactive.\nEmails will be sent at a later time from Looker's internal system if the Digest Emails feature is enabled in settings.", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Status of generating and sending the data", "schema": {"$ref": "#/definitions/DigestEmailSend"}}}, "x-looker-status": "stable", "x-looker-activity-type": "none", "x-looker-rate-limited": true}}, "/public_egress_ip_addresses": {"get": {"tags": ["Config"], "operationId": "public_egress_ip_addresses", "summary": "Public Egress IP Addresses", "description": "### Get Egress IP Addresses\n\nReturns the list of public egress IP Addresses for a hosted customer's instance\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Public Egress IP Addresses", "schema": {"$ref": "#/definitions/EgressIpAddresses"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/embed_config/secrets": {"post": {"tags": ["Auth"], "operationId": "create_embed_secret", "summary": "Create Embed Secret", "description": "### Create an embed secret using the specified information.\n\nThe value of the `secret` field will be set by Looker and returned.\n\nCalls to this endpoint require [Embedding](https://cloud.google.com/looker/docs/r/looker-core-feature-embed) to be enabled\n", "parameters": [{"name": "body", "in": "body", "description": "embed secret", "required": false, "schema": {"$ref": "#/definitions/EmbedSecret"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "embed secret", "schema": {"$ref": "#/definitions/EmbedSecret"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/embed_config/secrets/{embed_secret_id}": {"delete": {"tags": ["Auth"], "operationId": "delete_embed_secret", "summary": "Delete Embed Secret", "description": "### Delete an embed secret.\n\nCalls to this endpoint require [Embedding](https://cloud.google.com/looker/docs/r/looker-core-feature-embed) to be enabled\n", "parameters": [{"name": "embed_secret_id", "in": "path", "description": "Id of Embed Secret", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/embed/sso_url": {"post": {"tags": ["Auth"], "operationId": "create_sso_embed_url", "summary": "Create SSO Embed Url", "description": "### Create SSO Embed URL\n\nCreates an SSO embed URL and cryptographically signs it with an embed secret.\nThis signed URL can then be used to instantiate a Looker embed session in a PBL web application.\nDo not make any modifications to this URL - any change may invalidate the signature and\ncause the URL to fail to load a Looker embed session.\n\nA signed SSO embed URL can only be used once. After it has been used to request a page from the\nLooker server, the URL is invalid. Future requests using the same URL will fail. This is to prevent\n'replay attacks'.\n\nThe `target_url` property must be a complete URL of a Looker UI page - scheme, hostname, path and query params.\nTo load a dashboard with id 56 and with a filter of `Date=1 years`, the looker URL would look like `https:/myname.looker.com/dashboards/56?Date=1%20years`.\nThe best way to obtain this target_url is to navigate to the desired Looker page in your web browser,\ncopy the URL shown in the browser address bar and paste it into the `target_url` property as a quoted string value in this API request.\n\nPermissions for the embed user are defined by the groups in which the embed user is a member (group_ids property)\nand the lists of models and permissions assigned to the embed user.\nAt a minimum, you must provide values for either the group_ids property, or both the models and permissions properties.\nThese properties are additive; an embed user can be a member of certain groups AND be granted access to models and permissions.\n\nThe embed user's access is the union of permissions granted by the group_ids, models, and permissions properties.\n\nThis function does not strictly require all group_ids, user attribute names, or model names to exist at the moment the\nSSO embed url is created. Unknown group_id, user attribute names or model names will be passed through to the output URL.\nTo diagnose potential problems with an SSO embed URL, you can copy the signed URL into the Embed URI Validator text box in `<your looker instance>/admin/embed`.\n\nThe `secret_id` parameter is optional. If specified, its value must be the id of an active secret defined in the Looker instance.\nif not specified, the URL will be signed using the newest active secret defined in the Looker instance.\n\n#### Security Note\nProtect this signed URL as you would an access token or password credentials - do not write\nit to disk, do not pass it to a third party, and only pass it through a secure HTTPS\nencrypted transport.\n\n\nCalls to this endpoint require [Embedding](https://cloud.google.com/looker/docs/r/looker-core-feature-embed) to be enabled\n", "parameters": [{"name": "body", "in": "body", "description": "SSO parameters", "required": true, "schema": {"$ref": "#/definitions/EmbedSsoParams"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Signed SSO URL", "schema": {"$ref": "#/definitions/EmbedUrlResponse"}}}, "x-looker-status": "stable", "x-looker-activity-type": "none"}}, "/embed/token_url/me": {"post": {"tags": ["Auth"], "operationId": "create_embed_url_as_me", "summary": "Create Embed URL", "description": "### Create an Embed URL\n\nCreates an embed URL that runs as the Looker user making this API call. (\"Embed as me\")\nThis embed URL can then be used to instantiate a Looker embed session in a\n\"Powered by Looker\" (PBL) web application.\n\nThis is similar to Private Embedding (https://cloud.google.com/looker/docs/r/admin/embed/private-embed). Instead of\nof logging into the Web UI to authenticate, the user has already authenticated against the API to be able to\nmake this call. However, unlike Private Embed where the user has access to any other part of the Looker UI,\nthe embed web session created by requesting the EmbedUrlResponse.url in a browser only has access to\ncontent visible under the `/embed` context.\n\nAn embed URL can only be used once, and must be used within 5 minutes of being created. After it\nhas been used to request a page from the Looker server, the URL is invalid. Future requests using\nthe same URL will fail. This is to prevent 'replay attacks'.\n\nThe `target_url` property must be a complete URL of a Looker Embedded UI page - scheme, hostname, path starting with \"/embed\" and query params.\nTo load a dashboard with id 56 and with a filter of `Date=1 years`, the looker Embed URL would look like `https://myname.looker.com/embed/dashboards/56?Date=1%20years`.\nThe best way to obtain this target_url is to navigate to the desired Looker page in your web browser,\ncopy the URL shown in the browser address bar, insert \"/embed\" after the host/port, and paste it into the `target_url` property as a quoted string value in this API request.\n\n#### Security Note\nProtect this signed URL as you would an access token or password credentials - do not write\nit to disk, do not pass it to a third party, and only pass it through a secure HTTPS\nencrypted transport.\n\n\nCalls to this endpoint require [Embedding](https://cloud.google.com/looker/docs/r/looker-core-feature-embed) to be enabled\n", "parameters": [{"name": "body", "in": "body", "description": "Embed parameters", "required": true, "schema": {"$ref": "#/definitions/EmbedParams"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Embed URL", "schema": {"$ref": "#/definitions/EmbedUrlResponse"}}}, "x-looker-status": "stable", "x-looker-activity-type": "none"}}, "/embed/cookieless_session/acquire": {"post": {"tags": ["Auth"], "operationId": "acquire_embed_cookieless_session", "summary": "Create Acquire cookieless embed session", "description": "### Acquire a cookieless embed session.\n\nThe acquire session endpoint negates the need for signing the embed url and passing it as a parameter\nto the embed login. This endpoint accepts an embed user definition and creates or updates it. This is\nsimilar behavior to the embed SSO login as they both can create and update embed user data.\n\nThe endpoint also accepts an optional `session_reference_token`. If present and the session has not expired\nand the credentials match the credentials for the embed session, a new authentication token will be\ngenerated. This allows the embed session to attach a new embedded IFRAME to the embed session. Note that\nthe session is NOT extended in this scenario. In other words the session_length parameter is ignored.\n\n**IMPORTANT:** If the `session_reference_token` is provided and the session has NOT expired, the embed user\nis NOT updated. This is done for performance reasons and to support the embed SSO usecase where the\nfirst IFRAME created on a page uses a signed url and subsequently created IFRAMEs do not.\n\nIf the `session_reference_token` is provided but the session has expired, the token will be ignored and a\nnew embed session will be created. Note that the embed user definition will be updated in this scenario.\n\nIf the credentials do not match the credentials associated with an exisiting session_reference_token, a\n404 will be returned.\n\nThe endpoint returns the following:\n- Authentication token - a token that is passed to `/embed/login` endpoint that creates or attaches to the\n  embed session. This token can be used once and has a lifetime of 30 seconds.\n- Session reference token - a token that lives for the length of the session. This token is used to\n  generate new api and navigation tokens OR create new embed IFRAMEs.\n- Api token - lives for 10 minutes. The Looker client will ask for this token once it is loaded into the\n  iframe.\n- Navigation token - lives for 10 minutes. The Looker client will ask for this token once it is loaded into\n  the iframe.\n\nCalls to this endpoint require [Embedding](https://cloud.google.com/looker/docs/r/looker-core-feature-embed) to be enabled\n", "parameters": [{"name": "body", "in": "body", "description": "Embed user details", "required": true, "schema": {"$ref": "#/definitions/EmbedCookielessSessionAcquire"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Embed cookieless acquire session response", "schema": {"$ref": "#/definitions/EmbedCookielessSessionAcquireResponse"}}}, "x-looker-status": "stable", "x-looker-activity-type": "none"}}, "/embed/cookieless_session/{session_reference_token}": {"delete": {"tags": ["Auth"], "operationId": "delete_embed_cookieless_session", "summary": "Delete cookieless embed session", "description": "### Delete cookieless embed session\n\nThis will delete the session associated with the given session reference token. Calling this endpoint will result\nin the session and session reference data being cleared from the system. This endpoint can be used to log an embed\nuser out of the Looker instance.\n\nCalls to this endpoint require [Embedding](https://cloud.google.com/looker/docs/r/looker-core-feature-embed) to be enabled\n", "parameters": [{"name": "session_reference_token", "in": "path", "description": "Embed session reference token", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}}, "x-looker-status": "stable", "x-looker-activity-type": "none"}}, "/embed/cookieless_session/generate_tokens": {"put": {"tags": ["Auth"], "operationId": "generate_tokens_for_cookieless_session", "summary": "Generate tokens for cookieless embed session", "description": "### Generate api and navigation tokens for a cookieless embed session\n\nThe generate tokens endpoint is used to create new tokens of type:\n- Api token.\n- Navigation token.\nThe generate tokens endpoint should be called every time the Looker client asks for a token (except for the\nfirst time when the tokens returned by the acquire_session endpoint should be used).\n\nCalls to this endpoint require [Embedding](https://cloud.google.com/looker/docs/r/looker-core-feature-embed) to be enabled\n", "parameters": [{"name": "body", "in": "body", "description": "Embed session reference token", "required": true, "schema": {"$ref": "#/definitions/EmbedCookielessSessionGenerateTokens"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Generated api and navigations tokens for the cookieless embed session.", "schema": {"$ref": "#/definitions/EmbedCookielessSessionGenerateTokensResponse"}}}, "x-looker-status": "stable", "x-looker-activity-type": "none"}}, "/external_oauth_applications": {"get": {"tags": ["Connection"], "operationId": "all_external_oauth_applications", "summary": "Get All External OAuth Applications", "description": "### Get all External OAuth Applications.\n\nThis is an OAuth Application which Looker uses to access external systems.\n", "parameters": [{"name": "name", "in": "query", "description": "Application name", "required": false, "type": "string"}, {"name": "client_id", "in": "query", "description": "Application Client ID", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "External OAuth Application", "schema": {"type": "array", "items": {"$ref": "#/definitions/ExternalOauthApplication"}}}}, "x-looker-status": "beta", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Connection"], "operationId": "create_external_oauth_application", "summary": "Create External OAuth Application", "description": "### Create an OAuth Application using the specified configuration.\n\nThis is an OAuth Application which Looker uses to access external systems.\n", "parameters": [{"name": "body", "in": "body", "description": "External OAuth Application", "required": true, "schema": {"$ref": "#/definitions/ExternalOauthApplication"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "External OAuth Application", "schema": {"$ref": "#/definitions/ExternalOauthApplication"}}}, "x-looker-status": "beta", "x-looker-activity-type": "non_query"}}, "/external_oauth_applications/user_state": {"post": {"tags": ["Connection"], "operationId": "create_oauth_application_user_state", "summary": "Create Create OAuth user state.", "description": "### Create OAuth User state.\n", "parameters": [{"name": "body", "in": "body", "description": "Create OAuth user state.", "required": true, "schema": {"$ref": "#/definitions/CreateOAuthApplicationUserStateRequest"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Created user state", "schema": {"$ref": "#/definitions/CreateOAuthApplicationUserStateResponse"}}}, "x-looker-status": "beta", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/git_branches": {"get": {"tags": ["Project"], "operationId": "all_git_branches", "summary": "Get All Git Branches", "description": "### Get All Git Branches\n\nReturns a list of git branches in the project repository\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Git Branch", "schema": {"type": "array", "items": {"$ref": "#/definitions/GitBranch"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/git_branch": {"get": {"tags": ["Project"], "operationId": "git_branch", "summary": "Get Active Git Branch", "description": "### Get the Current Git Branch\n\nReturns the git branch currently checked out in the given project repository\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Git Branch", "schema": {"$ref": "#/definitions/GitBranch"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Project"], "operationId": "create_git_branch", "summary": "Checkout New Git Branch", "description": "### Create and Checkout a Git Branch\n\nCreates and checks out a new branch in the given project repository\nOnly allowed in development mode\n  - Call `update_session` to select the 'dev' workspace.\n\nOptionally specify a branch name, tag name or commit SHA as the start point in the ref field.\n  If no ref is specified, HEAD of the current branch will be used as the start point for the new branch.\n\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Git Branch", "required": true, "schema": {"$ref": "#/definitions/GitBranch"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Git Branch", "schema": {"$ref": "#/definitions/GitBranch"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "put": {"tags": ["Project"], "operationId": "update_git_branch", "summary": "Update Project Git Branch", "description": "### Checkout and/or reset --hard an existing Git Branch\n\nOnly allowed in development mode\n  - Call `update_session` to select the 'dev' workspace.\n\nCheckout an existing branch if name field is different from the name of the currently checked out branch.\n\nOptionally specify a branch name, tag name or commit SHA to which the branch should be reset.\n  **DANGER** hard reset will be force pushed to the remote. Unsaved changes and commits may be permanently lost.\n\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Git Branch", "required": true, "schema": {"$ref": "#/definitions/GitBranch"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Git Branch", "schema": {"$ref": "#/definitions/GitBranch"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/git_branch/{branch_name}": {"get": {"tags": ["Project"], "operationId": "find_git_branch", "summary": "Find a Git Branch", "description": "### Get the specified Git Branch\n\nReturns the git branch specified in branch_name path param if it exists in the given project repository\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}, {"name": "branch_name", "in": "path", "description": "Branch Name", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Git Branch", "schema": {"$ref": "#/definitions/GitBranch"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Project"], "operationId": "delete_git_branch", "summary": "Delete a Git Branch", "description": "### Delete the specified Git Branch\n\nDelete git branch specified in branch_name path param from local and remote of specified project repository\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}, {"name": "branch_name", "in": "path", "description": "Branch Name", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/groups": {"get": {"tags": ["Group"], "operationId": "all_groups", "summary": "Get All Groups", "description": "### Get information about all groups.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return only page N of paginated results", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "per_page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return N rows of data per page", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "limit", "in": "query", "description": "Number of results to return. (used with offset and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "ids", "in": "query", "description": "Optional of ids to get specific groups.", "required": false, "type": "array", "items": {"type": "string"}, "collectionFormat": "csv"}, {"name": "content_metadata_id", "in": "query", "description": "Id of content metadata to which groups must have access.", "required": false, "type": "string"}, {"name": "can_add_to_content_metadata", "in": "query", "description": "Select only groups that either can/cannot be given access to content.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Group", "schema": {"type": "array", "items": {"$ref": "#/definitions/Group"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Group"], "operationId": "create_group", "summary": "Create Group", "description": "### Creates a new group (admin only).\n", "parameters": [{"name": "body", "in": "body", "description": "Group", "required": true, "schema": {"$ref": "#/definitions/Group"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Group", "schema": {"$ref": "#/definitions/Group"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/groups/search": {"get": {"tags": ["Group"], "operationId": "search_groups", "summary": "Search Groups", "description": "### Search groups\n\nReturns all group records that match the given search criteria.\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "Number of results to return (used with `offset`).", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any (used with `limit`).", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression", "required": false, "type": "boolean"}, {"name": "id", "in": "query", "description": "Match group id.", "required": false, "type": "string"}, {"name": "name", "in": "query", "description": "Match group name.", "required": false, "type": "string"}, {"name": "external_group_id", "in": "query", "description": "Match group external_group_id.", "required": false, "type": "string"}, {"name": "externally_managed", "in": "query", "description": "Match group externally_managed.", "required": false, "type": "boolean"}, {"name": "externally_orphaned", "in": "query", "description": "Match group externally_orphaned.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Group", "schema": {"type": "array", "items": {"$ref": "#/definitions/Group"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/groups/search/with_roles": {"get": {"tags": ["Group"], "operationId": "search_groups_with_roles", "summary": "Search Groups with Roles", "description": "### Search groups include roles\n\nReturns all group records that match the given search criteria, and attaches any associated roles.\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "Number of results to return (used with `offset`).", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any (used with `limit`).", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression", "required": false, "type": "boolean"}, {"name": "id", "in": "query", "description": "Match group id.", "required": false, "type": "string"}, {"name": "name", "in": "query", "description": "Match group name.", "required": false, "type": "string"}, {"name": "external_group_id", "in": "query", "description": "Match group external_group_id.", "required": false, "type": "string"}, {"name": "externally_managed", "in": "query", "description": "Match group externally_managed.", "required": false, "type": "boolean"}, {"name": "externally_orphaned", "in": "query", "description": "Match group externally_orphaned.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Group", "schema": {"type": "array", "items": {"$ref": "#/definitions/GroupSearch"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/groups/search/with_hierarchy": {"get": {"tags": ["Group"], "operationId": "search_groups_with_hierarchy", "summary": "Search Groups with Hierarchy", "description": "### Search groups include hierarchy\n\nReturns all group records that match the given search criteria, and attaches\nassociated role_ids and parent group_ids.\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "Number of results to return (used with `offset`).", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any (used with `limit`).", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression", "required": false, "type": "boolean"}, {"name": "id", "in": "query", "description": "Match group id.", "required": false, "type": "string"}, {"name": "name", "in": "query", "description": "Match group name.", "required": false, "type": "string"}, {"name": "external_group_id", "in": "query", "description": "Match group external_group_id.", "required": false, "type": "string"}, {"name": "externally_managed", "in": "query", "description": "Match group externally_managed.", "required": false, "type": "boolean"}, {"name": "externally_orphaned", "in": "query", "description": "Match group externally_orphaned.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Group", "schema": {"type": "array", "items": {"$ref": "#/definitions/GroupHierarchy"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/groups/{group_id}": {"get": {"tags": ["Group"], "operationId": "group", "summary": "Get Group", "description": "### Get information about a group.\n", "parameters": [{"name": "group_id", "in": "path", "description": "Id of group", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Group", "schema": {"$ref": "#/definitions/Group"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Group"], "operationId": "update_group", "summary": "Update Group", "description": "### Updates the a group (admin only).", "parameters": [{"name": "group_id", "in": "path", "description": "Id of group", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Group", "required": true, "schema": {"$ref": "#/definitions/Group"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Group", "schema": {"$ref": "#/definitions/Group"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Group"], "operationId": "delete_group", "summary": "Delete Group", "description": "### Deletes a group (admin only).\n", "parameters": [{"name": "group_id", "in": "path", "description": "Id of group", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/groups/{group_id}/groups": {"get": {"tags": ["Group"], "operationId": "all_group_groups", "summary": "Get All Groups in Group", "description": "### Get information about all the groups in a group\n", "parameters": [{"name": "group_id", "in": "path", "description": "Id of group", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "All groups in group.", "schema": {"type": "array", "items": {"$ref": "#/definitions/Group"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Group"], "operationId": "add_group_group", "summary": "Add a Group to Group", "description": "### Adds a new group to a group.\n", "parameters": [{"name": "group_id", "in": "path", "description": "Id of group", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Group id to add", "required": true, "schema": {"$ref": "#/definitions/GroupIdForGroupInclusion"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Added group.", "schema": {"$ref": "#/definitions/Group"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/groups/{group_id}/users": {"get": {"tags": ["Group"], "operationId": "all_group_users", "summary": "Get All Users in Group", "description": "### Get information about all the users directly included in a group.\n", "parameters": [{"name": "group_id", "in": "path", "description": "Id of group", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return only page N of paginated results", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "per_page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return N rows of data per page", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "limit", "in": "query", "description": "Number of results to return. (used with offset and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "All users in group.", "schema": {"type": "array", "items": {"$ref": "#/definitions/User"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Group"], "operationId": "add_group_user", "summary": "Add a User to Group", "description": "### Adds a new user to a group.\n", "parameters": [{"name": "group_id", "in": "path", "description": "Id of group", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "User id to add", "required": true, "schema": {"$ref": "#/definitions/GroupIdForGroupUserInclusion"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Added user.", "schema": {"$ref": "#/definitions/User"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/groups/{group_id}/users/{user_id}": {"delete": {"tags": ["Group"], "operationId": "delete_group_user", "summary": "Remove a User from Group", "description": "### Removes a user from a group.\n", "parameters": [{"name": "group_id", "in": "path", "description": "Id of group", "required": true, "type": "string"}, {"name": "user_id", "in": "path", "description": "Id of user to remove from group", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "User successfully removed from group"}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/groups/{group_id}/groups/{deleting_group_id}": {"delete": {"tags": ["Group"], "operationId": "delete_group_from_group", "summary": "Deletes a Group from Group", "description": "### Removes a group from a group.\n", "parameters": [{"name": "group_id", "in": "path", "description": "Id of group", "required": true, "type": "string"}, {"name": "deleting_group_id", "in": "path", "description": "Id of group to delete", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Group successfully deleted"}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/groups/{group_id}/attribute_values/{user_attribute_id}": {"patch": {"tags": ["Group"], "operationId": "update_user_attribute_group_value", "summary": "Set User Attribute Group Value", "description": "### Set the value of a user attribute for a group.\n\nFor information about how user attribute values are calculated, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).\n", "parameters": [{"name": "group_id", "in": "path", "description": "Id of group", "required": true, "type": "string"}, {"name": "user_attribute_id", "in": "path", "description": "Id of user attribute", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "New value for group.", "required": true, "schema": {"$ref": "#/definitions/UserAttributeGroupValue"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Group value object.", "schema": {"$ref": "#/definitions/UserAttributeGroupValue"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Group"], "operationId": "delete_user_attribute_group_value", "summary": "Delete User Attribute Group Value", "description": "### Remove a user attribute value from a group.\n", "parameters": [{"name": "group_id", "in": "path", "description": "Id of group", "required": true, "type": "string"}, {"name": "user_attribute_id", "in": "path", "description": "Id of user attribute", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Value successfully unset"}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/boards": {"get": {"tags": ["Board"], "operationId": "all_boards", "summary": "Get All Boards", "description": "### Get information about all boards.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Board", "schema": {"type": "array", "items": {"$ref": "#/definitions/Board"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Board"], "operationId": "create_board", "summary": "Create Board", "description": "### Create a new board.\n", "parameters": [{"name": "body", "in": "body", "description": "Board", "required": true, "schema": {"$ref": "#/definitions/Board"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Board", "schema": {"$ref": "#/definitions/Board"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/boards/search": {"get": {"tags": ["Board"], "operationId": "search_boards", "summary": "Search Boards", "description": "### Search Boards\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n", "parameters": [{"name": "title", "in": "query", "description": "Matches board title.", "required": false, "type": "string"}, {"name": "created_at", "in": "query", "description": "Matches the timestamp for when the board was created.", "required": false, "type": "string"}, {"name": "first_name", "in": "query", "description": "The first name of the user who created this board.", "required": false, "type": "string"}, {"name": "last_name", "in": "query", "description": "The last name of the user who created this board.", "required": false, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "favorited", "in": "query", "description": "Return favorited boards when true.", "required": false, "type": "boolean"}, {"name": "creator_id", "in": "query", "description": "Filter on boards created by a particular user.", "required": false, "type": "string"}, {"name": "sorts", "in": "query", "description": "The fields to sort the results by", "required": false, "type": "string"}, {"name": "page", "in": "query", "description": "The page to return. DEPRECATED. Use offset instead.", "required": false, "type": "integer", "format": "int64"}, {"name": "per_page", "in": "query", "description": "The number of items in the returned page. DEPRECATED. Use limit instead.", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "The number of items to skip before returning any. (used with limit and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "limit", "in": "query", "description": "The maximum number of items to return. (used with offset and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression", "required": false, "type": "boolean"}, {"name": "permission", "in": "query", "description": "Filter results based on permission, either show (default) or update", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "boards", "schema": {"type": "array", "items": {"$ref": "#/definitions/Board"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/boards/{board_id}": {"get": {"tags": ["Board"], "operationId": "board", "summary": "Get Board", "description": "### Get information about a board.\n", "parameters": [{"name": "board_id", "in": "path", "description": "Id of board", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Board", "schema": {"$ref": "#/definitions/Board"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Board"], "operationId": "update_board", "summary": "Update Board", "description": "### Update a board definition.\n", "parameters": [{"name": "board_id", "in": "path", "description": "Id of board", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Board", "required": true, "schema": {"$ref": "#/definitions/Board"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Board", "schema": {"$ref": "#/definitions/Board"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Board"], "operationId": "delete_board", "summary": "Delete Board", "description": "### Delete a board.\n", "parameters": [{"name": "board_id", "in": "path", "description": "Id of board", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/board_items": {"get": {"tags": ["Board"], "operationId": "all_board_items", "summary": "Get All Board Items", "description": "### Get information about all board items.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "board_section_id", "in": "query", "description": "Filter to a specific board section", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Board Item", "schema": {"type": "array", "items": {"$ref": "#/definitions/BoardItem"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Board"], "operationId": "create_board_item", "summary": "Create Board Item", "description": "### Create a new board item.\n", "parameters": [{"name": "body", "in": "body", "description": "Board Item", "required": true, "schema": {"$ref": "#/definitions/BoardItem"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Board Item", "schema": {"$ref": "#/definitions/BoardItem"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/board_items/{board_item_id}": {"get": {"tags": ["Board"], "operationId": "board_item", "summary": "Get Board Item", "description": "### Get information about a board item.\n", "parameters": [{"name": "board_item_id", "in": "path", "description": "Id of board item", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Board Item", "schema": {"$ref": "#/definitions/BoardItem"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Board"], "operationId": "update_board_item", "summary": "Update Board Item", "description": "### Update a board item definition.\n", "parameters": [{"name": "board_item_id", "in": "path", "description": "Id of board item", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Board Item", "required": true, "schema": {"$ref": "#/definitions/BoardItem"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Board Item", "schema": {"$ref": "#/definitions/BoardItem"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Board"], "operationId": "delete_board_item", "summary": "Delete Board Item", "description": "### Delete a board item.\n", "parameters": [{"name": "board_item_id", "in": "path", "description": "Id of board item", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/primary_homepage_sections": {"get": {"tags": ["Homepage"], "operationId": "all_primary_homepage_sections", "summary": "Get All Primary homepage sections", "description": "### Get information about the primary homepage's sections.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Primary homepage section", "schema": {"type": "array", "items": {"$ref": "#/definitions/HomepageSection"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/board_sections": {"get": {"tags": ["Board"], "operationId": "all_board_sections", "summary": "Get All Board sections", "description": "### Get information about all board sections.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Board section", "schema": {"type": "array", "items": {"$ref": "#/definitions/BoardSection"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Board"], "operationId": "create_board_section", "summary": "Create Board section", "description": "### Create a new board section.\n", "parameters": [{"name": "body", "in": "body", "description": "Board section", "required": true, "schema": {"$ref": "#/definitions/BoardSection"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Board section", "schema": {"$ref": "#/definitions/BoardSection"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/board_sections/{board_section_id}": {"get": {"tags": ["Board"], "operationId": "board_section", "summary": "Get Board section", "description": "### Get information about a board section.\n", "parameters": [{"name": "board_section_id", "in": "path", "description": "Id of board section", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Board section", "schema": {"$ref": "#/definitions/BoardSection"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Board"], "operationId": "update_board_section", "summary": "Update Board section", "description": "### Update a board section definition.\n", "parameters": [{"name": "board_section_id", "in": "path", "description": "Id of board section", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Board section", "required": true, "schema": {"$ref": "#/definitions/BoardSection"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Board section", "schema": {"$ref": "#/definitions/BoardSection"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Board"], "operationId": "delete_board_section", "summary": "Delete Board section", "description": "### Delete a board section.\n", "parameters": [{"name": "board_section_id", "in": "path", "description": "Id of board section", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/integration_hubs": {"get": {"tags": ["Integration"], "operationId": "all_integration_hubs", "summary": "Get All Integration Hubs", "description": "### Get information about all Integration Hubs.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Integration Hub", "schema": {"type": "array", "items": {"$ref": "#/definitions/IntegrationHub"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Integration"], "operationId": "create_integration_hub", "summary": "Create Integration Hub", "description": "### Create a new Integration Hub.\n\nThis API is rate limited to prevent it from being used for SSRF attacks\n", "parameters": [{"name": "body", "in": "body", "description": "Integration Hub", "required": true, "schema": {"$ref": "#/definitions/IntegrationHub"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Integration Hub", "schema": {"$ref": "#/definitions/IntegrationHub"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query", "x-looker-rate-limited": true}}, "/integration_hubs/{integration_hub_id}": {"get": {"tags": ["Integration"], "operationId": "integration_hub", "summary": "Get Integration Hub", "description": "### Get information about a Integration Hub.\n", "parameters": [{"name": "integration_hub_id", "in": "path", "description": "Id of integration_hub", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Integration Hub", "schema": {"$ref": "#/definitions/IntegrationHub"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Integration"], "operationId": "update_integration_hub", "summary": "Update Integration Hub", "description": "### Update a Integration Hub definition.\n\nThis API is rate limited to prevent it from being used for SSRF attacks\n", "parameters": [{"name": "integration_hub_id", "in": "path", "description": "Id of integration_hub", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Integration Hub", "required": true, "schema": {"$ref": "#/definitions/IntegrationHub"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Integration Hub", "schema": {"$ref": "#/definitions/IntegrationHub"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query", "x-looker-rate-limited": true}, "delete": {"tags": ["Integration"], "operationId": "delete_integration_hub", "summary": "Delete Integration Hub", "description": "### Delete a Integration Hub.\n", "parameters": [{"name": "integration_hub_id", "in": "path", "description": "Id of integration_hub", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/integration_hubs/{integration_hub_id}/accept_legal_agreement": {"post": {"tags": ["Integration"], "operationId": "accept_integration_hub_legal_agreement", "summary": "Accept Integration Hub Legal Agreement", "description": "Accepts the legal agreement for a given integration hub. This only works for integration hubs that have legal_agreement_required set to true and legal_agreement_signed set to false.", "parameters": [{"name": "integration_hub_id", "in": "path", "description": "Id of integration_hub", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Integration hub", "schema": {"$ref": "#/definitions/IntegrationHub"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/integrations": {"get": {"tags": ["Integration"], "operationId": "all_integrations", "summary": "Get All Integrations", "description": "### Get information about all Integrations.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "integration_hub_id", "in": "query", "description": "Filter to a specific provider", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Integration", "schema": {"type": "array", "items": {"$ref": "#/definitions/Integration"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/integrations/{integration_id}": {"get": {"tags": ["Integration"], "operationId": "integration", "summary": "Get Integration", "description": "### Get information about a Integration.\n", "parameters": [{"name": "integration_id", "in": "path", "description": "Id of integration", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Integration", "schema": {"$ref": "#/definitions/Integration"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Integration"], "operationId": "update_integration", "summary": "Update Integration", "description": "### Update parameters on a Integration.\n", "parameters": [{"name": "integration_id", "in": "path", "description": "Id of integration", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Integration", "required": true, "schema": {"$ref": "#/definitions/Integration"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Integration", "schema": {"$ref": "#/definitions/Integration"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/integrations/{integration_id}/form": {"post": {"tags": ["Integration"], "operationId": "fetch_integration_form", "summary": "Fetch Remote Integration Form", "description": "Returns the Integration form for presentation to the user.", "parameters": [{"name": "integration_id", "in": "path", "description": "Id of integration", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Integration Form Request", "required": false, "schema": {"type": "object", "additionalProperties": {"type": "string"}}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Data Action Form", "schema": {"$ref": "#/definitions/DataActionForm"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/integrations/{integration_id}/test": {"post": {"tags": ["Integration"], "operationId": "test_integration", "summary": "Test integration", "description": "Tests the integration to make sure all the settings are working.", "parameters": [{"name": "integration_id", "in": "path", "description": "Id of integration", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Test Result", "schema": {"$ref": "#/definitions/IntegrationTestResult"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/internal_help_resources_content": {"get": {"tags": ["Config"], "operationId": "internal_help_resources_content", "summary": "Get Internal Help Resources Content", "description": "### Set the menu item name and content for internal help resources\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Internal Help Resources Content", "schema": {"$ref": "#/definitions/InternalHelpResourcesContent"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Config"], "operationId": "update_internal_help_resources_content", "summary": "Update internal help resources content", "description": "Update internal help resources content\n", "parameters": [{"name": "body", "in": "body", "description": "Internal Help Resources Content", "required": true, "schema": {"$ref": "#/definitions/InternalHelpResourcesContent"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Internal Help Resources Content", "schema": {"$ref": "#/definitions/InternalHelpResourcesContent"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/internal_help_resources_enabled": {"get": {"tags": ["Config"], "operationId": "internal_help_resources", "summary": "Get Internal Help Resources", "description": "### Get and set the options for internal help resources\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Internal Help Resources", "schema": {"$ref": "#/definitions/InternalHelpResources"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/internal_help_resources": {"patch": {"tags": ["Config"], "operationId": "update_internal_help_resources", "summary": "Update internal help resources configuration", "description": "Update internal help resources settings\n", "parameters": [{"name": "body", "in": "body", "description": "Custom Welcome Email", "required": true, "schema": {"$ref": "#/definitions/InternalHelpResources"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Custom Welcome Email", "schema": {"$ref": "#/definitions/InternalHelpResources"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/ldap_config": {"get": {"tags": ["Auth"], "operationId": "ldap_config", "summary": "Get LDAP Configuration", "description": "### Get the LDAP configuration.\n\nLooker can be optionally configured to authenticate users against an Active Directory or other LDAP directory server.\nLDAP setup requires coordination with an administrator of that directory server.\n\nOnly Looker administrators can read and update the LDAP configuration.\n\nConfiguring LDAP impacts authentication for all users. This configuration should be done carefully.\n\nLooker maintains a single LDAP configuration. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).\n\nLDAP is enabled or disabled for Looker using the **enabled** field.\n\nLooker will never return an **auth_password** field. That value can be set, but never retrieved.\n\nSee the [Looker LDAP docs](https://cloud.google.com/looker/docs/r/api/ldap_setup) for additional information.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "responses": {"403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "LDAP Configuration.", "schema": {"$ref": "#/definitions/LDAPConfig"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Auth"], "operationId": "update_ldap_config", "summary": "Update LDAP Configuration", "description": "### Update the LDAP configuration.\n\nConfiguring LDAP impacts authentication for all users. This configuration should be done carefully.\n\nOnly Looker administrators can read and update the LDAP configuration.\n\nLDAP is enabled or disabled for Looker using the **enabled** field.\n\nIt is **highly** recommended that any LDAP setting changes be tested using the APIs below before being set globally.\n\nSee the [Looker LDAP docs](https://cloud.google.com/looker/docs/r/api/ldap_setup) for additional information.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "body", "in": "body", "description": "LDAP Config", "required": true, "schema": {"$ref": "#/definitions/LDAPConfig"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "New state for LDAP Configuration.", "schema": {"$ref": "#/definitions/LDAPConfig"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/ldap_config/test_connection": {"put": {"tags": ["Auth"], "operationId": "test_ldap_config_connection", "summary": "Test LDAP Connection", "description": "### Test the connection settings for an LDAP configuration.\n\nThis tests that the connection is possible given a connection_host and connection_port.\n\n**connection_host** and **connection_port** are required. **connection_tls** is optional.\n\nExample:\n```json\n{\n  \"connection_host\": \"ldap.example.com\",\n  \"connection_port\": \"636\",\n  \"connection_tls\": true\n}\n```\n\nNo authentication to the LDAP server is attempted.\n\nThe active LDAP settings are not modified.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "body", "in": "body", "description": "LDAP Config", "required": true, "schema": {"$ref": "#/definitions/LDAPConfig"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Result info.", "schema": {"$ref": "#/definitions/LDAPConfigTestResult"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/ldap_config/test_auth": {"put": {"tags": ["Auth"], "operationId": "test_ldap_config_auth", "summary": "Test LDAP Auth", "description": "### Test the connection authentication settings for an LDAP configuration.\n\nThis tests that the connection is possible and that a 'server' account to be used by Looker can       authenticate to the LDAP server given connection and authentication information.\n\n**connection_host**, **connection_port**, and **auth_username**, are required.       **connection_tls** and **auth_password** are optional.\n\nExample:\n```json\n{\n  \"connection_host\": \"ldap.example.com\",\n  \"connection_port\": \"636\",\n  \"connection_tls\": true,\n  \"auth_username\": \"cn=looker,dc=example,dc=com\",\n  \"auth_password\": \"secret\"\n}\n```\n\nLooker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.\n\nThe active LDAP settings are not modified.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "body", "in": "body", "description": "LDAP Config", "required": true, "schema": {"$ref": "#/definitions/LDAPConfig"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Result info.", "schema": {"$ref": "#/definitions/LDAPConfigTestResult"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/ldap_config/test_user_info": {"put": {"tags": ["Auth"], "operationId": "test_ldap_config_user_info", "summary": "Test LDAP User Info", "description": "### Test the user authentication settings for an LDAP configuration without authenticating the user.\n\nThis test will let you easily test the mapping for user properties and roles for any user without      needing to authenticate as that user.\n\nThis test accepts a full LDAP configuration along with a username and attempts to find the full info      for the user from the LDAP server without actually authenticating the user. So, user password is not      required.The configuration is validated before attempting to contact the server.\n\n**test_ldap_user** is required.\n\nThe active LDAP settings are not modified.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "body", "in": "body", "description": "LDAP Config", "required": true, "schema": {"$ref": "#/definitions/LDAPConfig"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Result info.", "schema": {"$ref": "#/definitions/LDAPConfigTestResult"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/ldap_config/test_user_auth": {"put": {"tags": ["Auth"], "operationId": "test_ldap_config_user_auth", "summary": "Test LDAP User Auth", "description": "### Test the user authentication settings for an LDAP configuration.\n\nThis test accepts a full LDAP configuration along with a username/password pair and attempts to       authenticate the user with the LDAP server. The configuration is validated before attempting the       authentication.\n\nLooker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.\n\n**test_ldap_user** and **test_ldap_password** are required.\n\nThe active LDAP settings are not modified.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "body", "in": "body", "description": "LDAP Config", "required": true, "schema": {"$ref": "#/definitions/LDAPConfig"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Result info.", "schema": {"$ref": "#/definitions/LDAPConfigTestResult"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/legacy_features": {"get": {"tags": ["Config"], "operationId": "all_legacy_features", "summary": "Get All Legacy Features", "description": "### Get all legacy features.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Legacy Feature", "schema": {"type": "array", "items": {"$ref": "#/definitions/LegacyFeature"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/legacy_features/{legacy_feature_id}": {"get": {"tags": ["Config"], "operationId": "legacy_feature", "summary": "Get Legacy Feature", "description": "### Get information about the legacy feature with a specific id.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "legacy_feature_id", "in": "path", "description": "id of legacy feature", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Legacy Feature", "schema": {"$ref": "#/definitions/LegacyFeature"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Config"], "operationId": "update_legacy_feature", "summary": "Update Legacy Feature", "description": "### Update information about the legacy feature with a specific id.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "legacy_feature_id", "in": "path", "description": "id of legacy feature", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Legacy Feature", "required": true, "schema": {"$ref": "#/definitions/LegacyFeature"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Legacy Feature", "schema": {"$ref": "#/definitions/LegacyFeature"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/locales": {"get": {"tags": ["Config"], "operationId": "all_locales", "summary": "Get All Locales", "description": "### Get a list of locales that Looker supports.\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Locale", "schema": {"type": "array", "items": {"$ref": "#/definitions/Locale"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/looks": {"get": {"tags": ["Look"], "operationId": "all_looks", "summary": "Get All Looks", "description": "### Get information about all active Looks\n\nReturns an array of **abbreviated Look objects** describing all the looks that the caller has access to. Soft-deleted Looks are **not** included.\n\nGet the **full details** of a specific look by id with [look(id)](#!/Look/look)\n\nFind **soft-deleted looks** with [search_looks()](#!/Look/search_looks)\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Look", "schema": {"type": "array", "items": {"$ref": "#/definitions/Look"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Look"], "operationId": "create_look", "summary": "Create Look", "description": "### Create a Look\n\nTo create a look to display query data, first create the query with [create_query()](#!/Query/create_query)\nthen assign the query's id to the `query_id` property in the call to `create_look()`.\n\nTo place the look into a particular space, assign the space's id to the `space_id` property\nin the call to `create_look()`.\n", "parameters": [{"name": "body", "in": "body", "description": "Look", "required": true, "schema": {"$ref": "#/definitions/LookWithQuery"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Look", "schema": {"$ref": "#/definitions/LookWithQuery"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/looks/search": {"get": {"tags": ["Look"], "operationId": "search_looks", "summary": "Search Looks", "description": "### Search Looks\n\nReturns an **array of Look objects** that match the specified search criteria.\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n\nGet a **single look** by id with [look(id)](#!/Look/look)\n", "parameters": [{"name": "id", "in": "query", "description": "Match look id.", "required": false, "type": "string"}, {"name": "title", "in": "query", "description": "Match Look title.", "required": false, "type": "string"}, {"name": "description", "in": "query", "description": "Match Look description.", "required": false, "type": "string"}, {"name": "content_favorite_id", "in": "query", "description": "Select looks with a particular content favorite id", "required": false, "type": "string"}, {"name": "folder_id", "in": "query", "description": "Select looks in a particular folder.", "required": false, "type": "string"}, {"name": "user_id", "in": "query", "description": "Select looks created by a particular user.", "required": false, "type": "string"}, {"name": "view_count", "in": "query", "description": "Select looks with particular view_count value", "required": false, "type": "string"}, {"name": "deleted", "in": "query", "description": "Select soft-deleted looks", "required": false, "type": "boolean"}, {"name": "query_id", "in": "query", "description": "Select looks that reference a particular query by query_id", "required": false, "type": "string"}, {"name": "curate", "in": "query", "description": "Exclude items that exist only in personal spaces other than the users", "required": false, "type": "boolean"}, {"name": "last_viewed_at", "in": "query", "description": "Select looks based on when they were last viewed", "required": false, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return only page N of paginated results", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "per_page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return N rows of data per page", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "limit", "in": "query", "description": "Number of results to return. (used with offset and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "One or more fields to sort results by. Sortable fields: [:title, :user_id, :id, :created_at, :space_id, :folder_id, :description, :updated_at, :last_updater_id, :view_count, :favorite_count, :content_favorite_id, :deleted, :deleted_at, :last_viewed_at, :last_accessed_at, :query_id]", "required": false, "type": "string"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "looks", "schema": {"type": "array", "items": {"$ref": "#/definitions/Look"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/looks/{look_id}": {"get": {"tags": ["Look"], "operationId": "look", "summary": "Get Look", "description": "### Get a Look.\n\nReturns detailed information about a Look and its associated Query.\n\n", "parameters": [{"name": "look_id", "in": "path", "description": "Id of look", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Look", "schema": {"$ref": "#/definitions/LookWithQuery"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Look"], "operationId": "update_look", "summary": "Update Look", "description": "### Modify a Look\n\nUse this function to modify parts of a look. Property values given in a call to `update_look` are\napplied to the existing look, so there's no need to include properties whose values are not changing.\nIt's best to specify only the properties you want to change and leave everything else out\nof your `update_look` call. **Look properties marked 'read-only' will be ignored.**\n\nWhen a user deletes a look in the Looker UI, the look data remains in the database but is\nmarked with a deleted flag (\"soft-deleted\"). Soft-deleted looks can be undeleted (by an admin)\nif the delete was in error.\n\nTo soft-delete a look via the API, use [update_look()](#!/Look/update_look) to change the look's `deleted` property to `true`.\nYou can undelete a look by calling `update_look` to change the look's `deleted` property to `false`.\n\nSoft-deleted looks are excluded from the results of [all_looks()](#!/Look/all_looks) and [search_looks()](#!/Look/search_looks), so they\nessentially disappear from view even though they still reside in the db.\nIn API 3.1 and later, you can pass `deleted: true` as a parameter to [search_looks()](#!/3.1/Look/search_looks) to list soft-deleted looks.\n\nNOTE: [delete_look()](#!/Look/delete_look) performs a \"hard delete\" - the look data is removed from the Looker\ndatabase and destroyed. There is no \"undo\" for `delete_look()`.\n", "parameters": [{"name": "look_id", "in": "path", "description": "Id of look", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Look", "required": true, "schema": {"$ref": "#/definitions/LookWithQuery"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Look", "schema": {"$ref": "#/definitions/LookWithQuery"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Look"], "operationId": "delete_look", "summary": "Delete Look", "description": "### Permanently Delete a Look\n\nThis operation **permanently** removes a look from the Looker database.\n\nNOTE: There is no \"undo\" for this kind of delete.\n\nFor information about soft-delete (which can be undone) see [update_look()](#!/Look/update_look).\n", "parameters": [{"name": "look_id", "in": "path", "description": "Id of look", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/looks/{look_id}/run/{result_format}": {"get": {"tags": ["Look"], "operationId": "run_look", "summary": "Run Look", "description": "### Run a Look\n\nRuns a given look's query and returns the results in the requested format.\n\nSupported formats:\n\n| result_format | Description\n| :-----------: | :--- |\n| json | Plain json\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| md | Simple markdown\n| xlsx | MS Excel spreadsheet\n| sql | Returns the generated SQL rather than running the query\n| png | A PNG image of the visualization of the query\n| jpg | A JPG image of the visualization of the query\n\n\n", "produces": ["text", "application/json", "image/png", "image/jpeg"], "parameters": [{"name": "look_id", "in": "path", "description": "Id of look", "required": true, "type": "string"}, {"name": "result_format", "in": "path", "description": "Format of result", "required": true, "type": "string"}, {"name": "limit", "in": "query", "description": "Row limit (may override the limit in the saved query).", "required": false, "type": "integer", "format": "int64"}, {"name": "apply_formatting", "in": "query", "description": "Apply model-specified formatting to each result.", "required": false, "type": "boolean"}, {"name": "apply_vis", "in": "query", "description": "Apply visualization options to results.", "required": false, "type": "boolean"}, {"name": "cache", "in": "query", "description": "Get results from cache if available.", "required": false, "type": "boolean"}, {"name": "image_width", "in": "query", "description": "Render width for image formats.", "required": false, "type": "integer", "format": "int64"}, {"name": "image_height", "in": "query", "description": "Render height for image formats.", "required": false, "type": "integer", "format": "int64"}, {"name": "generate_drill_links", "in": "query", "description": "Generate drill links (only applicable to 'json_detail' format.", "required": false, "type": "boolean"}, {"name": "force_production", "in": "query", "description": "Force use of production models even if the user is in development mode. Note that this flag being false does not guarantee development models will be used.", "required": false, "type": "boolean"}, {"name": "cache_only", "in": "query", "description": "Retrieve any results from cache even if the results have expired.", "required": false, "type": "boolean"}, {"name": "path_prefix", "in": "query", "description": "Prefix to use for drill links (url encoded).", "required": false, "type": "string"}, {"name": "rebuild_pdts", "in": "query", "description": "Rebuild PDTS used in query.", "required": false, "type": "boolean"}, {"name": "server_table_calcs", "in": "query", "description": "Perform table calculations on query results", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Look", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/looks/{look_id}/copy": {"post": {"tags": ["Look"], "operationId": "copy_look", "summary": "Copy Look", "description": "### Copy an existing look\n\nCreates a copy of an existing look, in a specified folder, and returns the copied look.\n\n`look_id` and `folder_id` are required.\n\n`look_id` and `folder_id` must already exist, and `folder_id` must be different from the current `folder_id` of the dashboard.\n", "parameters": [{"name": "look_id", "in": "path", "description": "Look id to copy.", "required": true, "type": "string"}, {"name": "folder_id", "in": "query", "description": "Folder id to copy to.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Look", "schema": {"$ref": "#/definitions/LookWithQuery"}}, "201": {"description": "look", "schema": {"$ref": "#/definitions/Look"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/looks/{look_id}/move": {"patch": {"tags": ["Look"], "operationId": "move_look", "summary": "Move Look", "description": "### Move an existing look\n\nMoves a look to a specified folder, and returns the moved look.\n\n`look_id` and `folder_id` are required.\n`look_id` and `folder_id` must already exist, and `folder_id` must be different from the current `folder_id` of the dashboard.\n", "parameters": [{"name": "look_id", "in": "path", "description": "Look id to move.", "required": true, "type": "string"}, {"name": "folder_id", "in": "query", "description": "Folder id to move to.", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Look", "schema": {"$ref": "#/definitions/LookWithQuery"}}, "201": {"description": "look", "schema": {"$ref": "#/definitions/Look"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/lookml_models": {"get": {"tags": ["LookmlModel"], "operationId": "all_lookml_models", "summary": "Get All LookML Models", "description": "### Get information about all lookml models.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "Number of results to return. (can be used with offset)", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any. (Defaults to 0 if not set when limit is used)", "required": false, "type": "integer", "format": "int64"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "LookML Model", "schema": {"type": "array", "items": {"$ref": "#/definitions/LookmlModel"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["LookmlModel"], "operationId": "create_lookml_model", "summary": "Create LookML Model", "description": "### Create a lookml model using the specified configuration.\n", "parameters": [{"name": "body", "in": "body", "description": "LookML Model", "required": true, "schema": {"$ref": "#/definitions/LookmlModel"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "LookML Model", "schema": {"$ref": "#/definitions/LookmlModel"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/lookml_models/{lookml_model_name}": {"get": {"tags": ["LookmlModel"], "operationId": "lookml_model", "summary": "Get LookML Model", "description": "### Get information about a lookml model.\n", "parameters": [{"name": "lookml_model_name", "in": "path", "description": "Name of lookml model.", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "LookML Model", "schema": {"$ref": "#/definitions/LookmlModel"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["LookmlModel"], "operationId": "update_lookml_model", "summary": "Update LookML Model", "description": "### Update a lookml model using the specified configuration.\n", "parameters": [{"name": "lookml_model_name", "in": "path", "description": "Name of lookml model.", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "LookML Model", "required": true, "schema": {"$ref": "#/definitions/LookmlModel"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "LookML Model", "schema": {"$ref": "#/definitions/LookmlModel"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["LookmlModel"], "operationId": "delete_lookml_model", "summary": "Delete LookML Model", "description": "### Delete a lookml model.\n", "parameters": [{"name": "lookml_model_name", "in": "path", "description": "Name of lookml model.", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/lookml_models/{lookml_model_name}/explores/{explore_name}": {"get": {"tags": ["LookmlModel"], "operationId": "lookml_model_explore", "summary": "Get LookML Model Explore", "description": "### Get information about a lookml model explore.\n", "parameters": [{"name": "lookml_model_name", "in": "path", "description": "Name of lookml model.", "required": true, "type": "string"}, {"name": "explore_name", "in": "path", "description": "Name of explore.", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "LookML Model Explore", "schema": {"$ref": "#/definitions/LookmlModelExplore"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/merge_queries/{merge_query_id}": {"get": {"tags": ["Query"], "operationId": "merge_query", "summary": "Get Merge Query", "description": "### Get Merge Query\n\nReturns a merge query object given its id.\n", "parameters": [{"name": "merge_query_id", "in": "path", "description": "Merge Query Id", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Merge Query", "schema": {"$ref": "#/definitions/MergeQuery"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/merge_queries": {"post": {"tags": ["Query"], "operationId": "create_merge_query", "summary": "Create Merge Query", "description": "### Create Merge Query\n\nCreates a new merge query object.\n\nA merge query takes the results of one or more queries and combines (merges) the results\naccording to field mapping definitions. The result is similar to a SQL left outer join.\n\nA merge query can merge results of queries from different SQL databases.\n\nThe order that queries are defined in the source_queries array property is significant. The\nfirst query in the array defines the primary key into which the results of subsequent\nqueries will be merged.\n\nLike model/view query objects, merge queries are immutable and have structural identity - if\nyou make a request to create a new merge query that is identical to an existing merge query,\nthe existing merge query will be returned instead of creating a duplicate. Conversely, any\nchange to the contents of a merge query will produce a new object with a new id.\n", "parameters": [{"name": "body", "in": "body", "description": "Merge Query", "required": false, "schema": {"$ref": "#/definitions/MergeQuery"}}, {"name": "fields", "in": "query", "description": "Requested fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Merge Query", "schema": {"$ref": "#/definitions/MergeQuery"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/models/{model_name}/views/{view_name}/fields/{field_name}/suggestions": {"get": {"tags": ["Metadata"], "operationId": "model_fieldname_suggestions", "summary": "Model field name suggestions", "description": "### Field name suggestions for a model and view\n\n`filters` is a string hash of values, with the key as the field name and the string value as the filter expression:\n\n```ruby\n{'users.age': '>=60'}\n```\n\nor\n\n```ruby\n{'users.age': '<30'}\n```\n\nor\n\n```ruby\n{'users.age': '=50'}\n```\n", "parameters": [{"name": "model_name", "in": "path", "description": "Name of model", "required": true, "type": "string"}, {"name": "view_name", "in": "path", "description": "Name of view", "required": true, "type": "string"}, {"name": "field_name", "in": "path", "description": "Name of field to use for suggestions", "required": true, "type": "string"}, {"name": "term", "in": "query", "description": "Search term pattern (evaluated as as `%term%`)", "required": false, "type": "string"}, {"name": "filters", "in": "query", "description": "Suggestion filters with field name keys and comparison expressions", "required": false, "type": "object", "additionalProperties": {"type": "string"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Model view field suggestions", "schema": {"$ref": "#/definitions/ModelFieldSuggestions"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/models/{model_name}": {"get": {"tags": ["Metadata"], "operationId": "get_model", "summary": "Get a single model", "description": "### Get a single model\n\n", "parameters": [{"name": "model_name", "in": "path", "description": "Name of model", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "A Model", "schema": {"$ref": "#/definitions/Model"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/connections/{connection_name}/databases": {"get": {"tags": ["Metadata"], "operationId": "connection_databases", "summary": "List accessible databases to this connection", "description": "### List databases available to this connection\n\nCertain dialects can support multiple databases per single connection.\nIf this connection supports multiple databases, the database names will be returned in an array.\n\nConnections using dialects that do not support multiple databases will return an empty array.\n\n**Note**: [Connection Features](#!/Metadata/connection_features) can be used to determine if a connection supports\nmultiple databases.\n", "parameters": [{"name": "connection_name", "in": "path", "description": "Name of connection", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Database names", "schema": {"type": "array", "items": {"type": "string"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/connections/{connection_name}/features": {"get": {"tags": ["Metadata"], "operationId": "connection_features", "summary": "Metadata features supported by this connection", "description": "### Retrieve metadata features for this connection\n\nReturns a list of feature names with `true` (available) or `false` (not available)\n\n", "parameters": [{"name": "connection_name", "in": "path", "description": "Name of connection", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Connection features", "schema": {"$ref": "#/definitions/ConnectionFeatures"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query", "x-looker-rate-limited": true}}, "/connections/{connection_name}/schemas": {"get": {"tags": ["Metadata"], "operationId": "connection_schemas", "summary": "Get schemas for a connection", "description": "### Get the list of schemas and tables for a connection\n\n", "parameters": [{"name": "connection_name", "in": "path", "description": "Name of connection", "required": true, "type": "string"}, {"name": "database", "in": "query", "description": "For dialects that support multiple databases, optionally identify which to use", "required": false, "type": "string"}, {"name": "cache", "in": "query", "description": "True to use fetch from cache, false to load fresh", "required": false, "type": "boolean"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Schemas for connection", "schema": {"type": "array", "items": {"$ref": "#/definitions/Schema"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/connections/{connection_name}/tables": {"get": {"tags": ["Metadata"], "operationId": "connection_tables", "summary": "Get tables for a connection", "description": "### Get the list of tables for a schema\n\nFor dialects that support multiple databases, optionally identify which to use. If not provided, the default\ndatabase for the connection will be used.\n\nFor dialects that do **not** support multiple databases, **do not use** the database parameter\n", "parameters": [{"name": "connection_name", "in": "path", "description": "Name of connection", "required": true, "type": "string"}, {"name": "database", "in": "query", "description": "Optional. Name of database to use for the query, only if applicable", "required": false, "type": "string"}, {"name": "schema_name", "in": "query", "description": "Optional. Return only tables for this schema", "required": false, "type": "string"}, {"name": "cache", "in": "query", "description": "True to fetch from cache, false to load fresh", "required": false, "type": "boolean"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "table_filter", "in": "query", "description": "Optional. Return tables with names that contain this value", "required": false, "type": "string"}, {"name": "table_limit", "in": "query", "description": "Optional. Return tables up to the table_limit", "required": false, "type": "integer", "format": "int64"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Schemas and tables for connection", "schema": {"type": "array", "items": {"$ref": "#/definitions/SchemaTables"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/connections/{connection_name}/columns": {"get": {"tags": ["Metadata"], "operationId": "connection_columns", "summary": "Get columns for a connection", "description": "### Get the columns (and therefore also the tables) in a specific schema\n\n", "parameters": [{"name": "connection_name", "in": "path", "description": "Name of connection", "required": true, "type": "string"}, {"name": "database", "in": "query", "description": "For dialects that support multiple databases, optionally identify which to use", "required": false, "type": "string"}, {"name": "schema_name", "in": "query", "description": "Name of schema to use.", "required": false, "type": "string"}, {"name": "cache", "in": "query", "description": "True to fetch from cache, false to load fresh", "required": false, "type": "boolean"}, {"name": "table_limit", "in": "query", "description": "limits the tables per schema returned", "required": false, "type": "integer", "format": "int64"}, {"name": "table_names", "in": "query", "description": "only fetch columns for a given (comma-separated) list of tables", "required": false, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Columns schema for connection", "schema": {"type": "array", "items": {"$ref": "#/definitions/SchemaColumns"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/connections/{connection_name}/search_columns": {"get": {"tags": ["Metadata"], "operationId": "connection_search_columns", "summary": "Search a connection for columns", "description": "### Search a connection for columns matching the specified name\n\n**Note**: `column_name` must be a valid column name. It is not a search pattern.\n", "parameters": [{"name": "connection_name", "in": "path", "description": "Name of connection", "required": true, "type": "string"}, {"name": "column_name", "in": "query", "description": "Column name to find", "required": false, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Column names matching search pattern", "schema": {"type": "array", "items": {"$ref": "#/definitions/ColumnSearch"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query", "x-looker-rate-limited": true}}, "/connections/{connection_name}/cost_estimate": {"post": {"tags": ["Metadata"], "operationId": "connection_cost_estimate", "summary": "Estimate costs for a connection", "description": "### Connection cost estimating\n\nAssign a `sql` statement to the body of the request. e.g., for Ruby, `{sql: 'select * from users'}`\n\n**Note**: If the connection's dialect has no support for cost estimates, an error will be returned\n", "parameters": [{"name": "connection_name", "in": "path", "description": "Name of connection", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "SQL statement to estimate", "required": true, "schema": {"$ref": "#/definitions/CreateCostEstimate"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Connection cost estimates", "schema": {"$ref": "#/definitions/CostEstimate"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query", "x-looker-rate-limited": true}}, "/mobile/settings": {"get": {"tags": ["Config"], "operationId": "mobile_settings", "summary": "Get Mobile_Settings", "description": "### Get all mobile settings.\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Mobile_Settings", "schema": {"$ref": "#/definitions/MobileSettings"}}}, "x-looker-status": "beta", "x-looker-activity-type": "non_query"}}, "/mobile/device": {"post": {"tags": ["Auth"], "operationId": "register_mobile_device", "summary": "Register Mobile Device", "description": "### Registers a mobile device.\n# Required fields: [:device_token, :device_type]\n", "parameters": [{"name": "body", "in": "body", "description": "Writable device parameters.", "required": true, "schema": {"$ref": "#/definitions/MobileToken"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Device registered successfully.", "schema": {"$ref": "#/definitions/MobileToken"}}}, "x-looker-status": "beta", "x-looker-activity-type": "non_query"}}, "/mobile/device/{device_id}": {"patch": {"tags": ["Auth"], "operationId": "update_mobile_device_registration", "summary": "Update Mobile Device Registration", "description": "### Updates the mobile device registration\n", "parameters": [{"name": "device_id", "in": "path", "description": "Unique id of the device.", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Device registration updated successfully.", "schema": {"$ref": "#/definitions/MobileToken"}}}, "x-looker-status": "beta", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Auth"], "operationId": "deregister_mobile_device", "summary": "Deregister Mobile Device", "description": "### Deregister a mobile device.\n", "parameters": [{"name": "device_id", "in": "path", "description": "Unique id of the device.", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Device de-registered successfully."}}, "x-looker-status": "beta", "x-looker-activity-type": "non_query"}}, "/model_sets/search": {"get": {"tags": ["Role"], "operationId": "search_model_sets", "summary": "Search Model Sets", "description": "### Search model sets\nReturns all model set records that match the given search criteria.\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "Number of results to return (used with `offset`).", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any (used with `limit`).", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "id", "in": "query", "description": "Match model set id.", "required": false, "type": "string"}, {"name": "name", "in": "query", "description": "Match model set name.", "required": false, "type": "string"}, {"name": "all_access", "in": "query", "description": "Match model sets by all_access status.", "required": false, "type": "boolean"}, {"name": "built_in", "in": "query", "description": "Match model sets by built_in status.", "required": false, "type": "boolean"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Model Set", "schema": {"type": "array", "items": {"$ref": "#/definitions/ModelSet"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/model_sets/{model_set_id}": {"get": {"tags": ["Role"], "operationId": "model_set", "summary": "Get Model Set", "description": "### Get information about the model set with a specific id.\n", "parameters": [{"name": "model_set_id", "in": "path", "description": "Id of model set", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Specified model set.", "schema": {"$ref": "#/definitions/ModelSet"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Role"], "operationId": "delete_model_set", "summary": "Delete Model Set", "description": "### Delete the model set with a specific id.\n", "parameters": [{"name": "model_set_id", "in": "path", "description": "id of model set", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "405": {"description": "Resource Can't Be Modified", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Model set successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Role"], "operationId": "update_model_set", "summary": "Update Model Set", "description": "### Update information about the model set with a specific id.\n", "parameters": [{"name": "model_set_id", "in": "path", "description": "id of model set", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "ModelSet", "required": true, "schema": {"$ref": "#/definitions/ModelSet"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "405": {"description": "Resource Can't Be Modified", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "New state for specified model set.", "schema": {"$ref": "#/definitions/ModelSet"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/model_sets": {"get": {"tags": ["Role"], "operationId": "all_model_sets", "summary": "Get All Model Sets", "description": "### Get information about all model sets.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "All model sets.", "schema": {"type": "array", "items": {"$ref": "#/definitions/ModelSet"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Role"], "operationId": "create_model_set", "summary": "Create Model Set", "description": "### Create a model set with the specified information. Model sets are used by Roles.\n", "parameters": [{"name": "body", "in": "body", "description": "ModelSet", "required": true, "schema": {"$ref": "#/definitions/ModelSet"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Newly created ModelSet", "schema": {"$ref": "#/definitions/ModelSet"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/oauth_client_apps": {"get": {"tags": ["Auth"], "operationId": "all_oauth_client_apps", "summary": "Get All OAuth Client Apps", "description": "### List All OAuth Client Apps\n\nLists all applications registered to use OAuth2 login with this Looker instance, including\nenabled and disabled apps.\n\nResults are filtered to include only the apps that the caller (current user)\nhas permission to see.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "OAuth Client App", "schema": {"type": "array", "items": {"$ref": "#/definitions/OauthClientApp"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/oauth_client_apps/{client_guid}": {"get": {"tags": ["Auth"], "operationId": "oauth_client_app", "summary": "Get OAuth Client App", "description": "### Get Oauth Client App\n\nReturns the registered app client with matching client_guid.\n", "parameters": [{"name": "client_guid", "in": "path", "description": "The unique id of this application", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "OAuth Client App", "schema": {"$ref": "#/definitions/OauthClientApp"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Auth"], "operationId": "delete_oauth_client_app", "summary": "Delete OAuth Client App", "description": "### Delete OAuth Client App\n\nDeletes the registration info of the app with the matching client_guid.\nAll active sessions and tokens issued for this app will immediately become invalid.\n\nAs with most REST DELETE operations, this endpoint does not return an error if the\nindicated resource does not exist.\n\n### Note: this deletion cannot be undone.\n", "parameters": [{"name": "client_guid", "in": "path", "description": "The unique id of this application", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Auth"], "operationId": "register_oauth_client_app", "summary": "Register OAuth App", "description": "### Register an OAuth2 Client App\n\nRegisters details identifying an external web app or native app as an OAuth2 login client of the Looker instance.\nThe app registration must provide a unique client_guid and redirect_uri that the app will present\nin OAuth login requests. If the client_guid and redirect_uri parameters in the login request do not match\nthe app details registered with the Looker instance, the request is assumed to be a forgery and is rejected.\n", "parameters": [{"name": "client_guid", "in": "path", "description": "The unique id of this application", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "OAuth Client App", "required": true, "schema": {"$ref": "#/definitions/OauthClientApp"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "OAuth Client App", "schema": {"$ref": "#/definitions/OauthClientApp"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Auth"], "operationId": "update_oauth_client_app", "summary": "Update OAuth App", "description": "### Update OAuth2 Client App Details\n\nModifies the details a previously registered OAuth2 login client app.\n", "parameters": [{"name": "client_guid", "in": "path", "description": "The unique id of this application", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "OAuth Client App", "required": true, "schema": {"$ref": "#/definitions/OauthClientApp"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "OAuth Client App", "schema": {"$ref": "#/definitions/OauthClientApp"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/oauth_client_apps/{client_guid}/tokens": {"delete": {"tags": ["Auth"], "operationId": "invalidate_tokens", "summary": "Invalidate Tokens", "description": "### Invalidate All Issued Tokens\n\nImmediately invalidates all auth codes, sessions, access tokens and refresh tokens issued for\nthis app for ALL USERS of this app.\n", "parameters": [{"name": "client_guid", "in": "path", "description": "The unique id of the application", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "beta", "x-looker-activity-type": "non_query"}}, "/oauth_client_apps/{client_guid}/users/{user_id}": {"post": {"tags": ["Auth"], "operationId": "activate_app_user", "summary": "Activate OAuth App User", "description": "### Activate an app for a user\n\nActivates a user for a given oauth client app. This indicates the user has been informed that\nthe app will have access to the user's looker data, and that the user has accepted and allowed\nthe app to use their Looker account.\n\nActivating a user for an app that the user is already activated with returns a success response.\n", "parameters": [{"name": "client_guid", "in": "path", "description": "The unique id of this application", "required": true, "type": "string"}, {"name": "user_id", "in": "path", "description": "The id of the user to enable use of this app", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Deleted"}, "200": {"description": "OAuth Client App", "schema": {"type": "string"}}}, "x-looker-status": "beta", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Auth"], "operationId": "deactivate_app_user", "summary": "Deactivate OAuth App User", "description": "### Deactivate an app for a user\n\nDeactivate a user for a given oauth client app. All tokens issued to the app for\nthis user will be invalid immediately. Before the user can use the app with their\nLooker account, the user will have to read and accept an account use disclosure statement for the app.\n\nAdmin users can deactivate other users, but non-admin users can only deactivate themselves.\n\nAs with most REST DELETE operations, this endpoint does not return an error if the indicated\nresource (app or user) does not exist or has already been deactivated.\n", "parameters": [{"name": "client_guid", "in": "path", "description": "The unique id of this application", "required": true, "type": "string"}, {"name": "user_id", "in": "path", "description": "The id of the user to enable use of this app", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "beta", "x-looker-activity-type": "non_query"}}, "/oidc_config": {"get": {"tags": ["Auth"], "operationId": "oidc_config", "summary": "Get OIDC Configuration", "description": "### Get the OIDC configuration.\n\nLooker can be optionally configured to authenticate users against an OpenID Connect (OIDC)\nauthentication server. OIDC setup requires coordination with an administrator of that server.\n\nOnly Looker administrators can read and update the OIDC configuration.\n\nConfiguring OIDC impacts authentication for all users. This configuration should be done carefully.\n\nLooker maintains a single OIDC configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).\n\nOIDC is enabled or disabled for Looker using the **enabled** field.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "responses": {"403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "OIDC Configuration.", "schema": {"$ref": "#/definitions/OIDCConfig"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Auth"], "operationId": "update_oidc_config", "summary": "Update OIDC Configuration", "description": "### Update the OIDC configuration.\n\nConfiguring OIDC impacts authentication for all users. This configuration should be done carefully.\n\nOnly Looker administrators can read and update the OIDC configuration.\n\nOIDC is enabled or disabled for Looker using the **enabled** field.\n\nIt is **highly** recommended that any OIDC setting changes be tested using the APIs below before being set globally.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "body", "in": "body", "description": "OIDC Config", "required": true, "schema": {"$ref": "#/definitions/OIDCConfig"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "New state for OIDC Configuration.", "schema": {"$ref": "#/definitions/OIDCConfig"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/oidc_test_configs/{test_slug}": {"get": {"tags": ["Auth"], "operationId": "oidc_test_config", "summary": "Get OIDC Test Configuration", "description": "### Get a OIDC test configuration by test_slug.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "test_slug", "in": "path", "description": "Slug of test config", "required": true, "type": "string"}], "responses": {"403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "OIDC test config.", "schema": {"$ref": "#/definitions/OIDCConfig"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Auth"], "operationId": "delete_oidc_test_config", "summary": "Delete OIDC Test Configuration", "description": "### Delete a OIDC test configuration.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "test_slug", "in": "path", "description": "Slug of test config", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Test config succssfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/oidc_test_configs": {"post": {"tags": ["Auth"], "operationId": "create_oidc_test_config", "summary": "Create OIDC Test Configuration", "description": "### Create a OIDC test configuration.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "body", "in": "body", "description": "OIDC test config", "required": true, "schema": {"$ref": "#/definitions/OIDCConfig"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "OIDC test config", "schema": {"$ref": "#/definitions/OIDCConfig"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/password_config": {"get": {"tags": ["Auth"], "operationId": "password_config", "summary": "Get Password Config", "description": "### Get password config.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "responses": {"403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Password Config", "schema": {"$ref": "#/definitions/PasswordConfig"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Auth"], "operationId": "update_password_config", "summary": "Update Password Config", "description": "### Update password config.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "body", "in": "body", "description": "Password Config", "required": true, "schema": {"$ref": "#/definitions/PasswordConfig"}}], "responses": {"403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Password Config", "schema": {"$ref": "#/definitions/PasswordConfig"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/password_config/force_password_reset_at_next_login_for_all_users": {"put": {"tags": ["Auth"], "operationId": "force_password_reset_at_next_login_for_all_users", "summary": "Force password reset", "description": "### Force all credentials_email users to reset their login passwords upon their next login.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "responses": {"403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Password Config", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/permissions": {"get": {"tags": ["Role"], "operationId": "all_permissions", "summary": "Get All Permissions", "description": "### Get all supported permissions.\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Permission", "schema": {"type": "array", "items": {"$ref": "#/definitions/Permission"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/permission_sets/search": {"get": {"tags": ["Role"], "operationId": "search_permission_sets", "summary": "Search Permission Sets", "description": "### Search permission sets\nReturns all permission set records that match the given search criteria.\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "Number of results to return (used with `offset`).", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any (used with `limit`).", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "id", "in": "query", "description": "Match permission set id.", "required": false, "type": "string"}, {"name": "name", "in": "query", "description": "Match permission set name.", "required": false, "type": "string"}, {"name": "all_access", "in": "query", "description": "Match permission sets by all_access status.", "required": false, "type": "boolean"}, {"name": "built_in", "in": "query", "description": "Match permission sets by built_in status.", "required": false, "type": "boolean"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Permission Set", "schema": {"type": "array", "items": {"$ref": "#/definitions/PermissionSet"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/permission_sets/{permission_set_id}": {"get": {"tags": ["Role"], "operationId": "permission_set", "summary": "Get Permission Set", "description": "### Get information about the permission set with a specific id.\n", "parameters": [{"name": "permission_set_id", "in": "path", "description": "Id of permission set", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Permission Set", "schema": {"$ref": "#/definitions/PermissionSet"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Role"], "operationId": "delete_permission_set", "summary": "Delete Permission Set", "description": "### Delete the permission set with a specific id.\n", "parameters": [{"name": "permission_set_id", "in": "path", "description": "Id of permission set", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "405": {"description": "Resource Can't Be Modified", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Role"], "operationId": "update_permission_set", "summary": "Update Permission Set", "description": "### Update information about the permission set with a specific id.\n", "parameters": [{"name": "permission_set_id", "in": "path", "description": "Id of permission set", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Permission Set", "required": true, "schema": {"$ref": "#/definitions/PermissionSet"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "405": {"description": "Resource Can't Be Modified", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Permission Set", "schema": {"$ref": "#/definitions/PermissionSet"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/permission_sets": {"get": {"tags": ["Role"], "operationId": "all_permission_sets", "summary": "Get All Permission Sets", "description": "### Get information about all permission sets.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Permission Set", "schema": {"type": "array", "items": {"$ref": "#/definitions/PermissionSet"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Role"], "operationId": "create_permission_set", "summary": "Create Permission Set", "description": "### Create a permission set with the specified information. Permission sets are used by Roles.\n", "parameters": [{"name": "body", "in": "body", "description": "Permission Set", "required": true, "schema": {"$ref": "#/definitions/PermissionSet"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Permission Set", "schema": {"$ref": "#/definitions/PermissionSet"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/deploy_ref_to_production": {"post": {"tags": ["Project"], "operationId": "deploy_ref_to_production", "summary": "Deploy Remote Branch or Ref to Production", "description": "### Deploy a Remote Branch or Ref to Production\n\nGit must have been configured and deploy permission required.\n\nDeploy is a one/two step process\n1. If this is the first deploy of this project, create the production project with git repository.\n2. Pull the branch or ref into the production project.\n\nCan only specify either a branch or a ref.\n\n", "parameters": [{"name": "project_id", "in": "path", "description": "Id of project", "required": true, "type": "string"}, {"name": "branch", "in": "query", "description": "Branch to deploy to production", "required": false, "type": "string"}, {"name": "ref", "in": "query", "description": "Ref to deploy to production", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Project", "schema": {"type": "string"}}, "204": {"description": "Returns 204 if project was successfully deployed to production, otherwise 400 with an error message"}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/deploy_to_production": {"post": {"tags": ["Project"], "operationId": "deploy_to_production", "summary": "Deploy To Production", "description": "### Deploy LookML from this Development Mode Project to Production\n\nGit must have been configured, must be in dev mode and deploy permission required\n\nDeploy is a two / three step process:\n\n1. Push commits in current branch of dev mode project to the production branch (origin/master).\n   Note a. This step is skipped in read-only projects.\n   Note b. If this step is unsuccessful for any reason (e.g. rejected non-fastforward because production branch has\n             commits not in current branch), subsequent steps will be skipped.\n2. If this is the first deploy of this project, create the production project with git repository.\n3. Pull the production branch into the production project.\n\n", "parameters": [{"name": "project_id", "in": "path", "description": "Id of project", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Project", "schema": {"type": "string"}}, "204": {"description": "Returns 204 if project was successfully deployed to production, otherwise 400 with an error message"}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/reset_to_production": {"post": {"tags": ["Project"], "operationId": "reset_project_to_production", "summary": "Reset To Production", "description": "### Reset a project to the revision of the project that is in production.\n\n**DANGER** this will delete any changes that have not been pushed to a remote repository.\n", "parameters": [{"name": "project_id", "in": "path", "description": "Id of project", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Project", "schema": {"type": "string"}}, "204": {"description": "Returns 204 if project was successfully reset, otherwise 400 with an error message"}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/reset_to_remote": {"post": {"tags": ["Project"], "operationId": "reset_project_to_remote", "summary": "Reset To Remote", "description": "### Reset a project development branch to the revision of the project that is on the remote.\n\n**DANGER** this will delete any changes that have not been pushed to a remote repository.\n", "parameters": [{"name": "project_id", "in": "path", "description": "Id of project", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Project", "schema": {"type": "string"}}, "204": {"description": "Returns 204 if project was successfully reset, otherwise 400 with an error message"}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects": {"get": {"tags": ["Project"], "operationId": "all_projects", "summary": "Get All Projects", "description": "### Get All Projects\n\nReturns all projects visible to the current user\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Project", "schema": {"type": "array", "items": {"$ref": "#/definitions/Project"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Project"], "operationId": "create_project", "summary": "Create Project", "description": "### Create A Project\n\ndev mode required.\n- Call `update_session` to select the 'dev' workspace.\n\n`name` is required.\n`git_remote_url` is not allowed. To configure Git for the newly created project, follow the instructions in `update_project`.\n\n", "parameters": [{"name": "body", "in": "body", "description": "Project", "required": true, "schema": {"$ref": "#/definitions/Project"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Project", "schema": {"$ref": "#/definitions/Project"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}": {"get": {"tags": ["Project"], "operationId": "project", "summary": "Get Project", "description": "### Get A Project\n\nReturns the project with the given project id\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Project", "schema": {"$ref": "#/definitions/Project"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Project"], "operationId": "update_project", "summary": "Update Project", "description": "### Update Project Configuration\n\nApply changes to a project's configuration.\n\n\n#### Configuring Git for a Project\n\nTo set up a Looker project with a remote git repository, follow these steps:\n\n1. Call `update_session` to select the 'dev' workspace.\n1. Call `create_git_deploy_key` to create a new deploy key for the project\n1. Copy the deploy key text into the remote git repository's ssh key configuration\n1. Call `update_project` to set project's `git_remote_url` ()and `git_service_name`, if necessary).\n\nWhen you modify a project's `git_remote_url`, Looker connects to the remote repository to fetch\nmetadata. The remote git repository MUST be configured with the Looker-generated deploy\nkey for this project prior to setting the project's `git_remote_url`.\n\nTo set up a Looker project with a git repository residing on the Looker server (a 'bare' git repo):\n\n1. Call `update_session` to select the 'dev' workspace.\n1. Call `update_project` setting `git_remote_url` to null and `git_service_name` to \"bare\".\n\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Project", "required": true, "schema": {"$ref": "#/definitions/Project"}}, {"name": "fields", "in": "query", "description": "Requested fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "500": {"description": "Server Error", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Project", "schema": {"$ref": "#/definitions/Project"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/manifest": {"get": {"tags": ["Project"], "operationId": "manifest", "summary": "Get Manifest", "description": "### Get A Projects Manifest object\n\nReturns the project with the given project id\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Manifest", "schema": {"$ref": "#/definitions/Manifest"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/git/deploy_key": {"post": {"tags": ["Project"], "operationId": "create_git_deploy_key", "summary": "Create Deploy Key", "description": "### Create Git Deploy Key\n\nCreate a public/private key pair for authenticating ssh git requests from Looker to a remote git repository\nfor a particular Looker project.\n\nReturns the public key of the generated ssh key pair.\n\nCopy this public key to your remote git repository's ssh keys configuration so that the remote git service can\nvalidate and accept git requests from the Looker server.\n", "produces": ["text/plain"], "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Project", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "get": {"tags": ["Project"], "operationId": "git_deploy_key", "summary": "Git Deploy Key", "description": "### Git Deploy Key\n\nReturns the ssh public key previously created for a project's git repository.\n", "produces": ["text/plain"], "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "The text of the public key portion of the deploy_key", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/validate": {"post": {"tags": ["Project"], "operationId": "validate_project", "summary": "Validate Project", "description": "### Validate Project\n\nPerforms lint validation of all lookml files in the project.\nReturns a list of errors found, if any.\n\nValidating the content of all the files in a project can be computationally intensive\nfor large projects. For best performance, call `validate_project(project_id)` only\nwhen you really want to recompute project validation. To quickly display the results of\nthe most recent project validation (without recomputing), use `project_validation_results(project_id)`\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Project validation results", "schema": {"$ref": "#/definitions/ProjectValidation"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "get": {"tags": ["Project"], "operationId": "project_validation_results", "summary": "Cached Project Validation Results", "description": "### Get Cached Project Validation Results\n\nReturns the cached results of a previous project validation calculation, if any.\nReturns http status 204 No Content if no validation results exist.\n\nValidating the content of all the files in a project can be computationally intensive\nfor large projects. Use this API to simply fetch the results of the most recent\nproject validation rather than revalidating the entire project from scratch.\n\nA value of `\"stale\": true` in the response indicates that the project has changed since\nthe cached validation results were computed. The cached validation results may no longer\nreflect the current state of the project.\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Deleted"}, "200": {"description": "Project validation results", "schema": {"$ref": "#/definitions/ProjectValidationCache"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/current_workspace": {"get": {"tags": ["Project"], "operationId": "project_workspace", "summary": "Get Project Workspace", "description": "### Get Project Workspace\n\nReturns information about the state of the project files in the currently selected workspace\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Project Workspace", "schema": {"$ref": "#/definitions/ProjectWorkspace"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/files": {"get": {"tags": ["Project"], "operationId": "all_project_files", "summary": "Get All Project Files", "description": "### Get All Project Files\n\nReturns a list of the files in the project\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Project File", "schema": {"type": "array", "items": {"$ref": "#/definitions/ProjectFile"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/files/file": {"get": {"tags": ["Project"], "operationId": "project_file", "summary": "Get Project File", "description": "### Get Project File Info\n\nReturns information about a file in the project\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}, {"name": "file_id", "in": "query", "description": "File Id", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Project File", "schema": {"$ref": "#/definitions/ProjectFile"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/git_connection_tests": {"get": {"tags": ["Project"], "operationId": "all_git_connection_tests", "summary": "Get All Git Connection Tests", "description": "### Get All Git Connection Tests\n\ndev mode required.\n  - Call `update_session` to select the 'dev' workspace.\n\nReturns a list of tests which can be run against a project's (or the dependency project for the provided remote_url) git connection. Call [Run Git Connection Test](#!/Project/run_git_connection_test) to execute each test in sequence.\n\nTests are ordered by increasing specificity. Tests should be run in the order returned because later tests require functionality tested by tests earlier in the test list.\n\nFor example, a late-stage test for write access is meaningless if connecting to the git server (an early test) is failing.\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}, {"name": "remote_url", "in": "query", "description": "(Optional: leave blank for root project) The remote url for remote dependency to test.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Git Connection Test", "schema": {"type": "array", "items": {"$ref": "#/definitions/GitConnectionTest"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/git_connection_tests/{test_id}": {"get": {"tags": ["Project"], "operationId": "run_git_connection_test", "summary": "Run Git Connection Test", "description": "### Run a git connection test\n\nRun the named test on the git service used by this project (or the dependency project for the provided remote_url) and return the result. This\nis intended to help debug git connections when things do not work properly, to give\nmore helpful information about why a git url is not working with Looker.\n\nTests should be run in the order they are returned by [Get All Git Connection Tests](#!/Project/all_git_connection_tests).\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}, {"name": "test_id", "in": "path", "description": "Test Id", "required": true, "type": "string"}, {"name": "remote_url", "in": "query", "description": "(Optional: leave blank for root project) The remote url for remote dependency to test.", "required": false, "type": "string"}, {"name": "use_production", "in": "query", "description": "(Optional: leave blank for dev credentials) Whether to use git production credentials.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Git Connection Test Result", "schema": {"$ref": "#/definitions/GitConnectionTestResult"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/lookml_tests": {"get": {"tags": ["Project"], "operationId": "all_lookml_tests", "summary": "Get All LookML Tests", "description": "### Get All LookML Tests\n\nReturns a list of tests which can be run to validate a project's LookML code and/or the underlying data,\noptionally filtered by the file id.\nCall [Run LookML Test](#!/Project/run_lookml_test) to execute tests.\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}, {"name": "file_id", "in": "query", "description": "File Id", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "LookML Test", "schema": {"type": "array", "items": {"$ref": "#/definitions/LookmlTest"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/lookml_tests/run": {"get": {"tags": ["Project"], "operationId": "run_lookml_test", "summary": "Run LookML Test", "description": "### Run LookML Tests\n\nRuns all tests in the project, optionally filtered by file, test, and/or model.\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}, {"name": "file_id", "in": "query", "description": "File Name", "required": false, "type": "string"}, {"name": "test", "in": "query", "description": "Test Name", "required": false, "type": "string"}, {"name": "model", "in": "query", "description": "Model Name", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "LookML Test Results", "schema": {"type": "array", "items": {"$ref": "#/definitions/LookmlTestResult"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{project_id}/tag": {"post": {"tags": ["Project"], "operationId": "tag_ref", "summary": "Tag Ref", "description": "### Creates a tag for the most recent commit, or a specific ref is a SHA is provided\n\nThis is an internal-only, undocumented route.\n", "parameters": [{"name": "project_id", "in": "path", "description": "Project Id", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Project", "required": true, "schema": {"$ref": "#/definitions/Project"}}, {"name": "commit_sha", "in": "query", "description": "(Optional): Commit Sha to Tag", "required": false, "type": "string"}, {"name": "tag_name", "in": "query", "description": "Tag Name", "required": false, "type": "string"}, {"name": "tag_message", "in": "query", "description": "(Optional): Tag Message", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Project", "schema": {"$ref": "#/definitions/Project"}}, "204": {"description": "Returns 204 if tagging a ref was successful, otherwise 400 with an error message"}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/render_tasks/looks/{look_id}/{result_format}": {"post": {"tags": ["RenderTask"], "operationId": "create_look_render_task", "summary": "Create Look Render Task", "description": "### Create a new task to render a look to an image.\n\nReturns a render task object.\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\n", "parameters": [{"name": "look_id", "in": "path", "description": "Id of look to render", "required": true, "type": "string"}, {"name": "result_format", "in": "path", "description": "Output type: png, or jpg", "required": true, "type": "string"}, {"name": "width", "in": "query", "description": "Output width in pixels", "required": true, "type": "integer", "format": "int64"}, {"name": "height", "in": "query", "description": "Output height in pixels", "required": true, "type": "integer", "format": "int64"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Render Task", "schema": {"$ref": "#/definitions/RenderTask"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/render_tasks/queries/{query_id}/{result_format}": {"post": {"tags": ["RenderTask"], "operationId": "create_query_render_task", "summary": "Create Query Render Task", "description": "### Create a new task to render an existing query to an image.\n\nReturns a render task object.\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\n", "parameters": [{"name": "query_id", "in": "path", "description": "Id of the query to render", "required": true, "type": "string"}, {"name": "result_format", "in": "path", "description": "Output type: png or jpg", "required": true, "type": "string"}, {"name": "width", "in": "query", "description": "Output width in pixels", "required": true, "type": "integer", "format": "int64"}, {"name": "height", "in": "query", "description": "Output height in pixels", "required": true, "type": "integer", "format": "int64"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Render Task", "schema": {"$ref": "#/definitions/RenderTask"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/render_tasks/dashboards/{dashboard_id}/{result_format}": {"post": {"tags": ["RenderTask"], "operationId": "create_dashboard_render_task", "summary": "Create Dashboard Render Task", "description": "### Create a new task to render a dashboard to a document or image.\n\nReturns a render task object.\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\n", "parameters": [{"name": "dashboard_id", "in": "path", "description": "Id of dashboard to render. The ID can be a LookML dashboard also.", "required": true, "type": "string"}, {"name": "result_format", "in": "path", "description": "Output type: pdf, png, or jpg", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Dashboard render task parameters", "required": true, "schema": {"$ref": "#/definitions/CreateDashboardRenderTask"}}, {"name": "width", "in": "query", "description": "Output width in pixels", "required": true, "type": "integer", "format": "int64"}, {"name": "height", "in": "query", "description": "Output height in pixels", "required": true, "type": "integer", "format": "int64"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "pdf_paper_size", "in": "query", "description": "Paper size for pdf. Value can be one of: [\"letter\",\"legal\",\"tabloid\",\"a0\",\"a1\",\"a2\",\"a3\",\"a4\",\"a5\"]", "required": false, "type": "string"}, {"name": "pdf_landscape", "in": "query", "description": "Whether to render pdf in landscape paper orientation", "required": false, "type": "boolean"}, {"name": "long_tables", "in": "query", "description": "Whether or not to expand table vis to full length", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Render Task", "schema": {"$ref": "#/definitions/RenderTask"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/render_tasks/{render_task_id}": {"get": {"tags": ["RenderTask"], "operationId": "render_task", "summary": "Get Render Task", "description": "### Get information about a render task.\n\nReturns a render task object.\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\n", "parameters": [{"name": "render_task_id", "in": "path", "description": "Id of render task", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Render Task", "schema": {"$ref": "#/definitions/RenderTask"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/render_tasks/{render_task_id}/results": {"get": {"tags": ["RenderTask"], "operationId": "render_task_results", "summary": "Render Task Results", "description": "### Get the document or image produced by a completed render task.\n\nNote that the PDF or image result will be a binary blob in the HTTP response, as indicated by the\nContent-Type in the response headers. This may require specialized (or at least different) handling than text\nresponses such as JSON. You may need to tell your HTTP client that the response is binary so that it does not\nattempt to parse the binary data as text.\n\nIf the render task exists but has not finished rendering the results, the response HTTP status will be\n**202 Accepted**, the response body will be empty, and the response will have a Retry-After header indicating\nthat the caller should repeat the request at a later time.\n\nReturns 404 if the render task cannot be found, if the cached result has expired, or if the caller\ndoes not have permission to view the results.\n\nFor detailed information about the status of the render task, use [Render Task](#!/RenderTask/render_task).\nPolling loops waiting for completion of a render task would be better served by polling **render_task(id)** until\nthe task status reaches completion (or error) instead of polling **render_task_results(id)** alone.\n", "produces": ["image/jpeg", "image/png", "application/pdf"], "parameters": [{"name": "render_task_id", "in": "path", "description": "Id of render task", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "202": {"description": "Accepted"}, "200": {"description": "Document or image", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/render_tasks/dashboard_elements/{dashboard_element_id}/{result_format}": {"post": {"tags": ["RenderTask"], "operationId": "create_dashboard_element_render_task", "summary": "Create Dashboard Element Render Task", "description": "### Create a new task to render a dashboard element to an image.\n\nReturns a render task object.\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\n", "parameters": [{"name": "dashboard_element_id", "in": "path", "description": "Id of dashboard element to render: UDD dashboard element would be numeric and LookML dashboard element would be model_name::dashboard_title::lookml_link_id", "required": true, "type": "string"}, {"name": "result_format", "in": "path", "description": "Output type: png or jpg", "required": true, "type": "string"}, {"name": "width", "in": "query", "description": "Output width in pixels", "required": true, "type": "integer", "format": "int64"}, {"name": "height", "in": "query", "description": "Output height in pixels", "required": true, "type": "integer", "format": "int64"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Render Task", "schema": {"$ref": "#/definitions/RenderTask"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/projects/{root_project_id}/credential/{credential_id}": {"put": {"tags": ["Project"], "operationId": "update_repository_credential", "summary": "Create Repository Credential", "description": "### Configure Repository Credential for a remote dependency\n\nAdmin required.\n\n`root_project_id` is required.\n`credential_id` is required.\n\n", "parameters": [{"name": "root_project_id", "in": "path", "description": "Root Project Id", "required": true, "type": "string"}, {"name": "credential_id", "in": "path", "description": "Credential Id", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Remote Project Information", "required": true, "schema": {"$ref": "#/definitions/RepositoryCredential"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Repository Credential", "schema": {"$ref": "#/definitions/RepositoryCredential"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Project"], "operationId": "delete_repository_credential", "summary": "Delete Repository Credential", "description": "### Repository Credential for a remote dependency\n\nAdmin required.\n\n`root_project_id` is required.\n`credential_id` is required.\n", "parameters": [{"name": "root_project_id", "in": "path", "description": "Root Project Id", "required": true, "type": "string"}, {"name": "credential_id", "in": "path", "description": "Credential Id", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/projects/{root_project_id}/credentials": {"get": {"tags": ["Project"], "operationId": "get_all_repository_credentials", "summary": "Get All Repository Credentials", "description": "### Get all Repository Credentials for a project\n\n`root_project_id` is required.\n", "parameters": [{"name": "root_project_id", "in": "path", "description": "Root Project Id", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Repository Credential", "schema": {"type": "array", "items": {"$ref": "#/definitions/RepositoryCredential"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/roles": {"get": {"tags": ["Role"], "operationId": "all_roles", "summary": "Get All Roles", "description": "### Get information about all roles.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "ids", "in": "query", "description": "Optional list of ids to get specific roles.", "required": false, "type": "array", "items": {"type": "string"}, "collectionFormat": "csv"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Role", "schema": {"type": "array", "items": {"$ref": "#/definitions/Role"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Role"], "operationId": "create_role", "summary": "Create Role", "description": "### Create a role with the specified information.\n", "parameters": [{"name": "body", "in": "body", "description": "Role", "required": true, "schema": {"$ref": "#/definitions/Role"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Role", "schema": {"$ref": "#/definitions/Role"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/roles/search": {"get": {"tags": ["Role"], "operationId": "search_roles", "summary": "Search Roles", "description": "### Search roles\n\nReturns all role records that match the given search criteria.\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "Number of results to return (used with `offset`).", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any (used with `limit`).", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "id", "in": "query", "description": "Match role id.", "required": false, "type": "string"}, {"name": "name", "in": "query", "description": "Match role name.", "required": false, "type": "string"}, {"name": "built_in", "in": "query", "description": "Match roles by built_in status.", "required": false, "type": "boolean"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Role", "schema": {"type": "array", "items": {"$ref": "#/definitions/Role"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/roles/search/with_user_count": {"get": {"tags": ["Role"], "operationId": "search_roles_with_user_count", "summary": "Search Roles with User Count", "description": "### Search roles include user count\n\nReturns all role records that match the given search criteria, and attaches\nassociated user counts.\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "Number of results to return (used with `offset`).", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any (used with `limit`).", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "id", "in": "query", "description": "Match role id.", "required": false, "type": "string"}, {"name": "name", "in": "query", "description": "Match role name.", "required": false, "type": "string"}, {"name": "built_in", "in": "query", "description": "Match roles by built_in status.", "required": false, "type": "boolean"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Role", "schema": {"type": "array", "items": {"$ref": "#/definitions/RoleSearch"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/roles/{role_id}": {"get": {"tags": ["Role"], "operationId": "role", "summary": "Get Role", "description": "### Get information about the role with a specific id.\n", "parameters": [{"name": "role_id", "in": "path", "description": "id of role", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Role", "schema": {"$ref": "#/definitions/Role"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Role"], "operationId": "delete_role", "summary": "Delete Role", "description": "### Delete the role with a specific id.\n", "parameters": [{"name": "role_id", "in": "path", "description": "id of role", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "405": {"description": "Resource Can't Be Modified", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Role"], "operationId": "update_role", "summary": "Update Role", "description": "### Update information about the role with a specific id.\n", "parameters": [{"name": "role_id", "in": "path", "description": "id of role", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Role", "required": true, "schema": {"$ref": "#/definitions/Role"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "405": {"description": "Resource Can't Be Modified", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Role", "schema": {"$ref": "#/definitions/Role"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/roles/{role_id}/groups": {"get": {"tags": ["Role"], "operationId": "role_groups", "summary": "Get Role Groups", "description": "### Get information about all the groups with the role that has a specific id.\n", "parameters": [{"name": "role_id", "in": "path", "description": "id of role", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Groups with role.", "schema": {"type": "array", "items": {"$ref": "#/definitions/Group"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "put": {"tags": ["Role"], "operationId": "set_role_groups", "summary": "Update Role Groups", "description": "### Set all groups for a role, removing all existing group associations from that role.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "role_id", "in": "path", "description": "id of role", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Array of Group Ids", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Groups with role.", "schema": {"type": "array", "items": {"$ref": "#/definitions/Group"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/roles/{role_id}/users": {"get": {"tags": ["Role"], "operationId": "role_users", "summary": "Get Role Users", "description": "### Get information about all the users with the role that has a specific id.\n", "parameters": [{"name": "role_id", "in": "path", "description": "id of role", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "direct_association_only", "in": "query", "description": "Get only users associated directly with the role: exclude those only associated through groups.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Users with role.", "schema": {"type": "array", "items": {"$ref": "#/definitions/User"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "put": {"tags": ["Role"], "operationId": "set_role_users", "summary": "Update Role Users", "description": "### Set all the users of the role with a specific id.\n", "parameters": [{"name": "role_id", "in": "path", "description": "id of role", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "array of user ids for role", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "405": {"description": "Resource Can't Be Modified", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Users with role.", "schema": {"type": "array", "items": {"$ref": "#/definitions/User"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/running_queries": {"get": {"tags": ["Query"], "operationId": "all_running_queries", "summary": "Get All Running Queries", "description": "Get information about all running queries.\n", "responses": {"404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Running Queries.", "schema": {"type": "array", "items": {"$ref": "#/definitions/RunningQueries"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/running_queries/{query_task_id}": {"delete": {"tags": ["Query"], "operationId": "kill_query", "summary": "Kill Running Query", "description": "Kill a query with a specific query_task_id.\n", "parameters": [{"name": "query_task_id", "in": "path", "description": "Query task id.", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "204": {"description": "Query successfully killed.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/saml_config": {"get": {"tags": ["Auth"], "operationId": "saml_config", "summary": "Get SAML Configuration", "description": "### Get the SAML configuration.\n\nLooker can be optionally configured to authenticate users against a SAML authentication server.\nSAML setup requires coordination with an administrator of that server.\n\nOnly Looker administrators can read and update the SAML configuration.\n\nConfiguring SAML impacts authentication for all users. This configuration should be done carefully.\n\nLooker maintains a single SAML configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).\n\nSAML is enabled or disabled for Looker using the **enabled** field.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "responses": {"403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "SAML Configuration.", "schema": {"$ref": "#/definitions/SamlConfig"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Auth"], "operationId": "update_saml_config", "summary": "Update SAML Configuration", "description": "### Update the SAML configuration.\n\nConfiguring SAML impacts authentication for all users. This configuration should be done carefully.\n\nOnly Looker administrators can read and update the SAML configuration.\n\nSAML is enabled or disabled for Looker using the **enabled** field.\n\nIt is **highly** recommended that any SAML setting changes be tested using the APIs below before being set globally.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "body", "in": "body", "description": "SAML Config", "required": true, "schema": {"$ref": "#/definitions/SamlConfig"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "New state for SAML Configuration.", "schema": {"$ref": "#/definitions/SamlConfig"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/saml_test_configs/{test_slug}": {"get": {"tags": ["Auth"], "operationId": "saml_test_config", "summary": "Get SAML Test Configuration", "description": "### Get a SAML test configuration by test_slug.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "test_slug", "in": "path", "description": "Slug of test config", "required": true, "type": "string"}], "responses": {"403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "SAML test config.", "schema": {"$ref": "#/definitions/SamlConfig"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Auth"], "operationId": "delete_saml_test_config", "summary": "Delete SAML Test Configuration", "description": "### Delete a SAML test configuration.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "test_slug", "in": "path", "description": "Slug of test config", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Test config succssfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/saml_test_configs": {"post": {"tags": ["Auth"], "operationId": "create_saml_test_config", "summary": "Create SAML Test Configuration", "description": "### Create a SAML test configuration.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "body", "in": "body", "description": "SAML test config", "required": true, "schema": {"$ref": "#/definitions/SamlConfig"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "SAML test config", "schema": {"$ref": "#/definitions/SamlConfig"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/parse_saml_idp_metadata": {"post": {"tags": ["Auth"], "operationId": "parse_saml_idp_metadata", "summary": "Parse SAML IdP XML", "description": "### Parse the given xml as a SAML IdP metadata document and return the result.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "consumes": ["text/plain"], "parameters": [{"name": "body", "in": "body", "description": "SAML IdP metadata xml", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Parse result", "schema": {"$ref": "#/definitions/SamlMetadataParseResult"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/fetch_and_parse_saml_idp_metadata": {"post": {"tags": ["Auth"], "operationId": "fetch_and_parse_saml_idp_metadata", "summary": "Parse SAML IdP Url", "description": "### Fetch the given url and parse it as a SAML IdP metadata document and return the result.\nNote that this requires that the url be public or at least at a location where the Looker instance\ncan fetch it without requiring any special authentication.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "consumes": ["text/plain"], "parameters": [{"name": "body", "in": "body", "description": "SAML IdP metadata public url", "required": true, "schema": {"type": "string"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Parse result", "schema": {"$ref": "#/definitions/SamlMetadataParseResult"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/scheduled_plans/space/{space_id}": {"get": {"tags": ["ScheduledPlan"], "operationId": "scheduled_plans_for_space", "summary": "Scheduled Plans for Space", "description": "### Get Scheduled Plans for a Space\n\nReturns scheduled plans owned by the caller for a given space id.\n", "parameters": [{"name": "space_id", "in": "path", "description": "Space Id", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Scheduled Plan", "schema": {"type": "array", "items": {"$ref": "#/definitions/ScheduledPlan"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/scheduled_plans/{scheduled_plan_id}": {"delete": {"tags": ["ScheduledPlan"], "operationId": "delete_scheduled_plan", "summary": "Delete Scheduled Plan", "description": "### Delete a Scheduled Plan\n\nNormal users can only delete their own scheduled plans.\nAdmins can delete other users' scheduled plans.\nThis delete cannot be undone.\n", "parameters": [{"name": "scheduled_plan_id", "in": "path", "description": "Scheduled Plan Id", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}, "patch": {"tags": ["ScheduledPlan"], "operationId": "update_scheduled_plan", "summary": "Update Scheduled Plan", "description": "### Update a Scheduled Plan\n\nAdmins can update other users' Scheduled Plans.\n\nNote: Any scheduled plan destinations specified in an update will **replace** all scheduled plan destinations\ncurrently defined for the scheduled plan.\n\nFor Example: If a scheduled plan has destinations A, B, and C, and you call update on this scheduled plan\nspecifying only B in the destinations, then destinations A and C will be deleted by the update.\n\nUpdating a scheduled plan to assign null or an empty array to the scheduled_plan_destinations property is an error, as a scheduled plan must always have at least one destination.\n\nIf you omit the scheduled_plan_destinations property from the object passed to update, then the destinations\ndefined on the original scheduled plan will remain unchanged.\n\n#### Email Permissions:\n\nFor details about permissions required to schedule delivery to email and the safeguards\nLooker offers to protect against sending to unauthorized email destinations, see [Email Domain Allow List for Scheduled Looks](https://cloud.google.com/looker/docs/r/api/embed-permissions).\n\n\n#### Scheduled Plan Destination Formats\n\nScheduled plan destinations must specify the data format to produce and send to the destination.\n\nFormats:\n\n| format | Description\n| :-----------: | :--- |\n| json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| xlsx | MS Excel spreadsheet\n| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n||\n\nValid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n\n\n", "parameters": [{"name": "scheduled_plan_id", "in": "path", "description": "Scheduled Plan Id", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Scheduled Plan", "required": true, "schema": {"$ref": "#/definitions/ScheduledPlan"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Scheduled Plan", "schema": {"$ref": "#/definitions/ScheduledPlan"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}, "get": {"tags": ["ScheduledPlan"], "operationId": "scheduled_plan", "summary": "Get Scheduled Plan", "description": "### Get Information About a Scheduled Plan\n\nAdmins can fetch information about other users' Scheduled Plans.\n", "parameters": [{"name": "scheduled_plan_id", "in": "path", "description": "Scheduled Plan Id", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Scheduled Plan", "schema": {"$ref": "#/definitions/ScheduledPlan"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/scheduled_plans": {"post": {"tags": ["ScheduledPlan"], "operationId": "create_scheduled_plan", "summary": "Create Scheduled Plan", "description": "### Create a Scheduled Plan\n\nCreate a scheduled plan to render a Look or Dashboard on a recurring schedule.\n\nTo create a scheduled plan, you MUST provide values for the following fields:\n`name`\nand\n`look_id`, `dashboard_id`, `lookml_dashboard_id`, or `query_id`\nand\n`cron_tab` or `datagroup`\nand\nat least one scheduled_plan_destination\n\nA scheduled plan MUST have at least one scheduled_plan_destination defined.\n\nWhen `look_id` is set, `require_no_results`, `require_results`, and `require_change` are all required.\n\nIf `create_scheduled_plan` fails with a 422 error, be sure to look at the error messages in the response which will explain exactly what fields are missing or values that are incompatible.\n\nThe queries that provide the data for the look or dashboard are run in the context of user account that owns the scheduled plan.\n\nWhen `run_as_recipient` is `false` or not specified, the queries that provide the data for the\nlook or dashboard are run in the context of user account that owns the scheduled plan.\n\nWhen `run_as_recipient` is `true` and all the email recipients are Looker user accounts, the\nqueries are run in the context of each recipient, so different recipients may see different\ndata from the same scheduled render of a look or dashboard. For more details, see [Run As Recipient](https://cloud.google.com/looker/docs/r/admin/run-as-recipient).\n\nAdmins can create and modify scheduled plans on behalf of other users by specifying a user id.\nNon-admin users may not create or modify scheduled plans by or for other users.\n\n#### Email Permissions:\n\nFor details about permissions required to schedule delivery to email and the safeguards\nLooker offers to protect against sending to unauthorized email destinations, see [Email Domain Allow List for Scheduled Looks](https://cloud.google.com/looker/docs/r/api/embed-permissions).\n\n\n#### Scheduled Plan Destination Formats\n\nScheduled plan destinations must specify the data format to produce and send to the destination.\n\nFormats:\n\n| format | Description\n| :-----------: | :--- |\n| json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| xlsx | MS Excel spreadsheet\n| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n||\n\nValid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n\n\n", "parameters": [{"name": "body", "in": "body", "description": "Scheduled Plan", "required": true, "schema": {"$ref": "#/definitions/ScheduledPlan"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Scheduled Plan", "schema": {"$ref": "#/definitions/ScheduledPlan"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}, "get": {"tags": ["ScheduledPlan"], "operationId": "all_scheduled_plans", "summary": "Get All Scheduled Plans", "description": "### List All Scheduled Plans\n\nReturns all scheduled plans which belong to the caller or given user.\n\nIf no user_id is provided, this function returns the scheduled plans owned by the caller.\n\n\nTo list all schedules for all users, pass `all_users=true`.\n\n\nThe caller must have `see_schedules` permission to see other users' scheduled plans.\n\n\n", "parameters": [{"name": "user_id", "in": "query", "description": "Return scheduled plans belonging to this user_id. If not provided, returns scheduled plans owned by the caller.", "required": false, "type": "string"}, {"name": "fields", "in": "query", "description": "Comma delimited list of field names. If provided, only the fields specified will be included in the response", "required": false, "type": "string"}, {"name": "all_users", "in": "query", "description": "Return scheduled plans belonging to all users (caller needs see_schedules permission)", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Scheduled Plan", "schema": {"type": "array", "items": {"$ref": "#/definitions/ScheduledPlan"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/scheduled_plans/run_once": {"post": {"tags": ["ScheduledPlan"], "operationId": "scheduled_plan_run_once", "summary": "Run Scheduled Plan Once", "description": "### Run a Scheduled Plan Immediately\n\nCreate a scheduled plan that runs only once, and immediately.\n\nThis can be useful for testing a Scheduled Plan before committing to a production schedule.\n\nAdmins can create scheduled plans on behalf of other users by specifying a user id.\n\nThis API is rate limited to prevent it from being used for relay spam or DoS attacks\n\n#### Email Permissions:\n\nFor details about permissions required to schedule delivery to email and the safeguards\nLooker offers to protect against sending to unauthorized email destinations, see [Email Domain Allow List for Scheduled Looks](https://cloud.google.com/looker/docs/r/api/embed-permissions).\n\n\n#### Scheduled Plan Destination Formats\n\nScheduled plan destinations must specify the data format to produce and send to the destination.\n\nFormats:\n\n| format | Description\n| :-----------: | :--- |\n| json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| xlsx | MS Excel spreadsheet\n| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n||\n\nValid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n\n\n", "parameters": [{"name": "body", "in": "body", "description": "Scheduled Plan", "required": true, "schema": {"$ref": "#/definitions/ScheduledPlan"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Scheduled Plan", "schema": {"$ref": "#/definitions/ScheduledPlan"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query", "x-looker-rate-limited": true}}, "/scheduled_plans/look/{look_id}": {"get": {"tags": ["ScheduledPlan"], "operationId": "scheduled_plans_for_look", "summary": "Scheduled Plans for Look", "description": "### Get Scheduled Plans for a Look\n\nReturns all scheduled plans for a look which belong to the caller or given user.\n\nIf no user_id is provided, this function returns the scheduled plans owned by the caller.\n\n\nTo list all schedules for all users, pass `all_users=true`.\n\n\nThe caller must have `see_schedules` permission to see other users' scheduled plans.\n\n\n", "parameters": [{"name": "look_id", "in": "path", "description": "Look Id", "required": true, "type": "string"}, {"name": "user_id", "in": "query", "description": "User Id (default is requesting user if not specified)", "required": false, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "all_users", "in": "query", "description": "Return scheduled plans belonging to all users for the look", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Scheduled Plan", "schema": {"type": "array", "items": {"$ref": "#/definitions/ScheduledPlan"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/scheduled_plans/dashboard/{dashboard_id}": {"get": {"tags": ["ScheduledPlan"], "operationId": "scheduled_plans_for_dashboard", "summary": "Scheduled Plans for Dashboard", "description": "### Get Scheduled Plans for a Dashboard\n\nReturns all scheduled plans for a dashboard which belong to the caller or given user.\n\nIf no user_id is provided, this function returns the scheduled plans owned by the caller.\n\n\nTo list all schedules for all users, pass `all_users=true`.\n\n\nThe caller must have `see_schedules` permission to see other users' scheduled plans.\n\n\n", "parameters": [{"name": "dashboard_id", "in": "path", "description": "Dashboard Id", "required": true, "type": "string"}, {"name": "user_id", "in": "query", "description": "User Id (default is requesting user if not specified)", "required": false, "type": "string"}, {"name": "all_users", "in": "query", "description": "Return scheduled plans belonging to all users for the dashboard", "required": false, "type": "boolean"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Scheduled Plan", "schema": {"type": "array", "items": {"$ref": "#/definitions/ScheduledPlan"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/scheduled_plans/lookml_dashboard/{lookml_dashboard_id}": {"get": {"tags": ["ScheduledPlan"], "operationId": "scheduled_plans_for_lookml_dashboard", "summary": "Scheduled Plans for LookML Dashboard", "description": "### Get Scheduled Plans for a LookML Dashboard\n\nReturns all scheduled plans for a LookML Dashboard which belong to the caller or given user.\n\nIf no user_id is provided, this function returns the scheduled plans owned by the caller.\n\n\nTo list all schedules for all users, pass `all_users=true`.\n\n\nThe caller must have `see_schedules` permission to see other users' scheduled plans.\n\n\n", "parameters": [{"name": "lookml_dashboard_id", "in": "path", "description": "LookML Dashboard Id", "required": true, "type": "string"}, {"name": "user_id", "in": "query", "description": "User Id (default is requesting user if not specified)", "required": false, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "all_users", "in": "query", "description": "Return scheduled plans belonging to all users for the dashboard", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Scheduled Plan", "schema": {"type": "array", "items": {"$ref": "#/definitions/ScheduledPlan"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/scheduled_plans/{scheduled_plan_id}/run_once": {"post": {"tags": ["ScheduledPlan"], "operationId": "scheduled_plan_run_once_by_id", "summary": "Run Scheduled Plan Once by Id", "description": "### Run a Scheduled Plan By Id Immediately\nThis function creates a run-once schedule plan based on an existing scheduled plan,\napplies modifications (if any) to the new scheduled plan, and runs the new schedule plan immediately.\nThis can be useful for testing modifications to an existing scheduled plan before committing to a production schedule.\n\nThis function internally performs the following operations:\n\n1. Copies the properties of the existing scheduled plan into a new scheduled plan\n2. Copies any properties passed in the JSON body of this request into the new scheduled plan (replacing the original values)\n3. Creates the new scheduled plan\n4. Runs the new scheduled plan\n\nThe original scheduled plan is not modified by this operation.\nAdmins can create, modify, and run scheduled plans on behalf of other users by specifying a user id.\nNon-admins can only create, modify, and run their own scheduled plans.\n\n#### Email Permissions:\n\nFor details about permissions required to schedule delivery to email and the safeguards\nLooker offers to protect against sending to unauthorized email destinations, see [Email Domain Allow List for Scheduled Looks](https://cloud.google.com/looker/docs/r/api/embed-permissions).\n\n\n#### Scheduled Plan Destination Formats\n\nScheduled plan destinations must specify the data format to produce and send to the destination.\n\nFormats:\n\n| format | Description\n| :-----------: | :--- |\n| json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| xlsx | MS Excel spreadsheet\n| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n||\n\nValid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n\n\n\nThis API is rate limited to prevent it from being used for relay spam or DoS attacks\n\n", "parameters": [{"name": "scheduled_plan_id", "in": "path", "description": "Id of schedule plan to copy and run", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Property values to apply to the newly copied scheduled plan before running it", "required": false, "schema": {"$ref": "#/definitions/WriteScheduledPlan"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Scheduled Plan", "schema": {"$ref": "#/definitions/ScheduledPlan"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query", "x-looker-rate-limited": true}}, "/session_config": {"get": {"tags": ["Auth"], "operationId": "session_config", "summary": "Get Session Config", "description": "### Get session config.\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Session Config", "schema": {"$ref": "#/definitions/SessionConfig"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Auth"], "operationId": "update_session_config", "summary": "Update Session Config", "description": "### Update session config.\n", "parameters": [{"name": "body", "in": "body", "description": "Session Config", "required": true, "schema": {"$ref": "#/definitions/SessionConfig"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Session Config", "schema": {"$ref": "#/definitions/SessionConfig"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/session": {"get": {"tags": ["Session"], "operationId": "session", "summary": "Get Auth", "description": "### Get API Session\n\nReturns information about the current API session, such as which workspace is selected for the session.\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Auth", "schema": {"$ref": "#/definitions/ApiSession"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Session"], "operationId": "update_session", "summary": "Update Auth", "description": "### Update API Session\n\n#### API Session Workspace\n\nYou can use this endpoint to change the active workspace for the current API session.\n\nOnly one workspace can be active in a session. The active workspace can be changed\nany number of times in a session.\n\nThe default workspace for API sessions is the \"production\" workspace.\n\nAll Looker APIs that use projects or lookml models (such as running queries) will\nuse the version of project and model files defined by this workspace for the lifetime of the\ncurrent API session or until the session workspace is changed again.\n\nAn API session has the same lifetime as the access_token used to authenticate API requests. Each successful\nAPI login generates a new access_token and a new API session.\n\nIf your Looker API client application needs to work in a dev workspace across multiple\nAPI sessions, be sure to select the dev workspace after each login.\n", "parameters": [{"name": "body", "in": "body", "description": "Auth", "required": true, "schema": {"$ref": "#/definitions/ApiSession"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Auth", "schema": {"$ref": "#/definitions/ApiSession"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/setting": {"patch": {"tags": ["Config"], "operationId": "set_setting", "summary": "Set Setting", "description": "### Configure Looker Settings\n\nAvailable settings are:\n - allow_user_timezones\n - custom_welcome_email\n - data_connector_default_enabled\n - extension_framework_enabled\n - extension_load_url_enabled\n - marketplace_auto_install_enabled\n - marketplace_enabled\n - onboarding_enabled\n - privatelabel_configuration\n - timezone\n - host_url\n - email_domain_allowlist\n - embed_cookieless_v2\n - embed_enabled\n\nSee the `Setting` type for more information on the specific values that can be configured.\n\nIf a setting update is rejected, the API error payload should provide information on the cause of the rejection.\n", "parameters": [{"name": "body", "in": "body", "description": "Looker Setting Configuration", "required": true, "schema": {"$ref": "#/definitions/Setting"}}, {"name": "fields", "in": "query", "description": "Requested fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Looker Settings", "schema": {"$ref": "#/definitions/Setting"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "get": {"tags": ["Config"], "operationId": "get_setting", "summary": "Get Setting", "description": "### Get Looker Settings\n\nAvailable settings are:\n - allow_user_timezones\n - custom_welcome_email\n - data_connector_default_enabled\n - extension_framework_enabled\n - extension_load_url_enabled\n - marketplace_auto_install_enabled\n - marketplace_enabled\n - onboarding_enabled\n - privatelabel_configuration\n - timezone\n - host_url\n - email_domain_allowlist\n - embed_cookieless_v2\n - embed_enabled\n\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Looker Settings", "schema": {"$ref": "#/definitions/Setting"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/smtp_settings": {"post": {"tags": ["Config"], "operationId": "set_smtp_settings", "summary": "Set SMTP Setting", "description": "### Configure SMTP Settings\n  This API allows users to configure the SMTP settings on the Looker instance.\n  Only admin users are authorised to call this API.\n", "parameters": [{"name": "body", "in": "body", "description": "SMTP Setting Configuration", "required": true, "schema": {"$ref": "#/definitions/SmtpSettings"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully updated SMTP settings"}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query", "x-looker-rate-limited": true}}, "/smtp_status": {"get": {"tags": ["Config"], "operationId": "smtp_status", "summary": "Get SMTP Status", "description": "### Get current SMTP status.\n", "parameters": [{"name": "fields", "in": "query", "description": "Include only these fields in the response", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "SMTP Status", "schema": {"$ref": "#/definitions/SmtpStatus"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/folders/search": {"get": {"tags": ["Folder"], "operationId": "search_folders", "summary": "Search Folders", "description": "Search for folders by creator id, parent id, name, etc", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return only page N of paginated results", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "per_page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return N rows of data per page", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "limit", "in": "query", "description": "Number of results to return. (used with offset and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "name", "in": "query", "description": "Match Space title.", "required": false, "type": "string"}, {"name": "id", "in": "query", "description": "Match Space id", "required": false, "type": "string"}, {"name": "parent_id", "in": "query", "description": "Filter on a children of a particular folder.", "required": false, "type": "string"}, {"name": "creator_id", "in": "query", "description": "Filter on folder created by a particular user.", "required": false, "type": "string"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression", "required": false, "type": "boolean"}, {"name": "is_shared_root", "in": "query", "description": "Match is shared root", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "folders", "schema": {"type": "array", "items": {"$ref": "#/definitions/Folder"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/folders/{folder_id}": {"get": {"tags": ["Folder"], "operationId": "folder", "summary": "Get Folder", "description": "### Get information about the folder with a specific id.", "parameters": [{"name": "folder_id", "in": "path", "description": "Id of folder", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Folder", "schema": {"$ref": "#/definitions/Folder"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Folder"], "operationId": "delete_folder", "summary": "Delete Folder", "description": "### Delete the folder with a specific id including any children folders.\n**DANGER** this will delete all looks and dashboards in the folder.\n", "parameters": [{"name": "folder_id", "in": "path", "description": "Id of folder", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Folder"], "operationId": "update_folder", "summary": "Update Folder", "description": "### Update the folder with a specific id.", "parameters": [{"name": "folder_id", "in": "path", "description": "Id of folder", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Folder parameters", "required": true, "schema": {"$ref": "#/definitions/UpdateFolder"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Folder", "schema": {"$ref": "#/definitions/Folder"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/folders": {"get": {"tags": ["Folder"], "operationId": "all_folders", "summary": "Get All Folders", "description": "### Get information about all folders.\n\nIn API 3.x, this will not return empty personal folders, unless they belong to the calling user,\nor if they contain soft-deleted content.\n\nIn API 4.0+, all personal folders will be returned.\n\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Folder", "schema": {"type": "array", "items": {"$ref": "#/definitions/Folder"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Folder"], "operationId": "create_folder", "summary": "Create Folder", "description": "### Create a folder with specified information.\n\nCaller must have permission to edit the parent folder and to create folders, otherwise the request\nreturns 404 Not Found.\n", "parameters": [{"name": "body", "in": "body", "description": "Folder parameters", "required": true, "schema": {"$ref": "#/definitions/CreateFolder"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Folder", "schema": {"$ref": "#/definitions/Folder"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/folders/{folder_id}/children": {"get": {"tags": ["Folder"], "operationId": "folder_children", "summary": "Get Folder Children", "description": "### Get the children of a folder.", "parameters": [{"name": "folder_id", "in": "path", "description": "Id of folder", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return only page N of paginated results", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "per_page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return N rows of data per page", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "limit", "in": "query", "description": "Number of results to return. (used with offset and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Folders", "schema": {"type": "array", "items": {"$ref": "#/definitions/Folder"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/folders/{folder_id}/children/search": {"get": {"tags": ["Folder"], "operationId": "folder_children_search", "summary": "Search Folder Children", "description": "### Search the children of a folder", "parameters": [{"name": "folder_id", "in": "path", "description": "Id of folder", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "name", "in": "query", "description": "Match folder name.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Folders", "schema": {"type": "array", "items": {"$ref": "#/definitions/Folder"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/folders/{folder_id}/parent": {"get": {"tags": ["Folder"], "operationId": "folder_parent", "summary": "Get Folder Parent", "description": "### Get the parent of a folder", "parameters": [{"name": "folder_id", "in": "path", "description": "Id of folder", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Folder", "schema": {"$ref": "#/definitions/Folder"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/folders/{folder_id}/ancestors": {"get": {"tags": ["Folder"], "operationId": "folder_ancestors", "summary": "Get Folder Ancestors", "description": "### Get the ancestors of a folder", "parameters": [{"name": "folder_id", "in": "path", "description": "Id of folder", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Folders", "schema": {"type": "array", "items": {"$ref": "#/definitions/Folder"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/folders/{folder_id}/looks": {"get": {"tags": ["Folder"], "operationId": "folder_looks", "summary": "Get Folder Looks", "description": "### Get all looks in a folder.\nIn API 3.x, this will return all looks in a folder, including looks in the trash.\nIn API 4.0+, all looks in a folder will be returned, excluding looks in the trash.\n", "parameters": [{"name": "folder_id", "in": "path", "description": "Id of folder", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Looks", "schema": {"type": "array", "items": {"$ref": "#/definitions/LookWithQuery"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/folders/{folder_id}/dashboards": {"get": {"tags": ["Folder"], "operationId": "folder_dashboards", "summary": "Get Folder Dashboards", "description": "### Get the dashboards in a folder", "parameters": [{"name": "folder_id", "in": "path", "description": "Id of folder", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Dashboard", "schema": {"type": "array", "items": {"$ref": "#/definitions/Dashboard"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/sql_queries/{slug}": {"get": {"tags": ["Query"], "operationId": "sql_query", "summary": "Get SQL Runner Query", "description": "Get a SQL Runner query.", "parameters": [{"name": "slug", "in": "path", "description": "slug of query", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "SQL Runner Query", "schema": {"$ref": "#/definitions/SqlQuery"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/sql_queries": {"post": {"tags": ["Query"], "operationId": "create_sql_query", "summary": "Create SQL Runner Query", "description": "### Create a SQL Runner Query\n\nEither the `connection_name` or `model_name` parameter MUST be provided.\n", "parameters": [{"name": "body", "in": "body", "description": "SQL Runner Query", "required": true, "schema": {"$ref": "#/definitions/SqlQueryCreate"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "SQL Runner Query", "schema": {"$ref": "#/definitions/SqlQuery"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/sql_queries/{slug}/run/{result_format}": {"post": {"tags": ["Query"], "operationId": "run_sql_query", "summary": "Run SQL Runner Query", "description": "Execute a SQL Runner query in a given result_format.", "produces": ["text", "application/json", "image/png", "image/jpeg"], "parameters": [{"name": "slug", "in": "path", "description": "slug of query", "required": true, "type": "string"}, {"name": "result_format", "in": "path", "description": "Format of result, options are: [\"inline_json\", \"json\", \"json_detail\", \"json_fe\", \"csv\", \"html\", \"md\", \"txt\", \"xlsx\", \"gsxml\", \"sql\", \"json_label\"]", "required": true, "type": "string"}, {"name": "download", "in": "query", "description": "Defaults to false. If set to true, the HTTP response will have content-disposition and other headers set to make the HTTP response behave as a downloadable attachment instead of as inline content.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "SQL Runner Query", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "db_query"}}, "/support_access/allowlist": {"get": {"tags": ["Auth"], "operationId": "get_support_access_allowlist_entries", "summary": "Get Support Access Allowlist Users", "description": "### Get Support Access Allowlist Users\n\nReturns the users that have been added to the Support Access Allowlist\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Support Access Allowlist Entries", "schema": {"type": "array", "items": {"$ref": "#/definitions/SupportAccessAllowlistEntry"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Auth"], "operationId": "add_support_access_allowlist_entries", "summary": "Add Support Access Allowlist Users", "description": "### Add Support Access Allowlist Users\n\nAdds a list of emails to the Allowlist, using the provided reason\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "body", "in": "body", "description": "Request params.", "required": true, "schema": {"$ref": "#/definitions/SupportAccessAddEntries"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Support Access Allowlist Entries", "schema": {"type": "array", "items": {"$ref": "#/definitions/SupportAccessAllowlistEntry"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/support_access/allowlist/{entry_id}": {"delete": {"tags": ["Auth"], "operationId": "delete_support_access_allowlist_entry", "summary": "Delete Support Access Allowlist Entry", "description": "### Delete Support Access Allowlist User\n\nDeletes the specified Allowlist Entry Id\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "entry_id", "in": "path", "description": "Id of Allowlist Entry", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Entry successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/support_access/enable": {"put": {"tags": ["Auth"], "operationId": "enable_support_access", "summary": "Enable Support Access", "description": "### Enable Support Access\n\nEnables Support Access for the provided duration\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "body", "in": "body", "description": "Enable Support Access request params.", "required": true, "schema": {"$ref": "#/definitions/SupportAccessEnable"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Support Access Status", "schema": {"$ref": "#/definitions/SupportAccessStatus"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/support_access/disable": {"put": {"tags": ["Auth"], "operationId": "disable_support_access", "summary": "Disable Support Access", "description": "### Disable Support Access\n\nDisables Support Access immediately\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Support Access Status", "schema": {"$ref": "#/definitions/SupportAccessStatus"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/support_access/status": {"get": {"tags": ["Auth"], "operationId": "support_access_status", "summary": "Support Access Status", "description": "### Support Access Status\n\nReturns the current Support Access Status\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Support Access Status", "schema": {"$ref": "#/definitions/SupportAccessStatus"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/themes": {"get": {"tags": ["Theme"], "operationId": "all_themes", "summary": "Get All Themes", "description": "### Get an array of all existing themes\n\nGet a **single theme** by id with [Theme](#!/Theme/theme)\n\nThis method returns an array of all existing themes. The active time for the theme is not considered.\n\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Themes", "schema": {"type": "array", "items": {"$ref": "#/definitions/Theme"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Theme"], "operationId": "create_theme", "summary": "Create Theme", "description": "### Create a theme\n\nCreates a new theme object, returning the theme details, including the created id.\n\nIf `settings` are not specified, the default theme settings will be copied into the new theme.\n\nThe theme `name` can only contain alphanumeric characters or underscores. Theme names should not contain any confidential information, such as customer names.\n\n**Update** an existing theme with [Update Theme](#!/Theme/update_theme)\n\n**Permanently delete** an existing theme with [Delete Theme](#!/Theme/delete_theme)\n\nFor more information, see [Creating and Applying Themes](https://cloud.google.com/looker/docs/r/admin/themes).\n\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n\n", "parameters": [{"name": "body", "in": "body", "description": "Theme", "required": true, "schema": {"$ref": "#/definitions/Theme"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Theme", "schema": {"$ref": "#/definitions/Theme"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/themes/search": {"get": {"tags": ["Theme"], "operationId": "search_themes", "summary": "Search Themes", "description": "### Search all themes for matching criteria.\n\nReturns an **array of theme objects** that match the specified search criteria.\n\n| Search Parameters | Description\n| :-------------------: | :------ |\n| `begin_at` only | Find themes active at or after `begin_at`\n| `end_at` only | Find themes active at or before `end_at`\n| both set | Find themes with an active inclusive period between `begin_at` and `end_at`\n\nNote: Range matching requires boolean AND logic.\nWhen using `begin_at` and `end_at` together, do not use `filter_or`=TRUE\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n\nGet a **single theme** by id with [Theme](#!/Theme/theme)\n\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n\n", "parameters": [{"name": "id", "in": "query", "description": "Match theme id.", "required": false, "type": "string"}, {"name": "name", "in": "query", "description": "Match theme name.", "required": false, "type": "string"}, {"name": "begin_at", "in": "query", "description": "Timestamp for activation.", "required": false, "type": "string", "format": "date-time"}, {"name": "end_at", "in": "query", "description": "Timestamp for expiration.", "required": false, "type": "string", "format": "date-time"}, {"name": "limit", "in": "query", "description": "Number of results to return (used with `offset`).", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any (used with `limit`).", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Themes", "schema": {"type": "array", "items": {"$ref": "#/definitions/Theme"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/themes/default": {"get": {"tags": ["Theme"], "operationId": "default_theme", "summary": "Get Default Theme", "description": "### Get the default theme\n\nReturns the active theme object set as the default.\n\nThe **default** theme name can be set in the UI on the Admin|Theme UI page\n\nThe optional `ts` parameter can specify a different timestamp than \"now.\" If specified, it returns the default theme at the time indicated.\n", "parameters": [{"name": "ts", "in": "query", "description": "Timestamp representing the target datetime for the active period. Defaults to 'now'", "required": false, "type": "string", "format": "date-time"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Theme", "schema": {"$ref": "#/definitions/Theme"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "put": {"tags": ["Theme"], "operationId": "set_default_theme", "summary": "Set Default Theme", "description": "### Set the global default theme by theme name\n\nOnly Admin users can call this function.\n\nOnly an active theme with no expiration (`end_at` not set) can be assigned as the default theme. As long as a theme has an active record with no expiration, it can be set as the default.\n\n[Create Theme](#!/Theme/create) has detailed information on rules for default and active themes\n\nReturns the new specified default theme object.\n\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n\n", "parameters": [{"name": "name", "in": "query", "description": "Name of theme to set as default", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Theme", "schema": {"$ref": "#/definitions/Theme"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/themes/active": {"get": {"tags": ["Theme"], "operationId": "active_themes", "summary": "Get Active Themes", "description": "### Get active themes\n\nReturns an array of active themes.\n\nIf the `name` parameter is specified, it will return an array with one theme if it's active and found.\n\nThe optional `ts` parameter can specify a different timestamp than \"now.\"\n\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n\n\n", "parameters": [{"name": "name", "in": "query", "description": "Name of theme", "required": false, "type": "string"}, {"name": "ts", "in": "query", "description": "Timestamp representing the target datetime for the active period. Defaults to 'now'", "required": false, "type": "string", "format": "date-time"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Themes", "schema": {"type": "array", "items": {"$ref": "#/definitions/Theme"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/themes/theme_or_default": {"get": {"tags": ["Theme"], "operationId": "theme_or_default", "summary": "Get Theme or Default", "description": "### Get the named theme if it's active. Otherwise, return the default theme\n\nThe optional `ts` parameter can specify a different timestamp than \"now.\"\nNote: API users with `show` ability can call this function\n\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n\n", "parameters": [{"name": "name", "in": "query", "description": "Name of theme", "required": true, "type": "string"}, {"name": "ts", "in": "query", "description": "Timestamp representing the target datetime for the active period. Defaults to 'now'", "required": false, "type": "string", "format": "date-time"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Theme", "schema": {"$ref": "#/definitions/Theme"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/themes/validate": {"post": {"tags": ["Theme"], "operationId": "validate_theme", "summary": "Validate Theme", "description": "### Validate a theme with the specified information\n\nValidates all values set for the theme, returning any errors encountered, or 200 OK if valid\n\nSee [Create Theme](#!/Theme/create_theme) for constraints\n\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n\n", "parameters": [{"name": "body", "in": "body", "description": "Theme", "required": true, "schema": {"$ref": "#/definitions/Theme"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Theme validation results", "schema": {"$ref": "#/definitions/ValidationError"}}, "204": {"description": "No errors detected with the theme", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/themes/{theme_id}": {"get": {"tags": ["Theme"], "operationId": "theme", "summary": "Get Theme", "description": "### Get a theme by ID\n\nUse this to retrieve a specific theme, whether or not it's currently active.\n\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n\n", "parameters": [{"name": "theme_id", "in": "path", "description": "Id of theme", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Theme", "schema": {"$ref": "#/definitions/Theme"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Theme"], "operationId": "update_theme", "summary": "Update Theme", "description": "### Update the theme by id.\n\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n\n", "parameters": [{"name": "theme_id", "in": "path", "description": "Id of theme", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Theme", "required": true, "schema": {"$ref": "#/definitions/Theme"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Theme", "schema": {"$ref": "#/definitions/Theme"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Theme"], "operationId": "delete_theme", "summary": "Delete Theme", "description": "### Delete a specific theme by id\n\nThis operation permanently deletes the identified theme from the database.\n\nBecause multiple themes can have the same name (with different activation time spans) themes can only be deleted by ID.\n\nAll IDs associated with a theme name can be retrieved by searching for the theme name with [Theme Search](#!/Theme/search).\n\n**Note**: Custom themes needs to be enabled by Looker. Unless custom themes are enabled, only the automatically generated default theme can be used. Please contact your Account Manager or help.looker.com to update your license for this feature.\n\n", "parameters": [{"name": "theme_id", "in": "path", "description": "Id of theme", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/timezones": {"get": {"tags": ["Config"], "operationId": "all_timezones", "summary": "Get All Timezones", "description": "### Get a list of timezones that Looker supports (e.g. useful for scheduling tasks).\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Timezone", "schema": {"type": "array", "items": {"$ref": "#/definitions/Timezone"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/ssh_servers": {"get": {"tags": ["Connection"], "operationId": "all_ssh_servers", "summary": "Get All SSH Servers", "description": "### Get information about all SSH Servers.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "SSH Server", "schema": {"type": "array", "items": {"$ref": "#/definitions/SshServer"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Connection"], "operationId": "create_ssh_server", "summary": "Create SSH Server", "description": "### Create an SSH Server.\n", "parameters": [{"name": "body", "in": "body", "description": "SSH Server", "required": true, "schema": {"$ref": "#/definitions/SshServer"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "SSH Server", "schema": {"$ref": "#/definitions/SshServer"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/ssh_server/{ssh_server_id}": {"get": {"tags": ["Connection"], "operationId": "ssh_server", "summary": "Get SSH Server", "description": "### Get information about an SSH Server.\n", "parameters": [{"name": "ssh_server_id", "in": "path", "description": "Id of SSH Server", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "SSH Server", "schema": {"$ref": "#/definitions/SshServer"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Connection"], "operationId": "update_ssh_server", "summary": "Update SSH Server", "description": "### Update an SSH Server.\n", "parameters": [{"name": "ssh_server_id", "in": "path", "description": "Id of SSH Server", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "SSH Server", "required": true, "schema": {"$ref": "#/definitions/SshServer"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "SSH Server", "schema": {"$ref": "#/definitions/SshServer"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Connection"], "operationId": "delete_ssh_server", "summary": "Delete SSH Server", "description": "### Delete an SSH Server.\n", "parameters": [{"name": "ssh_server_id", "in": "path", "description": "Id of SSH Server", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/ssh_server/{ssh_server_id}/test": {"get": {"tags": ["Connection"], "operationId": "test_ssh_server", "summary": "Test SSH Server", "description": "### Test the SSH Server\n", "parameters": [{"name": "ssh_server_id", "in": "path", "description": "Id of SSH Server", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Test SSH Server", "schema": {"$ref": "#/definitions/SshServer"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/ssh_tunnels": {"get": {"tags": ["Connection"], "operationId": "all_ssh_tunnels", "summary": "Get All SSH Tunnels", "description": "### Get information about all SSH Tunnels.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "SSH Tunnel", "schema": {"type": "array", "items": {"$ref": "#/definitions/SshTunnel"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["Connection"], "operationId": "create_ssh_tunnel", "summary": "Create SSH Tunnel", "description": "### Create an SSH Tunnel\n", "parameters": [{"name": "body", "in": "body", "description": "SSH Tunnel", "required": true, "schema": {"$ref": "#/definitions/SshTunnel"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "SSH Tunnel", "schema": {"$ref": "#/definitions/SshTunnel"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/ssh_tunnel/{ssh_tunnel_id}": {"get": {"tags": ["Connection"], "operationId": "ssh_tunnel", "summary": "Get SSH Tunnel", "description": "### Get information about an SSH Tunnel.\n", "parameters": [{"name": "ssh_tunnel_id", "in": "path", "description": "Id of SSH Tunnel", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "SSH Tunnel", "schema": {"$ref": "#/definitions/SshTunnel"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["Connection"], "operationId": "update_ssh_tunnel", "summary": "Update SSH Tunnel", "description": "### Update an SSH Tunnel\n", "parameters": [{"name": "ssh_tunnel_id", "in": "path", "description": "Id of SSH Tunnel", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "SSH Tunnel", "required": true, "schema": {"$ref": "#/definitions/SshTunnel"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "SSH Tunnel", "schema": {"$ref": "#/definitions/SshTunnel"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["Connection"], "operationId": "delete_ssh_tunnel", "summary": "Delete SSH Tunnel", "description": "### Delete an SSH Tunnel\n", "parameters": [{"name": "ssh_tunnel_id", "in": "path", "description": "Id of SSH Tunnel", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/ssh_tunnel/{ssh_tunnel_id}/test": {"get": {"tags": ["Connection"], "operationId": "test_ssh_tunnel", "summary": "Test SSH Tunnel", "description": "### Test the SSH Tunnel\n", "parameters": [{"name": "ssh_tunnel_id", "in": "path", "description": "Id of SSH Tunnel", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Test SSH Tunnel", "schema": {"$ref": "#/definitions/SshTunnel"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/ssh_public_key": {"get": {"tags": ["Connection"], "operationId": "ssh_public_key", "summary": "Get SSH Public Key", "description": "### Get the SSH public key\n\nGet the public key created for this instance to identify itself to a remote SSH server.\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "SSH Public Key", "schema": {"$ref": "#/definitions/SshPublicKey"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/user_attributes": {"get": {"tags": ["UserAttribute"], "operationId": "all_user_attributes", "summary": "Get All User Attributes", "description": "### Get information about all user attributes.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "sorts", "in": "query", "description": "Fields to order the results by. Sortable fields include: name, label", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "User Attribute", "schema": {"type": "array", "items": {"$ref": "#/definitions/UserAttribute"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["UserAttribute"], "operationId": "create_user_attribute", "summary": "Create User Attribute", "description": "### Create a new user attribute\n\nPermission information for a user attribute is conveyed through the `can` and `user_can_edit` fields.\nThe `user_can_edit` field indicates whether an attribute is user-editable _anywhere_ in the application.\nThe `can` field gives more granular access information, with the `set_value` child field indicating whether\nan attribute's value can be set by [Setting the User Attribute User Value](#!/User/set_user_attribute_user_value).\n\nNote: `name` and `label` fields must be unique across all user attributes in the Looker instance.\nAttempting to create a new user attribute with a name or label that duplicates an existing\nuser attribute will fail with a 422 error.\n", "parameters": [{"name": "body", "in": "body", "description": "User Attribute", "required": true, "schema": {"$ref": "#/definitions/UserAttribute"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "User Attribute", "schema": {"$ref": "#/definitions/UserAttribute"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/user_attributes/{user_attribute_id}": {"get": {"tags": ["UserAttribute"], "operationId": "user_attribute", "summary": "Get User Attribute", "description": "### Get information about a user attribute.\n", "parameters": [{"name": "user_attribute_id", "in": "path", "description": "Id of user attribute", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "User Attribute", "schema": {"$ref": "#/definitions/UserAttribute"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["UserAttribute"], "operationId": "update_user_attribute", "summary": "Update User Attribute", "description": "### Update a user attribute definition.\n", "parameters": [{"name": "user_attribute_id", "in": "path", "description": "Id of user attribute", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "User Attribute", "required": true, "schema": {"$ref": "#/definitions/UserAttribute"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "User Attribute", "schema": {"$ref": "#/definitions/UserAttribute"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["UserAttribute"], "operationId": "delete_user_attribute", "summary": "Delete User Attribute", "description": "### Delete a user attribute (admin only).\n", "parameters": [{"name": "user_attribute_id", "in": "path", "description": "Id of user attribute", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/user_attributes/{user_attribute_id}/group_values": {"get": {"tags": ["UserAttribute"], "operationId": "all_user_attribute_group_values", "summary": "Get User Attribute Group Values", "description": "### Returns all values of a user attribute defined by user groups, in precedence order.\n\nA user may be a member of multiple groups which define different values for a given user attribute.\nThe order of group-values in the response determines precedence for selecting which group-value applies\nto a given user.  For more information, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values).\n\nResults will only include groups that the caller's user account has permission to see.\n", "parameters": [{"name": "user_attribute_id", "in": "path", "description": "Id of user attribute", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "All group values for attribute.", "schema": {"type": "array", "items": {"$ref": "#/definitions/UserAttributeGroupValue"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["UserAttribute"], "operationId": "set_user_attribute_group_values", "summary": "Set User Attribute Group Values", "description": "### Define values for a user attribute across a set of groups, in priority order.\n\nThis function defines all values for a user attribute defined by user groups. This is a global setting, potentially affecting\nall users in the system. This function replaces any existing group value definitions for the indicated user attribute.\n\nThe value of a user attribute for a given user is determined by searching the following locations, in this order:\n\n1. the user's account settings\n2. the groups that the user is a member of\n3. the default value of the user attribute, if any\n\nThe user may be a member of multiple groups which define different values for that user attribute. The order of items in the group_values parameter\ndetermines which group takes priority for that user. Lowest array index wins.\n\nAn alternate method to indicate the selection precedence of group-values is to assign numbers to the 'rank' property of each\ngroup-value object in the array. Lowest 'rank' value wins. If you use this technique, you must assign a\nrank value to every group-value object in the array.\n\n  To set a user attribute value for a single user, see [Set User Attribute User Value](#!/User/set_user_attribute_user_value).\nTo set a user attribute value for all members of a group, see [Set User Attribute Group Value](#!/Group/update_user_attribute_group_value).\n", "parameters": [{"name": "user_attribute_id", "in": "path", "description": "Id of user attribute", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Array of group values.", "required": true, "schema": {"type": "array", "items": {"$ref": "#/definitions/UserAttributeGroupValue"}}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Array of group values.", "schema": {"type": "array", "items": {"$ref": "#/definitions/UserAttributeGroupValue"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/user_login_lockouts": {"get": {"tags": ["Auth"], "operationId": "all_user_login_lockouts", "summary": "Get All User Login Lockouts", "description": "### Get currently locked-out users.\n", "parameters": [{"name": "fields", "in": "query", "description": "Include only these fields in the response", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "User Login Lockout", "schema": {"type": "array", "items": {"$ref": "#/definitions/UserLoginLockout"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/user_login_lockouts/search": {"get": {"tags": ["Auth"], "operationId": "search_user_login_lockouts", "summary": "Search User Login Lockouts", "description": "### Search currently locked-out users.\n", "parameters": [{"name": "fields", "in": "query", "description": "Include only these fields in the response", "required": false, "type": "string"}, {"name": "page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return only page N of paginated results", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "per_page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return N rows of data per page", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "limit", "in": "query", "description": "Number of results to return. (used with offset and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "auth_type", "in": "query", "description": "Auth type user is locked out for (email, ldap, totp, api)", "required": false, "type": "string"}, {"name": "full_name", "in": "query", "description": "Match name", "required": false, "type": "string"}, {"name": "email", "in": "query", "description": "Match email", "required": false, "type": "string"}, {"name": "remote_id", "in": "query", "description": "Match remote LDAP ID", "required": false, "type": "string"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "User Login Lockout", "schema": {"type": "array", "items": {"$ref": "#/definitions/UserLoginLockout"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/user_login_lockout/{key}": {"delete": {"tags": ["Auth"], "operationId": "delete_user_login_lockout", "summary": "Delete User Login Lockout", "description": "### Removes login lockout for the associated user.\n", "parameters": [{"name": "key", "in": "path", "description": "The key associated with the locked user", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/user": {"get": {"tags": ["User"], "operationId": "me", "summary": "Get Current User", "description": "### Get information about the current user; i.e. the user account currently calling the API.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Current user.", "schema": {"$ref": "#/definitions/User"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users": {"get": {"tags": ["User"], "operationId": "all_users", "summary": "Get All Users", "description": "### Get information about all users.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return only page N of paginated results", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "per_page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return N rows of data per page", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "limit", "in": "query", "description": "Number of results to return. (used with offset and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "ids", "in": "query", "description": "Optional list of ids to get specific users.", "required": false, "type": "array", "items": {"type": "string"}, "collectionFormat": "csv"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "All users.", "schema": {"type": "array", "items": {"$ref": "#/definitions/User"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["User"], "operationId": "create_user", "summary": "Create User", "description": "### Create a user with the specified information.\n", "parameters": [{"name": "body", "in": "body", "description": "User", "required": false, "schema": {"$ref": "#/definitions/User"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "Created User", "schema": {"$ref": "#/definitions/User"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/search": {"get": {"tags": ["User"], "operationId": "search_users", "summary": "Search Users", "description": "### Search users\n\nReturns all<sup>*</sup> user records that match the given search criteria.\n\nIf multiple search params are given and `filter_or` is FALSE or not specified,\nsearch params are combined in a logical AND operation.\nOnly rows that match *all* search param criteria will be returned.\n\nIf `filter_or` is TRUE, multiple search params are combined in a logical OR operation.\nResults will include rows that match **any** of the search criteria.\n\nString search params use case-insensitive matching.\nString search params can contain `%` and '_' as SQL LIKE pattern match wildcard expressions.\nexample=\"dan%\" will match \"danger\" and \"Danzig\" but not \"David\"\nexample=\"D_m%\" will match \"Damage\" and \"dump\"\n\nInteger search params can accept a single value or a comma separated list of values. The multiple\nvalues will be combined under a logical OR operation - results will match at least one of\nthe given values.\n\nMost search params can accept \"IS NULL\" and \"NOT NULL\" as special expressions to match\nor exclude (respectively) rows where the column is null.\n\nBoolean search params accept only \"true\" and \"false\" as values.\n\n\n(<sup>*</sup>) Results are always filtered to the level of information the caller is permitted to view.\nLooker admins can see all user details; normal users in an open system can see\nnames of other users but no details; normal users in a closed system can only see\nnames of other users who are members of the same group as the user.\n\n", "parameters": [{"name": "fields", "in": "query", "description": "Include only these fields in the response", "required": false, "type": "string"}, {"name": "page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return only page N of paginated results", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "per_page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return N rows of data per page", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "limit", "in": "query", "description": "Number of results to return. (used with offset and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by.", "required": false, "type": "string"}, {"name": "id", "in": "query", "description": "Match User Id.", "required": false, "type": "string"}, {"name": "first_name", "in": "query", "description": "Match First name.", "required": false, "type": "string"}, {"name": "last_name", "in": "query", "description": "Match Last name.", "required": false, "type": "string"}, {"name": "verified_looker_employee", "in": "query", "description": "Search for user accounts associated with Looker employees", "required": false, "type": "boolean"}, {"name": "embed_user", "in": "query", "description": "Search for only embed users", "required": false, "type": "boolean"}, {"name": "email", "in": "query", "description": "Search for the user with this email address", "required": false, "type": "string"}, {"name": "is_disabled", "in": "query", "description": "Search for disabled user accounts", "required": false, "type": "boolean"}, {"name": "filter_or", "in": "query", "description": "Combine given search criteria in a boolean OR expression", "required": false, "type": "boolean"}, {"name": "content_metadata_id", "in": "query", "description": "Search for users who have access to this content_metadata item", "required": false, "type": "string"}, {"name": "group_id", "in": "query", "description": "Search for users who are direct members of this group", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Matching users.", "schema": {"type": "array", "items": {"$ref": "#/definitions/User"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/search/names/{pattern}": {"get": {"tags": ["User"], "operationId": "search_users_names", "summary": "Search User Names", "description": "### Search for user accounts by name\n\nReturns all user accounts where `first_name` OR `last_name` OR `email` field values match a pattern.\nThe pattern can contain `%` and `_` wildcards as in SQL LIKE expressions.\n\nAny additional search params will be combined into a logical AND expression.\n", "parameters": [{"name": "pattern", "in": "path", "description": "Pattern to match", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Include only these fields in the response", "required": false, "type": "string"}, {"name": "page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return only page N of paginated results", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "per_page", "in": "query", "description": "DEPRECATED. Use limit and offset instead. Return N rows of data per page", "required": false, "type": "integer", "format": "int64", "x-looker-deprecated": true}, {"name": "limit", "in": "query", "description": "Number of results to return. (used with offset and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "offset", "in": "query", "description": "Number of results to skip before returning any. (used with limit and takes priority over page and per_page)", "required": false, "type": "integer", "format": "int64"}, {"name": "sorts", "in": "query", "description": "Fields to sort by", "required": false, "type": "string"}, {"name": "id", "in": "query", "description": "Match User Id", "required": false, "type": "string"}, {"name": "first_name", "in": "query", "description": "Match First name", "required": false, "type": "string"}, {"name": "last_name", "in": "query", "description": "Match Last name", "required": false, "type": "string"}, {"name": "verified_looker_employee", "in": "query", "description": "Match Verified Looker employee", "required": false, "type": "boolean"}, {"name": "email", "in": "query", "description": "Match Email Address", "required": false, "type": "string"}, {"name": "is_disabled", "in": "query", "description": "Include or exclude disabled accounts in the results", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Matching users.", "schema": {"type": "array", "items": {"$ref": "#/definitions/User"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}": {"get": {"tags": ["User"], "operationId": "user", "summary": "Get User by Id", "description": "### Get information about the user with a specific id.\n\nIf the caller is an admin or the caller is the user being specified, then full user information will\nbe returned. Otherwise, a minimal 'public' variant of the user information will be returned. This contains\nThe user name and avatar url, but no sensitive information.\n", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Specified user.", "schema": {"$ref": "#/definitions/User"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["User"], "operationId": "update_user", "summary": "Update User", "description": "### Update information about the user with a specific id.\n", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "User", "required": true, "schema": {"$ref": "#/definitions/User"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "New state for specified user.", "schema": {"$ref": "#/definitions/User"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["User"], "operationId": "delete_user", "summary": "Delete User", "description": "### Delete the user with a specific id.\n\n**DANGER** this will delete the user and all looks and other information owned by the user.\n", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "User successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/credential/{credential_type}/{credential_id}": {"get": {"tags": ["User"], "operationId": "user_for_credential", "summary": "Get User by Credential Id", "description": "### Get information about the user with a credential of given type with specific id.\n\nThis is used to do things like find users by their embed external_user_id. Or, find the user with\na given api3 client_id, etc. The 'credential_type' matches the 'type' name of the various credential\ntypes. It must be one of the values listed in the table below. The 'credential_id' is your unique Id\nfor the user and is specific to each type of credential.\n\nAn example using the Ruby sdk might look like:\n\n`sdk.user_for_credential('embed', 'customer-4959425')`\n\nThis table shows the supported 'Credential Type' strings. The right column is for reference; it shows\nwhich field in the given credential type is actually searched when finding a user with the supplied\n'credential_id'.\n\n| Credential Types | Id Field Matched |\n| ---------------- | ---------------- |\n| email            | email            |\n| google           | google_user_id   |\n| saml             | saml_user_id     |\n| oidc             | oidc_user_id     |\n| ldap             | ldap_id          |\n| api              | token            |\n| api3             | client_id        |\n| embed            | external_user_id |\n| looker_openid    | email            |\n\n**NOTE**: The 'api' credential type was only used with the legacy Looker query API and is no longer supported. The credential type for API you are currently looking at is 'api3'.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "credential_type", "in": "path", "description": "Type name of credential", "required": true, "type": "string"}, {"name": "credential_id", "in": "path", "description": "Id of credential", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Specified user.", "schema": {"$ref": "#/definitions/User"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/credentials_email": {"get": {"tags": ["User"], "operationId": "user_credentials_email", "summary": "Get Email/Password Credential", "description": "### Email/password login information for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Email/Password Credential", "schema": {"$ref": "#/definitions/CredentialsEmail"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["User"], "operationId": "create_user_credentials_email", "summary": "Create Email/Password Credential", "description": "### Email/password login information for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Email/Password Credential", "required": true, "schema": {"$ref": "#/definitions/CredentialsEmail"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Email/Password Credential", "schema": {"$ref": "#/definitions/CredentialsEmail"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "patch": {"tags": ["User"], "operationId": "update_user_credentials_email", "summary": "Update Email/Password Credential", "description": "### Email/password login information for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Email/Password Credential", "required": true, "schema": {"$ref": "#/definitions/CredentialsEmail"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Email/Password Credential", "schema": {"$ref": "#/definitions/CredentialsEmail"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["User"], "operationId": "delete_user_credentials_email", "summary": "Delete Email/Password Credential", "description": "### Email/password login information for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/credentials_totp": {"get": {"tags": ["User"], "operationId": "user_credentials_totp", "summary": "Get Two-Factor Credential", "description": "### Two-factor login information for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Two-Factor Credential", "schema": {"$ref": "#/definitions/CredentialsTotp"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["User"], "operationId": "create_user_credentials_totp", "summary": "Create Two-Factor Credential", "description": "### Two-factor login information for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "Two-Factor Credential", "required": false, "schema": {"$ref": "#/definitions/CredentialsTotp"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Two-Factor Credential", "schema": {"$ref": "#/definitions/CredentialsTotp"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["User"], "operationId": "delete_user_credentials_totp", "summary": "Delete Two-Factor Credential", "description": "### Two-factor login information for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/credentials_ldap": {"get": {"tags": ["User"], "operationId": "user_credentials_ldap", "summary": "Get LDAP Credential", "description": "### LDAP login information for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "LDAP Credential", "schema": {"$ref": "#/definitions/CredentialsLDAP"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["User"], "operationId": "delete_user_credentials_ldap", "summary": "Delete LDAP Credential", "description": "### LDAP login information for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/credentials_google": {"get": {"tags": ["User"], "operationId": "user_credentials_google", "summary": "Get Google Auth Credential", "description": "### Google authentication login information for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Google Auth Credential", "schema": {"$ref": "#/definitions/CredentialsGoogle"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["User"], "operationId": "delete_user_credentials_google", "summary": "Delete Google Auth Credential", "description": "### Google authentication login information for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/credentials_saml": {"get": {"tags": ["User"], "operationId": "user_credentials_saml", "summary": "Get Saml Auth Credential", "description": "### Saml authentication login information for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Saml Auth Credential", "schema": {"$ref": "#/definitions/CredentialsSaml"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["User"], "operationId": "delete_user_credentials_saml", "summary": "Delete Saml Auth Credential", "description": "### Saml authentication login information for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/credentials_oidc": {"get": {"tags": ["User"], "operationId": "user_credentials_oidc", "summary": "Get OIDC Auth Credential", "description": "### OpenID Connect (OIDC) authentication login information for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "OIDC Auth Credential", "schema": {"$ref": "#/definitions/CredentialsOIDC"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["User"], "operationId": "delete_user_credentials_oidc", "summary": "Delete OIDC Auth Credential", "description": "### OpenID Connect (OIDC) authentication login information for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/credentials_api3/{credentials_api3_id}": {"get": {"tags": ["User"], "operationId": "user_credentials_api3", "summary": "Get API Credential", "description": "### API login information for the specified user. This is for the newer API keys that can be added for any user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "credentials_api3_id", "in": "path", "description": "Id of API Credential", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "API Credential", "schema": {"$ref": "#/definitions/CredentialsApi3"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["User"], "operationId": "delete_user_credentials_api3", "summary": "Delete API Credential", "description": "### API login information for the specified user. This is for the newer API keys that can be added for any user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "credentials_api3_id", "in": "path", "description": "Id of API Credential", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/credentials_api3": {"get": {"tags": ["User"], "operationId": "all_user_credentials_api3s", "summary": "Get All API Credentials", "description": "### API login information for the specified user. This is for the newer API keys that can be added for any user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "API Credential", "schema": {"type": "array", "items": {"$ref": "#/definitions/CredentialsApi3"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "post": {"tags": ["User"], "operationId": "create_user_credentials_api3", "summary": "Create API Credential", "description": "### API login information for the specified user. This is for the newer API keys that can be added for any user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "API Credential", "schema": {"$ref": "#/definitions/CreateCredentialsApi3"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/credentials_embed/{credentials_embed_id}": {"get": {"tags": ["User"], "operationId": "user_credentials_embed", "summary": "Get Embedding Credential", "description": "### Embed login information for the specified user.\n\nCalls to this endpoint require [Embedding](https://cloud.google.com/looker/docs/r/looker-core-feature-embed) to be enabled", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "credentials_embed_id", "in": "path", "description": "Id of Embedding Credential", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Embedding Credential", "schema": {"$ref": "#/definitions/CredentialsEmbed"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["User"], "operationId": "delete_user_credentials_embed", "summary": "Delete Embedding Credential", "description": "### Embed login information for the specified user.\n\nCalls to this endpoint require [Embedding](https://cloud.google.com/looker/docs/r/looker-core-feature-embed) to be enabled", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "credentials_embed_id", "in": "path", "description": "Id of Embedding Credential", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/credentials_embed": {"get": {"tags": ["User"], "operationId": "all_user_credentials_embeds", "summary": "Get All Embedding Credentials", "description": "### Embed login information for the specified user.\n\nCalls to this endpoint require [Embedding](https://cloud.google.com/looker/docs/r/looker-core-feature-embed) to be enabled", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Embedding Credential", "schema": {"type": "array", "items": {"$ref": "#/definitions/CredentialsEmbed"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/credentials_looker_openid": {"get": {"tags": ["User"], "operationId": "user_credentials_looker_openid", "summary": "Get Looker OpenId Credential", "description": "### Looker Openid login information for the specified user. Used by Looker Analysts.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Looker OpenId Credential", "schema": {"$ref": "#/definitions/CredentialsLookerOpenid"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["User"], "operationId": "delete_user_credentials_looker_openid", "summary": "Delete Looker OpenId Credential", "description": "### Looker Openid login information for the specified user. Used by Looker Analysts.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/sessions/{session_id}": {"get": {"tags": ["User"], "operationId": "user_session", "summary": "Get Web Login Session", "description": "### Web login session for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "session_id", "in": "path", "description": "Id of Web Login Session", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Web Login Session", "schema": {"$ref": "#/definitions/Session"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["User"], "operationId": "delete_user_session", "summary": "Delete Web Login Session", "description": "### Web login session for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "session_id", "in": "path", "description": "Id of Web Login Session", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "204": {"description": "Successfully deleted.", "schema": {"type": "string"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/sessions": {"get": {"tags": ["User"], "operationId": "all_user_sessions", "summary": "Get All Web Login Sessions", "description": "### Web login session for the specified user.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Web Login Session", "schema": {"type": "array", "items": {"$ref": "#/definitions/Session"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/credentials_email/password_reset": {"post": {"tags": ["User"], "operationId": "create_user_credentials_email_password_reset", "summary": "Create Password Reset Token", "description": "### Create a password reset token.\nThis will create a cryptographically secure random password reset token for the user.\nIf the user already has a password reset token then this invalidates the old token and creates a new one.\nThe token is expressed as the 'password_reset_url' of the user's email/password credential object.\nThis takes an optional 'expires' param to indicate if the new token should be an expiring token.\nTokens that expire are typically used for self-service password resets for existing users.\nInvitation emails for new users typically are not set to expire.\nThe expire period is always 60 minutes when expires is enabled.\nThis method can be called with an empty body.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "expires", "in": "query", "description": "Expiring token.", "required": false, "type": "boolean"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "email/password credential", "schema": {"$ref": "#/definitions/CredentialsEmail"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/roles": {"get": {"tags": ["User"], "operationId": "user_roles", "summary": "Get User Roles", "description": "### Get information about roles of a given user\n", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "direct_association_only", "in": "query", "description": "Get only roles associated directly with the user: exclude those only associated through groups.", "required": false, "type": "boolean"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Roles of user.", "schema": {"type": "array", "items": {"$ref": "#/definitions/Role"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "put": {"tags": ["User"], "operationId": "set_user_roles", "summary": "Set User Roles", "description": "### Set roles of the user with a specific id.\n", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "array of roles ids for user", "required": true, "schema": {"type": "array", "items": {"type": "string"}}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Roles of user.", "schema": {"type": "array", "items": {"$ref": "#/definitions/Role"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/attribute_values": {"get": {"tags": ["User"], "operationId": "user_attribute_user_values", "summary": "Get User Attribute Values", "description": "### Get user attribute values for a given user.\n\nReturns the values of specified user attributes (or all user attributes) for a certain user.\n\nA value for each user attribute is searched for in the following locations, in this order:\n\n1. in the user's account information\n1. in groups that the user is a member of\n1. the default value of the user attribute\n\nIf more than one group has a value defined for a user attribute, the group with the lowest rank wins.\n\nThe response will only include user attributes for which values were found. Use `include_unset=true` to include\nempty records for user attributes with no value.\n\nThe value of all hidden user attributes will be blank.\n", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}, {"name": "user_attribute_ids", "in": "query", "description": "Specific user attributes to request. Omit or leave blank to request all user attributes.", "required": false, "type": "array", "items": {"type": "string"}, "collectionFormat": "csv"}, {"name": "all_values", "in": "query", "description": "If true, returns all values in the search path instead of just the first value found. Useful for debugging group precedence.", "required": false, "type": "boolean"}, {"name": "include_unset", "in": "query", "description": "If true, returns an empty record for each requested attribute that has no user, group, or default value.", "required": false, "type": "boolean"}], "responses": {"404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Value of user attribute.", "schema": {"type": "array", "items": {"$ref": "#/definitions/UserAttributeWithValue"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/attribute_values/{user_attribute_id}": {"patch": {"tags": ["User"], "operationId": "set_user_attribute_user_value", "summary": "Set User Attribute User Value", "description": "### Store a custom value for a user attribute in a user's account settings.\n\nPer-user user attribute values take precedence over group or default values.\n", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "user_attribute_id", "in": "path", "description": "Id of user attribute", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": "New attribute value for user.", "required": true, "schema": {"$ref": "#/definitions/UserAttributeWithValue"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "User attribute value.", "schema": {"$ref": "#/definitions/UserAttributeWithValue"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}, "delete": {"tags": ["User"], "operationId": "delete_user_attribute_user_value", "summary": "Delete User Attribute User Value", "description": "### Delete a user attribute value from a user's account settings.\n\nAfter the user attribute value is deleted from the user's account settings, subsequent requests\nfor the user attribute value for this user will draw from the user's groups or the default\nvalue of the user attribute. See [Get User Attribute Values](#!/User/user_attribute_user_values) for more\ninformation about how user attribute values are resolved.\n", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "user_attribute_id", "in": "path", "description": "Id of user attribute", "required": true, "type": "string"}], "responses": {"204": {"description": "Deleted"}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/credentials_email/send_password_reset": {"post": {"tags": ["User"], "operationId": "send_user_credentials_email_password_reset", "summary": "Send Password Reset Token", "description": "### Send a password reset token.\nThis will send a password reset email to the user. If a password reset token does not already exist\nfor this user, it will create one and then send it.\nIf the user has not yet set up their account, it will send a setup email to the user.\nThe URL sent in the email is expressed as the 'password_reset_url' of the user's email/password credential object.\nPassword reset URLs will expire in 60 minutes.\nThis method can be called with an empty body.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "email/password credential", "schema": {"$ref": "#/definitions/CredentialsEmail"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/{user_id}/update_emails": {"post": {"tags": ["User"], "operationId": "wipeout_user_emails", "summary": "Wipeout User Emails", "description": "### Change a disabled user's email addresses\n\nAllows the admin to change the email addresses for all the user's\nassociated credentials.  Will overwrite all associated email addresses with\nthe value supplied in the 'email' body param.\nThe user's 'is_disabled' status must be true.\n\nCalls to this endpoint may be denied by [Looker (Google Cloud core)](https://cloud.google.com/looker/docs/r/looker-core/overview).\n", "parameters": [{"name": "user_id", "in": "path", "description": "Id of user", "required": true, "type": "string"}, {"name": "body", "in": "body", "description": null, "required": true, "schema": {"$ref": "#/definitions/UserEmailOnly"}}, {"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "403": {"description": "Permission Denied", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "409": {"description": "Resource Already Exists", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "200": {"description": "New state for specified user.", "schema": {"$ref": "#/definitions/User"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/users/embed_user": {"post": {"tags": ["User"], "operationId": "create_embed_user", "summary": "Create an embed user from an external user ID", "description": "Create an embed user from an external user ID\n\nCalls to this endpoint require [Embedding](https://cloud.google.com/looker/docs/r/looker-core-feature-embed) to be enabled\n", "parameters": [{"name": "body", "in": "body", "description": null, "required": true, "schema": {"$ref": "#/definitions/CreateEmbedUserRequest"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Created embed user", "schema": {"$ref": "#/definitions/UserPublic"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/vector_thumbnail/{type}/{resource_id}": {"get": {"tags": ["Content"], "operationId": "vector_thumbnail", "summary": "Get Vector Thumbnail", "description": "### Get a vector image representing the contents of a dashboard or look.\n\n# DEPRECATED:  Use [content_thumbnail()](#!/Content/content_thumbnail)\n\nThe returned thumbnail is an abstract representation of the contents of a dashbord or look and does not\nreflect the actual data displayed in the respective visualizations.\n", "produces": ["image/svg+xml"], "parameters": [{"name": "type", "in": "path", "description": "Either dashboard or look", "required": true, "type": "string"}, {"name": "resource_id", "in": "path", "description": "ID of the dashboard or look to render", "required": true, "type": "string"}, {"name": "reload", "in": "query", "description": "Whether or not to refresh the rendered image with the latest content", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Vector thumbnail", "schema": {"type": "string"}}}, "deprecated": true, "x-looker-status": "deprecated", "x-looker-activity-type": "db_query"}}, "/versions": {"get": {"tags": ["Config"], "operationId": "versions", "summary": "Get ApiVersion", "description": "### Get information about all API versions supported by this Looker instance.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "ApiVersion", "schema": {"$ref": "#/definitions/ApiVersion"}}}, "x-looker-status": "stable", "x-looker-activity-type": "none"}}, "/api_spec/{api_version}/{specification}": {"get": {"tags": ["Config"], "operationId": "api_spec", "summary": "Get an API specification", "description": "### Get an API specification for this Looker instance.\n\nThe specification is returned as a JSON document in Swagger 2.x format\n", "parameters": [{"name": "api_version", "in": "path", "description": "API version", "required": true, "type": "string"}, {"name": "specification", "in": "path", "description": "Specification name. Typically, this is \"swagger.json\"", "required": true, "type": "string"}], "responses": {"200": {"description": "API specification", "schema": {"type": "any", "format": "any"}}, "400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}}, "x-looker-status": "stable", "x-looker-activity-type": "none"}}, "/whitelabel_configuration": {"get": {"tags": ["Config"], "operationId": "whitelabel_configuration", "summary": "Get Whitelabel configuration", "description": "### This feature is enabled only by special license.\n### Gets the whitelabel configuration, which includes hiding documentation links, custom favicon uploading, etc.\n", "parameters": [{"name": "fields", "in": "query", "description": "Requested fields.", "required": false, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Whitelabel configuration", "schema": {"$ref": "#/definitions/WhitelabelConfiguration"}}}, "deprecated": true, "x-looker-status": "deprecated", "x-looker-activity-type": "non_query"}, "put": {"tags": ["Config"], "operationId": "update_whitelabel_configuration", "summary": "Update Whitelabel configuration", "description": "### Update the whitelabel configuration\n", "parameters": [{"name": "body", "in": "body", "description": "Whitelabel configuration", "required": true, "schema": {"$ref": "#/definitions/WhitelabelConfiguration"}}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "422": {"description": "Validation Error", "schema": {"$ref": "#/definitions/ValidationError"}}, "429": {"description": "Too Many Requests", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Whitelabel configuration", "schema": {"$ref": "#/definitions/WhitelabelConfiguration"}}}, "deprecated": true, "x-looker-status": "deprecated", "x-looker-activity-type": "non_query"}}, "/workspaces": {"get": {"tags": ["Workspace"], "operationId": "all_workspaces", "summary": "Get All Workspaces", "description": "### Get All Workspaces\n\nReturns all workspaces available to the calling user.\n", "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Workspace", "schema": {"type": "array", "items": {"$ref": "#/definitions/Workspace"}}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}, "/workspaces/{workspace_id}": {"get": {"tags": ["Workspace"], "operationId": "workspace", "summary": "Get Workspace", "description": "### Get A Workspace\n\nReturns information about a workspace such as the git status and selected branches\nof all projects available to the caller's user account.\n\nA workspace defines which versions of project files will be used to evaluate expressions\nand operations that use model definitions - operations such as running queries or rendering dashboards.\nEach project has its own git repository, and each project in a workspace may be configured to reference\nparticular branch or revision within their respective repositories.\n\nThere are two predefined workspaces available: \"production\" and \"dev\".\n\nThe production workspace is shared across all Looker users. Models in the production workspace are read-only.\nChanging files in production is accomplished by modifying files in a git branch and using Pull Requests\nto merge the changes from the dev branch into the production branch, and then telling\nLooker to sync with production.\n\nThe dev workspace is local to each Looker user. Changes made to project/model files in the dev workspace only affect\nthat user, and only when the dev workspace is selected as the active workspace for the API session.\n(See set_session_workspace()).\n\nThe dev workspace is NOT unique to an API session. Two applications accessing the Looker API using\nthe same user account will see the same files in the dev workspace. To avoid collisions between\nAPI clients it's best to have each client login with API credentials for a different user account.\n\nChanges made to files in a dev workspace are persistent across API sessions. It's a good\nidea to commit any changes you've made to the git repository, but not strictly required. Your modified files\nreside in a special user-specific directory on the Looker server and will still be there when you login in again\nlater and use update_session(workspace_id: \"dev\") to select the dev workspace for the new API session.\n", "parameters": [{"name": "workspace_id", "in": "path", "description": "Id of the workspace ", "required": true, "type": "string"}], "responses": {"400": {"description": "Bad Request", "schema": {"$ref": "#/definitions/Error"}}, "404": {"description": "Not Found", "schema": {"$ref": "#/definitions/Error"}}, "200": {"description": "Workspace", "schema": {"$ref": "#/definitions/Workspace"}}}, "x-looker-status": "stable", "x-looker-activity-type": "non_query"}}}, "definitions": {"Error": {"properties": {"message": {"type": "string", "readOnly": true, "description": "Error details", "x-looker-nullable": true}, "documentation_url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Documentation link", "x-looker-nullable": true}}, "x-looker-status": "stable", "required": ["message", "documentation_url"]}, "DashboardBase": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "content_favorite_id": {"type": "string", "readOnly": true, "description": "Content Favorite Id", "x-looker-nullable": true}, "content_metadata_id": {"type": "string", "readOnly": true, "description": "Id of content metadata", "x-looker-nullable": true}, "description": {"type": "string", "readOnly": true, "description": "Description", "x-looker-nullable": true}, "hidden": {"type": "boolean", "readOnly": true, "description": "Is Hidden", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "model": {"$ref": "#/definitions/LookModel", "readOnly": true, "description": "Model", "x-looker-nullable": true}, "query_timezone": {"type": "string", "readOnly": true, "description": "Timezone in which the Dashboard will run by default.", "x-looker-nullable": true}, "readonly": {"type": "boolean", "readOnly": true, "description": "Is Read-only", "x-looker-nullable": false}, "refresh_interval": {"type": "string", "readOnly": true, "description": "Refresh Interval, as a time duration phrase like \"2 hours 30 minutes\". A number with no time units will be interpreted as whole seconds.", "x-looker-nullable": true}, "refresh_interval_to_i": {"type": "integer", "format": "int64", "readOnly": true, "description": "Refresh Interval in milliseconds", "x-looker-nullable": true}, "folder": {"$ref": "#/definitions/FolderBase", "readOnly": true, "description": "Folder", "x-looker-nullable": true}, "title": {"type": "string", "readOnly": true, "description": "Dashboard Title", "x-looker-nullable": true}, "user_id": {"type": "string", "readOnly": true, "description": "Id of User", "x-looker-nullable": true}, "slug": {"type": "string", "readOnly": true, "description": "Content Metadata Slug", "x-looker-nullable": true}, "preferred_viewer": {"type": "string", "readOnly": true, "description": "The preferred route for viewing this dashboard (ie: dashboards or dashboards-next)", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "HomepageSection": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "created_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time at which this section was created.", "x-looker-nullable": true}, "deleted_at": {"type": "string", "format": "date-time", "description": "Time at which this section was deleted.", "x-looker-nullable": true}, "detail_url": {"type": "string", "readOnly": true, "description": "A URL pointing to a page showing further information about the content in the section.", "x-looker-nullable": true}, "homepage_id": {"type": "string", "description": "Id reference to parent homepage", "x-looker-nullable": true}, "homepage_items": {"type": "array", "items": {"$ref": "#/definitions/HomepageItem"}, "readOnly": true, "description": "Items in the homepage section", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "is_header": {"type": "boolean", "readOnly": true, "description": "Is this a header section (has no items)", "x-looker-nullable": false}, "item_order": {"type": "array", "items": {"type": "string"}, "description": "ids of the homepage items in the order they should be displayed", "x-looker-nullable": true}, "title": {"type": "string", "description": "Name of row", "x-looker-nullable": true}, "updated_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time at which this section was last updated.", "x-looker-nullable": true}, "description": {"type": "string", "description": "Description of the content found in this section.", "x-looker-nullable": true}, "visible_item_order": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "ids of the homepage items the user can see in the order they should be displayed", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "HomepageItem": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "content_created_by": {"type": "string", "readOnly": true, "description": "Name of user who created the content this item is based on", "x-looker-nullable": true}, "content_favorite_id": {"type": "string", "readOnly": true, "description": "Content favorite id associated with the item this content is based on", "x-looker-nullable": true}, "content_metadata_id": {"type": "string", "readOnly": true, "description": "Content metadata id associated with the item this content is based on", "x-looker-nullable": true}, "content_updated_at": {"type": "string", "readOnly": true, "description": "Last time the content that this item is based on was updated", "x-looker-nullable": true}, "custom_description": {"type": "string", "description": "Custom description entered by the user, if present", "x-looker-nullable": true}, "custom_image_data_base64": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) base64 encoded image data", "x-looker-nullable": true}, "custom_image_url": {"type": "string", "readOnly": true, "description": "Custom image_url entered by the user, if present", "x-looker-nullable": true}, "custom_title": {"type": "string", "description": "Custom title entered by the user, if present", "x-looker-nullable": true}, "custom_url": {"type": "string", "description": "Custom url entered by the user, if present", "x-looker-nullable": true}, "dashboard_id": {"type": "string", "description": "Dashboard to base this item on", "x-looker-nullable": true}, "description": {"type": "string", "readOnly": true, "description": "The actual description for display", "x-looker-nullable": true}, "favorite_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times content has been favorited, if present", "x-looker-nullable": true}, "homepage_section_id": {"type": "string", "description": "Associated Homepage Section", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "image_url": {"type": "string", "readOnly": true, "description": "The actual image_url for display", "x-looker-nullable": true}, "location": {"type": "string", "readOnly": true, "description": "The container folder name of the content", "x-looker-nullable": true}, "look_id": {"type": "string", "description": "Look to base this item on", "x-looker-nullable": true}, "lookml_dashboard_id": {"type": "string", "description": "LookML Dashboard to base this item on", "x-looker-nullable": true}, "order": {"type": "integer", "format": "int64", "description": "An arbitrary integer representing the sort order within the section", "x-looker-nullable": true}, "section_fetch_time": {"type": "number", "format": "float", "readOnly": true, "description": "Number of seconds it took to fetch the section this item is in", "x-looker-nullable": true}, "title": {"type": "string", "readOnly": true, "description": "The actual title for display", "x-looker-nullable": true}, "url": {"type": "string", "readOnly": true, "description": "The actual url for display", "x-looker-nullable": true}, "use_custom_description": {"type": "boolean", "description": "Whether the custom description should be used instead of the content description, if the item is associated with content", "x-looker-nullable": false}, "use_custom_image": {"type": "boolean", "description": "Whether the custom image should be used instead of the content image, if the item is associated with content", "x-looker-nullable": false}, "use_custom_title": {"type": "boolean", "description": "Whether the custom title should be used instead of the content title, if the item is associated with content", "x-looker-nullable": false}, "use_custom_url": {"type": "boolean", "description": "Whether the custom url should be used instead of the content url, if the item is associated with content", "x-looker-nullable": false}, "view_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times content has been viewed, if present", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ValidationError": {"properties": {"message": {"type": "string", "readOnly": true, "description": "Error details", "x-looker-nullable": true}, "errors": {"type": "array", "items": {"$ref": "#/definitions/ValidationErrorDetail"}, "readOnly": true, "description": "Error detail array", "x-looker-nullable": true}, "documentation_url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Documentation link", "x-looker-nullable": true}}, "x-looker-status": "stable", "required": ["message", "documentation_url"]}, "ValidationErrorDetail": {"properties": {"field": {"type": "string", "readOnly": true, "description": "Field with error", "x-looker-nullable": true}, "code": {"type": "string", "readOnly": true, "description": "Error code", "x-looker-nullable": true}, "message": {"type": "string", "readOnly": true, "description": "Error info message", "x-looker-nullable": true}, "documentation_url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Documentation link", "x-looker-nullable": true}}, "x-looker-status": "stable", "required": ["documentation_url"]}, "AccessToken": {"properties": {"access_token": {"type": "string", "readOnly": true, "description": "Access Token used for API calls", "x-looker-nullable": false}, "token_type": {"type": "string", "readOnly": true, "description": "Type of Token", "x-looker-nullable": false}, "expires_in": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of seconds before the token expires", "x-looker-nullable": false}, "refresh_token": {"type": "string", "readOnly": true, "description": "Refresh token which can be used to obtain a new access token", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "AlertFieldFilter": {"properties": {"field_name": {"type": "string", "description": "Field Name. Has format `<view>.<field>`", "x-looker-nullable": false}, "field_value": {"type": "any", "format": "any", "description": "Field Value. Depends on the type of field - numeric or string. For [location](https://cloud.google.com/looker/docs/reference/field-reference/dimension-type-reference#location) type, it's a list of floats. Example `[1.0, 56.0]`", "x-looker-nullable": false}, "filter_value": {"type": "string", "description": "Filter Value. Usually null except for [location](https://cloud.google.com/looker/docs/reference/field-reference/dimension-type-reference#location) type. It'll be a string of lat,long ie `'1.0,56.0'`", "x-looker-nullable": true}}, "x-looker-status": "stable", "required": ["field_name", "field_value"]}, "AlertAppliedDashboardFilter": {"properties": {"filter_title": {"type": "string", "description": "Field Title. Refer to `DashboardFilter.title` in [DashboardFilter](#!/types/DashboardFilter). Example `Name`", "x-looker-nullable": true}, "field_name": {"type": "string", "description": "Field Name. Refer to `DashboardFilter.dimension` in [DashboardFilter](#!/types/DashboardFilter). Example `distribution_centers.name`", "x-looker-nullable": false}, "filter_value": {"type": "string", "description": "Field Value. [Filter Expressions](https://cloud.google.com/looker/docs/reference/filter-expressions). Example `Los Angeles CA`", "x-looker-nullable": false}, "filter_description": {"type": "string", "readOnly": true, "description": "Human Readable Filter Description. This may be null or auto-generated. Example `is Los Angeles CA`", "x-looker-nullable": true}}, "x-looker-status": "stable", "required": ["filter_title", "field_name", "filter_value"]}, "AlertField": {"properties": {"title": {"type": "string", "description": "Field's title. Usually auto-generated to reflect field name and its filters", "x-looker-nullable": false}, "name": {"type": "string", "description": "Field's name. Has the format `<view>.<field>` Refer to [docs](https://cloud.google.com/looker/docs/sharing-and-publishing/creating-alerts) for more details", "x-looker-nullable": false}, "filter": {"type": "array", "items": {"$ref": "#/definitions/AlertFieldFilter"}, "description": "(Optional / Advance Use) List of fields filter. This further restricts the alert to certain dashboard element's field values. This can be used on top of dashboard filters `applied_dashboard_filters`. To keep thing simple, it's suggested to just use dashboard filters. Example: `{ 'title': '12 Number on Hand', 'name': 'inventory_items.number_on_hand', 'filter': [{ 'field_name': 'inventory_items.id', 'field_value': 12, 'filter_value': null }] }`", "x-looker-nullable": true}}, "x-looker-status": "stable", "required": ["title", "name"]}, "AlertConditionState": {"properties": {"previous_time_series_id": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) The second latest time string the alert has seen.", "x-looker-nullable": true}, "latest_time_series_id": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) Latest time string the alert has seen.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "Alert": {"properties": {"applied_dashboard_filters": {"type": "array", "items": {"$ref": "#/definitions/AlertAppliedDashboardFilter"}, "description": "Filters coming from the dashboard that are applied. Example `[{ \"filter_title\": \"Name\", \"field_name\": \"distribution_centers.name\", \"filter_value\": \"Los Angeles CA\" }]`", "x-looker-nullable": true}, "comparison_type": {"type": "string", "x-looker-values": ["EQUAL_TO", "GREATER_THAN", "GREATER_THAN_OR_EQUAL_TO", "LESS_THAN", "LESS_THAN_OR_EQUAL_TO", "INCREASES_BY", "DECREASES_BY", "CHANGES_BY"], "description": "This property informs the check what kind of comparison we are performing. Only certain condition types are valid for time series alerts. For details, refer to [Setting Alert Conditions](https://cloud.google.com/looker/docs/sharing-and-publishing/creating-alerts#setting_alert_conditions) Valid values are: \"EQUAL_TO\", \"GREATER_THAN\", \"GREATER_THAN_OR_EQUAL_TO\", \"LESS_THAN\", \"LESS_THAN_OR_EQUAL_TO\", \"INCREASES_BY\", \"DECREASES_BY\", \"CHANGES_BY\".", "x-looker-nullable": false}, "cron": {"type": "string", "description": "Vixie-Style crontab specification when to run. At minumum, it has to be longer than 15 minute intervals", "x-looker-nullable": false}, "custom_url_base": {"type": "string", "description": "Domain for the custom url selected by the alert creator from the admin defined domain allowlist", "x-looker-nullable": true}, "custom_url_params": {"type": "string", "description": "Parameters and path for the custom url defined by the alert creator", "x-looker-nullable": true}, "custom_url_label": {"type": "string", "description": "Label for the custom url defined by the alert creator", "x-looker-nullable": true}, "show_custom_url": {"type": "boolean", "description": "Boolean to determine if the custom url should be used", "x-looker-nullable": false}, "custom_title": {"type": "string", "description": "An optional, user-defined title for the alert", "x-looker-nullable": true}, "dashboard_element_id": {"type": "string", "description": "ID of the dashboard element associated with the alert. Refer to [dashboard_element()](#!/Dashboard/DashboardElement)", "x-looker-nullable": true}, "description": {"type": "string", "description": "An optional description for the alert. This supplements the title", "x-looker-nullable": true}, "destinations": {"type": "array", "items": {"$ref": "#/definitions/AlertDestination"}, "description": "Array of destinations to send alerts to. Must be the same type of destination. Example `[{ \"destination_type\": \"EMAIL\", \"email_address\": \"test@test.com\" }]`", "x-looker-nullable": true}, "field": {"$ref": "#/definitions/AlertField", "description": "The field the alert threshold is compared against when determining when to send notifications", "x-looker-nullable": false}, "followed": {"type": "boolean", "readOnly": true, "description": "Whether or not the user follows this alert.", "x-looker-nullable": false}, "followable": {"type": "boolean", "readOnly": true, "description": "Whether or not the alert is followable", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "ID of the alert", "x-looker-nullable": false}, "is_disabled": {"type": "boolean", "description": "Whether or not the alert is disabled", "x-looker-nullable": false}, "disabled_reason": {"type": "string", "description": "Reason for disabling alert", "x-looker-nullable": true}, "is_public": {"type": "boolean", "description": "Whether or not the alert is public", "x-looker-nullable": false}, "investigative_content_type": {"type": "string", "x-looker-values": ["dashboard"], "description": "The type of the investigative content Valid values are: \"dashboard\".", "x-looker-nullable": true}, "investigative_content_id": {"type": "string", "description": "The ID of the investigative content. For dashboards, this will be the dashboard ID", "x-looker-nullable": true}, "investigative_content_title": {"type": "string", "readOnly": true, "description": "The title of the investigative content.", "x-looker-nullable": true}, "lookml_dashboard_id": {"type": "string", "description": "ID of the LookML dashboard associated with the alert", "x-looker-nullable": true}, "lookml_link_id": {"type": "string", "description": "ID of the LookML dashboard element associated with the alert", "x-looker-nullable": true}, "owner_id": {"type": "string", "description": "User id of alert owner", "x-looker-nullable": false}, "owner_display_name": {"type": "string", "readOnly": true, "description": "Alert owner's display name", "x-looker-nullable": true}, "threshold": {"type": "number", "format": "double", "description": "Value of the alert threshold", "x-looker-nullable": false}, "time_series_condition_state": {"$ref": "#/definitions/AlertConditionState", "x-looker-write-only": true, "description": "(Write-Only) (Optional) Only used when first creating time series alerts. It's used to pick a starting time reference from which alerts will be evaluated again. Without it, alerts be run against all time series data. Refer to [docs](https://cloud.google.com/looker/docs/sharing-and-publishing/creating-alerts) for details. Example `{ latest_time_series_id: '2020-09-17', previous_time_series_id: '2020-09-16' }`.", "x-looker-nullable": true}}, "x-looker-status": "stable", "required": ["comparison_type", "cron", "destinations", "field", "owner_id", "threshold"]}, "MobilePayload": {"properties": {"title": {"type": "string", "readOnly": true, "description": "Title of the alert", "x-looker-nullable": true}, "alert_id": {"type": "string", "readOnly": true, "description": "ID of the alert", "x-looker-nullable": false}, "investigative_content_id": {"type": "string", "readOnly": true, "description": "ID of the investigative content", "x-looker-nullable": true}, "dashboard_name": {"type": "string", "readOnly": true, "description": "Name of the dashboard on which the alert has been set", "x-looker-nullable": true}, "dashboard_id": {"type": "string", "readOnly": true, "description": "ID of the dashboard on which the alert has been set", "x-looker-nullable": false}, "query_slug": {"type": "string", "readOnly": true, "description": "Slug of the query which runs the alert queries.", "x-looker-nullable": false}}, "x-looker-status": "stable", "required": ["alert_id"]}, "AlertNotifications": {"properties": {"notification_id": {"type": "string", "readOnly": true, "description": "ID of the notification", "x-looker-nullable": false}, "alert_condition_id": {"type": "string", "readOnly": true, "description": "ID of the alert", "x-looker-nullable": false}, "user_id": {"type": "string", "readOnly": true, "description": "ID of the user", "x-looker-nullable": false}, "is_read": {"type": "boolean", "description": "Read state of the notification", "x-looker-nullable": false}, "field_value": {"type": "number", "format": "double", "readOnly": true, "description": "The value of the field on which the alert condition is set", "x-looker-nullable": true}, "threshold_value": {"type": "number", "format": "double", "readOnly": true, "description": "The value of the threshold which triggers the alert notification", "x-looker-nullable": true}, "ran_at": {"type": "string", "readOnly": true, "description": "The time at which the alert query ran", "x-looker-nullable": false}, "alert": {"$ref": "#/definitions/MobilePayload", "readOnly": true, "description": "It contains the details needed for mobile alerts payload", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "AlertDestination": {"properties": {"destination_type": {"type": "string", "x-looker-values": ["EMAIL", "ACTION_HUB"], "description": "Type of destination that the alert will be sent to Valid values are: \"EMAIL\", \"ACTION_HUB\".", "x-looker-nullable": false}, "email_address": {"type": "string", "description": "Email address for the 'email' type", "x-looker-nullable": true}, "action_hub_integration_id": {"type": "string", "description": "Action hub integration id for the 'action_hub' type. [Integration](#!/types/Integration)", "x-looker-nullable": true}, "action_hub_form_params_json": {"type": "string", "description": "Action hub form params json for the 'action_hub' type [IntegrationParam](#!/types/IntegrationParam)", "x-looker-nullable": true}}, "x-looker-status": "stable", "required": ["destination_type"]}, "AlertPatch": {"properties": {"owner_id": {"type": "string", "description": "New owner ID of the alert", "x-looker-nullable": true}, "is_disabled": {"type": "boolean", "description": "Set alert enabled or disabled", "x-looker-nullable": true}, "disabled_reason": {"type": "string", "description": "The reason this alert is disabled", "x-looker-nullable": true}, "is_public": {"type": "boolean", "description": "Set alert public or private", "x-looker-nullable": true}, "threshold": {"type": "number", "format": "double", "description": "New threshold value", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ApiSession": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "workspace_id": {"type": "string", "description": "The id of active workspace for this session", "x-looker-nullable": true}, "sudo_user_id": {"type": "string", "readOnly": true, "description": "The id of the actual user in the case when this session represents one user sudo'ing as another", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ArtifactUsage": {"properties": {"max_size": {"type": "integer", "format": "int64", "readOnly": true, "description": "The configured maximum size in bytes of the entire artifact store.", "x-looker-nullable": false}, "usage": {"type": "integer", "format": "int64", "readOnly": true, "description": "The currently used storage size in bytes of the entire artifact store.", "x-looker-nullable": false}}, "x-looker-status": "beta", "required": ["max_size", "usage"]}, "ArtifactNamespace": {"properties": {"namespace": {"type": "string", "readOnly": true, "description": "Artifact storage namespace.", "x-looker-nullable": false}, "count": {"type": "integer", "format": "int64", "readOnly": true, "description": "The number of artifacts stored in the namespace.", "x-looker-nullable": false}}, "x-looker-status": "beta", "required": ["namespace", "count"]}, "UpdateArtifact": {"properties": {"key": {"type": "string", "description": "Key of value to store. Namespace + Key must be unique.", "x-looker-nullable": false}, "value": {"type": "string", "description": "Value to store.", "x-looker-nullable": false}, "content_type": {"type": "string", "description": "MIME type of content. This can only be used to override content that is detected as text/plain. Needed to set application/json content types, which are analyzed as plain text.", "x-looker-nullable": true}, "version": {"type": "integer", "format": "int64", "readOnly": true, "description": "Version number of the stored value. The version must be provided for any updates to an existing artifact.", "x-looker-nullable": false}}, "x-looker-status": "beta", "required": ["key", "value"]}, "Artifact": {"properties": {"key": {"type": "string", "description": "Key of value to store. Namespace + Key must be unique.", "x-looker-nullable": false}, "value": {"type": "string", "description": "Value to store.", "x-looker-nullable": false}, "content_type": {"type": "string", "description": "MIME type of content. This can only be used to override content that is detected as text/plain. Needed to set application/json content types, which are analyzed as plain text.", "x-looker-nullable": true}, "version": {"type": "integer", "format": "int64", "readOnly": true, "description": "Version number of the stored value. The version must be provided for any updates to an existing artifact.", "x-looker-nullable": false}, "namespace": {"type": "string", "readOnly": true, "description": "Artifact storage namespace.", "x-looker-nullable": false}, "created_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Timestamp when this artifact was created.", "x-looker-nullable": false}, "updated_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Timestamp when this artifact was updated.", "x-looker-nullable": false}, "value_size": {"type": "integer", "format": "int64", "readOnly": true, "description": "Size (in bytes) of the stored value.", "x-looker-nullable": false}, "created_by_userid": {"type": "string", "readOnly": true, "description": "User id of the artifact creator.", "x-looker-nullable": false}, "updated_by_userid": {"type": "string", "readOnly": true, "description": "User id of the artifact updater.", "x-looker-nullable": false}}, "x-looker-status": "beta", "required": ["key", "value", "namespace", "created_at", "updated_at", "value_size", "created_by_userid", "updated_by_userid"]}, "BackupConfiguration": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "type": {"type": "string", "description": "Type of backup: looker-s3 or custom-s3", "x-looker-nullable": true}, "custom_s3_bucket": {"type": "string", "description": "Name of bucket for custom-s3 backups", "x-looker-nullable": true}, "custom_s3_bucket_region": {"type": "string", "description": "Name of region where the bucket is located", "x-looker-nullable": true}, "custom_s3_key": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) AWS S3 key used for custom-s3 backups", "x-looker-nullable": true}, "custom_s3_secret": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) AWS S3 secret used for custom-s3 backups", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "BoardItem": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "content_created_by": {"type": "string", "readOnly": true, "description": "Name of user who created the content this item is based on", "x-looker-nullable": true}, "content_favorite_id": {"type": "string", "readOnly": true, "description": "Content favorite id associated with the item this content is based on", "x-looker-nullable": true}, "content_metadata_id": {"type": "string", "readOnly": true, "description": "Content metadata id associated with the item this content is based on", "x-looker-nullable": true}, "content_updated_at": {"type": "string", "readOnly": true, "description": "Last time the content that this item is based on was updated", "x-looker-nullable": true}, "custom_description": {"type": "string", "description": "Custom description entered by the user, if present", "x-looker-nullable": true}, "custom_title": {"type": "string", "description": "Custom title entered by the user, if present", "x-looker-nullable": true}, "custom_url": {"type": "string", "description": "Custom url entered by the user, if present", "x-looker-nullable": true}, "dashboard_id": {"type": "string", "description": "Dashboard to base this item on", "x-looker-nullable": true}, "description": {"type": "string", "readOnly": true, "description": "The actual description for display", "x-looker-nullable": true}, "favorite_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times content has been favorited, if present", "x-looker-nullable": true}, "board_section_id": {"type": "string", "description": "Associated Board Section", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "image_url": {"type": "string", "readOnly": true, "description": "The actual image_url for display", "x-looker-nullable": true}, "location": {"type": "string", "readOnly": true, "description": "The container folder name of the content", "x-looker-nullable": true}, "look_id": {"type": "string", "description": "Look to base this item on", "x-looker-nullable": true}, "lookml_dashboard_id": {"type": "string", "description": "LookML Dashboard to base this item on", "x-looker-nullable": true}, "order": {"type": "integer", "format": "int64", "description": "An arbitrary integer representing the sort order within the section", "x-looker-nullable": true}, "title": {"type": "string", "readOnly": true, "description": "The actual title for display", "x-looker-nullable": true}, "url": {"type": "string", "readOnly": true, "description": "Relative url for the associated content", "x-looker-nullable": false}, "use_custom_description": {"type": "boolean", "description": "Whether the custom description should be used instead of the content description, if the item is associated with content", "x-looker-nullable": false}, "use_custom_title": {"type": "boolean", "description": "Whether the custom title should be used instead of the content title, if the item is associated with content", "x-looker-nullable": false}, "use_custom_url": {"type": "boolean", "description": "Whether the custom url should be used instead of the content url, if the item is associated with content", "x-looker-nullable": false}, "view_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times content has been viewed, if present", "x-looker-nullable": true}, "custom_image_data_base64": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) base64 encoded image data", "x-looker-nullable": true}, "custom_image_url": {"type": "string", "readOnly": true, "description": "Custom image_url entered by the user, if present", "x-looker-nullable": true}, "use_custom_image": {"type": "boolean", "description": "Whether the custom image should be used instead of the content image, if the item is associated with content", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "Board": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "content_metadata_id": {"type": "string", "readOnly": true, "description": "Id of associated content_metadata record", "x-looker-nullable": true}, "created_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Date of board creation", "x-looker-nullable": true}, "deleted_at": {"type": "string", "format": "date-time", "description": "Date of board deletion", "x-looker-nullable": true}, "description": {"type": "string", "description": "Description of the board", "x-looker-nullable": true}, "board_sections": {"type": "array", "items": {"$ref": "#/definitions/BoardSection"}, "readOnly": true, "description": "Sections of the board", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "section_order": {"type": "array", "items": {"type": "string"}, "description": "ids of the board sections in the order they should be displayed", "x-looker-nullable": true}, "title": {"type": "string", "description": "Title of the board", "x-looker-nullable": true}, "updated_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Date of last board update", "x-looker-nullable": true}, "user_id": {"type": "string", "readOnly": true, "description": "User id of board creator", "x-looker-nullable": true}, "primary_homepage": {"type": "boolean", "readOnly": true, "description": "Whether the board is the primary homepage or not", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "BoardSection": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "created_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time at which this section was created.", "x-looker-nullable": true}, "deleted_at": {"type": "string", "format": "date-time", "description": "Time at which this section was deleted.", "x-looker-nullable": true}, "description": {"type": "string", "description": "Description of the content found in this section.", "x-looker-nullable": true}, "board_id": {"type": "string", "description": "Id reference to parent board", "x-looker-nullable": true}, "board_items": {"type": "array", "items": {"$ref": "#/definitions/BoardItem"}, "readOnly": true, "description": "Items in the board section", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "item_order": {"type": "array", "items": {"type": "string"}, "description": "ids of the board items in the order they should be displayed", "x-looker-nullable": true}, "visible_item_order": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "ids of the homepage items the user can see in the order they should be displayed", "x-looker-nullable": true}, "title": {"type": "string", "description": "Name of row", "x-looker-nullable": true}, "updated_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time at which this section was last updated.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ColorStop": {"properties": {"color": {"type": "string", "description": "CSS color string", "x-looker-nullable": false}, "offset": {"type": "integer", "format": "int64", "description": "Offset in continuous palette (0 to 100)", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "ContinuousPalette": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Unique identity string", "x-looker-nullable": false}, "label": {"type": "string", "description": "Label for palette", "x-looker-nullable": true}, "type": {"type": "string", "description": "Type of palette", "x-looker-nullable": false}, "stops": {"type": "array", "items": {"$ref": "#/definitions/ColorStop"}, "description": "Array of ColorStops in the palette", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "DiscretePalette": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Unique identity string", "x-looker-nullable": false}, "label": {"type": "string", "description": "Label for palette", "x-looker-nullable": true}, "type": {"type": "string", "description": "Type of palette", "x-looker-nullable": false}, "colors": {"type": "array", "items": {"type": "string"}, "description": "Array of colors in the palette", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "ColorCollection": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "label": {"type": "string", "description": "Label of color collection", "x-looker-nullable": false}, "categoricalPalettes": {"type": "array", "items": {"$ref": "#/definitions/DiscretePalette"}, "description": "Array of categorical palette definitions", "x-looker-nullable": false}, "sequentialPalettes": {"type": "array", "items": {"$ref": "#/definitions/ContinuousPalette"}, "description": "Array of discrete palette definitions", "x-looker-nullable": false}, "divergingPalettes": {"type": "array", "items": {"$ref": "#/definitions/ContinuousPalette"}, "description": "Array of diverging palette definitions", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "ContentFavorite": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "user_id": {"type": "string", "description": "User Id which owns this ContentFavorite", "x-looker-nullable": false}, "content_metadata_id": {"type": "string", "description": "Content Metadata Id associated with this ContentFavorite", "x-looker-nullable": false}, "look_id": {"type": "string", "readOnly": true, "description": "Id of a look", "x-looker-nullable": true}, "dashboard_id": {"type": "string", "readOnly": true, "description": "Id of a dashboard", "x-looker-nullable": true}, "look": {"$ref": "#/definitions/LookBasic", "readOnly": true, "description": "Associated Look", "x-looker-nullable": true}, "dashboard": {"$ref": "#/definitions/DashboardBase", "readOnly": true, "description": "Associated Dashboard", "x-looker-nullable": true}, "board_id": {"type": "string", "readOnly": true, "description": "Id of a board", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ContentMetaGroupUser": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "content_metadata_id": {"type": "string", "readOnly": true, "description": "Id of associated Content Metadata", "x-looker-nullable": true}, "permission_type": {"type": "string", "readOnly": true, "x-looker-values": ["view", "edit"], "description": "Type of permission: \"view\" or \"edit\" Valid values are: \"view\", \"edit\".", "x-looker-nullable": true}, "group_id": {"type": "string", "readOnly": true, "description": "ID of associated group", "x-looker-nullable": true}, "user_id": {"type": "string", "readOnly": true, "description": "ID of associated user", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ContentMeta": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "name": {"type": "string", "readOnly": true, "description": "Name or title of underlying content", "x-looker-nullable": true}, "parent_id": {"type": "string", "readOnly": true, "description": "Id of Parent Content", "x-looker-nullable": true}, "dashboard_id": {"type": "string", "readOnly": true, "description": "Id of associated dashboard when content_type is \"dashboard\"", "x-looker-nullable": true}, "look_id": {"type": "string", "readOnly": true, "description": "Id of associated look when content_type is \"look\"", "x-looker-nullable": true}, "folder_id": {"type": "string", "readOnly": true, "description": "Id of associated folder when content_type is \"space\"", "x-looker-nullable": true}, "content_type": {"type": "string", "readOnly": true, "description": "Content Type (\"dashboard\", \"look\", or \"folder\")", "x-looker-nullable": true}, "inherits": {"type": "boolean", "description": "Whether content inherits its access levels from parent", "x-looker-nullable": false}, "inheriting_id": {"type": "string", "readOnly": true, "description": "Id of Inherited Content", "x-looker-nullable": true}, "slug": {"type": "string", "readOnly": true, "description": "Content Slug", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ContentSearch": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "content_id": {"type": "string", "readOnly": true, "description": "Primary id associated with the content", "x-looker-nullable": true}, "type": {"type": "string", "readOnly": true, "description": "Type of content", "x-looker-nullable": true}, "title": {"type": "string", "readOnly": true, "description": "Content title", "x-looker-nullable": true}, "description": {"type": "string", "readOnly": true, "description": "Content description", "x-looker-nullable": true}, "folder_id": {"type": "string", "readOnly": true, "description": "Id of the folder where the content is saved", "x-looker-nullable": true}, "folder_name": {"type": "string", "readOnly": true, "description": "Name of the folder where the content is saved", "x-looker-nullable": true}, "view_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times the content has been viewed", "x-looker-nullable": true}, "preferred_viewer": {"type": "string", "readOnly": true, "description": "Preferred way of viewing the content (only applies to dashboards)", "x-looker-nullable": true}}, "x-looker-status": "beta"}, "ContentValidation": {"properties": {"content_with_errors": {"type": "array", "items": {"$ref": "#/definitions/ContentValidatorError"}, "readOnly": true, "description": "A list of content errors", "x-looker-nullable": true}, "computation_time": {"type": "number", "format": "float", "readOnly": true, "description": "Duration of content validation in seconds", "x-looker-nullable": true}, "total_looks_validated": {"type": "integer", "format": "int64", "readOnly": true, "description": "The number of looks validated", "x-looker-nullable": true}, "total_dashboard_elements_validated": {"type": "integer", "format": "int64", "readOnly": true, "description": "The number of dashboard elements validated", "x-looker-nullable": true}, "total_dashboard_filters_validated": {"type": "integer", "format": "int64", "readOnly": true, "description": "The number of dashboard filters validated", "x-looker-nullable": true}, "total_scheduled_plans_validated": {"type": "integer", "format": "int64", "readOnly": true, "description": "The number of scheduled plans validated", "x-looker-nullable": true}, "total_alerts_validated": {"type": "integer", "format": "int64", "readOnly": true, "description": "The number of alerts validated", "x-looker-nullable": true}, "total_explores_validated": {"type": "integer", "format": "int64", "readOnly": true, "description": "The number of explores used across all content validated", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ContentValidatorError": {"properties": {"look": {"$ref": "#/definitions/ContentValidationLook", "readOnly": true, "x-looker-nullable": true}, "dashboard": {"$ref": "#/definitions/ContentValidationDashboard", "readOnly": true, "x-looker-nullable": true}, "dashboard_element": {"$ref": "#/definitions/ContentValidationDashboardElement", "readOnly": true, "x-looker-nullable": true}, "dashboard_filter": {"$ref": "#/definitions/ContentValidationDashboardFilter", "readOnly": true, "x-looker-nullable": true}, "scheduled_plan": {"$ref": "#/definitions/ContentValidationScheduledPlan", "readOnly": true, "x-looker-nullable": true}, "alert": {"$ref": "#/definitions/ContentValidationAlert", "readOnly": true, "x-looker-nullable": true}, "lookml_dashboard": {"$ref": "#/definitions/ContentValidationLookMLDashboard", "readOnly": true, "x-looker-nullable": true}, "lookml_dashboard_element": {"$ref": "#/definitions/ContentValidationLookMLDashboardElement", "readOnly": true, "x-looker-nullable": true}, "errors": {"type": "array", "items": {"$ref": "#/definitions/ContentValidationError"}, "readOnly": true, "description": "A list of errors found for this piece of content", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "An id unique to this piece of content for this validation run", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "ContentValidationFolder": {"properties": {"name": {"type": "string", "description": "Unique Name", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}}, "x-looker-status": "stable", "required": ["name"]}, "ContentValidationLook": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "title": {"type": "string", "description": "Look Title", "x-looker-nullable": true}, "short_url": {"type": "string", "readOnly": true, "description": "Short Url", "x-looker-nullable": true}, "folder": {"$ref": "#/definitions/ContentValidationFolder", "readOnly": true, "description": "Folder of this Look", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ContentValidationDashboard": {"properties": {"description": {"type": "string", "description": "Description", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "folder": {"$ref": "#/definitions/ContentValidationFolder", "readOnly": true, "description": "Folder", "x-looker-nullable": true}, "title": {"type": "string", "description": "Dashboard Title", "x-looker-nullable": true}, "url": {"type": "string", "readOnly": true, "description": "Relative URL of the dashboard", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ContentValidationDashboardElement": {"properties": {"body_text": {"type": "string", "description": "Text tile body text", "x-looker-nullable": true}, "dashboard_id": {"type": "string", "description": "Id of Dashboard", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "look_id": {"type": "string", "description": "Id Of Look", "x-looker-nullable": true}, "note_display": {"type": "string", "description": "Note Display", "x-looker-nullable": true}, "note_state": {"type": "string", "description": "Note State", "x-looker-nullable": true}, "note_text": {"type": "string", "description": "Note Text", "x-looker-nullable": true}, "note_text_as_html": {"type": "string", "readOnly": true, "description": "Note Text as Html", "x-looker-nullable": true}, "query_id": {"type": "string", "description": "Id Of Query", "x-looker-nullable": true}, "subtitle_text": {"type": "string", "description": "Text tile subtitle text", "x-looker-nullable": true}, "title": {"type": "string", "description": "Title of dashboard element", "x-looker-nullable": true}, "title_hidden": {"type": "boolean", "description": "Whether title is hidden", "x-looker-nullable": false}, "title_text": {"type": "string", "description": "Text tile title", "x-looker-nullable": true}, "type": {"type": "string", "description": "Type", "x-looker-nullable": true}, "rich_content_json": {"type": "string", "description": "JSON with all the properties required for rich editor and buttons elements", "x-looker-nullable": true}, "extension_id": {"type": "string", "description": "Extension ID", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ContentValidationError": {"properties": {"message": {"type": "string", "readOnly": true, "description": "Error message", "x-looker-nullable": true}, "field_name": {"type": "string", "readOnly": true, "description": "Name of the field involved in the error", "x-looker-nullable": true}, "model_name": {"type": "string", "readOnly": true, "description": "Name of the model involved in the error", "x-looker-nullable": true}, "explore_name": {"type": "string", "readOnly": true, "description": "Name of the explore involved in the error", "x-looker-nullable": true}, "removable": {"type": "boolean", "readOnly": true, "description": "Whether this validation error is removable", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "ContentValidationDashboardFilter": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "dashboard_id": {"type": "string", "readOnly": true, "description": "Id of Dashboard", "x-looker-nullable": true}, "name": {"type": "string", "description": "Name of filter", "x-looker-nullable": true}, "title": {"type": "string", "description": "Title of filter", "x-looker-nullable": true}, "type": {"type": "string", "description": "Type of filter: one of date, number, string, or field", "x-looker-nullable": true}, "default_value": {"type": "string", "description": "Default value of filter", "x-looker-nullable": true}, "model": {"type": "string", "description": "Model of filter (required if type = field)", "x-looker-nullable": true}, "explore": {"type": "string", "description": "Explore of filter (required if type = field)", "x-looker-nullable": true}, "dimension": {"type": "string", "description": "Dimension of filter (required if type = field)", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ContentValidationScheduledPlan": {"properties": {"name": {"type": "string", "description": "Name of this scheduled plan", "x-looker-nullable": true}, "look_id": {"type": "string", "description": "Id of a look", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "ContentValidationAlert": {"properties": {"id": {"type": "string", "description": "ID of the alert", "x-looker-nullable": false}, "lookml_dashboard_id": {"type": "string", "description": "ID of the LookML dashboard associated with the alert", "x-looker-nullable": true}, "lookml_link_id": {"type": "string", "description": "ID of the LookML dashboard element associated with the alert", "x-looker-nullable": true}, "custom_url_base": {"type": "string", "description": "Domain for the custom url selected by the alert creator from the admin defined domain allowlist", "x-looker-nullable": true}, "custom_url_params": {"type": "string", "description": "Parameters and path for the custom url defined by the alert creator", "x-looker-nullable": true}, "custom_url_label": {"type": "string", "description": "Label for the custom url defined by the alert creator", "x-looker-nullable": true}, "show_custom_url": {"type": "boolean", "description": "Boolean to determine if the custom url should be used", "x-looker-nullable": false}, "custom_title": {"type": "string", "description": "An optional, user-defined title for the alert", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ContentValidationLookMLDashboard": {"properties": {"id": {"type": "string", "readOnly": true, "description": "ID of the LookML Dashboard", "x-looker-nullable": false}, "title": {"type": "string", "readOnly": true, "description": "Title of the LookML Dashboard", "x-looker-nullable": true}, "space_id": {"type": "string", "readOnly": true, "description": "ID of Space", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ContentValidationLookMLDashboardElement": {"properties": {"lookml_link_id": {"type": "string", "readOnly": true, "description": "Link ID of the LookML Dashboard Element", "x-looker-nullable": true}, "title": {"type": "string", "readOnly": true, "description": "Title of the LookML Dashboard Element", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ContentView": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "look_id": {"type": "string", "readOnly": true, "description": "Id of viewed Look", "x-looker-nullable": true}, "dashboard_id": {"type": "string", "readOnly": true, "description": "Id of the viewed Dashboard", "x-looker-nullable": true}, "title": {"type": "string", "readOnly": true, "description": "Name or title of underlying content", "x-looker-nullable": true}, "content_metadata_id": {"type": "string", "readOnly": true, "description": "Content metadata id of the Look or Dashboard", "x-looker-nullable": true}, "user_id": {"type": "string", "readOnly": true, "description": "Id of user content was viewed by", "x-looker-nullable": true}, "group_id": {"type": "string", "readOnly": true, "description": "Id of group content was viewed by", "x-looker-nullable": true}, "view_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times piece of content was viewed", "x-looker-nullable": true}, "favorite_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times piece of content was favorited", "x-looker-nullable": true}, "last_viewed_at": {"type": "string", "readOnly": true, "description": "Date the piece of content was last viewed", "x-looker-nullable": true}, "start_of_week_date": {"type": "string", "readOnly": true, "description": "Week start date for the view and favorite count during that given week", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "CreateEmbedUserRequest": {"properties": {"external_user_id": {"type": "string", "x-looker-nullable": false}}, "x-looker-status": "stable", "required": ["external_user_id"]}, "CreateOAuthApplicationUserStateRequest": {"properties": {"user_id": {"type": "string", "x-looker-nullable": false}, "oauth_application_id": {"type": "string", "x-looker-nullable": false}, "access_token": {"type": "string", "x-looker-nullable": false}, "access_token_expires_at": {"type": "string", "format": "date-time", "x-looker-nullable": false}, "refresh_token": {"type": "string", "x-looker-nullable": true}, "refresh_token_expires_at": {"type": "string", "format": "date-time", "x-looker-nullable": true}}, "x-looker-status": "beta", "required": ["user_id", "oauth_application_id", "access_token", "access_token_expires_at"]}, "CreateOAuthApplicationUserStateResponse": {"properties": {"user_id": {"type": "string", "readOnly": true, "description": "User Id", "x-looker-nullable": false}, "oauth_application_id": {"type": "string", "readOnly": true, "description": "OAuth Application ID", "x-looker-nullable": false}}, "x-looker-status": "beta", "required": ["user_id", "oauth_application_id"]}, "CredentialsApi3": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "client_id": {"type": "string", "readOnly": true, "description": "API key client_id", "x-looker-nullable": true}, "created_at": {"type": "string", "readOnly": true, "description": "Timestamp for the creation of this credential", "x-looker-nullable": true}, "is_disabled": {"type": "boolean", "readOnly": true, "description": "Has this credential been disabled?", "x-looker-nullable": false}, "type": {"type": "string", "readOnly": true, "description": "Short name for the type of this kind of credential", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "CreateCredentialsApi3": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "client_id": {"type": "string", "readOnly": true, "description": "API key client_id", "x-looker-nullable": true}, "created_at": {"type": "string", "readOnly": true, "description": "Timestamp for the creation of this credential", "x-looker-nullable": true}, "is_disabled": {"type": "boolean", "readOnly": true, "description": "Has this credential been disabled?", "x-looker-nullable": false}, "type": {"type": "string", "readOnly": true, "description": "Short name for the type of this kind of credential", "x-looker-nullable": true}, "client_secret": {"type": "string", "readOnly": true, "description": "API key client_secret", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "CredentialsEmail": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "created_at": {"type": "string", "readOnly": true, "description": "Timestamp for the creation of this credential", "x-looker-nullable": true}, "email": {"type": "string", "description": "EMail address used for user login", "x-looker-nullable": true}, "forced_password_reset_at_next_login": {"type": "boolean", "description": "Force the user to change their password upon their next login", "x-looker-nullable": false}, "user_id": {"type": "string", "readOnly": true, "description": "Unique Id of the user", "x-looker-nullable": true}, "is_disabled": {"type": "boolean", "readOnly": true, "description": "Has this credential been disabled?", "x-looker-nullable": false}, "logged_in_at": {"type": "string", "readOnly": true, "description": "Timestamp for most recent login using credential", "x-looker-nullable": true}, "password_reset_url": {"type": "string", "readOnly": true, "description": "Url with one-time use secret token that the user can use to reset password", "x-looker-nullable": true}, "account_setup_url": {"type": "string", "readOnly": true, "description": "Url with one-time use secret token that the user can use to setup account", "x-looker-nullable": true}, "type": {"type": "string", "readOnly": true, "description": "Short name for the type of this kind of credential", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}, "user_url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this user", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "CredentialsEmailSearch": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "created_at": {"type": "string", "readOnly": true, "description": "Timestamp for the creation of this credential", "x-looker-nullable": true}, "email": {"type": "string", "description": "EMail address used for user login", "x-looker-nullable": true}, "forced_password_reset_at_next_login": {"type": "boolean", "description": "Force the user to change their password upon their next login", "x-looker-nullable": false}, "user_id": {"type": "string", "readOnly": true, "description": "Unique Id of the user", "x-looker-nullable": true}, "is_disabled": {"type": "boolean", "readOnly": true, "description": "Has this credential been disabled?", "x-looker-nullable": false}, "logged_in_at": {"type": "string", "readOnly": true, "description": "Timestamp for most recent login using credential", "x-looker-nullable": true}, "password_reset_url": {"type": "string", "readOnly": true, "description": "Url with one-time use secret token that the user can use to reset password", "x-looker-nullable": true}, "account_setup_url": {"type": "string", "readOnly": true, "description": "Url with one-time use secret token that the user can use to setup account", "x-looker-nullable": true}, "type": {"type": "string", "readOnly": true, "description": "Short name for the type of this kind of credential", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}, "user_url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this user", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "CredentialsEmbed": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "created_at": {"type": "string", "readOnly": true, "description": "Timestamp for the creation of this credential", "x-looker-nullable": true}, "external_group_id": {"type": "string", "readOnly": true, "description": "Embedder's id for a group to which this user was added during the most recent login", "x-looker-nullable": true}, "external_user_id": {"type": "string", "readOnly": true, "description": "Embedder's unique id for the user", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "is_disabled": {"type": "boolean", "readOnly": true, "description": "Has this credential been disabled?", "x-looker-nullable": false}, "logged_in_at": {"type": "string", "readOnly": true, "description": "Timestamp for most recent login using credential", "x-looker-nullable": true}, "type": {"type": "string", "readOnly": true, "description": "Short name for the type of this kind of credential", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "CredentialsGoogle": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "created_at": {"type": "string", "readOnly": true, "description": "Timestamp for the creation of this credential", "x-looker-nullable": true}, "domain": {"type": "string", "readOnly": true, "description": "Google domain", "x-looker-nullable": true}, "email": {"type": "string", "readOnly": true, "description": "EMail address", "x-looker-nullable": true}, "google_user_id": {"type": "string", "readOnly": true, "description": "Google's Unique ID for this user", "x-looker-nullable": true}, "is_disabled": {"type": "boolean", "readOnly": true, "description": "Has this credential been disabled?", "x-looker-nullable": false}, "logged_in_at": {"type": "string", "readOnly": true, "description": "Timestamp for most recent login using credential", "x-looker-nullable": true}, "type": {"type": "string", "readOnly": true, "description": "Short name for the type of this kind of credential", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "CredentialsLDAP": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "created_at": {"type": "string", "readOnly": true, "description": "Timestamp for the creation of this credential", "x-looker-nullable": true}, "email": {"type": "string", "readOnly": true, "description": "EMail address", "x-looker-nullable": true}, "is_disabled": {"type": "boolean", "readOnly": true, "description": "Has this credential been disabled?", "x-looker-nullable": false}, "ldap_dn": {"type": "string", "readOnly": true, "description": "LDAP Distinguished name for this user (as-of the last login)", "x-looker-nullable": true}, "ldap_id": {"type": "string", "readOnly": true, "description": "LDAP Unique ID for this user", "x-looker-nullable": true}, "logged_in_at": {"type": "string", "readOnly": true, "description": "Timestamp for most recent login using credential", "x-looker-nullable": true}, "type": {"type": "string", "readOnly": true, "description": "Short name for the type of this kind of credential", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "CredentialsLookerOpenid": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "created_at": {"type": "string", "readOnly": true, "description": "Timestamp for the creation of this credential", "x-looker-nullable": true}, "email": {"type": "string", "readOnly": true, "description": "EMail address used for user login", "x-looker-nullable": true}, "is_disabled": {"type": "boolean", "readOnly": true, "description": "Has this credential been disabled?", "x-looker-nullable": false}, "logged_in_at": {"type": "string", "readOnly": true, "description": "Timestamp for most recent login using credential", "x-looker-nullable": true}, "logged_in_ip": {"type": "string", "readOnly": true, "description": "IP address of client for most recent login using credential", "x-looker-nullable": true}, "type": {"type": "string", "readOnly": true, "description": "Short name for the type of this kind of credential", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}, "user_url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this user", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "CredentialsOIDC": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "created_at": {"type": "string", "readOnly": true, "description": "Timestamp for the creation of this credential", "x-looker-nullable": true}, "email": {"type": "string", "readOnly": true, "description": "EMail address", "x-looker-nullable": true}, "is_disabled": {"type": "boolean", "readOnly": true, "description": "Has this credential been disabled?", "x-looker-nullable": false}, "logged_in_at": {"type": "string", "readOnly": true, "description": "Timestamp for most recent login using credential", "x-looker-nullable": true}, "oidc_user_id": {"type": "string", "readOnly": true, "description": "OIDC OP's Unique ID for this user", "x-looker-nullable": true}, "type": {"type": "string", "readOnly": true, "description": "Short name for the type of this kind of credential", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "CredentialsSaml": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "created_at": {"type": "string", "readOnly": true, "description": "Timestamp for the creation of this credential", "x-looker-nullable": true}, "email": {"type": "string", "readOnly": true, "description": "EMail address", "x-looker-nullable": true}, "is_disabled": {"type": "boolean", "readOnly": true, "description": "Has this credential been disabled?", "x-looker-nullable": false}, "logged_in_at": {"type": "string", "readOnly": true, "description": "Timestamp for most recent login using credential", "x-looker-nullable": true}, "saml_user_id": {"type": "string", "readOnly": true, "description": "Saml IdP's Unique ID for this user", "x-looker-nullable": true}, "type": {"type": "string", "readOnly": true, "description": "Short name for the type of this kind of credential", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "CredentialsTotp": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "created_at": {"type": "string", "readOnly": true, "description": "Timestamp for the creation of this credential", "x-looker-nullable": true}, "is_disabled": {"type": "boolean", "readOnly": true, "description": "Has this credential been disabled?", "x-looker-nullable": false}, "type": {"type": "string", "readOnly": true, "description": "Short name for the type of this kind of credential", "x-looker-nullable": true}, "verified": {"type": "boolean", "readOnly": true, "description": "User has verified", "x-looker-nullable": false}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "CustomWelcomeEmail": {"properties": {"enabled": {"type": "boolean", "description": "If true, custom email content will replace the default body of welcome emails", "x-looker-nullable": false}, "content": {"type": "string", "description": "The HTML to use as custom content for welcome emails. Script elements and other potentially dangerous markup will be removed.", "x-looker-nullable": true}, "subject": {"type": "string", "description": "The text to appear in the email subject line. Only available with a whitelabel license and whitelabel_configuration.advanced_custom_welcome_email enabled.", "x-looker-nullable": true}, "header": {"type": "string", "description": "The text to appear in the header line of the email body. Only available with a whitelabel license and whitelabel_configuration.advanced_custom_welcome_email enabled.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DashboardAggregateTableLookml": {"properties": {"dashboard_id": {"type": "string", "readOnly": true, "description": "Dashboard Id", "x-looker-nullable": true}, "aggregate_table_lookml": {"type": "string", "readOnly": true, "description": "Aggregate Table LookML", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DashboardAppearance": {"properties": {"page_side_margins": {"type": "integer", "format": "int64", "description": "Page margin (side) width", "x-looker-nullable": true}, "page_background_color": {"type": "string", "description": "Background color for the dashboard", "x-looker-nullable": true}, "tile_title_alignment": {"type": "string", "description": "Title alignment on dashboard tiles", "x-looker-nullable": true}, "tile_space_between": {"type": "integer", "format": "int64", "description": "Space between tiles", "x-looker-nullable": true}, "tile_background_color": {"type": "string", "description": "Background color for tiles", "x-looker-nullable": true}, "tile_shadow": {"type": "boolean", "description": "Tile shadow on/off", "x-looker-nullable": true}, "key_color": {"type": "string", "description": "Key color", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DashboardElement": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "body_text": {"type": "string", "description": "Text tile body text", "x-looker-nullable": true}, "body_text_as_html": {"type": "string", "readOnly": true, "description": "Text tile body text as Html", "x-looker-nullable": true}, "dashboard_id": {"type": "string", "description": "Id of Dashboard", "x-looker-nullable": true}, "edit_uri": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Relative path of URI of LookML file to edit the dashboard element (LookML dashboard only).", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "look": {"$ref": "#/definitions/LookWithQuery", "readOnly": true, "description": "Look", "x-looker-nullable": true}, "look_id": {"type": "string", "description": "Id Of Look", "x-looker-nullable": true}, "lookml_link_id": {"type": "string", "readOnly": true, "description": "LookML link ID", "x-looker-nullable": true}, "merge_result_id": {"type": "string", "description": "ID of merge result", "x-looker-nullable": true}, "note_display": {"type": "string", "description": "Note Display", "x-looker-nullable": true}, "note_state": {"type": "string", "description": "Note State", "x-looker-nullable": true}, "note_text": {"type": "string", "description": "Note Text", "x-looker-nullable": true}, "note_text_as_html": {"type": "string", "readOnly": true, "description": "Note Text as Html", "x-looker-nullable": true}, "query": {"$ref": "#/definitions/Query", "readOnly": true, "description": "Query", "x-looker-nullable": true}, "query_id": {"type": "string", "description": "Id Of Query", "x-looker-nullable": true}, "refresh_interval": {"type": "string", "description": "Refresh Interval", "x-looker-nullable": true}, "refresh_interval_to_i": {"type": "integer", "format": "int64", "readOnly": true, "description": "Refresh Interval as integer", "x-looker-nullable": true}, "result_maker": {"$ref": "#/definitions/ResultMakerWithIdVisConfigAndDynamicFields", "description": "Data about the result maker.", "x-looker-nullable": true}, "result_maker_id": {"type": "string", "description": "ID of the ResultMakerLookup entry.", "x-looker-nullable": true}, "subtitle_text": {"type": "string", "description": "Text tile subtitle text", "x-looker-nullable": true}, "title": {"type": "string", "description": "Title of dashboard element", "x-looker-nullable": true}, "title_hidden": {"type": "boolean", "description": "Whether title is hidden", "x-looker-nullable": false}, "title_text": {"type": "string", "description": "Text tile title", "x-looker-nullable": true}, "type": {"type": "string", "description": "Type", "x-looker-nullable": true}, "alert_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Count of Alerts associated to a dashboard element", "x-looker-nullable": true}, "rich_content_json": {"type": "string", "description": "JSON with all the properties required for rich editor and buttons elements", "x-looker-nullable": true}, "title_text_as_html": {"type": "string", "readOnly": true, "description": "Text tile title text as Html", "x-looker-nullable": true}, "subtitle_text_as_html": {"type": "string", "readOnly": true, "description": "Text tile subtitle text as Html", "x-looker-nullable": true}, "extension_id": {"type": "string", "description": "Extension ID", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DashboardFilter": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "dashboard_id": {"type": "string", "readOnly": true, "description": "Id of Dashboard", "x-looker-nullable": true}, "name": {"type": "string", "description": "Name of filter", "x-looker-nullable": true}, "title": {"type": "string", "description": "Title of filter", "x-looker-nullable": true}, "type": {"type": "string", "description": "Type of filter: one of date, number, string, or field", "x-looker-nullable": true}, "default_value": {"type": "string", "description": "Default value of filter", "x-looker-nullable": true}, "model": {"type": "string", "description": "Model of filter (required if type = field)", "x-looker-nullable": true}, "explore": {"type": "string", "description": "Explore of filter (required if type = field)", "x-looker-nullable": true}, "dimension": {"type": "string", "description": "Dimension of filter (required if type = field)", "x-looker-nullable": true}, "field": {"type": "object", "additionalProperties": {"type": "any", "format": "any"}, "readOnly": true, "description": "Field information", "x-looker-nullable": true}, "row": {"type": "integer", "format": "int64", "description": "Display order of this filter relative to other filters", "x-looker-nullable": true}, "listens_to_filters": {"type": "array", "items": {"type": "string"}, "description": "Array of listeners for faceted filters", "x-looker-nullable": true}, "allow_multiple_values": {"type": "boolean", "description": "Whether the filter allows multiple filter values (deprecated in the latest version of dashboards)", "x-looker-nullable": false}, "required": {"type": "boolean", "description": "Whether the filter requires a value to run the dashboard", "x-looker-nullable": false}, "ui_config": {"type": "object", "additionalProperties": {"type": "any", "format": "any"}, "description": "The visual configuration for this filter. Used to set up how the UI for this filter should appear.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "CreateDashboardFilter": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "dashboard_id": {"type": "string", "description": "Id of Dashboard", "x-looker-nullable": true}, "name": {"type": "string", "description": "Name of filter", "x-looker-nullable": true}, "title": {"type": "string", "description": "Title of filter", "x-looker-nullable": true}, "type": {"type": "string", "description": "Type of filter: one of date, number, string, or field", "x-looker-nullable": true}, "default_value": {"type": "string", "description": "Default value of filter", "x-looker-nullable": true}, "model": {"type": "string", "description": "Model of filter (required if type = field)", "x-looker-nullable": true}, "explore": {"type": "string", "description": "Explore of filter (required if type = field)", "x-looker-nullable": true}, "dimension": {"type": "string", "description": "Dimension of filter (required if type = field)", "x-looker-nullable": true}, "field": {"type": "object", "additionalProperties": {"type": "any", "format": "any"}, "readOnly": true, "description": "Field information", "x-looker-nullable": true}, "row": {"type": "integer", "format": "int64", "description": "Display order of this filter relative to other filters", "x-looker-nullable": true}, "listens_to_filters": {"type": "array", "items": {"type": "string"}, "description": "Array of listeners for faceted filters", "x-looker-nullable": true}, "allow_multiple_values": {"type": "boolean", "description": "Whether the filter allows multiple filter values (deprecated in the latest version of dashboards)", "x-looker-nullable": false}, "required": {"type": "boolean", "description": "Whether the filter requires a value to run the dashboard", "x-looker-nullable": false}, "ui_config": {"type": "object", "additionalProperties": {"type": "any", "format": "any"}, "description": "The visual configuration for this filter. Used to set up how the UI for this filter should appear.", "x-looker-nullable": true}}, "x-looker-status": "stable", "required": ["dashboard_id", "name", "title", "type"]}, "DashboardLayoutComponent": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "dashboard_layout_id": {"type": "string", "description": "Id of Dashboard Layout", "x-looker-nullable": true}, "dashboard_element_id": {"type": "string", "description": "Id Of Dashboard Element", "x-looker-nullable": true}, "row": {"type": "integer", "format": "int64", "description": "Row", "x-looker-nullable": true}, "column": {"type": "integer", "format": "int64", "description": "Column", "x-looker-nullable": true}, "width": {"type": "integer", "format": "int64", "description": "Width", "x-looker-nullable": true}, "height": {"type": "integer", "format": "int64", "description": "Height", "x-looker-nullable": true}, "deleted": {"type": "boolean", "readOnly": true, "description": "Whether or not the dashboard layout component is deleted", "x-looker-nullable": false}, "element_title": {"type": "string", "readOnly": true, "description": "Dashboard element title, extracted from the Dashboard Element.", "x-looker-nullable": true}, "element_title_hidden": {"type": "boolean", "readOnly": true, "description": "Whether or not the dashboard element title is displayed.", "x-looker-nullable": false}, "vis_type": {"type": "string", "readOnly": true, "description": "Visualization type, extracted from a query's vis_config", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DashboardLayout": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "dashboard_id": {"type": "string", "description": "Id of Dashboard", "x-looker-nullable": true}, "type": {"type": "string", "description": "Type", "x-looker-nullable": true}, "active": {"type": "boolean", "description": "Is Active", "x-looker-nullable": false}, "column_width": {"type": "integer", "format": "int64", "description": "Column Width", "x-looker-nullable": true}, "width": {"type": "integer", "format": "int64", "description": "Width", "x-looker-nullable": true}, "deleted": {"type": "boolean", "readOnly": true, "description": "Whether or not the dashboard layout is deleted.", "x-looker-nullable": false}, "dashboard_title": {"type": "string", "readOnly": true, "description": "Title extracted from the dashboard this layout represents.", "x-looker-nullable": true}, "dashboard_layout_components": {"type": "array", "items": {"$ref": "#/definitions/DashboardLayoutComponent"}, "readOnly": true, "description": "Components", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DashboardLookml": {"properties": {"dashboard_id": {"type": "string", "readOnly": true, "description": "Id of Dashboard", "x-looker-nullable": true}, "folder_id": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) Id of the folder", "x-looker-nullable": true}, "lookml": {"type": "string", "description": "lookml of UDD", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "Dashboard": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "content_favorite_id": {"type": "string", "readOnly": true, "description": "Content Favorite Id", "x-looker-nullable": true}, "content_metadata_id": {"type": "string", "readOnly": true, "description": "Id of content metadata", "x-looker-nullable": true}, "description": {"type": "string", "description": "Description", "x-looker-nullable": true}, "hidden": {"type": "boolean", "description": "Is Hidden", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "model": {"$ref": "#/definitions/LookModel", "readOnly": true, "description": "Model", "x-looker-nullable": true}, "query_timezone": {"type": "string", "description": "Timezone in which the Dashboard will run by default.", "x-looker-nullable": true}, "readonly": {"type": "boolean", "readOnly": true, "description": "Is Read-only", "x-looker-nullable": false}, "refresh_interval": {"type": "string", "description": "Refresh Interval, as a time duration phrase like \"2 hours 30 minutes\". A number with no time units will be interpreted as whole seconds.", "x-looker-nullable": true}, "refresh_interval_to_i": {"type": "integer", "format": "int64", "readOnly": true, "description": "Refresh Interval in milliseconds", "x-looker-nullable": true}, "folder": {"$ref": "#/definitions/FolderBase", "readOnly": true, "description": "Folder", "x-looker-nullable": true}, "title": {"type": "string", "description": "Dashboard Title", "x-looker-nullable": true}, "user_id": {"type": "string", "readOnly": true, "description": "Id of User", "x-looker-nullable": true}, "slug": {"type": "string", "description": "Content Metadata Slug", "x-looker-nullable": true}, "preferred_viewer": {"type": "string", "description": "The preferred route for viewing this dashboard (ie: dashboards or dashboards-next)", "x-looker-nullable": true}, "alert_sync_with_dashboard_filter_enabled": {"type": "boolean", "description": "Enables alerts to keep in sync with dashboard filter changes", "x-looker-nullable": false}, "background_color": {"type": "string", "description": "Background color", "x-looker-nullable": true}, "created_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time that the Dashboard was created.", "x-looker-nullable": true}, "crossfilter_enabled": {"type": "boolean", "description": "Enables crossfiltering in dashboards - only available in dashboards-next (beta)", "x-looker-nullable": false}, "dashboard_elements": {"type": "array", "items": {"$ref": "#/definitions/DashboardElement"}, "readOnly": true, "description": "Elements", "x-looker-nullable": true}, "dashboard_filters": {"type": "array", "items": {"$ref": "#/definitions/DashboardFilter"}, "readOnly": true, "description": "Filters", "x-looker-nullable": true}, "dashboard_layouts": {"type": "array", "items": {"$ref": "#/definitions/DashboardLayout"}, "readOnly": true, "description": "Layouts", "x-looker-nullable": true}, "deleted": {"type": "boolean", "description": "Whether or not a dashboard is 'soft' deleted.", "x-looker-nullable": false}, "deleted_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time that the Dashboard was 'soft' deleted.", "x-looker-nullable": true}, "deleter_id": {"type": "string", "readOnly": true, "description": "Id of User that 'soft' deleted the dashboard.", "x-looker-nullable": true}, "edit_uri": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Relative path of URI of LookML file to edit the dashboard (LookML dashboard only).", "x-looker-nullable": true}, "enable_viz_full_screen": {"type": "boolean", "description": "Allow visualizations to be viewed in full screen mode", "x-looker-nullable": false}, "favorite_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times favorited", "x-looker-nullable": true}, "filters_bar_collapsed": {"type": "boolean", "description": "Sets the default state of the filters bar to collapsed or open", "x-looker-nullable": false}, "filters_location_top": {"type": "boolean", "description": "Sets the default state of the filters location to top(true) or right(false)", "x-looker-nullable": false}, "last_accessed_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time the dashboard was last accessed", "x-looker-nullable": true}, "last_viewed_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time last viewed in the Looker web UI", "x-looker-nullable": true}, "updated_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time that the Dashboard was most recently updated.", "x-looker-nullable": true}, "last_updater_id": {"type": "string", "readOnly": true, "description": "Id of User that most recently updated the dashboard.", "x-looker-nullable": true}, "last_updater_name": {"type": "string", "readOnly": true, "description": "Name of User that most recently updated the dashboard.", "x-looker-nullable": true}, "user_name": {"type": "string", "readOnly": true, "description": "Name of User that created the dashboard.", "x-looker-nullable": true}, "load_configuration": {"type": "string", "description": "configuration option that governs how dashboard loading will happen.", "x-looker-nullable": true}, "lookml_link_id": {"type": "string", "description": "Links this dashboard to a particular LookML dashboard such that calling a **sync** operation on that LookML dashboard will update this dashboard to match.", "x-looker-nullable": true}, "show_filters_bar": {"type": "boolean", "description": "Show filters bar.  **Security Note:** This property only affects the *cosmetic* appearance of the dashboard, not a user's ability to access data. Hiding the filters bar does **NOT** prevent users from changing filters by other means. For information on how to set up secure data access control policies, see [Control User Access to Data](https://cloud.google.com/looker/docs/r/api/control-access)", "x-looker-nullable": true}, "show_title": {"type": "boolean", "description": "Show title", "x-looker-nullable": true}, "folder_id": {"type": "string", "description": "Id of folder", "x-looker-nullable": true}, "text_tile_text_color": {"type": "string", "description": "Color of text on text tiles", "x-looker-nullable": true}, "tile_background_color": {"type": "string", "description": "Tile background color", "x-looker-nullable": true}, "tile_text_color": {"type": "string", "description": "Tile text color", "x-looker-nullable": true}, "title_color": {"type": "string", "description": "Title color", "x-looker-nullable": true}, "view_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times viewed in the Looker web UI", "x-looker-nullable": true}, "appearance": {"$ref": "#/definitions/DashboardAppearance", "description": "Dashboard visual settings only applicable to dashboards-next (beta)", "x-looker-nullable": true}, "url": {"type": "string", "readOnly": true, "description": "Relative URL of the dashboard", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DataActionFormField": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Name", "x-looker-nullable": true}, "label": {"type": "string", "readOnly": true, "description": "Human-readable label", "x-looker-nullable": true}, "description": {"type": "string", "readOnly": true, "description": "Description of field", "x-looker-nullable": true}, "type": {"type": "string", "readOnly": true, "description": "Type of field.", "x-looker-nullable": true}, "default": {"type": "string", "readOnly": true, "description": "Default value of the field.", "x-looker-nullable": true}, "oauth_url": {"type": "string", "readOnly": true, "description": "The URL for an oauth link, if type is 'oauth_link'.", "x-looker-nullable": true}, "interactive": {"type": "boolean", "readOnly": true, "description": "Whether or not a field supports interactive forms.", "x-looker-nullable": false}, "required": {"type": "boolean", "readOnly": true, "description": "Whether or not the field is required. This is a user-interface hint. A user interface displaying this form should not submit it without a value for this field. The action server must also perform this validation.", "x-looker-nullable": false}, "options": {"type": "array", "items": {"$ref": "#/definitions/DataActionFormSelectOption"}, "readOnly": true, "description": "If the form type is 'select', a list of options to be selected from.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DataActionForm": {"properties": {"state": {"$ref": "#/definitions/DataActionUserState", "readOnly": true, "description": "User state", "x-looker-nullable": true}, "fields": {"type": "array", "items": {"$ref": "#/definitions/DataActionFormField"}, "readOnly": true, "description": "Array of form fields.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DataActionFormSelectOption": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Name", "x-looker-nullable": true}, "label": {"type": "string", "readOnly": true, "description": "Human-readable label", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DataActionRequest": {"properties": {"action": {"type": "object", "additionalProperties": {"type": "any", "format": "any"}, "description": "The JSON describing the data action. This JSON should be considered opaque and should be passed through unmodified from the query result it came from.", "x-looker-nullable": true}, "form_values": {"type": "object", "additionalProperties": {"type": "string"}, "description": "User input for any form values the data action might use.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DataActionResponse": {"properties": {"webhook_id": {"type": "string", "readOnly": true, "description": "ID of the webhook event that sent this data action. In some error conditions, this may be null.", "x-looker-nullable": true}, "success": {"type": "boolean", "readOnly": true, "description": "Whether the data action was successful.", "x-looker-nullable": false}, "refresh_query": {"type": "boolean", "readOnly": true, "description": "When true, indicates that the client should refresh (rerun) the source query because the data may have been changed by the action.", "x-looker-nullable": false}, "validation_errors": {"$ref": "#/definitions/ValidationError", "readOnly": true, "description": "Validation errors returned by the data action server.", "x-looker-nullable": true}, "message": {"type": "string", "readOnly": true, "description": "Optional message returned by the data action server describing the state of the action that took place. This can be used to implement custom failure messages. If a failure is related to a particular form field, the server should send back a validation error instead. The Looker web UI does not currently display any message if the action indicates 'success', but may do so in the future.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DataActionUserState": {"properties": {"data": {"type": "string", "readOnly": true, "description": "User state data", "x-looker-nullable": true}, "refresh_time": {"type": "integer", "format": "int64", "readOnly": true, "description": "Time in seconds until the state needs to be refreshed", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "Datagroup": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "created_at": {"type": "integer", "format": "int64", "readOnly": true, "description": "UNIX timestamp at which this entry was created.", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique ID of the datagroup", "x-looker-nullable": false}, "model_name": {"type": "string", "readOnly": true, "description": "Name of the model containing the datagroup. Unique when combined with name.", "x-looker-nullable": true}, "name": {"type": "string", "readOnly": true, "description": "Name of the datagroup. Unique when combined with model_name.", "x-looker-nullable": true}, "stale_before": {"type": "integer", "format": "int64", "description": "UNIX timestamp before which cache entries are considered stale. Cannot be in the future.", "x-looker-nullable": true}, "trigger_check_at": {"type": "integer", "format": "int64", "readOnly": true, "description": "UNIX timestamp at which this entry trigger was last checked.", "x-looker-nullable": true}, "trigger_error": {"type": "string", "readOnly": true, "description": "The message returned with the error of the last trigger check.", "x-looker-nullable": true}, "trigger_value": {"type": "string", "readOnly": true, "description": "The value of the trigger when last checked.", "x-looker-nullable": true}, "triggered_at": {"type": "integer", "format": "int64", "description": "UNIX timestamp at which this entry became triggered. Cannot be in the future.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DBConnectionBase": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "name": {"type": "string", "readOnly": true, "description": "Name of the connection. Also used as the unique identifier", "x-looker-nullable": false}, "dialect": {"$ref": "#/definitions/Dialect", "readOnly": true, "description": "(Read-only) SQL Dialect details", "x-looker-nullable": false}, "snippets": {"type": "array", "items": {"$ref": "#/definitions/Snippet"}, "readOnly": true, "description": "SQL Runner snippets for this connection", "x-looker-nullable": false}, "pdts_enabled": {"type": "boolean", "readOnly": true, "description": "True if PDTs are enabled on this connection", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "DBConnection": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "name": {"type": "string", "description": "Name of the connection. Also used as the unique identifier", "x-looker-nullable": false}, "dialect": {"$ref": "#/definitions/Dialect", "readOnly": true, "description": "(Read-only) SQL Dialect details", "x-looker-nullable": false}, "snippets": {"type": "array", "items": {"$ref": "#/definitions/Snippet"}, "readOnly": true, "description": "SQL Runner snippets for this connection", "x-looker-nullable": false}, "pdts_enabled": {"type": "boolean", "readOnly": true, "description": "True if PDTs are enabled on this connection", "x-looker-nullable": false}, "host": {"type": "string", "description": "Host name/address of server; or the string 'localhost' in case of a connection over an SSH tunnel.", "x-looker-nullable": true}, "port": {"type": "string", "description": "Port number on server. If the connection is over an SSH tunnel, then the local port associated with the SSH tunnel.", "x-looker-nullable": true}, "username": {"type": "string", "description": "Username for server authentication", "x-looker-nullable": true}, "password": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) Password for server authentication", "x-looker-nullable": true}, "uses_oauth": {"type": "boolean", "readOnly": true, "description": "Whether the connection uses OAuth for authentication.", "x-looker-nullable": false}, "certificate": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).", "x-looker-nullable": true}, "file_type": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) Certificate keyfile type - .json or .p12", "x-looker-nullable": true}, "database": {"type": "string", "description": "Database name", "x-looker-nullable": true}, "db_timezone": {"type": "string", "description": "Time zone of database", "x-looker-nullable": true}, "query_timezone": {"type": "string", "description": "Timezone to use in queries", "x-looker-nullable": true}, "schema": {"type": "string", "description": "Schema name", "x-looker-nullable": true}, "max_connections": {"type": "integer", "format": "int64", "description": "Maximum number of concurrent connection to use", "x-looker-nullable": true}, "max_billing_gigabytes": {"type": "string", "description": "Maximum size of query in GBs (BigQuery only, can be a user_attribute name)", "x-looker-nullable": true}, "ssl": {"type": "boolean", "description": "Use SSL/TLS when connecting to server", "x-looker-nullable": false}, "verify_ssl": {"type": "boolean", "description": "Verify the SSL", "x-looker-nullable": false}, "tmp_db_name": {"type": "string", "description": "Name of temporary database (if used)", "x-looker-nullable": true}, "jdbc_additional_params": {"type": "string", "description": "Additional params to add to JDBC connection string", "x-looker-nullable": true}, "pool_timeout": {"type": "integer", "format": "int64", "description": "Connection Pool Timeout, in seconds", "x-looker-nullable": true}, "dialect_name": {"type": "string", "description": "(Read/Write) SQL Dialect name", "x-looker-nullable": true}, "supports_data_studio_link": {"type": "boolean", "readOnly": true, "description": "Database connection has the ability to support open data studio from explore", "x-looker-nullable": false}, "created_at": {"type": "string", "readOnly": true, "description": "Creation date for this connection", "x-looker-nullable": true}, "user_id": {"type": "string", "readOnly": true, "description": "Id of user who last modified this connection configuration", "x-looker-nullable": true}, "example": {"type": "boolean", "readOnly": true, "description": "Is this an example connection?", "x-looker-nullable": false}, "user_db_credentials": {"type": "boolean", "description": "(Limited access feature) Are per user db credentials enabled. Enabling will remove previously set username and password", "x-looker-nullable": true}, "user_attribute_fields": {"type": "array", "items": {"type": "string"}, "description": "Fields whose values map to user attribute names", "x-looker-nullable": true}, "maintenance_cron": {"type": "string", "description": "Cron string specifying when maintenance such as PDT trigger checks and drops should be performed", "x-looker-nullable": true}, "last_regen_at": {"type": "string", "readOnly": true, "description": "Unix timestamp at start of last completed PDT trigger check process", "x-looker-nullable": true}, "last_reap_at": {"type": "string", "readOnly": true, "description": "Unix timestamp at start of last completed PDT reap process", "x-looker-nullable": true}, "sql_runner_precache_tables": {"type": "boolean", "description": "Precache tables in the SQL Runner", "x-looker-nullable": false}, "sql_writing_with_info_schema": {"type": "boolean", "description": "Fetch Information Schema For SQL Writing", "x-looker-nullable": false}, "after_connect_statements": {"type": "string", "description": "SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature", "x-looker-nullable": true}, "pdt_context_override": {"$ref": "#/definitions/DBConnectionOverride", "description": "db_connection_override for this connection in the `pdt` maintenance context", "x-looker-nullable": true}, "managed": {"type": "boolean", "readOnly": true, "description": "Is this connection created and managed by Looker", "x-looker-nullable": false}, "custom_local_port": {"type": "integer", "format": "int64", "description": "This field is only applicable to connections over an SSH Tunnel. The value of this field would be the local port associated with the SSH tunnel if configured manually. Otherwise either enter NULL or exclude this field.", "x-looker-undocumented": false, "x-looker-nullable": true}, "tunnel_id": {"type": "string", "description": "The Id of the ssh tunnel this connection uses", "x-looker-undocumented": false, "x-looker-nullable": true}, "uses_tns": {"type": "boolean", "description": "Enable Transparent Network Substrate (TNS) connections", "x-looker-nullable": true}, "pdt_concurrency": {"type": "integer", "format": "int64", "description": "Maximum number of threads to use to build PDTs in parallel", "x-looker-nullable": true}, "disable_context_comment": {"type": "boolean", "description": "When disable_context_comment is true comment will not be added to SQL", "x-looker-nullable": true}, "oauth_application_id": {"type": "string", "description": "An External OAuth Application to use for authenticating to the database", "x-looker-nullable": true}, "always_retry_failed_builds": {"type": "boolean", "description": "When true, error PDTs will be retried every regenerator cycle", "x-looker-nullable": true}, "cost_estimate_enabled": {"type": "boolean", "description": "When true, query cost estimate will be displayed in explore.", "x-looker-nullable": true}, "pdt_api_control_enabled": {"type": "boolean", "description": "PDT builds on this connection can be kicked off and cancelled via API.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DBConnectionOverride": {"properties": {"context": {"type": "string", "description": "Context in which to override (`pdt` is the only allowed value)", "x-looker-nullable": false}, "host": {"type": "string", "description": "Host name/address of server", "x-looker-nullable": true}, "port": {"type": "string", "description": "Port number on server", "x-looker-nullable": true}, "username": {"type": "string", "description": "Username for server authentication", "x-looker-nullable": true}, "password": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) Password for server authentication", "x-looker-nullable": true}, "has_password": {"type": "boolean", "readOnly": true, "description": "Whether or not the password is overridden in this context", "x-looker-nullable": false}, "certificate": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).", "x-looker-nullable": true}, "file_type": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) Certificate keyfile type - .json or .p12", "x-looker-nullable": true}, "database": {"type": "string", "description": "Database name", "x-looker-nullable": true}, "schema": {"type": "string", "description": "Schema name", "x-looker-nullable": true}, "jdbc_additional_params": {"type": "string", "description": "Additional params to add to JDBC connection string", "x-looker-nullable": true}, "after_connect_statements": {"type": "string", "description": "SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DBConnectionTestResult": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "connection_string": {"type": "string", "readOnly": true, "description": "JDBC connection string. (only populated in the 'connect' test)", "x-looker-nullable": true}, "message": {"type": "string", "readOnly": true, "description": "Result message of test", "x-looker-nullable": true}, "name": {"type": "string", "readOnly": true, "description": "Name of test", "x-looker-nullable": true}, "status": {"type": "string", "readOnly": true, "description": "Result code of test", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DelegateOauthTest": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Delegate Oauth Connection Name", "x-looker-nullable": false}, "installation_target_id": {"type": "string", "readOnly": true, "description": "The ID of the installation target. For Slack, this would be workspace id.", "x-looker-nullable": false}, "installation_id": {"type": "string", "readOnly": true, "description": "Installation ID", "x-looker-nullable": false}, "success": {"type": "boolean", "readOnly": true, "description": "Whether or not the test was successful", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "DependencyGraph": {"properties": {"graph_text": {"type": "string", "readOnly": true, "description": "The graph structure in the dot language that can be rendered into an image.", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "DialectInfo": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "default_max_connections": {"type": "string", "readOnly": true, "description": "Default number max connections", "x-looker-nullable": true}, "default_port": {"type": "string", "readOnly": true, "description": "Default port number", "x-looker-nullable": true}, "installed": {"type": "boolean", "readOnly": true, "description": "Is the supporting driver installed", "x-looker-nullable": false}, "label": {"type": "string", "readOnly": true, "description": "The human-readable label of the connection", "x-looker-nullable": true}, "label_for_database_equivalent": {"type": "string", "readOnly": true, "description": "What the dialect calls the equivalent of a normal SQL table", "x-looker-nullable": true}, "name": {"type": "string", "readOnly": true, "description": "The name of the dialect", "x-looker-nullable": true}, "supported_options": {"$ref": "#/definitions/DialectInfoOptions", "readOnly": true, "description": "Option support details", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "DialectInfoOptions": {"properties": {"additional_params": {"type": "boolean", "readOnly": true, "description": "Has additional params support", "x-looker-nullable": false}, "after_connect_statements": {"type": "boolean", "readOnly": true, "description": "Has support for issuing statements after connecting to the database", "x-looker-nullable": false}, "analytical_view_dataset": {"type": "boolean", "readOnly": true, "description": "Has analytical view support", "x-looker-nullable": false}, "auth": {"type": "boolean", "readOnly": true, "description": "Has auth support", "x-looker-nullable": false}, "cost_estimate": {"type": "boolean", "readOnly": true, "description": "Has configurable cost estimation", "x-looker-nullable": false}, "disable_context_comment": {"type": "boolean", "readOnly": true, "description": "Can disable query context comments", "x-looker-nullable": false}, "host": {"type": "boolean", "readOnly": true, "description": "Host is required", "x-looker-nullable": false}, "instance_name": {"type": "boolean", "readOnly": true, "description": "Instance name is required", "x-looker-nullable": false}, "max_billing_gigabytes": {"type": "boolean", "readOnly": true, "description": "Has max billing gigabytes support", "x-looker-nullable": false}, "oauth_credentials": {"type": "boolean", "readOnly": true, "description": "Has support for a service account", "x-looker-nullable": false}, "pdts_for_oauth": {"type": "boolean", "readOnly": true, "description": "Has OAuth for PDT support", "x-looker-nullable": false}, "port": {"type": "boolean", "readOnly": true, "description": "Port can be specified", "x-looker-nullable": false}, "project_name": {"type": "boolean", "readOnly": true, "description": "Has project name support", "x-looker-nullable": false}, "schema": {"type": "boolean", "readOnly": true, "description": "Schema can be specified", "x-looker-nullable": false}, "service_account_credentials": {"type": "boolean", "readOnly": true, "description": "Has support for a service account", "x-looker-nullable": false}, "ssl": {"type": "boolean", "readOnly": true, "description": "Has TLS/SSL support", "x-looker-nullable": false}, "timezone": {"type": "boolean", "readOnly": true, "description": "Has timezone support", "x-looker-nullable": false}, "tmp_table": {"type": "boolean", "readOnly": true, "description": "Has tmp table support", "x-looker-nullable": false}, "tns": {"type": "boolean", "readOnly": true, "description": "Has Oracle TNS support", "x-looker-nullable": false}, "username": {"type": "boolean", "readOnly": true, "description": "Username can be specified", "x-looker-nullable": false}, "username_required": {"type": "boolean", "readOnly": true, "description": "Username is required", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "Dialect": {"properties": {"name": {"type": "string", "readOnly": true, "description": "The name of the dialect", "x-looker-nullable": false}, "label": {"type": "string", "readOnly": true, "description": "The human-readable label of the connection", "x-looker-nullable": false}, "supports_cost_estimate": {"type": "boolean", "readOnly": true, "description": "Whether the dialect supports query cost estimates", "x-looker-nullable": false}, "cost_estimate_style": {"type": "string", "readOnly": true, "description": "How the dialect handles cost estimation", "x-looker-nullable": true}, "persistent_table_indexes": {"type": "string", "readOnly": true, "description": "PDT index columns", "x-looker-nullable": false}, "persistent_table_sortkeys": {"type": "string", "readOnly": true, "description": "PDT sortkey columns", "x-looker-nullable": false}, "persistent_table_distkey": {"type": "string", "readOnly": true, "description": "PDT distkey column", "x-looker-nullable": false}, "supports_streaming": {"type": "boolean", "readOnly": true, "description": "Suports streaming results", "x-looker-nullable": false}, "automatically_run_sql_runner_snippets": {"type": "boolean", "readOnly": true, "description": "Should SQL Runner snippets automatically be run", "x-looker-nullable": false}, "connection_tests": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "Array of names of the tests that can be run on a connection using this dialect", "x-looker-nullable": false}, "supports_inducer": {"type": "boolean", "readOnly": true, "description": "Is supported with the inducer (i.e. generate from sql)", "x-looker-nullable": false}, "supports_multiple_databases": {"type": "boolean", "readOnly": true, "description": "Can multiple databases be accessed from a connection using this dialect", "x-looker-nullable": false}, "supports_persistent_derived_tables": {"type": "boolean", "readOnly": true, "description": "Whether the dialect supports allowing Looker to build persistent derived tables", "x-looker-nullable": false}, "has_ssl_support": {"type": "boolean", "readOnly": true, "description": "Does the database have client SSL support settable through the JDBC string explicitly?", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "DigestEmailSend": {"properties": {"configuration_delivered": {"type": "boolean", "description": "True if content was successfully generated and delivered", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "DigestEmails": {"properties": {"is_enabled": {"type": "boolean", "description": "Whether or not digest emails are enabled", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "EgressIpAddresses": {"properties": {"egress_ip_addresses": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "Egress IP addresses", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "EmbedParams": {"properties": {"target_url": {"type": "string", "format": "uri-reference", "description": "The complete URL of the Looker UI page to display in the embed context. For example, to display the dashboard with id 34, `target_url` would look like: `https://mycompany.looker.com:9999/dashboards/34`. `target_uri` MUST contain a scheme (HTTPS), domain name, and URL path. Port must be included if it is required to reach the Looker server from browser clients. If the Looker instance is behind a load balancer or other proxy, `target_uri` must be the public-facing domain name and port required to reach the Looker instance, not the actual internal network machine name of the Looker instance.", "x-looker-nullable": false}, "session_length": {"type": "integer", "format": "int64", "description": "Number of seconds the SSO embed session will be valid after the embed session is started. Defaults to 300 seconds. Maximum session length accepted is 2592000 seconds (30 days).", "x-looker-nullable": true}, "force_logout_login": {"type": "boolean", "description": "When true, the embed session will purge any residual Looker login state (such as in browser cookies) before creating a new login state with the given embed user info. Defaults to true.", "x-looker-nullable": false}}, "x-looker-status": "stable", "required": ["target_url"]}, "EmbedSsoParams": {"properties": {"target_url": {"type": "string", "format": "uri-reference", "description": "The complete URL of the Looker UI page to display in the embed context. For example, to display the dashboard with id 34, `target_url` would look like: `https://mycompany.looker.com:9999/dashboards/34`. `target_uri` MUST contain a scheme (HTTPS), domain name, and URL path. Port must be included if it is required to reach the Looker server from browser clients. If the Looker instance is behind a load balancer or other proxy, `target_uri` must be the public-facing domain name and port required to reach the Looker instance, not the actual internal network machine name of the Looker instance.", "x-looker-nullable": false}, "session_length": {"type": "integer", "format": "int64", "description": "Number of seconds the SSO embed session will be valid after the embed session is started. Defaults to 300 seconds. Maximum session length accepted is 2592000 seconds (30 days).", "x-looker-nullable": true}, "force_logout_login": {"type": "boolean", "description": "When true, the embed session will purge any residual Looker login state (such as in browser cookies) before creating a new login state with the given embed user info. Defaults to true.", "x-looker-nullable": false}, "external_user_id": {"type": "string", "description": "A value from an external system that uniquely identifies the embed user. Since the user_ids of Looker embed users may change with every embed session, external_user_id provides a way to assign a known, stable user identifier across multiple embed sessions.", "x-looker-nullable": true}, "first_name": {"type": "string", "description": "First name of the embed user. Defaults to 'Embed' if not specified", "x-looker-nullable": true}, "last_name": {"type": "string", "description": "Last name of the embed user. Defaults to 'User' if not specified", "x-looker-nullable": true}, "user_timezone": {"type": "string", "description": "Sets the user timezone for the embed user session, if the User Specific Timezones setting is enabled in the Looker admin settings. A value of `null` forces the embed user to use the Looker Application Default Timezone. You MUST omit this property from the request if the User Specific Timezones setting is disabled. Timezone values are validated against the IANA Timezone standard and can be seen in the Application Time Zone dropdown list on the Looker General Settings admin page.", "x-looker-nullable": true}, "permissions": {"type": "array", "items": {"type": "string"}, "description": "List of Looker permission names to grant to the embed user. Requested permissions will be filtered to permissions allowed for embed sessions.", "x-looker-nullable": true}, "models": {"type": "array", "items": {"type": "string"}, "description": "List of model names that the embed user may access", "x-looker-nullable": true}, "group_ids": {"type": "array", "items": {"type": "string"}, "description": "List of Looker group ids in which to enroll the embed user", "x-looker-nullable": true}, "external_group_id": {"type": "string", "description": "A unique value identifying an embed-exclusive group. Multiple embed users using the same `external_group_id` value will be able to share Looker content with each other. Content and embed users associated with the `external_group_id` will not be accessible to normal Looker users or embed users not associated with this `external_group_id`.", "x-looker-nullable": true}, "user_attributes": {"type": "object", "additionalProperties": {"type": "any", "format": "any"}, "description": "A dictionary of name-value pairs associating a Looker user attribute name with a value.", "x-looker-nullable": true}, "secret_id": {"type": "string", "description": "Id of the embed secret to use to sign this SSO url. If specified, the value must be an id of a valid (active) secret defined in the Looker instance. If not specified, the URL will be signed with the newest active embed secret defined in the Looker instance.", "x-looker-nullable": true}}, "x-looker-status": "stable", "required": ["target_url"]}, "EmbedCookielessSessionAcquire": {"properties": {"session_length": {"type": "integer", "format": "int64", "description": "Number of seconds the SSO embed session will be valid after the embed session is started. Defaults to 300 seconds. Maximum session length accepted is 2592000 seconds (30 days).", "x-looker-nullable": true}, "force_logout_login": {"type": "boolean", "description": "When true, the embed session will purge any residual Looker login state (such as in browser cookies) before creating a new login state with the given embed user info. Defaults to true.", "x-looker-nullable": false}, "external_user_id": {"type": "string", "description": "A value from an external system that uniquely identifies the embed user. Since the user_ids of Looker embed users may change with every embed session, external_user_id provides a way to assign a known, stable user identifier across multiple embed sessions.", "x-looker-nullable": true}, "first_name": {"type": "string", "description": "First name of the embed user. Defaults to 'Embed' if not specified", "x-looker-nullable": true}, "last_name": {"type": "string", "description": "Last name of the embed user. Defaults to 'User' if not specified", "x-looker-nullable": true}, "user_timezone": {"type": "string", "description": "Sets the user timezone for the embed user session, if the User Specific Timezones setting is enabled in the Looker admin settings. A value of `null` forces the embed user to use the Looker Application Default Timezone. You MUST omit this property from the request if the User Specific Timezones setting is disabled. Timezone values are validated against the IANA Timezone standard and can be seen in the Application Time Zone dropdown list on the Looker General Settings admin page.", "x-looker-nullable": true}, "permissions": {"type": "array", "items": {"type": "string"}, "description": "List of Looker permission names to grant to the embed user. Requested permissions will be filtered to permissions allowed for embed sessions.", "x-looker-nullable": true}, "models": {"type": "array", "items": {"type": "string"}, "description": "List of model names that the embed user may access", "x-looker-nullable": true}, "group_ids": {"type": "array", "items": {"type": "string"}, "description": "List of Looker group ids in which to enroll the embed user", "x-looker-nullable": true}, "external_group_id": {"type": "string", "description": "A unique value identifying an embed-exclusive group. Multiple embed users using the same `external_group_id` value will be able to share Looker content with each other. Content and embed users associated with the `external_group_id` will not be accessible to normal Looker users or embed users not associated with this `external_group_id`.", "x-looker-nullable": true}, "user_attributes": {"type": "object", "additionalProperties": {"type": "any", "format": "any"}, "description": "A dictionary of name-value pairs associating a Looker user attribute name with a value.", "x-looker-nullable": true}, "session_reference_token": {"type": "string", "description": "Token referencing the embed session and is used to generate new authentication, navigation and api tokens.", "x-looker-nullable": true}, "embed_domain": {"type": "string", "description": "The domain of the server embedding the Looker IFRAME. This is an alternative to specifying the domain in the embedded domain allow list in the Looker embed admin page.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "EmbedCookielessSessionAcquireResponse": {"properties": {"authentication_token": {"type": "string", "description": "One time token used to create or to attach to an embedded session in the Looker application server.", "x-looker-nullable": true}, "authentication_token_ttl": {"type": "integer", "format": "int64", "description": "Authentication token time to live in seconds.", "x-looker-nullable": true}, "navigation_token": {"type": "string", "description": "Token used to load and navigate between Looker pages.", "x-looker-nullable": true}, "navigation_token_ttl": {"type": "integer", "format": "int64", "description": "Navigation token time to live in seconds.", "x-looker-nullable": true}, "api_token": {"type": "string", "description": "Token to used to call Looker APIs. ", "x-looker-nullable": true}, "api_token_ttl": {"type": "integer", "format": "int64", "description": "Api token time to live in seconds.", "x-looker-nullable": true}, "session_reference_token": {"type": "string", "description": "Token referencing the actual embed session. It is used to generate new api, navigation and authentication tokens. api and navigation tokens are short lived and must be refreshed regularly. A new authentication token must be acquired for each IFRAME that is created. The session_reference_token should be kept secure, ideally in the embed hosts application server. ", "x-looker-nullable": true}, "session_reference_token_ttl": {"type": "integer", "format": "int64", "description": "Session reference token time to live in seconds. Note that this is the same as actual session.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "EmbedCookielessSessionGenerateTokens": {"properties": {"session_reference_token": {"type": "string", "description": "Token referencing the embed session and is used to generate new authentication, navigation and api tokens.", "x-looker-nullable": false}, "navigation_token": {"type": "string", "description": "Token used to load and navigate between Looker pages.", "x-looker-nullable": true}, "api_token": {"type": "string", "description": "Token to used to call Looker APIs. ", "x-looker-nullable": true}}, "x-looker-status": "stable", "required": ["session_reference_token"]}, "EmbedCookielessSessionGenerateTokensResponse": {"properties": {"navigation_token": {"type": "string", "description": "Token used to load and navigate between Looker pages.", "x-looker-nullable": true}, "navigation_token_ttl": {"type": "integer", "format": "int64", "description": "Navigation token time to live in seconds.", "x-looker-nullable": true}, "api_token": {"type": "string", "description": "Token to used to call Looker APIs. ", "x-looker-nullable": true}, "api_token_ttl": {"type": "integer", "format": "int64", "description": "Api token time to live in seconds.", "x-looker-nullable": true}, "session_reference_token": {"type": "string", "description": "Token referencing the embed session and is used to generate new authentication, navigation and api tokens.", "x-looker-nullable": false}, "session_reference_token_ttl": {"type": "integer", "format": "int64", "description": "Session reference token time to live in seconds. Note that this is the same as actual session.", "x-looker-nullable": true}}, "x-looker-status": "stable", "required": ["session_reference_token"]}, "EmbedSecret": {"properties": {"algorithm": {"type": "string", "description": "Signing algorithm to use with this secret. Either `hmac/sha-256`(default) or `hmac/sha-1`", "x-looker-nullable": true}, "created_at": {"type": "string", "readOnly": true, "description": "When secret was created", "x-looker-nullable": true}, "enabled": {"type": "boolean", "description": "Is this secret currently enabled", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "secret": {"type": "string", "readOnly": true, "description": "Secret for use with SSO embedding", "x-looker-nullable": true}, "user_id": {"type": "string", "readOnly": true, "description": "Id of user who created this secret", "x-looker-nullable": true}, "secret_type": {"type": "string", "x-looker-values": ["SSO", "JWT"], "description": "Field to distinguish between SSO secrets and JWT secrets Valid values are: \"SSO\", \"JWT\".", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "EmbedUrlResponse": {"properties": {"url": {"type": "string", "readOnly": true, "description": "The embed URL. Any modification to this string will make the URL unusable.", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "SmtpSettings": {"properties": {"address": {"type": "string", "description": "SMTP Server url", "x-looker-nullable": false}, "from": {"type": "string", "description": "From e-mail address", "x-looker-nullable": false}, "user_name": {"type": "string", "description": "User name", "x-looker-nullable": false}, "password": {"type": "string", "description": "Password", "x-looker-nullable": false}, "port": {"type": "integer", "format": "int64", "description": "SMTP Server's port", "x-looker-nullable": false}, "enable_starttls_auto": {"type": "boolean", "description": "Is TLS encryption enabled?", "x-looker-nullable": false}, "ssl_version": {"type": "string", "x-looker-values": ["TLSv1_1", "SSLv23", "TLSv1_2"], "description": "TLS version selected Valid values are: \"TLSv1_1\", \"SSLv23\", \"TLSv1_2\".", "x-looker-nullable": true}, "default_smtp": {"type": "boolean", "description": "Whether to enable built-in Looker SMTP", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ExternalOauthApplication": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "ID of this OAuth Application", "x-looker-nullable": false}, "name": {"type": "string", "description": "The name of this application.  For Snowflake connections, this should be the name of the host database.", "x-looker-nullable": false}, "client_id": {"type": "string", "description": "The OAuth Client ID for this application", "x-looker-nullable": false}, "client_secret": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) The OAuth Client Secret for this application", "x-looker-nullable": false}, "dialect_name": {"type": "string", "description": "The database dialect for this application.", "x-looker-nullable": true}, "created_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Creation time for this application", "x-looker-nullable": false}}, "x-looker-status": "beta"}, "FolderBase": {"properties": {"name": {"type": "string", "description": "Unique Name", "x-looker-nullable": false}, "parent_id": {"type": "string", "description": "Id of Parent. If the parent id is null, this is a root-level entry", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "content_metadata_id": {"type": "string", "readOnly": true, "description": "Id of content metadata", "x-looker-nullable": true}, "created_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time the folder was created", "x-looker-nullable": true}, "creator_id": {"type": "string", "readOnly": true, "description": "User Id of Creator", "x-looker-nullable": true}, "child_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Children Count", "x-looker-nullable": true}, "external_id": {"type": "string", "readOnly": true, "description": "Embedder's Id if this folder was autogenerated as an embedding shared folder via 'external_group_id' in an SSO embed login", "x-looker-nullable": true}, "is_embed": {"type": "boolean", "readOnly": true, "description": "Folder is an embed folder", "x-looker-nullable": false}, "is_embed_shared_root": {"type": "boolean", "readOnly": true, "description": "Folder is the root embed shared folder", "x-looker-nullable": false}, "is_embed_users_root": {"type": "boolean", "readOnly": true, "description": "Folder is the root embed users folder", "x-looker-nullable": false}, "is_personal": {"type": "boolean", "readOnly": true, "description": "Folder is a user's personal folder", "x-looker-nullable": false}, "is_personal_descendant": {"type": "boolean", "readOnly": true, "description": "Folder is descendant of a user's personal folder", "x-looker-nullable": false}, "is_shared_root": {"type": "boolean", "readOnly": true, "description": "Folder is the root shared folder", "x-looker-nullable": false}, "is_users_root": {"type": "boolean", "readOnly": true, "description": "Folder is the root user folder", "x-looker-nullable": false}, "can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}}, "x-looker-status": "stable", "required": ["name"]}, "CreateFolder": {"properties": {"name": {"type": "string", "description": "Unique Name", "x-looker-nullable": false}, "parent_id": {"type": "string", "description": "Id of Parent. If the parent id is null, this is a root-level entry", "x-looker-nullable": false}}, "x-looker-status": "stable", "required": ["name", "parent_id"]}, "UpdateFolder": {"properties": {"name": {"type": "string", "description": "Unique Name", "x-looker-nullable": false}, "parent_id": {"type": "string", "description": "Id of Parent. If the parent id is null, this is a root-level entry", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "Folder": {"properties": {"name": {"type": "string", "description": "Unique Name", "x-looker-nullable": false}, "parent_id": {"type": "string", "description": "Id of Parent. If the parent id is null, this is a root-level entry", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "content_metadata_id": {"type": "string", "readOnly": true, "description": "Id of content metadata", "x-looker-nullable": true}, "created_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time the space was created", "x-looker-nullable": true}, "creator_id": {"type": "string", "readOnly": true, "description": "User Id of Creator", "x-looker-nullable": true}, "child_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Children Count", "x-looker-nullable": true}, "external_id": {"type": "string", "readOnly": true, "description": "Embedder's Id if this folder was autogenerated as an embedding shared folder via 'external_group_id' in an SSO embed login", "x-looker-nullable": true}, "is_embed": {"type": "boolean", "readOnly": true, "description": "Folder is an embed folder", "x-looker-nullable": false}, "is_embed_shared_root": {"type": "boolean", "readOnly": true, "description": "Folder is the root embed shared folder", "x-looker-nullable": false}, "is_embed_users_root": {"type": "boolean", "readOnly": true, "description": "Folder is the root embed users folder", "x-looker-nullable": false}, "is_personal": {"type": "boolean", "readOnly": true, "description": "Folder is a user's personal folder", "x-looker-nullable": false}, "is_personal_descendant": {"type": "boolean", "readOnly": true, "description": "Folder is descendant of a user's personal folder", "x-looker-nullable": false}, "is_shared_root": {"type": "boolean", "readOnly": true, "description": "Folder is the root shared folder", "x-looker-nullable": false}, "is_users_root": {"type": "boolean", "readOnly": true, "description": "Folder is the root user folder", "x-looker-nullable": false}, "can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "dashboards": {"type": "array", "items": {"$ref": "#/definitions/DashboardBase"}, "readOnly": true, "description": "Dashboards", "x-looker-nullable": true}, "looks": {"type": "array", "items": {"$ref": "#/definitions/LookWithDashboards"}, "readOnly": true, "description": "Looks", "x-looker-nullable": true}}, "x-looker-status": "stable", "required": ["name"]}, "GitBranch": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "name": {"type": "string", "description": "The short name on the local. Updating `name` results in `git checkout <new_name>`", "x-looker-nullable": true}, "remote": {"type": "string", "readOnly": true, "description": "The name of the remote", "x-looker-nullable": true}, "remote_name": {"type": "string", "readOnly": true, "description": "The short name on the remote", "x-looker-nullable": true}, "error": {"type": "string", "readOnly": true, "description": "Name of error", "x-looker-nullable": true}, "message": {"type": "string", "readOnly": true, "description": "Message describing an error if present", "x-looker-nullable": true}, "owner_name": {"type": "string", "readOnly": true, "description": "Name of the owner of a personal branch", "x-looker-nullable": true}, "readonly": {"type": "boolean", "readOnly": true, "description": "Whether or not this branch is readonly", "x-looker-nullable": false}, "personal": {"type": "boolean", "readOnly": true, "description": "Whether or not this branch is a personal branch - readonly for all developers except the owner", "x-looker-nullable": false}, "is_local": {"type": "boolean", "readOnly": true, "description": "Whether or not a local ref exists for the branch", "x-looker-nullable": false}, "is_remote": {"type": "boolean", "readOnly": true, "description": "Whether or not a remote ref exists for the branch", "x-looker-nullable": false}, "is_production": {"type": "boolean", "readOnly": true, "description": "Whether or not this is the production branch", "x-looker-nullable": false}, "ahead_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of commits the local branch is ahead of the remote", "x-looker-nullable": true}, "behind_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of commits the local branch is behind the remote", "x-looker-nullable": true}, "commit_at": {"type": "integer", "format": "int64", "readOnly": true, "description": "UNIX timestamp at which this branch was last committed.", "x-looker-nullable": true}, "ref": {"type": "string", "description": "The resolved ref of this branch. Updating `ref` results in `git reset --hard <new_ref>``.", "x-looker-nullable": true}, "remote_ref": {"type": "string", "readOnly": true, "description": "The resolved ref of this branch remote.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "GitConnectionTest": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "description": {"type": "string", "readOnly": true, "description": "Human readable string describing the test", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "A short string, uniquely naming this test", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "GitConnectionTestResult": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "A short string, uniquely naming this test", "x-looker-nullable": false}, "message": {"type": "string", "readOnly": true, "description": "Additional data from the test", "x-looker-nullable": true}, "status": {"type": "string", "readOnly": true, "description": "Either 'pass' or 'fail'", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "GitStatus": {"properties": {"action": {"type": "string", "readOnly": true, "description": "Git action: add, delete, etc", "x-looker-nullable": true}, "conflict": {"type": "boolean", "readOnly": true, "description": "When true, changes to the local file conflict with the remote repository", "x-looker-nullable": false}, "revertable": {"type": "boolean", "readOnly": true, "description": "When true, the file can be reverted to an earlier state", "x-looker-nullable": false}, "text": {"type": "string", "readOnly": true, "description": "Git description of the action", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "GroupIdForGroupInclusion": {"properties": {"group_id": {"type": "string", "readOnly": true, "description": "Id of group", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "Group": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "can_add_to_content_metadata": {"type": "boolean", "description": "Group can be used in content access controls", "x-looker-nullable": false}, "contains_current_user": {"type": "boolean", "readOnly": true, "description": "Currently logged in user is group member", "x-looker-nullable": false}, "external_group_id": {"type": "string", "readOnly": true, "description": "External Id group if embed group", "x-looker-nullable": true}, "externally_managed": {"type": "boolean", "readOnly": true, "description": "Group membership controlled outside of Looker", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "include_by_default": {"type": "boolean", "readOnly": true, "description": "New users are added to this group by default", "x-looker-nullable": false}, "name": {"type": "string", "description": "Name of group", "x-looker-nullable": true}, "user_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of users included in this group", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "GroupSearch": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "can_add_to_content_metadata": {"type": "boolean", "description": "Group can be used in content access controls", "x-looker-nullable": false}, "contains_current_user": {"type": "boolean", "readOnly": true, "description": "Currently logged in user is group member", "x-looker-nullable": false}, "external_group_id": {"type": "string", "readOnly": true, "description": "External Id group if embed group", "x-looker-nullable": true}, "externally_managed": {"type": "boolean", "readOnly": true, "description": "Group membership controlled outside of Looker", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "include_by_default": {"type": "boolean", "readOnly": true, "description": "New users are added to this group by default", "x-looker-nullable": false}, "name": {"type": "string", "description": "Name of group", "x-looker-nullable": true}, "user_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of users included in this group", "x-looker-nullable": true}, "roles": {"type": "array", "items": {"$ref": "#/definitions/Role"}, "readOnly": true, "description": "Roles assigned to group", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "GroupHierarchy": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "can_add_to_content_metadata": {"type": "boolean", "description": "Group can be used in content access controls", "x-looker-nullable": false}, "contains_current_user": {"type": "boolean", "readOnly": true, "description": "Currently logged in user is group member", "x-looker-nullable": false}, "external_group_id": {"type": "string", "readOnly": true, "description": "External Id group if embed group", "x-looker-nullable": true}, "externally_managed": {"type": "boolean", "readOnly": true, "description": "Group membership controlled outside of Looker", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "include_by_default": {"type": "boolean", "readOnly": true, "description": "New users are added to this group by default", "x-looker-nullable": false}, "name": {"type": "string", "description": "Name of group", "x-looker-nullable": true}, "user_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of users included in this group", "x-looker-nullable": true}, "parent_group_ids": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "IDs of parents of this group", "x-looker-nullable": true}, "role_ids": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "Role IDs assigned to group", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "GroupIdForGroupUserInclusion": {"properties": {"user_id": {"type": "string", "readOnly": true, "description": "Id of user", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ImportedProject": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Dependency name", "x-looker-nullable": true}, "url": {"type": "string", "readOnly": true, "description": "Url for a remote dependency", "x-looker-nullable": true}, "ref": {"type": "string", "readOnly": true, "description": "Ref for a remote dependency", "x-looker-nullable": true}, "is_remote": {"type": "boolean", "readOnly": true, "description": "Flag signifying if a dependency is remote or local", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "IntegrationHub": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "ID of the hub.", "x-looker-nullable": false}, "url": {"type": "string", "description": "URL of the hub.", "x-looker-nullable": false}, "label": {"type": "string", "readOnly": true, "description": "Label of the hub.", "x-looker-nullable": false}, "official": {"type": "boolean", "readOnly": true, "description": "Whether this hub is a first-party integration hub operated by Looker.", "x-looker-nullable": false}, "fetch_error_message": {"type": "string", "readOnly": true, "description": "An error message, present if the integration hub metadata could not be fetched. If this is present, the integration hub is unusable.", "x-looker-nullable": true}, "authorization_token": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) An authorization key that will be sent to the integration hub on every request.", "x-looker-nullable": true}, "has_authorization_token": {"type": "boolean", "readOnly": true, "description": "Whether the authorization_token is set for the hub.", "x-looker-nullable": false}, "legal_agreement_signed": {"type": "boolean", "readOnly": true, "description": "Whether the legal agreement message has been signed by the user. This only matters if legal_agreement_required is true.", "x-looker-nullable": false}, "legal_agreement_required": {"type": "boolean", "readOnly": true, "description": "Whether the legal terms for the integration hub are required before use.", "x-looker-nullable": false}, "legal_agreement_text": {"type": "string", "readOnly": true, "description": "The legal agreement text for this integration hub.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "Integration": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "ID of the integration.", "x-looker-nullable": false}, "integration_hub_id": {"type": "string", "readOnly": true, "description": "ID of the integration hub.", "x-looker-nullable": false}, "label": {"type": "string", "readOnly": true, "description": "Label for the integration.", "x-looker-nullable": false}, "description": {"type": "string", "readOnly": true, "description": "Description of the integration.", "x-looker-nullable": true}, "enabled": {"type": "boolean", "description": "Whether the integration is available to users.", "x-looker-nullable": false}, "params": {"type": "array", "items": {"$ref": "#/definitions/IntegrationParam"}, "description": "Array of params for the integration.", "x-looker-nullable": false}, "supported_formats": {"type": "array", "items": {"type": "string"}, "readOnly": true, "x-looker-values": ["txt", "csv", "inline_json", "json", "json_label", "json_detail", "json_detail_lite_stream", "xlsx", "html", "wysiwyg_pdf", "assembled_pdf", "wysiwyg_png", "csv_zip"], "description": "A list of data formats the integration supports. If unspecified, the default is all data formats. Valid values are: \"txt\", \"csv\", \"inline_json\", \"json\", \"json_label\", \"json_detail\", \"json_detail_lite_stream\", \"xlsx\", \"html\", \"wysiwyg_pdf\", \"assembled_pdf\", \"wysiwyg_png\", \"csv_zip\".", "x-looker-nullable": false}, "supported_action_types": {"type": "array", "items": {"type": "string"}, "readOnly": true, "x-looker-values": ["cell", "query", "dashboard", "none"], "description": "A list of action types the integration supports. Valid values are: \"cell\", \"query\", \"dashboard\", \"none\".", "x-looker-nullable": false}, "supported_formattings": {"type": "array", "items": {"type": "string"}, "readOnly": true, "x-looker-values": ["formatted", "unformatted"], "description": "A list of formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: \"formatted\", \"unformatted\".", "x-looker-nullable": false}, "supported_visualization_formattings": {"type": "array", "items": {"type": "string"}, "readOnly": true, "x-looker-values": ["apply", "noapply"], "description": "A list of visualization formatting options the integration supports. If unspecified, defaults to all formats. Valid values are: \"apply\", \"noapply\".", "x-looker-nullable": false}, "supported_download_settings": {"type": "array", "items": {"type": "string"}, "readOnly": true, "x-looker-values": ["push", "url"], "description": "A list of all the download mechanisms the integration supports. The order of values is not significant: Looker will select the most appropriate supported download mechanism for a given query. The integration must ensure it can handle any of the mechanisms it claims to support. If unspecified, this defaults to all download setting values. Valid values are: \"push\", \"url\".", "x-looker-nullable": false}, "icon_url": {"type": "string", "readOnly": true, "description": "URL to an icon for the integration.", "x-looker-nullable": true}, "uses_oauth": {"type": "boolean", "readOnly": true, "description": "Whether the integration uses oauth.", "x-looker-nullable": true}, "required_fields": {"type": "array", "items": {"$ref": "#/definitions/IntegrationRequiredField"}, "readOnly": true, "description": "A list of descriptions of required fields that this integration is compatible with. If there are multiple entries in this list, the integration requires more than one field. If unspecified, no fields will be required.", "x-looker-nullable": false}, "privacy_link": {"type": "string", "readOnly": true, "description": "Link to privacy policy for destination", "x-looker-nullable": true}, "delegate_oauth": {"type": "boolean", "readOnly": true, "description": "Whether the integration uses delegate oauth, which allows federation between an integration installation scope specific entity (like org, group, and team, etc.) and Looker.", "x-looker-nullable": true}, "installed_delegate_oauth_targets": {"type": "array", "items": {"type": "string"}, "description": "Whether the integration is available to users.", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "IntegrationParam": {"properties": {"name": {"type": "string", "description": "Name of the parameter.", "x-looker-nullable": true}, "label": {"type": "string", "readOnly": true, "description": "Label of the parameter.", "x-looker-nullable": true}, "description": {"type": "string", "readOnly": true, "description": "Short description of the parameter.", "x-looker-nullable": true}, "required": {"type": "boolean", "readOnly": true, "description": "Whether the parameter is required to be set to use the destination. If unspecified, this defaults to false.", "x-looker-nullable": false}, "has_value": {"type": "boolean", "readOnly": true, "description": "Whether the parameter has a value set.", "x-looker-nullable": false}, "value": {"type": "string", "description": "The current value of the parameter. Always null if the value is sensitive. When writing, null values will be ignored. Set the value to an empty string to clear it.", "x-looker-nullable": true}, "user_attribute_name": {"type": "string", "description": "When present, the param's value comes from this user attribute instead of the 'value' parameter. Set to null to use the 'value'.", "x-looker-nullable": true}, "sensitive": {"type": "boolean", "readOnly": true, "description": "Whether the parameter contains sensitive data like API credentials. If unspecified, this defaults to true.", "x-looker-nullable": true}, "per_user": {"type": "boolean", "readOnly": true, "description": "When true, this parameter must be assigned to a user attribute in the admin panel (instead of a constant value), and that value may be updated by the user as part of the integration flow.", "x-looker-nullable": false}, "delegate_oauth_url": {"type": "string", "readOnly": true, "description": "When present, the param represents the oauth url the user will be taken to.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "IntegrationRequiredField": {"properties": {"tag": {"type": "string", "readOnly": true, "description": "Matches a field that has this tag.", "x-looker-nullable": true}, "any_tag": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "If present, supercedes 'tag' and matches a field that has any of the provided tags.", "x-looker-nullable": true}, "all_tags": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "If present, supercedes 'tag' and matches a field that has all of the provided tags.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "IntegrationTestResult": {"properties": {"success": {"type": "boolean", "readOnly": true, "description": "Whether or not the test was successful", "x-looker-nullable": false}, "message": {"type": "string", "readOnly": true, "description": "A message representing the results of the test.", "x-looker-nullable": true}, "delegate_oauth_result": {"type": "array", "items": {"$ref": "#/definitions/DelegateOauthTest"}, "readOnly": true, "description": "An array of connection test result for delegate oauth actions.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "InternalHelpResourcesContent": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "organization_name": {"type": "string", "description": "Text to display in the help menu item which will display the internal help resources", "x-looker-nullable": true}, "markdown_content": {"type": "string", "description": "Content to be displayed in the internal help resources page/modal", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "InternalHelpResources": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "enabled": {"type": "boolean", "description": "If true and internal help resources content is not blank then the link for internal help resources will be shown in the help menu and the content displayed within Looker", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "LDAPConfig": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "alternate_email_login_allowed": {"type": "boolean", "description": "Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.", "x-looker-nullable": false}, "auth_password": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only)  Password for the LDAP account used to access the LDAP server", "x-looker-nullable": true}, "auth_requires_role": {"type": "boolean", "description": "Users will not be allowed to login at all unless a role for them is found in LDAP if set to true", "x-looker-nullable": false}, "auth_username": {"type": "string", "description": "Distinguished name of LDAP account used to access the LDAP server", "x-looker-nullable": true}, "connection_host": {"type": "string", "description": "LDAP server hostname", "x-looker-nullable": true}, "connection_port": {"type": "string", "description": "LDAP host port", "x-looker-nullable": true}, "connection_tls": {"type": "boolean", "description": "Use Transport Layer Security", "x-looker-nullable": false}, "connection_tls_no_verify": {"type": "boolean", "description": "Do not verify peer when using TLS", "x-looker-nullable": false}, "default_new_user_group_ids": {"type": "array", "items": {"type": "string"}, "x-looker-write-only": true, "description": "(Write-Only)  Array of ids of groups that will be applied to new users the first time they login via LDAP", "x-looker-nullable": true}, "default_new_user_groups": {"type": "array", "items": {"$ref": "#/definitions/Group"}, "readOnly": true, "description": "(Read-only) Groups that will be applied to new users the first time they login via LDAP", "x-looker-nullable": true}, "default_new_user_role_ids": {"type": "array", "items": {"type": "string"}, "x-looker-write-only": true, "description": "(Write-Only)  Array of ids of roles that will be applied to new users the first time they login via LDAP", "x-looker-nullable": true}, "default_new_user_roles": {"type": "array", "items": {"$ref": "#/definitions/Role"}, "readOnly": true, "description": "(Read-only) Roles that will be applied to new users the first time they login via LDAP", "x-looker-nullable": true}, "enabled": {"type": "boolean", "description": "Enable/Disable LDAP authentication for the server", "x-looker-nullable": false}, "force_no_page": {"type": "boolean", "description": "Don't attempt to do LDAP search result paging (RFC 2696) even if the LDAP server claims to support it.", "x-looker-nullable": false}, "groups": {"type": "array", "items": {"$ref": "#/definitions/LDAPGroupRead"}, "readOnly": true, "description": "(Read-only) Array of mappings between LDAP Groups and Looker Roles", "x-looker-nullable": true}, "groups_base_dn": {"type": "string", "description": "Base dn for finding groups in LDAP searches", "x-looker-nullable": true}, "groups_finder_type": {"type": "string", "description": "Identifier for a strategy for how Looker will search for groups in the LDAP server", "x-looker-nullable": true}, "groups_member_attribute": {"type": "string", "description": "LDAP Group attribute that signifies the members of the groups. Most commonly 'member'", "x-looker-nullable": true}, "groups_objectclasses": {"type": "string", "description": "Optional comma-separated list of supported LDAP objectclass for groups when doing groups searches", "x-looker-nullable": true}, "groups_user_attribute": {"type": "string", "description": "LDAP Group attribute that signifies the user in a group. Most commonly 'dn'", "x-looker-nullable": true}, "groups_with_role_ids": {"type": "array", "items": {"$ref": "#/definitions/LDAPGroupWrite"}, "description": "(Read/Write) Array of mappings between LDAP Groups and arrays of Looker Role ids", "x-looker-nullable": true}, "has_auth_password": {"type": "boolean", "readOnly": true, "description": "(Read-only) Has the password been set for the LDAP account used to access the LDAP server", "x-looker-nullable": false}, "merge_new_users_by_email": {"type": "boolean", "description": "Merge first-time ldap login to existing user account by email addresses. When a user logs in for the first time via ldap this option will connect this user into their existing account by finding the account with a matching email address. Otherwise a new user account will be created for the user.", "x-looker-nullable": false}, "modified_at": {"type": "string", "readOnly": true, "description": "When this config was last modified", "x-looker-nullable": true}, "modified_by": {"type": "string", "readOnly": true, "description": "User id of user who last modified this config", "x-looker-nullable": true}, "set_roles_from_groups": {"type": "boolean", "description": "Set user roles in Looker based on groups from LDAP", "x-looker-nullable": false}, "test_ldap_password": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only)  Test LDAP user password. For ldap tests only.", "x-looker-nullable": true}, "test_ldap_user": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only)  Test LDAP user login id. For ldap tests only.", "x-looker-nullable": true}, "user_attribute_map_email": {"type": "string", "description": "Name of user record attributes used to indicate email address field", "x-looker-nullable": true}, "user_attribute_map_first_name": {"type": "string", "description": "Name of user record attributes used to indicate first name", "x-looker-nullable": true}, "user_attribute_map_last_name": {"type": "string", "description": "Name of user record attributes used to indicate last name", "x-looker-nullable": true}, "user_attribute_map_ldap_id": {"type": "string", "description": "Name of user record attributes used to indicate unique record id", "x-looker-nullable": true}, "user_attributes": {"type": "array", "items": {"$ref": "#/definitions/LDAPUserAttributeRead"}, "readOnly": true, "description": "(Read-only) Array of mappings between LDAP User Attributes and Looker User Attributes", "x-looker-nullable": true}, "user_attributes_with_ids": {"type": "array", "items": {"$ref": "#/definitions/LDAPUserAttributeWrite"}, "description": "(Read/Write) Array of mappings between LDAP User Attributes and arrays of Looker User Attribute ids", "x-looker-nullable": true}, "user_bind_base_dn": {"type": "string", "description": "Distinguished name of LDAP node used as the base for user searches", "x-looker-nullable": true}, "user_custom_filter": {"type": "string", "description": "(Optional) Custom RFC-2254 filter clause for use in finding user during login. Combined via 'and' with the other generated filter clauses.", "x-looker-nullable": true}, "user_id_attribute_names": {"type": "string", "description": "Name(s) of user record attributes used for matching user login id (comma separated list)", "x-looker-nullable": true}, "user_objectclass": {"type": "string", "description": "(Optional) Name of user record objectclass used for finding user during login id", "x-looker-nullable": true}, "allow_normal_group_membership": {"type": "boolean", "description": "Allow LDAP auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.", "x-looker-nullable": false}, "allow_roles_from_normal_groups": {"type": "boolean", "description": "LDAP auth'd users will be able to inherit roles from non-reflected Looker groups.", "x-looker-nullable": false}, "allow_direct_roles": {"type": "boolean", "description": "Allows roles to be directly assigned to LDAP auth'd users.", "x-looker-nullable": false}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LDAPConfigTestResult": {"properties": {"details": {"type": "string", "readOnly": true, "description": "Additional details for error cases", "x-looker-nullable": true}, "issues": {"type": "array", "items": {"$ref": "#/definitions/LDAPConfigTestIssue"}, "readOnly": true, "description": "Array of issues/considerations about the result", "x-looker-nullable": true}, "message": {"type": "string", "readOnly": true, "description": "Short human readable test about the result", "x-looker-nullable": true}, "status": {"type": "string", "readOnly": true, "description": "Test status code: always 'success' or 'error'", "x-looker-nullable": true}, "trace": {"type": "string", "readOnly": true, "description": "A more detailed trace of incremental results during auth tests", "x-looker-nullable": true}, "user": {"$ref": "#/definitions/LDAPUser", "readOnly": true, "description": "User details from LDAP server for auth tests", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to ldap config", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LDAPConfigTestIssue": {"properties": {"severity": {"type": "string", "readOnly": true, "description": "Severity of the issue. Error or Warning", "x-looker-nullable": true}, "message": {"type": "string", "readOnly": true, "description": "Message describing the issue", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LDAPGroupRead": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "looker_group_id": {"type": "string", "readOnly": true, "description": "Unique Id of group in Looker", "x-looker-nullable": true}, "looker_group_name": {"type": "string", "readOnly": true, "description": "Name of group in Looker", "x-looker-nullable": true}, "name": {"type": "string", "readOnly": true, "description": "Name of group in LDAP", "x-looker-nullable": true}, "roles": {"type": "array", "items": {"$ref": "#/definitions/Role"}, "readOnly": true, "description": "Looker Roles", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to ldap config", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LDAPGroupWrite": {"properties": {"id": {"type": "string", "description": "Unique Id", "x-looker-nullable": true}, "looker_group_id": {"type": "string", "readOnly": true, "description": "Unique Id of group in Looker", "x-looker-nullable": true}, "looker_group_name": {"type": "string", "description": "Name of group in Looker", "x-looker-nullable": true}, "name": {"type": "string", "description": "Name of group in LDAP", "x-looker-nullable": true}, "role_ids": {"type": "array", "items": {"type": "string"}, "description": "Looker Role Ids", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to ldap config", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LDAPUserAttributeRead": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Name of User Attribute in LDAP", "x-looker-nullable": true}, "required": {"type": "boolean", "readOnly": true, "description": "Required to be in LDAP assertion for login to be allowed to succeed", "x-looker-nullable": false}, "user_attributes": {"type": "array", "items": {"$ref": "#/definitions/UserAttribute"}, "readOnly": true, "description": "Looker User Attributes", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to ldap config", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LDAPUserAttributeWrite": {"properties": {"name": {"type": "string", "description": "Name of User Attribute in LDAP", "x-looker-nullable": true}, "required": {"type": "boolean", "description": "Required to be in LDAP assertion for login to be allowed to succeed", "x-looker-nullable": false}, "user_attribute_ids": {"type": "array", "items": {"type": "string"}, "description": "Looker User Attribute Ids", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to ldap config", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LDAPUser": {"properties": {"all_emails": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "Array of user's email addresses and aliases for use in migration", "x-looker-nullable": true}, "attributes": {"type": "object", "additionalProperties": {"type": "string"}, "readOnly": true, "description": "Dictionary of user's attributes (name/value)", "x-looker-nullable": true}, "email": {"type": "string", "readOnly": true, "description": "Primary email address", "x-looker-nullable": true}, "first_name": {"type": "string", "readOnly": true, "description": "First name", "x-looker-nullable": true}, "groups": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "Array of user's groups (group names only)", "x-looker-nullable": true}, "last_name": {"type": "string", "readOnly": true, "description": "Last Name", "x-looker-nullable": true}, "ldap_dn": {"type": "string", "readOnly": true, "description": "LDAP's distinguished name for the user record", "x-looker-nullable": true}, "ldap_id": {"type": "string", "readOnly": true, "description": "LDAP's Unique ID for the user", "x-looker-nullable": true}, "roles": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "Array of user's roles (role names only)", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to ldap config", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LegacyFeature": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "name": {"type": "string", "readOnly": true, "description": "Name", "x-looker-nullable": true}, "description": {"type": "string", "readOnly": true, "description": "Description", "x-looker-nullable": true}, "enabled_locally": {"type": "boolean", "description": "Whether this feature has been enabled by a user", "x-looker-nullable": false}, "enabled": {"type": "boolean", "readOnly": true, "description": "Whether this feature is currently enabled", "x-looker-nullable": false}, "disallowed_as_of_version": {"type": "string", "readOnly": true, "description": "Looker version where this feature became a legacy feature", "x-looker-nullable": true}, "disable_on_upgrade_to_version": {"type": "string", "readOnly": true, "description": "Looker version where this feature will be automatically disabled", "x-looker-nullable": true}, "end_of_life_version": {"type": "string", "readOnly": true, "description": "Future Looker version where this feature will be removed", "x-looker-nullable": true}, "documentation_url": {"type": "string", "readOnly": true, "description": "URL for documentation about this feature", "x-looker-nullable": true}, "approximate_disable_date": {"type": "string", "format": "date-time", "readOnly": true, "description": "Approximate date that this feature will be automatically disabled.", "x-looker-nullable": true}, "approximate_end_of_life_date": {"type": "string", "format": "date-time", "readOnly": true, "description": "Approximate date that this feature will be removed.", "x-looker-nullable": true}, "has_disabled_on_upgrade": {"type": "boolean", "readOnly": true, "description": "Whether this legacy feature may have been automatically disabled when upgrading to the current version.", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "Locale": {"properties": {"code": {"type": "string", "readOnly": true, "description": "Code for Locale", "x-looker-nullable": true}, "native_name": {"type": "string", "readOnly": true, "description": "Name of Locale in its own language", "x-looker-nullable": true}, "english_name": {"type": "string", "readOnly": true, "description": "Name of Locale in English", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LocalizationSettings": {"properties": {"default_locale": {"type": "string", "readOnly": true, "description": "Default locale for localization", "x-looker-nullable": true}, "localization_level": {"type": "string", "readOnly": true, "description": "Localization level - strict or permissive", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookBasic": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "content_metadata_id": {"type": "string", "readOnly": true, "description": "Id of content metadata", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "title": {"type": "string", "readOnly": true, "description": "Look Title", "x-looker-nullable": true}, "user_id": {"type": "string", "description": "User Id", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "Look": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "content_metadata_id": {"type": "string", "readOnly": true, "description": "Id of content metadata", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "title": {"type": "string", "description": "Look Title", "x-looker-nullable": true}, "user_id": {"type": "string", "description": "User Id", "x-looker-nullable": true}, "content_favorite_id": {"type": "string", "readOnly": true, "description": "Content Favorite Id", "x-looker-nullable": true}, "created_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time that the Look was created.", "x-looker-nullable": true}, "deleted": {"type": "boolean", "description": "Whether or not a look is 'soft' deleted.", "x-looker-nullable": false}, "deleted_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time that the Look was deleted.", "x-looker-nullable": true}, "deleter_id": {"type": "string", "readOnly": true, "description": "Id of User that deleted the look.", "x-looker-nullable": true}, "description": {"type": "string", "description": "Description", "x-looker-nullable": true}, "embed_url": {"type": "string", "readOnly": true, "description": "Embed Url", "x-looker-nullable": true}, "excel_file_url": {"type": "string", "readOnly": true, "description": "Excel File Url", "x-looker-nullable": true}, "favorite_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times favorited", "x-looker-nullable": true}, "google_spreadsheet_formula": {"type": "string", "readOnly": true, "description": "Google Spreadsheet Formula", "x-looker-nullable": true}, "image_embed_url": {"type": "string", "readOnly": true, "description": "Image Embed Url", "x-looker-nullable": true}, "is_run_on_load": {"type": "boolean", "description": "auto-run query when Look viewed", "x-looker-nullable": false}, "last_accessed_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time that the Look was last accessed by any user", "x-looker-nullable": true}, "last_updater_id": {"type": "string", "readOnly": true, "description": "Id of User that last updated the look.", "x-looker-nullable": true}, "last_viewed_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time last viewed in the Looker web UI", "x-looker-nullable": true}, "model": {"$ref": "#/definitions/LookModel", "readOnly": true, "description": "Model", "x-looker-nullable": true}, "public": {"type": "boolean", "description": "Is Public", "x-looker-nullable": false}, "public_slug": {"type": "string", "readOnly": true, "description": "Public Slug", "x-looker-nullable": true}, "public_url": {"type": "string", "readOnly": true, "description": "Public Url", "x-looker-nullable": true}, "query_id": {"type": "string", "description": "Query Id", "x-looker-nullable": true}, "short_url": {"type": "string", "readOnly": true, "description": "Short Url", "x-looker-nullable": true}, "folder": {"$ref": "#/definitions/FolderBase", "readOnly": true, "description": "Folder of this Look", "x-looker-nullable": true}, "folder_id": {"type": "string", "description": "Folder Id", "x-looker-nullable": true}, "updated_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time that the Look was updated.", "x-looker-nullable": true}, "view_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times viewed in the Looker web UI", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookWithQuery": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "content_metadata_id": {"type": "string", "readOnly": true, "description": "Id of content metadata", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "title": {"type": "string", "description": "Look Title", "x-looker-nullable": true}, "user_id": {"type": "string", "description": "User Id", "x-looker-nullable": true}, "content_favorite_id": {"type": "string", "readOnly": true, "description": "Content Favorite Id", "x-looker-nullable": true}, "created_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time that the Look was created.", "x-looker-nullable": true}, "deleted": {"type": "boolean", "description": "Whether or not a look is 'soft' deleted.", "x-looker-nullable": false}, "deleted_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time that the Look was deleted.", "x-looker-nullable": true}, "deleter_id": {"type": "string", "readOnly": true, "description": "Id of User that deleted the look.", "x-looker-nullable": true}, "description": {"type": "string", "description": "Description", "x-looker-nullable": true}, "embed_url": {"type": "string", "readOnly": true, "description": "Embed Url", "x-looker-nullable": true}, "excel_file_url": {"type": "string", "readOnly": true, "description": "Excel File Url", "x-looker-nullable": true}, "favorite_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times favorited", "x-looker-nullable": true}, "google_spreadsheet_formula": {"type": "string", "readOnly": true, "description": "Google Spreadsheet Formula", "x-looker-nullable": true}, "image_embed_url": {"type": "string", "readOnly": true, "description": "Image Embed Url", "x-looker-nullable": true}, "is_run_on_load": {"type": "boolean", "description": "auto-run query when Look viewed", "x-looker-nullable": false}, "last_accessed_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time that the Look was last accessed by any user", "x-looker-nullable": true}, "last_updater_id": {"type": "string", "readOnly": true, "description": "Id of User that last updated the look.", "x-looker-nullable": true}, "last_viewed_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time last viewed in the Looker web UI", "x-looker-nullable": true}, "model": {"$ref": "#/definitions/LookModel", "readOnly": true, "description": "Model", "x-looker-nullable": true}, "public": {"type": "boolean", "description": "Is Public", "x-looker-nullable": false}, "public_slug": {"type": "string", "readOnly": true, "description": "Public Slug", "x-looker-nullable": true}, "public_url": {"type": "string", "readOnly": true, "description": "Public Url", "x-looker-nullable": true}, "query_id": {"type": "string", "description": "Query Id", "x-looker-nullable": true}, "short_url": {"type": "string", "readOnly": true, "description": "Short Url", "x-looker-nullable": true}, "folder": {"$ref": "#/definitions/FolderBase", "readOnly": true, "description": "Folder of this Look", "x-looker-nullable": true}, "folder_id": {"type": "string", "description": "Folder Id", "x-looker-nullable": true}, "updated_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time that the Look was updated.", "x-looker-nullable": true}, "view_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times viewed in the Looker web UI", "x-looker-nullable": true}, "query": {"$ref": "#/definitions/Query", "readOnly": true, "description": "Query", "x-looker-nullable": true}, "url": {"type": "string", "readOnly": true, "description": "Url", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookWithDashboards": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "content_metadata_id": {"type": "string", "readOnly": true, "description": "Id of content metadata", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "title": {"type": "string", "description": "Look Title", "x-looker-nullable": true}, "user_id": {"type": "string", "description": "User Id", "x-looker-nullable": true}, "content_favorite_id": {"type": "string", "readOnly": true, "description": "Content Favorite Id", "x-looker-nullable": true}, "created_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time that the Look was created.", "x-looker-nullable": true}, "deleted": {"type": "boolean", "description": "Whether or not a look is 'soft' deleted.", "x-looker-nullable": false}, "deleted_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time that the Look was deleted.", "x-looker-nullable": true}, "deleter_id": {"type": "string", "readOnly": true, "description": "Id of User that deleted the look.", "x-looker-nullable": true}, "description": {"type": "string", "description": "Description", "x-looker-nullable": true}, "embed_url": {"type": "string", "readOnly": true, "description": "Embed Url", "x-looker-nullable": true}, "excel_file_url": {"type": "string", "readOnly": true, "description": "Excel File Url", "x-looker-nullable": true}, "favorite_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times favorited", "x-looker-nullable": true}, "google_spreadsheet_formula": {"type": "string", "readOnly": true, "description": "Google Spreadsheet Formula", "x-looker-nullable": true}, "image_embed_url": {"type": "string", "readOnly": true, "description": "Image Embed Url", "x-looker-nullable": true}, "is_run_on_load": {"type": "boolean", "description": "auto-run query when Look viewed", "x-looker-nullable": false}, "last_accessed_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time that the Look was last accessed by any user", "x-looker-nullable": true}, "last_updater_id": {"type": "string", "readOnly": true, "description": "Id of User that last updated the look.", "x-looker-nullable": true}, "last_viewed_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time last viewed in the Looker web UI", "x-looker-nullable": true}, "model": {"$ref": "#/definitions/LookModel", "readOnly": true, "description": "Model", "x-looker-nullable": true}, "public": {"type": "boolean", "description": "Is Public", "x-looker-nullable": false}, "public_slug": {"type": "string", "readOnly": true, "description": "Public Slug", "x-looker-nullable": true}, "public_url": {"type": "string", "readOnly": true, "description": "Public Url", "x-looker-nullable": true}, "query_id": {"type": "string", "description": "Query Id", "x-looker-nullable": true}, "short_url": {"type": "string", "readOnly": true, "description": "Short Url", "x-looker-nullable": true}, "folder": {"$ref": "#/definitions/FolderBase", "readOnly": true, "description": "Folder of this Look", "x-looker-nullable": true}, "folder_id": {"type": "string", "description": "Folder Id", "x-looker-nullable": true}, "updated_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time that the Look was updated.", "x-looker-nullable": true}, "view_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times viewed in the Looker web UI", "x-looker-nullable": true}, "dashboards": {"type": "array", "items": {"$ref": "#/definitions/DashboardBase"}, "readOnly": true, "description": "Dashboards", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookModel": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Model Id", "x-looker-nullable": false}, "label": {"type": "string", "readOnly": true, "description": "Model Label", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookmlModelNavExplore": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Name of the explore", "x-looker-nullable": true}, "description": {"type": "string", "readOnly": true, "description": "Description for the explore", "x-looker-nullable": true}, "label": {"type": "string", "readOnly": true, "description": "Label for the explore", "x-looker-nullable": true}, "hidden": {"type": "boolean", "readOnly": true, "description": "Is this explore marked as hidden", "x-looker-nullable": false}, "group_label": {"type": "string", "readOnly": true, "description": "Label used to group explores in the navigation menus", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookmlModelExplore": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Fully qualified explore name (model name plus explore name)", "x-looker-nullable": false}, "name": {"type": "string", "readOnly": true, "description": "Explore name", "x-looker-nullable": true}, "description": {"type": "string", "readOnly": true, "description": "Description", "x-looker-nullable": true}, "label": {"type": "string", "readOnly": true, "description": "Label", "x-looker-nullable": true}, "title": {"type": "string", "readOnly": true, "description": "Explore title", "x-looker-undocumented": false, "x-looker-nullable": true}, "scopes": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "Scopes", "x-looker-nullable": true}, "can_total": {"type": "boolean", "readOnly": true, "description": "Can Total", "x-looker-nullable": false}, "can_develop": {"type": "boolean", "readOnly": true, "description": "Can Develop LookML", "x-looker-undocumented": false, "x-looker-nullable": false}, "can_see_lookml": {"type": "boolean", "readOnly": true, "description": "Can See LookML", "x-looker-undocumented": false, "x-looker-nullable": false}, "lookml_link": {"type": "string", "readOnly": true, "description": "A URL linking to the definition of this explore in the LookML IDE.", "x-looker-undocumented": false, "x-looker-nullable": true}, "can_save": {"type": "boolean", "readOnly": true, "description": "Can Save", "x-looker-nullable": false}, "can_explain": {"type": "boolean", "readOnly": true, "description": "Can Explain", "x-looker-nullable": false}, "can_pivot_in_db": {"type": "boolean", "readOnly": true, "description": "Can pivot in the DB", "x-looker-nullable": false}, "can_subtotal": {"type": "boolean", "readOnly": true, "description": "Can use subtotals", "x-looker-nullable": false}, "has_timezone_support": {"type": "boolean", "readOnly": true, "description": "Has timezone support", "x-looker-nullable": false}, "supports_cost_estimate": {"type": "boolean", "readOnly": true, "description": "Cost estimates supported", "x-looker-nullable": false}, "connection_name": {"type": "string", "readOnly": true, "description": "Connection name", "x-looker-nullable": true}, "null_sort_treatment": {"type": "string", "readOnly": true, "description": "How nulls are sorted, possible values are \"low\", \"high\", \"first\" and \"last\"", "x-looker-nullable": true}, "files": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "List of model source files", "x-looker-nullable": true}, "source_file": {"type": "string", "readOnly": true, "description": "Primary source_file file", "x-looker-nullable": true}, "project_name": {"type": "string", "readOnly": true, "description": "Name of project", "x-looker-nullable": true}, "model_name": {"type": "string", "readOnly": true, "description": "Name of model", "x-looker-nullable": true}, "view_name": {"type": "string", "readOnly": true, "description": "Name of view", "x-looker-nullable": true}, "hidden": {"type": "boolean", "readOnly": true, "description": "Is hidden", "x-looker-nullable": false}, "sql_table_name": {"type": "string", "readOnly": true, "description": "A sql_table_name expression that defines what sql table the view/explore maps onto. Example: \"prod_orders2 AS orders\" in a view named orders.", "x-looker-nullable": true}, "access_filter_fields": {"type": "array", "items": {"type": "string"}, "readOnly": true, "x-looker-deprecated": true, "description": "(DEPRECATED) Array of access filter field names", "x-looker-nullable": true}, "access_filters": {"type": "array", "items": {"$ref": "#/definitions/LookmlModelExploreAccessFilter"}, "readOnly": true, "description": "Access filters", "x-looker-nullable": true}, "aliases": {"type": "array", "items": {"$ref": "#/definitions/LookmlModelExploreAlias"}, "readOnly": true, "description": "Aliases", "x-looker-nullable": true}, "always_filter": {"type": "array", "items": {"$ref": "#/definitions/LookmlModelExploreAlwaysFilter"}, "readOnly": true, "description": "Always filter", "x-looker-nullable": true}, "conditionally_filter": {"type": "array", "items": {"$ref": "#/definitions/LookmlModelExploreConditionallyFilter"}, "readOnly": true, "description": "Conditionally filter", "x-looker-nullable": true}, "index_fields": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "Array of index fields", "x-looker-nullable": true}, "sets": {"type": "array", "items": {"$ref": "#/definitions/LookmlModelExploreSet"}, "readOnly": true, "description": "Sets", "x-looker-nullable": true}, "tags": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "An array of arbitrary string tags provided in the model for this explore.", "x-looker-nullable": true}, "errors": {"type": "array", "items": {"$ref": "#/definitions/LookmlModelExploreError"}, "readOnly": true, "description": "Errors", "x-looker-nullable": true}, "fields": {"$ref": "#/definitions/LookmlModelExploreFieldset", "readOnly": true, "description": "Fields", "x-looker-nullable": true}, "joins": {"type": "array", "items": {"$ref": "#/definitions/LookmlModelExploreJoins"}, "readOnly": true, "description": "Views joined into this explore", "x-looker-nullable": true}, "group_label": {"type": "string", "readOnly": true, "description": "Label used to group explores in the navigation menus", "x-looker-nullable": true}, "supported_measure_types": {"type": "array", "items": {"$ref": "#/definitions/LookmlModelExploreSupportedMeasureType"}, "readOnly": true, "description": "An array of items describing which custom measure types are supported for creating a custom measure 'based_on' each possible dimension type.", "x-looker-nullable": false}, "always_join": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "An array of joins that will always be included in the SQL for this explore, even if the user has not selected a field from the joined view.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookmlModelExploreSupportedMeasureType": {"properties": {"dimension_type": {"type": "string", "readOnly": true, "x-looker-nullable": true}, "measure_types": {"type": "array", "items": {"type": "string"}, "readOnly": true, "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookmlModelExploreAccessFilter": {"properties": {"field": {"type": "string", "readOnly": true, "description": "Field to be filtered", "x-looker-nullable": true}, "user_attribute": {"type": "string", "readOnly": true, "description": "User attribute name", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookmlModelExploreConditionallyFilter": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Name", "x-looker-nullable": true}, "value": {"type": "string", "readOnly": true, "description": "Value", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookmlModelExploreAlwaysFilter": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Name", "x-looker-nullable": true}, "value": {"type": "string", "readOnly": true, "description": "Value", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookmlModelExploreAlias": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Name", "x-looker-nullable": true}, "value": {"type": "string", "readOnly": true, "description": "Value", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookmlModelExploreSet": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Name", "x-looker-nullable": true}, "value": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "Value set", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookmlModelExploreError": {"properties": {"message": {"type": "string", "readOnly": true, "description": "Error Message", "x-looker-nullable": true}, "details": {"type": "any", "format": "any", "readOnly": true, "description": "Details", "x-looker-nullable": true}, "error_pos": {"type": "string", "readOnly": true, "description": "Error source location", "x-looker-nullable": true}, "field_error": {"type": "boolean", "readOnly": true, "description": "Is this a field error", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "LookmlModelExploreFieldset": {"properties": {"dimensions": {"type": "array", "items": {"$ref": "#/definitions/LookmlModelExploreField"}, "readOnly": true, "description": "Array of dimensions", "x-looker-nullable": true}, "measures": {"type": "array", "items": {"$ref": "#/definitions/LookmlModelExploreField"}, "readOnly": true, "description": "Array of measures", "x-looker-nullable": true}, "filters": {"type": "array", "items": {"$ref": "#/definitions/LookmlModelExploreField"}, "readOnly": true, "description": "Array of filters", "x-looker-nullable": true}, "parameters": {"type": "array", "items": {"$ref": "#/definitions/LookmlModelExploreField"}, "readOnly": true, "description": "Array of parameters", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookmlModelExploreField": {"properties": {"align": {"type": "string", "readOnly": true, "x-looker-values": ["left", "right"], "description": "The appropriate horizontal text alignment the values of this field should be displayed in. Valid values are: \"left\", \"right\".", "x-looker-nullable": false}, "can_filter": {"type": "boolean", "readOnly": true, "description": "Whether it's possible to filter on this field.", "x-looker-nullable": false}, "category": {"type": "string", "readOnly": true, "x-looker-values": ["parameter", "filter", "measure", "dimension"], "description": "Field category Valid values are: \"parameter\", \"filter\", \"measure\", \"dimension\".", "x-looker-nullable": true}, "default_filter_value": {"type": "string", "readOnly": true, "description": "The default value that this field uses when filtering. Null if there is no default value.", "x-looker-nullable": true}, "description": {"type": "string", "readOnly": true, "description": "Description", "x-looker-nullable": true}, "dimension_group": {"type": "string", "readOnly": true, "description": "Dimension group if this field is part of a dimension group. If not, this will be null.", "x-looker-nullable": true}, "enumerations": {"type": "array", "items": {"$ref": "#/definitions/LookmlModelExploreFieldEnumeration"}, "readOnly": true, "description": "An array enumerating all the possible values that this field can contain. When null, there is no limit to the set of possible values this field can contain.", "x-looker-nullable": true}, "error": {"type": "string", "readOnly": true, "description": "An error message indicating a problem with the definition of this field. If there are no errors, this will be null.", "x-looker-nullable": true}, "field_group_label": {"type": "string", "readOnly": true, "description": "A label creating a grouping of fields. All fields with this label should be presented together when displayed in a UI.", "x-looker-nullable": true}, "field_group_variant": {"type": "string", "readOnly": true, "description": "When presented in a field group via field_group_label, a shorter name of the field to be displayed in that context.", "x-looker-nullable": true}, "fill_style": {"type": "string", "readOnly": true, "x-looker-values": ["enumeration", "range"], "description": "The style of dimension fill that is possible for this field. Null if no dimension fill is possible. Valid values are: \"enumeration\", \"range\".", "x-looker-nullable": true}, "fiscal_month_offset": {"type": "integer", "format": "int64", "readOnly": true, "description": "An offset (in months) from the calendar start month to the fiscal start month defined in the LookML model this field belongs to.", "x-looker-nullable": false}, "has_allowed_values": {"type": "boolean", "readOnly": true, "description": "Whether this field has a set of allowed_values specified in LookML.", "x-looker-nullable": false}, "hidden": {"type": "boolean", "readOnly": true, "description": "Whether this field should be hidden from the user interface.", "x-looker-nullable": false}, "is_filter": {"type": "boolean", "readOnly": true, "description": "Whether this field is a filter.", "x-looker-nullable": false}, "is_fiscal": {"type": "boolean", "readOnly": true, "description": "Whether this field represents a fiscal time value.", "x-looker-nullable": false}, "is_numeric": {"type": "boolean", "readOnly": true, "description": "Whether this field is of a type that represents a numeric value.", "x-looker-nullable": false}, "is_timeframe": {"type": "boolean", "readOnly": true, "description": "Whether this field is of a type that represents a time value.", "x-looker-nullable": false}, "can_time_filter": {"type": "boolean", "readOnly": true, "description": "Whether this field can be time filtered.", "x-looker-nullable": false}, "time_interval": {"$ref": "#/definitions/LookmlModelExploreFieldTimeInterval", "readOnly": true, "description": "Details on the time interval this field represents, if it is_timeframe.", "x-looker-nullable": true}, "label": {"type": "string", "readOnly": true, "description": "Fully-qualified human-readable label of the field.", "x-looker-nullable": false}, "label_from_parameter": {"type": "string", "readOnly": true, "description": "The name of the parameter that will provide a parameterized label for this field, if available in the current context.", "x-looker-nullable": true}, "label_short": {"type": "string", "readOnly": true, "description": "The human-readable label of the field, without the view label.", "x-looker-nullable": false}, "lookml_link": {"type": "string", "readOnly": true, "description": "A URL linking to the definition of this field in the LookML IDE.", "x-looker-nullable": true}, "map_layer": {"$ref": "#/definitions/LookmlModelExploreFieldMapLayer", "readOnly": true, "description": "If applicable, a map layer this field is associated with.", "x-looker-nullable": true}, "measure": {"type": "boolean", "readOnly": true, "description": "Whether this field is a measure.", "x-looker-nullable": false}, "name": {"type": "string", "readOnly": true, "description": "Fully-qualified name of the field.", "x-looker-nullable": false}, "strict_value_format": {"type": "boolean", "readOnly": true, "description": "If yes, the field will not be localized with the user attribute number_format. Defaults to no", "x-looker-nullable": false}, "parameter": {"type": "boolean", "readOnly": true, "description": "Whether this field is a parameter.", "x-looker-nullable": false}, "permanent": {"type": "boolean", "readOnly": true, "description": "Whether this field can be removed from a query.", "x-looker-nullable": true}, "primary_key": {"type": "boolean", "readOnly": true, "description": "Whether or not the field represents a primary key.", "x-looker-nullable": false}, "project_name": {"type": "string", "readOnly": true, "description": "The name of the project this field is defined in.", "x-looker-nullable": true}, "requires_refresh_on_sort": {"type": "boolean", "readOnly": true, "description": "When true, it's not possible to re-sort this field's values without re-running the SQL query, due to database logic that affects the sort.", "x-looker-nullable": false}, "scope": {"type": "string", "readOnly": true, "description": "The LookML scope this field belongs to. The scope is typically the field's view.", "x-looker-nullable": false}, "sortable": {"type": "boolean", "readOnly": true, "description": "Whether this field can be sorted.", "x-looker-nullable": false}, "source_file": {"type": "string", "readOnly": true, "description": "The path portion of source_file_path.", "x-looker-nullable": false}, "source_file_path": {"type": "string", "readOnly": true, "description": "The fully-qualified path of the project file this field is defined in.", "x-looker-nullable": false}, "sql": {"type": "string", "readOnly": true, "description": "SQL expression as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model.", "x-looker-nullable": true}, "sql_case": {"type": "array", "items": {"$ref": "#/definitions/LookmlModelExploreFieldSqlCase"}, "readOnly": true, "description": "An array of conditions and values that make up a SQL Case expression, as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model.", "x-looker-nullable": true}, "filters": {"type": "array", "items": {"$ref": "#/definitions/LookmlModelExploreFieldMeasureFilters"}, "readOnly": true, "description": "Array of filter conditions defined for the measure in LookML.", "x-looker-nullable": true}, "suggest_dimension": {"type": "string", "readOnly": true, "description": "The name of the dimension to base suggest queries from.", "x-looker-nullable": false}, "suggest_explore": {"type": "string", "readOnly": true, "description": "The name of the explore to base suggest queries from.", "x-looker-nullable": false}, "suggestable": {"type": "boolean", "readOnly": true, "description": "Whether or not suggestions are possible for this field.", "x-looker-nullable": false}, "suggestions": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "If available, a list of suggestions for this field. For most fields, a suggest query is a more appropriate way to get an up-to-date list of suggestions. Or use enumerations to list all the possible values.", "x-looker-nullable": true}, "tags": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "An array of arbitrary string tags provided in the model for this field.", "x-looker-nullable": false}, "type": {"type": "string", "readOnly": true, "description": "The LookML type of the field.", "x-looker-nullable": false}, "user_attribute_filter_types": {"type": "array", "items": {"type": "string"}, "readOnly": true, "x-looker-values": ["advanced_filter_string", "advanced_filter_number", "advanced_filter_datetime", "string", "number", "datetime", "relative_url", "yesno", "zipcode"], "description": "An array of user attribute types that are allowed to be used in filters on this field. Valid values are: \"advanced_filter_string\", \"advanced_filter_number\", \"advanced_filter_datetime\", \"string\", \"number\", \"datetime\", \"relative_url\", \"yesno\", \"zipcode\".", "x-looker-nullable": false}, "value_format": {"type": "string", "readOnly": true, "description": "If specified, the LookML value format string for formatting values of this field.", "x-looker-nullable": true}, "view": {"type": "string", "readOnly": true, "description": "The name of the view this field belongs to.", "x-looker-nullable": false}, "view_label": {"type": "string", "readOnly": true, "description": "The human-readable label of the view the field belongs to.", "x-looker-nullable": false}, "dynamic": {"type": "boolean", "readOnly": true, "description": "Whether this field was specified in \"dynamic_fields\" and is not part of the model.", "x-looker-nullable": false}, "week_start_day": {"type": "string", "readOnly": true, "x-looker-values": ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"], "description": "The name of the starting day of the week. Valid values are: \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\".", "x-looker-nullable": false}, "times_used": {"type": "integer", "format": "int64", "readOnly": true, "description": "The number of times this field has been used in queries", "x-looker-nullable": false}, "original_view": {"type": "string", "readOnly": true, "description": "The name of the view this field is defined in. This will be different than \"view\" when the view has been joined via a different name using the \"from\" parameter.", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "LookmlModelExploreFieldEnumeration": {"properties": {"label": {"type": "string", "readOnly": true, "description": "Label", "x-looker-nullable": true}, "value": {"type": "any", "format": "any", "x-looker-polymorphic-types": [{"type": "string"}, {"type": "number", "format": "float"}], "readOnly": true, "description": "Value", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookmlModelExploreFieldTimeInterval": {"properties": {"name": {"type": "string", "readOnly": true, "x-looker-values": ["day", "hour", "minute", "second", "millisecond", "microsecond", "week", "month", "quarter", "year"], "description": "The type of time interval this field represents a grouping of. Valid values are: \"day\", \"hour\", \"minute\", \"second\", \"millisecond\", \"microsecond\", \"week\", \"month\", \"quarter\", \"year\".", "x-looker-nullable": false}, "count": {"type": "integer", "format": "int64", "readOnly": true, "description": "The number of intervals this field represents a grouping of.", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "LookmlModelExploreFieldSqlCase": {"properties": {"value": {"type": "string", "readOnly": true, "description": "SQL Case label value", "x-looker-nullable": true}, "condition": {"type": "string", "readOnly": true, "description": "SQL Case condition expression", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookmlModelExploreFieldMeasureFilters": {"properties": {"field": {"type": "string", "readOnly": true, "description": "Filter field name", "x-looker-nullable": true}, "condition": {"type": "string", "readOnly": true, "description": "Filter condition value", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookmlModelExploreFieldMapLayer": {"properties": {"url": {"type": "string", "readOnly": true, "description": "URL to the map layer resource.", "x-looker-nullable": false}, "name": {"type": "string", "readOnly": true, "description": "Name of the map layer, as defined in LookML.", "x-looker-nullable": false}, "feature_key": {"type": "string", "readOnly": true, "description": "Specifies the name of the TopoJSON object that the map layer references. If not specified, use the first object..", "x-looker-nullable": true}, "property_key": {"type": "string", "readOnly": true, "description": "Selects which property from the TopoJSON data to plot against. TopoJSON supports arbitrary metadata for each region. When null, the first matching property should be used.", "x-looker-nullable": true}, "property_label_key": {"type": "string", "readOnly": true, "description": "Which property from the TopoJSON data to use to label the region. When null, property_key should be used.", "x-looker-nullable": true}, "projection": {"type": "string", "readOnly": true, "description": "The preferred geographic projection of the map layer when displayed in a visualization that supports multiple geographic projections.", "x-looker-nullable": true}, "format": {"type": "string", "readOnly": true, "x-looker-values": ["topojson", "vector_tile_region"], "description": "Specifies the data format of the region information. Valid values are: \"topojson\", \"vector_tile_region\".", "x-looker-nullable": false}, "extents_json_url": {"type": "string", "readOnly": true, "description": "Specifies the URL to a JSON file that defines the geographic extents of each region available in the map layer. This data is used to automatically center the map on the available data for visualization purposes. The JSON file must be a JSON object where the keys are the mapping value of the feature (as specified by property_key) and the values are arrays of four numbers representing the west longitude, south latitude, east longitude, and north latitude extents of the region. The object must include a key for every possible value of property_key.", "x-looker-nullable": true}, "max_zoom_level": {"type": "integer", "format": "int64", "readOnly": true, "description": "The minimum zoom level that the map layer may be displayed at, for visualizations that support zooming.", "x-looker-nullable": true}, "min_zoom_level": {"type": "integer", "format": "int64", "readOnly": true, "description": "The maximum zoom level that the map layer may be displayed at, for visualizations that support zooming.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookmlModelExploreJoins": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Name of this join (and name of the view to join)", "x-looker-nullable": true}, "dependent_fields": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "Fields referenced by the join", "x-looker-nullable": true}, "fields": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "Fields of the joined view to pull into this explore", "x-looker-nullable": true}, "foreign_key": {"type": "string", "readOnly": true, "description": "Name of the dimension in this explore whose value is in the primary key of the joined view", "x-looker-nullable": true}, "from": {"type": "string", "readOnly": true, "description": "Name of view to join", "x-looker-nullable": true}, "outer_only": {"type": "boolean", "readOnly": true, "description": "Specifies whether all queries must use an outer join", "x-looker-nullable": true}, "relationship": {"type": "string", "readOnly": true, "description": "many_to_one, one_to_one, one_to_many, many_to_many", "x-looker-nullable": true}, "required_joins": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "Names of joins that must always be included in SQL queries", "x-looker-nullable": true}, "sql_foreign_key": {"type": "string", "readOnly": true, "description": "SQL expression that produces a foreign key", "x-looker-nullable": true}, "sql_on": {"type": "string", "readOnly": true, "description": "SQL ON expression describing the join condition", "x-looker-nullable": true}, "sql_table_name": {"type": "string", "readOnly": true, "description": "SQL table name to join", "x-looker-nullable": true}, "type": {"type": "string", "readOnly": true, "description": "The join type: left_outer, full_outer, inner, or cross", "x-looker-nullable": true}, "view_label": {"type": "string", "readOnly": true, "description": "Label to display in UI selectors", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookmlModel": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "allowed_db_connection_names": {"type": "array", "items": {"type": "string"}, "description": "Array of names of connections this model is allowed to use", "x-looker-nullable": true}, "explores": {"type": "array", "items": {"$ref": "#/definitions/LookmlModelNavExplore"}, "readOnly": true, "description": "Array of explores (if has_content)", "x-looker-nullable": true}, "has_content": {"type": "boolean", "readOnly": true, "description": "Does this model declaration have have lookml content?", "x-looker-nullable": false}, "label": {"type": "string", "readOnly": true, "description": "UI-friendly name for this model", "x-looker-nullable": true}, "name": {"type": "string", "description": "Name of the model. Also used as the unique identifier", "x-looker-nullable": true}, "project_name": {"type": "string", "description": "Name of project containing the model", "x-looker-nullable": true}, "unlimited_db_connections": {"type": "boolean", "description": "Is this model allowed to use all current and future connections", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "LookmlTest": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "model_name": {"type": "string", "readOnly": true, "description": "Name of model containing this test.", "x-looker-nullable": false}, "name": {"type": "string", "readOnly": true, "description": "Name of this test.", "x-looker-nullable": false}, "explore_name": {"type": "string", "readOnly": true, "description": "Name of the explore this test runs a query against", "x-looker-nullable": false}, "query_url_params": {"type": "string", "readOnly": true, "description": "The url parameters that can be used to reproduce this test's query on an explore.", "x-looker-nullable": false}, "file": {"type": "string", "readOnly": true, "description": "Name of the LookML file containing this test.", "x-looker-nullable": false}, "line": {"type": "integer", "format": "int64", "readOnly": true, "description": "Line number of this test in LookML.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "LookmlTestResult": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "model_name": {"type": "string", "readOnly": true, "description": "Name of model containing this test.", "x-looker-nullable": false}, "test_name": {"type": "string", "readOnly": true, "description": "Name of this test.", "x-looker-nullable": false}, "assertions_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of assertions in this test", "x-looker-nullable": false}, "assertions_failed": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of assertions passed in this test", "x-looker-nullable": false}, "errors": {"type": "array", "items": {"$ref": "#/definitions/ProjectError"}, "readOnly": true, "description": "A list of any errors encountered by the test.", "x-looker-nullable": true}, "warnings": {"type": "array", "items": {"$ref": "#/definitions/ProjectError"}, "readOnly": true, "description": "A list of any warnings encountered by the test.", "x-looker-nullable": true}, "success": {"type": "boolean", "readOnly": true, "description": "True if this test passsed without errors.", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "Manifest": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "name": {"type": "string", "readOnly": true, "description": "Manifest project name", "x-looker-nullable": true}, "imports": {"type": "array", "items": {"$ref": "#/definitions/ImportedProject"}, "readOnly": true, "description": "Imports for a project", "x-looker-nullable": true}, "localization_settings": {"$ref": "#/definitions/LocalizationSettings", "readOnly": true, "description": "Localization settings for a project", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "MaterializePDT": {"properties": {"materialization_id": {"type": "string", "readOnly": true, "description": "The ID of the enqueued materialization task", "x-looker-nullable": false}, "resp_text": {"type": "string", "readOnly": true, "description": "Detailed response in text format", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "MergeQuery": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "column_limit": {"type": "string", "description": "Column Limit", "x-looker-nullable": true}, "dynamic_fields": {"type": "string", "description": "Dynamic Fields", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "pivots": {"type": "array", "items": {"type": "string"}, "description": "Pivots", "x-looker-nullable": true}, "result_maker_id": {"type": "string", "readOnly": true, "description": "Unique to get results", "x-looker-nullable": true}, "sorts": {"type": "array", "items": {"type": "string"}, "description": "Sorts", "x-looker-nullable": true}, "source_queries": {"type": "array", "items": {"$ref": "#/definitions/MergeQuerySourceQuery"}, "description": "Source Queries defining the results to be merged.", "x-looker-nullable": true}, "total": {"type": "boolean", "description": "Total", "x-looker-nullable": false}, "vis_config": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Visualization Config", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "MergeQuerySourceQuery": {"properties": {"merge_fields": {"type": "array", "items": {"$ref": "#/definitions/MergeFields"}, "description": "An array defining which fields of the source query are mapped onto fields of the merge query", "x-looker-nullable": true}, "name": {"type": "string", "description": "Display name", "x-looker-nullable": true}, "query_id": {"type": "string", "description": "Id of the query to merge", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "MergeFields": {"properties": {"field_name": {"type": "string", "description": "Field name to map onto in the merged results", "x-looker-nullable": true}, "source_field_name": {"type": "string", "description": "Field name from the source query", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "MobileSettings": {"properties": {"mobile_force_authentication": {"type": "boolean", "readOnly": true, "description": "Specifies whether the force authentication option is enabled for mobile", "x-looker-nullable": false}, "mobile_app_integration": {"type": "boolean", "readOnly": true, "description": "Specifies whether mobile access for this instance is enabled.", "x-looker-nullable": false}, "mobile_feature_flags": {"type": "array", "items": {"$ref": "#/definitions/MobileFeatureFlags"}, "readOnly": true, "description": "Specifies feature flag and state relevant to mobile.", "x-looker-nullable": true}}, "x-looker-status": "beta"}, "MobileFeatureFlags": {"properties": {"feature_flag_name": {"type": "string", "readOnly": true, "description": "Specifies the name of feature flag.", "x-looker-nullable": true}, "feature_flag_state": {"type": "boolean", "readOnly": true, "description": "Specifies the state of feature flag", "x-looker-nullable": false}}, "x-looker-status": "beta"}, "MobileToken": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Unique ID.", "x-looker-nullable": false}, "device_token": {"type": "string", "description": "Specifies the device token", "x-looker-nullable": false}, "device_type": {"type": "string", "x-looker-values": ["android", "ios"], "description": "Specifies type of device. Valid values are: \"android\", \"ios\".", "x-looker-nullable": false}}, "x-looker-status": "beta", "required": ["device_token", "device_type"]}, "ModelSet": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "all_access": {"type": "boolean", "readOnly": true, "x-looker-nullable": false}, "built_in": {"type": "boolean", "readOnly": true, "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "models": {"type": "array", "items": {"type": "string"}, "x-looker-nullable": true}, "name": {"type": "string", "description": "Name of ModelSet", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "OauthClientApp": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "client_guid": {"type": "string", "readOnly": true, "description": "The globally unique id of this application", "x-looker-nullable": false}, "redirect_uri": {"type": "string", "description": "The uri with which this application will receive an auth code by browser redirect.", "x-looker-nullable": false}, "display_name": {"type": "string", "description": "The application's display name", "x-looker-nullable": false}, "description": {"type": "string", "description": "A description of the application that will be displayed to users", "x-looker-nullable": false}, "enabled": {"type": "boolean", "description": "When enabled is true, OAuth2 and API requests will be accepted from this app. When false, all requests from this app will be refused. Setting disabled invalidates existing tokens.", "x-looker-nullable": false}, "group_id": {"type": "string", "description": "If set, only Looker users who are members of this group can use this web app with Looker. If group_id is not set, any Looker user may use this app to access this Looker instance", "x-looker-nullable": true}, "tokens_invalid_before": {"type": "string", "format": "date-time", "readOnly": true, "description": "All auth codes, access tokens, and refresh tokens issued for this application prior to this date-time for ALL USERS will be invalid.", "x-looker-nullable": false}, "activated_users": {"type": "array", "items": {"$ref": "#/definitions/UserPublic"}, "readOnly": true, "description": "All users who have been activated to use this app", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "OIDCConfig": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "alternate_email_login_allowed": {"type": "boolean", "description": "Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.", "x-looker-nullable": false}, "audience": {"type": "string", "description": "OpenID Provider Audience", "x-looker-nullable": true}, "auth_requires_role": {"type": "boolean", "description": "Users will not be allowed to login at all unless a role for them is found in OIDC if set to true", "x-looker-nullable": false}, "authorization_endpoint": {"type": "string", "format": "uri-reference", "description": "OpenID Provider Authorization Url", "x-looker-nullable": true}, "default_new_user_group_ids": {"type": "array", "items": {"type": "string"}, "x-looker-write-only": true, "description": "(Write-Only) Array of ids of groups that will be applied to new users the first time they login via OIDC", "x-looker-nullable": true}, "default_new_user_groups": {"type": "array", "items": {"$ref": "#/definitions/Group"}, "readOnly": true, "description": "(Read-only) Groups that will be applied to new users the first time they login via OIDC", "x-looker-nullable": true}, "default_new_user_role_ids": {"type": "array", "items": {"type": "string"}, "x-looker-write-only": true, "description": "(Write-Only) Array of ids of roles that will be applied to new users the first time they login via OIDC", "x-looker-nullable": true}, "default_new_user_roles": {"type": "array", "items": {"$ref": "#/definitions/Role"}, "readOnly": true, "description": "(Read-only) Roles that will be applied to new users the first time they login via OIDC", "x-looker-nullable": true}, "enabled": {"type": "boolean", "description": "Enable/Disable OIDC authentication for the server", "x-looker-nullable": false}, "groups": {"type": "array", "items": {"$ref": "#/definitions/OIDCGroupRead"}, "readOnly": true, "description": "(Read-only) Array of mappings between OIDC Groups and Looker Roles", "x-looker-nullable": true}, "groups_attribute": {"type": "string", "description": "Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'", "x-looker-nullable": true}, "groups_with_role_ids": {"type": "array", "items": {"$ref": "#/definitions/OIDCGroupWrite"}, "description": "(Read/Write) Array of mappings between OIDC Groups and arrays of Looker Role ids", "x-looker-nullable": true}, "identifier": {"type": "string", "description": "Relying Party Identifier (provided by OpenID Provider)", "x-looker-nullable": true}, "issuer": {"type": "string", "description": "OpenID Provider Issuer", "x-looker-nullable": true}, "modified_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "When this config was last modified", "x-looker-nullable": true}, "modified_by": {"type": "string", "readOnly": true, "description": "User id of user who last modified this config", "x-looker-nullable": true}, "new_user_migration_types": {"type": "string", "description": "Merge first-time oidc login to existing user account by email addresses. When a user logs in for the first time via oidc this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'", "x-looker-nullable": true}, "scopes": {"type": "array", "items": {"type": "string"}, "description": "Array of scopes to request.", "x-looker-nullable": true}, "secret": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) Relying Party Secret (provided by OpenID Provider)", "x-looker-nullable": true}, "set_roles_from_groups": {"type": "boolean", "description": "Set user roles in Looker based on groups from OIDC", "x-looker-nullable": false}, "test_slug": {"type": "string", "readOnly": true, "description": "Slug to identify configurations that are created in order to run a OIDC config test", "x-looker-nullable": true}, "token_endpoint": {"type": "string", "description": "OpenID Provider Token Url", "x-looker-nullable": true}, "user_attribute_map_email": {"type": "string", "description": "Name of user record attributes used to indicate email address field", "x-looker-nullable": true}, "user_attribute_map_first_name": {"type": "string", "description": "Name of user record attributes used to indicate first name", "x-looker-nullable": true}, "user_attribute_map_last_name": {"type": "string", "description": "Name of user record attributes used to indicate last name", "x-looker-nullable": true}, "user_attributes": {"type": "array", "items": {"$ref": "#/definitions/OIDCUserAttributeRead"}, "readOnly": true, "description": "(Read-only) Array of mappings between OIDC User Attributes and Looker User Attributes", "x-looker-nullable": true}, "user_attributes_with_ids": {"type": "array", "items": {"$ref": "#/definitions/OIDCUserAttributeWrite"}, "description": "(Read/Write) Array of mappings between OIDC User Attributes and arrays of Looker User Attribute ids", "x-looker-nullable": true}, "userinfo_endpoint": {"type": "string", "format": "uri-reference", "description": "OpenID Provider User Information Url", "x-looker-nullable": true}, "allow_normal_group_membership": {"type": "boolean", "description": "Allow OIDC auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.", "x-looker-nullable": false}, "allow_roles_from_normal_groups": {"type": "boolean", "description": "OIDC auth'd users will inherit roles from non-reflected Looker groups.", "x-looker-nullable": false}, "allow_direct_roles": {"type": "boolean", "description": "Allows roles to be directly assigned to OIDC auth'd users.", "x-looker-nullable": false}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "OIDCGroupRead": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "looker_group_id": {"type": "string", "readOnly": true, "description": "Unique Id of group in Looker", "x-looker-nullable": true}, "looker_group_name": {"type": "string", "readOnly": true, "description": "Name of group in Looker", "x-looker-nullable": true}, "name": {"type": "string", "readOnly": true, "description": "Name of group in OIDC", "x-looker-nullable": true}, "roles": {"type": "array", "items": {"$ref": "#/definitions/Role"}, "readOnly": true, "description": "Looker Roles", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "OIDCGroupWrite": {"properties": {"id": {"type": "string", "description": "Unique Id", "x-looker-nullable": true}, "looker_group_id": {"type": "string", "readOnly": true, "description": "Unique Id of group in Looker", "x-looker-nullable": true}, "looker_group_name": {"type": "string", "description": "Name of group in Looker", "x-looker-nullable": true}, "name": {"type": "string", "description": "Name of group in OIDC", "x-looker-nullable": true}, "role_ids": {"type": "array", "items": {"type": "string"}, "description": "Looker Role Ids", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "OIDCUserAttributeRead": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Name of User Attribute in OIDC", "x-looker-nullable": true}, "required": {"type": "boolean", "readOnly": true, "description": "Required to be in OIDC assertion for login to be allowed to succeed", "x-looker-nullable": false}, "user_attributes": {"type": "array", "items": {"$ref": "#/definitions/UserAttribute"}, "readOnly": true, "description": "Looker User Attributes", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "OIDCUserAttributeWrite": {"properties": {"name": {"type": "string", "description": "Name of User Attribute in OIDC", "x-looker-nullable": true}, "required": {"type": "boolean", "description": "Required to be in OIDC assertion for login to be allowed to succeed", "x-looker-nullable": false}, "user_attribute_ids": {"type": "array", "items": {"type": "string"}, "description": "Looker User Attribute Ids", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "PasswordConfig": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "min_length": {"type": "integer", "format": "int64", "description": "Minimum number of characters required for a new password.  Must be between 7 and 100", "x-looker-nullable": true}, "require_numeric": {"type": "boolean", "description": "Require at least one numeric character", "x-looker-nullable": false}, "require_upperlower": {"type": "boolean", "description": "Require at least one uppercase and one lowercase letter", "x-looker-nullable": false}, "require_special": {"type": "boolean", "description": "Require at least one special character", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "Permission": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "permission": {"type": "string", "readOnly": true, "description": "Permission symbol", "x-looker-nullable": true}, "parent": {"type": "string", "readOnly": true, "description": "Dependency parent symbol", "x-looker-nullable": true}, "description": {"type": "string", "readOnly": true, "description": "Description", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "PermissionSet": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "all_access": {"type": "boolean", "readOnly": true, "x-looker-nullable": false}, "built_in": {"type": "boolean", "readOnly": true, "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "name": {"type": "string", "description": "Name of PermissionSet", "x-looker-nullable": true}, "permissions": {"type": "array", "items": {"type": "string"}, "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ProjectFile": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "An opaque token uniquely identifying a file within a project. Avoid parsing or decomposing the text of this token. This token is stable within a Looker release but may change between Looker releases", "x-looker-nullable": false}, "path": {"type": "string", "readOnly": true, "description": "Path, file name, and extension of the file relative to the project root directory", "x-looker-nullable": true}, "title": {"type": "string", "readOnly": true, "description": "Display name", "x-looker-nullable": true}, "type": {"type": "string", "readOnly": true, "description": "File type: model, view, etc", "x-looker-nullable": true}, "extension": {"type": "string", "readOnly": true, "description": "The extension of the file: .view.lkml, .model.lkml, etc", "x-looker-nullable": true}, "mime_type": {"type": "string", "readOnly": true, "description": "File mime type", "x-looker-nullable": true}, "editable": {"type": "boolean", "readOnly": true, "description": "State of editability for the file.", "x-looker-nullable": false}, "git_status": {"$ref": "#/definitions/GitStatus", "readOnly": true, "description": "Status of the file according to git", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "Project": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Project Id", "x-looker-nullable": false}, "name": {"type": "string", "description": "Project display name", "x-looker-nullable": false}, "uses_git": {"type": "boolean", "readOnly": true, "description": "If true the project is configured with a git repository", "x-looker-nullable": false}, "git_remote_url": {"type": "string", "description": "Git remote repository url", "x-looker-nullable": true}, "git_username": {"type": "string", "description": "Git username for HTTPS authentication. (For production only, if using user attributes.)", "x-looker-nullable": true}, "git_password": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) Git password for HTTPS authentication. (For production only, if using user attributes.)", "x-looker-nullable": true}, "git_production_branch_name": {"type": "string", "description": "Git production branch name. Defaults to master. Supported only in Looker 21.0 and higher.", "x-looker-nullable": false}, "use_git_cookie_auth": {"type": "boolean", "description": "If true, the project uses a git cookie for authentication.", "x-looker-nullable": false}, "git_username_user_attribute": {"type": "string", "description": "User attribute name for username in per-user HTTPS authentication.", "x-looker-nullable": true}, "git_password_user_attribute": {"type": "string", "description": "User attribute name for password in per-user HTTPS authentication.", "x-looker-nullable": true}, "git_service_name": {"type": "string", "description": "Name of the git service provider", "x-looker-nullable": true}, "git_application_server_http_port": {"type": "integer", "format": "int64", "description": "Port that HTTP(S) application server is running on (for PRs, file browsing, etc.)", "x-looker-nullable": true}, "git_application_server_http_scheme": {"type": "string", "description": "Scheme that is running on application server (for PRs, file browsing, etc.)", "x-looker-nullable": true}, "deploy_secret": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) Optional secret token with which to authenticate requests to the webhook deploy endpoint. If not set, endpoint is unauthenticated.", "x-looker-nullable": true}, "unset_deploy_secret": {"type": "boolean", "x-looker-write-only": true, "description": "(Write-Only) When true, unsets the deploy secret to allow unauthenticated access to the webhook deploy endpoint.", "x-looker-nullable": false}, "pull_request_mode": {"type": "string", "x-looker-values": ["off", "links", "recommended", "required"], "description": "The git pull request policy for this project. Valid values are: \"off\", \"links\", \"recommended\", \"required\".", "x-looker-nullable": false}, "validation_required": {"type": "boolean", "description": "Validation policy: If true, the project must pass validation checks before project changes can be committed to the git repository", "x-looker-nullable": false}, "git_release_mgmt_enabled": {"type": "boolean", "description": "If true, advanced git release management is enabled for this project", "x-looker-nullable": false}, "allow_warnings": {"type": "boolean", "description": "Validation policy: If true, the project can be committed with warnings when `validation_required` is true. (`allow_warnings` does nothing if `validation_required` is false).", "x-looker-nullable": false}, "is_example": {"type": "boolean", "readOnly": true, "description": "If true the project is an example project and cannot be modified", "x-looker-nullable": false}, "dependency_status": {"type": "string", "description": "Status of dependencies in your manifest & lockfile", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ProjectError": {"properties": {"code": {"type": "string", "readOnly": true, "description": "A stable token that uniquely identifies this class of error, ignoring parameter values. Error message text may vary due to parameters or localization, but error codes do not. For example, a \"File not found\" error will have the same error code regardless of the filename in question or the user's display language", "x-looker-nullable": true}, "severity": {"type": "string", "readOnly": true, "description": "Severity: fatal, error, warning, info, success", "x-looker-nullable": true}, "kind": {"type": "string", "readOnly": true, "description": "Error classification: syntax, deprecation, model_configuration, etc", "x-looker-nullable": true}, "message": {"type": "string", "readOnly": true, "description": "Error message which may contain information such as dashboard or model names that may be considered sensitive in some use cases. Avoid storing or sending this message outside of Looker", "x-looker-nullable": true}, "field_name": {"type": "string", "readOnly": true, "description": "The field associated with this error", "x-looker-nullable": true}, "file_path": {"type": "string", "readOnly": true, "description": "Name of the file containing this error", "x-looker-nullable": true}, "line_number": {"type": "integer", "format": "int64", "readOnly": true, "description": "Line number in the file of this error", "x-looker-nullable": true}, "model_id": {"type": "string", "readOnly": true, "description": "The model associated with this error", "x-looker-nullable": true}, "explore": {"type": "string", "readOnly": true, "description": "The explore associated with this error", "x-looker-nullable": true}, "help_url": {"type": "string", "readOnly": true, "description": "A link to Looker documentation about this error", "x-looker-nullable": true}, "params": {"type": "object", "additionalProperties": {"type": "any", "format": "any"}, "readOnly": true, "description": "Error parameters", "x-looker-nullable": true}, "sanitized_message": {"type": "string", "readOnly": true, "description": "A version of the error message that does not contain potentially sensitive information. Suitable for situations in which messages are stored or sent to consumers outside of Looker, such as external logs. Sanitized messages will display \"(?)\" where sensitive information would appear in the corresponding non-sanitized message", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ModelsNotValidated": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Model name", "x-looker-nullable": true}, "project_file_id": {"type": "string", "readOnly": true, "description": "Project file", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ProjectValidation": {"properties": {"errors": {"type": "array", "items": {"$ref": "#/definitions/ProjectError"}, "readOnly": true, "description": "A list of project errors", "x-looker-nullable": true}, "project_digest": {"type": "string", "readOnly": true, "description": "A hash value computed from the project's current state", "x-looker-nullable": true}, "models_not_validated": {"type": "array", "items": {"$ref": "#/definitions/ModelsNotValidated"}, "readOnly": true, "description": "A list of models which were not fully validated", "x-looker-nullable": true}, "computation_time": {"type": "number", "format": "float", "readOnly": true, "description": "Duration of project validation in seconds", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ProjectValidationCache": {"properties": {"errors": {"type": "array", "items": {"$ref": "#/definitions/ProjectError"}, "readOnly": true, "description": "A list of project errors", "x-looker-nullable": true}, "project_digest": {"type": "string", "readOnly": true, "description": "A hash value computed from the project's current state", "x-looker-nullable": true}, "models_not_validated": {"type": "array", "items": {"$ref": "#/definitions/ModelsNotValidated"}, "readOnly": true, "description": "A list of models which were not fully validated", "x-looker-nullable": true}, "computation_time": {"type": "number", "format": "float", "readOnly": true, "description": "Duration of project validation in seconds", "x-looker-nullable": true}, "stale": {"type": "boolean", "readOnly": true, "description": "If true, the cached project validation results are no longer accurate because the project has changed since the cached results were calculated", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "ProjectWorkspace": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "project_id": {"type": "string", "readOnly": true, "description": "The id of the project", "x-looker-nullable": true}, "workspace_id": {"type": "string", "readOnly": true, "description": "The id of the local workspace containing the project files", "x-looker-nullable": true}, "git_status": {"type": "string", "readOnly": true, "description": "The status of the local git directory", "x-looker-nullable": true}, "git_head": {"type": "string", "readOnly": true, "description": "Git head revision name", "x-looker-nullable": true}, "dependency_status": {"type": "string", "readOnly": true, "x-looker-values": ["lock_optional", "lock_required", "lock_error", "install_none"], "description": "Status of the dependencies in your project. Valid values are: \"lock_optional\", \"lock_required\", \"lock_error\", \"install_none\".", "x-looker-nullable": true}, "git_branch": {"$ref": "#/definitions/GitBranch", "readOnly": true, "description": "GitBranch", "x-looker-nullable": true}, "lookml_type": {"type": "string", "readOnly": true, "description": "The lookml syntax used by all files in this project", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "Query": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "model": {"type": "string", "description": "Model", "x-looker-nullable": false}, "view": {"type": "string", "description": "Explore Name", "x-looker-nullable": false}, "fields": {"type": "array", "items": {"type": "string"}, "description": "Fields", "x-looker-nullable": true}, "pivots": {"type": "array", "items": {"type": "string"}, "description": "Pivots", "x-looker-nullable": true}, "fill_fields": {"type": "array", "items": {"type": "string"}, "description": "Fill Fields", "x-looker-nullable": true}, "filters": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Filters", "x-looker-nullable": true}, "filter_expression": {"type": "string", "description": "Filter Expression", "x-looker-nullable": true}, "sorts": {"type": "array", "items": {"type": "string"}, "description": "Sorting for the query results. Use the format `[\"view.field\", ...]` to sort on fields in ascending order. Use the format `[\"view.field desc\", ...]` to sort on fields in descending order. Use `[\"__UNSORTED__\"]` (2 underscores before and after) to disable sorting entirely. Empty sorts `[]` will trigger a default sort.", "x-looker-nullable": true}, "limit": {"type": "string", "description": "Limit", "x-looker-nullable": true}, "column_limit": {"type": "string", "description": "Column Limit", "x-looker-nullable": true}, "total": {"type": "boolean", "description": "Total", "x-looker-nullable": true}, "row_total": {"type": "string", "description": "Raw Total", "x-looker-nullable": true}, "subtotals": {"type": "array", "items": {"type": "string"}, "description": "Fields on which to run subtotals", "x-looker-nullable": true}, "vis_config": {"type": "object", "additionalProperties": {"type": "any", "format": "any"}, "description": "Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A \"type\" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.", "x-looker-nullable": true}, "filter_config": {"type": "object", "additionalProperties": {"type": "any", "format": "any"}, "description": "The filter_config represents the state of the filter UI on the explore page for a given query. When running a query via the Looker UI, this parameter takes precedence over \"filters\". When creating a query or modifying an existing query, \"filter_config\" should be set to null. Setting it to any other value could cause unexpected filtering behavior. The format should be considered opaque.", "x-looker-nullable": true}, "visible_ui_sections": {"type": "string", "description": "Visible UI Sections", "x-looker-nullable": true}, "slug": {"type": "string", "readOnly": true, "description": "Slug", "x-looker-nullable": true}, "dynamic_fields": {"type": "string", "description": "Dynamic Fields", "x-looker-nullable": true}, "client_id": {"type": "string", "description": "Client Id: used to generate shortened explore URLs. If set by client, must be a unique 22 character alphanumeric string. Otherwise one will be generated.", "x-looker-nullable": true}, "share_url": {"type": "string", "readOnly": true, "description": "Share Url", "x-looker-nullable": true}, "expanded_share_url": {"type": "string", "readOnly": true, "description": "Expanded Share Url", "x-looker-nullable": true}, "url": {"type": "string", "readOnly": true, "description": "Expanded Url", "x-looker-nullable": true}, "query_timezone": {"type": "string", "description": "Query Timezone", "x-looker-nullable": true}, "has_table_calculations": {"type": "boolean", "readOnly": true, "description": "Has Table Calculations", "x-looker-nullable": false}}, "x-looker-status": "stable", "required": ["model", "view"]}, "CreateQueryTask": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "query_id": {"type": "string", "description": "Id of query to run", "x-looker-nullable": true}, "result_format": {"type": "string", "x-looker-values": ["inline_json", "json", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml", "sql"], "description": "Desired async query result format. Valid values are: \"inline_json\", \"json\", \"json_detail\", \"json_fe\", \"csv\", \"html\", \"md\", \"txt\", \"xlsx\", \"gsxml\", \"sql\".", "x-looker-nullable": true}, "source": {"type": "string", "description": "Source of query task", "x-looker-nullable": true}, "deferred": {"type": "boolean", "description": "Create the task but defer execution", "x-looker-nullable": false}, "look_id": {"type": "string", "description": "Id of look associated with query.", "x-looker-nullable": true}, "dashboard_id": {"type": "string", "description": "Id of dashboard associated with query.", "x-looker-nullable": true}}, "x-looker-status": "stable", "required": ["query_id", "result_format"]}, "QueryTask": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "query_id": {"type": "string", "description": "Id of query", "x-looker-nullable": true}, "query": {"$ref": "#/definitions/Query", "readOnly": true, "description": "Query", "x-looker-nullable": true}, "generate_links": {"type": "boolean", "description": "whether or not to generate links in the query response.", "x-looker-nullable": false}, "force_production": {"type": "boolean", "description": "Use production models to run query (even is user is in dev mode).", "x-looker-nullable": false}, "path_prefix": {"type": "string", "description": "Prefix to use for drill links.", "x-looker-nullable": true}, "cache": {"type": "boolean", "description": "Whether or not to use the cache", "x-looker-nullable": false}, "server_table_calcs": {"type": "boolean", "description": "Whether or not to run table calculations on the server", "x-looker-nullable": false}, "cache_only": {"type": "boolean", "description": "Retrieve any results from cache even if the results have expired.", "x-looker-nullable": false}, "cache_key": {"type": "string", "readOnly": true, "description": "cache key used to cache query.", "x-looker-nullable": true}, "status": {"type": "string", "description": "Status of query task.", "x-looker-nullable": true}, "source": {"type": "string", "description": "Source of query task.", "x-looker-nullable": true}, "runtime": {"type": "number", "format": "float", "readOnly": true, "description": "Runtime of prior queries.", "x-looker-nullable": true}, "rebuild_pdts": {"type": "boolean", "description": "Rebuild PDTS used in query.", "x-looker-nullable": false}, "result_source": {"type": "string", "readOnly": true, "description": "Source of the results of the query.", "x-looker-nullable": true}, "look_id": {"type": "string", "description": "Id of look associated with query.", "x-looker-nullable": true}, "dashboard_id": {"type": "string", "description": "Id of dashboard associated with query.", "x-looker-nullable": true}, "result_format": {"type": "string", "readOnly": true, "description": "The data format of the query results.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "RenderTask": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "created_at": {"type": "string", "readOnly": true, "description": "Date/Time render task was created", "x-looker-nullable": true}, "dashboard_filters": {"type": "string", "readOnly": true, "description": "Filter values to apply to the dashboard queries, in URL query format", "x-looker-nullable": true}, "dashboard_id": {"type": "string", "readOnly": true, "description": "Id of dashboard to render", "x-looker-nullable": true}, "dashboard_style": {"type": "string", "readOnly": true, "description": "Dashboard layout style: single_column or tiled", "x-looker-nullable": true}, "finalized_at": {"type": "string", "readOnly": true, "description": "Date/Time render task was completed", "x-looker-nullable": true}, "height": {"type": "integer", "format": "int64", "readOnly": true, "description": "Output height in pixels. Flowed layouts may ignore this value.", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Id of this render task", "x-looker-nullable": false}, "look_id": {"type": "string", "readOnly": true, "description": "Id of look to render", "x-looker-nullable": true}, "lookml_dashboard_id": {"type": "string", "readOnly": true, "description": "Id of lookml dashboard to render", "x-looker-nullable": true}, "query_id": {"type": "string", "readOnly": true, "description": "Id of query to render", "x-looker-nullable": true}, "dashboard_element_id": {"type": "string", "readOnly": true, "description": "Id of dashboard element to render: UDD dashboard element would be numeric and LookML dashboard element would be model_name::dashboard_title::lookml_link_id", "x-looker-nullable": true}, "query_runtime": {"type": "number", "format": "double", "readOnly": true, "description": "Number of seconds elapsed running queries", "x-looker-nullable": true}, "render_runtime": {"type": "number", "format": "double", "readOnly": true, "description": "Number of seconds elapsed rendering data", "x-looker-nullable": true}, "result_format": {"type": "string", "readOnly": true, "description": "Output format: pdf, png, or jpg", "x-looker-nullable": true}, "runtime": {"type": "number", "format": "double", "readOnly": true, "description": "Total seconds elapsed for render task", "x-looker-nullable": true}, "status": {"type": "string", "readOnly": true, "description": "Render task status: enqueued_for_query, querying, enqueued_for_render, rendering, success, failure", "x-looker-nullable": true}, "status_detail": {"type": "string", "readOnly": true, "description": "Additional information about the current status", "x-looker-nullable": true}, "user_id": {"type": "string", "readOnly": true, "description": "The user account permissions in which the render task will execute", "x-looker-nullable": true}, "width": {"type": "integer", "format": "int64", "readOnly": true, "description": "Output width in pixels", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "CreateDashboardRenderTask": {"properties": {"dashboard_filters": {"type": "string", "description": "Filter values to apply to the dashboard queries, in URL query format", "x-looker-nullable": true}, "dashboard_style": {"type": "string", "description": "Dashboard layout style: single_column or tiled", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "RepositoryCredential": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "root_project_id": {"type": "string", "readOnly": true, "description": "Root project Id", "x-looker-nullable": false}, "remote_url": {"type": "string", "readOnly": true, "description": "Git remote repository url", "x-looker-nullable": false}, "git_username": {"type": "string", "description": "Git username for HTTPS authentication.", "x-looker-nullable": true}, "git_password": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) Git password for HTTPS authentication.", "x-looker-nullable": true}, "ssh_public_key": {"type": "string", "description": "Public deploy key for SSH authentication.", "x-looker-nullable": true}, "is_configured": {"type": "boolean", "readOnly": true, "description": "Whether the credentials have been configured for the Git Repository.", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "ResultMakerFilterablesListen": {"properties": {"dashboard_filter_name": {"type": "string", "description": "The name of a dashboard filter to listen to.", "x-looker-nullable": true}, "field": {"type": "string", "description": "The name of the field in the filterable to filter with the value of the dashboard filter.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ResultMakerFilterables": {"properties": {"model": {"type": "string", "readOnly": true, "description": "The model this filterable comes from (used for field suggestions).", "x-looker-nullable": true}, "view": {"type": "string", "readOnly": true, "description": "The view this filterable comes from (used for field suggestions).", "x-looker-nullable": true}, "name": {"type": "string", "readOnly": true, "description": "The name of the filterable thing (Query or Merged Results).", "x-looker-nullable": true}, "listen": {"type": "array", "items": {"$ref": "#/definitions/ResultMakerFilterablesListen"}, "readOnly": true, "description": "array of dashboard_filter_name: and field: objects.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ResultMakerWithIdVisConfigAndDynamicFields": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Unique Id.", "x-looker-nullable": false}, "dynamic_fields": {"type": "string", "readOnly": true, "description": "JSON string of dynamic field information.", "x-looker-nullable": true}, "filterables": {"type": "array", "items": {"$ref": "#/definitions/ResultMakerFilterables"}, "readOnly": true, "description": "array of items that can be filtered and information about them.", "x-looker-nullable": true}, "sorts": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "Sorts of the constituent Look, Query, or Merge Query", "x-looker-nullable": true}, "merge_result_id": {"type": "string", "readOnly": true, "description": "ID of merge result if this is a merge_result.", "x-looker-nullable": true}, "total": {"type": "boolean", "readOnly": true, "description": "Total of the constituent Look, Query, or Merge Query", "x-looker-nullable": false}, "query_id": {"type": "string", "readOnly": true, "description": "ID of query if this is a query.", "x-looker-nullable": true}, "sql_query_id": {"type": "string", "readOnly": true, "description": "ID of SQL Query if this is a SQL Runner Query", "x-looker-nullable": true}, "query": {"$ref": "#/definitions/Query", "readOnly": true, "description": "Query", "x-looker-nullable": true}, "vis_config": {"type": "object", "additionalProperties": {"type": "any", "format": "any"}, "readOnly": true, "description": "Vis config of the constituent Query, or Merge Query.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "Role": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "name": {"type": "string", "description": "Name of Role", "x-looker-nullable": true}, "permission_set": {"$ref": "#/definitions/PermissionSet", "readOnly": true, "description": "(Read only) Permission set", "x-looker-nullable": true}, "permission_set_id": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) Id of permission set", "x-looker-nullable": true}, "model_set": {"$ref": "#/definitions/ModelSet", "readOnly": true, "description": "(Read only) Model set", "x-looker-nullable": true}, "model_set_id": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) Id of model set", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}, "users_url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get list of users with this role", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "RoleSearch": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "name": {"type": "string", "description": "Name of Role", "x-looker-nullable": true}, "permission_set": {"$ref": "#/definitions/PermissionSet", "readOnly": true, "description": "(Read only) Permission set", "x-looker-nullable": true}, "permission_set_id": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) Id of permission set", "x-looker-nullable": true}, "model_set": {"$ref": "#/definitions/ModelSet", "readOnly": true, "description": "(Read only) Model set", "x-looker-nullable": true}, "model_set_id": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) Id of model set", "x-looker-nullable": true}, "user_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Count of users with this role", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}, "users_url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get list of users with this role", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "RunningQueries": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "user": {"$ref": "#/definitions/UserPublic", "readOnly": true, "description": "User who initiated the query", "x-looker-nullable": true}, "query": {"$ref": "#/definitions/Query", "readOnly": true, "description": "Query that was run", "x-looker-nullable": true}, "sql_query": {"$ref": "#/definitions/SqlQuery", "readOnly": true, "description": "SQL Query that was run", "x-looker-nullable": true}, "look": {"$ref": "#/definitions/LookBasic", "readOnly": true, "description": "Look of query that was run", "x-looker-nullable": true}, "created_at": {"type": "string", "readOnly": true, "description": "Date/Time Query was initiated", "x-looker-nullable": true}, "completed_at": {"type": "string", "readOnly": true, "description": "Date/Time Query was completed", "x-looker-nullable": true}, "query_id": {"type": "string", "readOnly": true, "description": "Query Id", "x-looker-nullable": true}, "source": {"type": "string", "readOnly": true, "description": "Source (look, dashboard, queryrunner, explore, etc.)", "x-looker-nullable": true}, "node_id": {"type": "string", "readOnly": true, "description": "Node Id", "x-looker-nullable": true}, "slug": {"type": "string", "readOnly": true, "description": "Slug", "x-looker-nullable": true}, "query_task_id": {"type": "string", "readOnly": true, "description": "ID of a Query Task", "x-looker-nullable": true}, "cache_key": {"type": "string", "readOnly": true, "description": "Cache Key", "x-looker-nullable": true}, "connection_name": {"type": "string", "readOnly": true, "description": "Connection", "x-looker-nullable": true}, "dialect": {"type": "string", "readOnly": true, "description": "Dialect", "x-looker-nullable": true}, "connection_id": {"type": "string", "readOnly": true, "description": "Connection ID", "x-looker-nullable": true}, "message": {"type": "string", "readOnly": true, "description": "Additional Information(Error message or verbose status)", "x-looker-nullable": true}, "status": {"type": "string", "readOnly": true, "description": "Status description", "x-looker-nullable": true}, "runtime": {"type": "number", "format": "double", "readOnly": true, "description": "Number of seconds elapsed running the Query", "x-looker-nullable": true}, "sql": {"type": "string", "readOnly": true, "description": "SQL text of the query as run", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "SamlConfig": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "enabled": {"type": "boolean", "description": "Enable/Disable Saml authentication for the server", "x-looker-nullable": false}, "idp_cert": {"type": "string", "description": "Identity Provider Certificate (provided by IdP)", "x-looker-nullable": true}, "idp_url": {"type": "string", "description": "Identity Provider Url (provided by IdP)", "x-looker-nullable": true}, "idp_issuer": {"type": "string", "description": "Identity Provider Issuer (provided by IdP)", "x-looker-nullable": true}, "idp_audience": {"type": "string", "description": "Identity Provider Audience (set in IdP config). Optional in Looker. Set this only if you want Looker to validate the audience value returned by the IdP.", "x-looker-nullable": true}, "allowed_clock_drift": {"type": "integer", "format": "int64", "description": "Count of seconds of clock drift to allow when validating timestamps of assertions.", "x-looker-nullable": true}, "user_attribute_map_email": {"type": "string", "description": "Name of user record attributes used to indicate email address field", "x-looker-nullable": true}, "user_attribute_map_first_name": {"type": "string", "description": "Name of user record attributes used to indicate first name", "x-looker-nullable": true}, "user_attribute_map_last_name": {"type": "string", "description": "Name of user record attributes used to indicate last name", "x-looker-nullable": true}, "new_user_migration_types": {"type": "string", "description": "Merge first-time saml login to existing user account by email addresses. When a user logs in for the first time via saml this option will connect this user into their existing account by finding the account with a matching email address by testing the given types of credentials for existing users. Otherwise a new user account will be created for the user. This list (if provided) must be a comma separated list of string like 'email,ldap,google'", "x-looker-nullable": true}, "alternate_email_login_allowed": {"type": "boolean", "description": "Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.", "x-looker-nullable": false}, "test_slug": {"type": "string", "readOnly": true, "description": "Slug to identify configurations that are created in order to run a Saml config test", "x-looker-nullable": true}, "modified_at": {"type": "string", "readOnly": true, "description": "When this config was last modified", "x-looker-nullable": true}, "modified_by": {"type": "string", "readOnly": true, "description": "User id of user who last modified this config", "x-looker-nullable": true}, "default_new_user_roles": {"type": "array", "items": {"$ref": "#/definitions/Role"}, "readOnly": true, "description": "(Read-only) Roles that will be applied to new users the first time they login via Saml", "x-looker-nullable": true}, "default_new_user_groups": {"type": "array", "items": {"$ref": "#/definitions/Group"}, "readOnly": true, "description": "(Read-only) Groups that will be applied to new users the first time they login via Saml", "x-looker-nullable": true}, "default_new_user_role_ids": {"type": "array", "items": {"type": "string"}, "x-looker-write-only": true, "description": "(Write-Only) Array of ids of roles that will be applied to new users the first time they login via Saml", "x-looker-nullable": true}, "default_new_user_group_ids": {"type": "array", "items": {"type": "string"}, "x-looker-write-only": true, "description": "(Write-Only) Array of ids of groups that will be applied to new users the first time they login via Saml", "x-looker-nullable": true}, "set_roles_from_groups": {"type": "boolean", "description": "Set user roles in Looker based on groups from Saml", "x-looker-nullable": false}, "groups_attribute": {"type": "string", "description": "Name of user record attributes used to indicate groups. Used when 'groups_finder_type' is set to 'grouped_attribute_values'", "x-looker-nullable": true}, "groups": {"type": "array", "items": {"$ref": "#/definitions/SamlGroupRead"}, "readOnly": true, "description": "(Read-only) Array of mappings between Saml Groups and Looker Roles", "x-looker-nullable": true}, "groups_with_role_ids": {"type": "array", "items": {"$ref": "#/definitions/SamlGroupWrite"}, "description": "(Read/Write) Array of mappings between Saml Groups and arrays of Looker Role ids", "x-looker-nullable": true}, "auth_requires_role": {"type": "boolean", "description": "Users will not be allowed to login at all unless a role for them is found in Saml if set to true", "x-looker-nullable": false}, "user_attributes": {"type": "array", "items": {"$ref": "#/definitions/SamlUserAttributeRead"}, "readOnly": true, "description": "(Read-only) Array of mappings between Saml User Attributes and Looker User Attributes", "x-looker-nullable": true}, "user_attributes_with_ids": {"type": "array", "items": {"$ref": "#/definitions/SamlUserAttributeWrite"}, "description": "(Read/Write) Array of mappings between Saml User Attributes and arrays of Looker User Attribute ids", "x-looker-nullable": true}, "groups_finder_type": {"type": "string", "description": "Identifier for a strategy for how Looker will find groups in the SAML response. One of ['grouped_attribute_values', 'individual_attributes']", "x-looker-nullable": true}, "groups_member_value": {"type": "string", "description": "Value for group attribute used to indicate membership. Used when 'groups_finder_type' is set to 'individual_attributes'", "x-looker-nullable": true}, "bypass_login_page": {"type": "boolean", "description": "Bypass the login page when user authentication is required. Redirect to IdP immediately instead.", "x-looker-nullable": false}, "allow_normal_group_membership": {"type": "boolean", "description": "Allow SAML auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.", "x-looker-nullable": false}, "allow_roles_from_normal_groups": {"type": "boolean", "description": "SAML auth'd users will inherit roles from non-reflected Looker groups.", "x-looker-nullable": false}, "allow_direct_roles": {"type": "boolean", "description": "Allows roles to be directly assigned to SAML auth'd users.", "x-looker-nullable": false}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "SamlGroupRead": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "looker_group_id": {"type": "string", "readOnly": true, "description": "Unique Id of group in Looker", "x-looker-nullable": true}, "looker_group_name": {"type": "string", "readOnly": true, "description": "Name of group in Looker", "x-looker-nullable": true}, "name": {"type": "string", "readOnly": true, "description": "Name of group in Saml", "x-looker-nullable": true}, "roles": {"type": "array", "items": {"$ref": "#/definitions/Role"}, "readOnly": true, "description": "Looker Roles", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to saml config", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "SamlGroupWrite": {"properties": {"id": {"type": "string", "description": "Unique Id", "x-looker-nullable": true}, "looker_group_id": {"type": "string", "readOnly": true, "description": "Unique Id of group in Looker", "x-looker-nullable": true}, "looker_group_name": {"type": "string", "description": "Name of group in Looker", "x-looker-nullable": true}, "name": {"type": "string", "description": "Name of group in Saml", "x-looker-nullable": true}, "role_ids": {"type": "array", "items": {"type": "string"}, "description": "Looker Role Ids", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to saml config", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "SamlMetadataParseResult": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "idp_issuer": {"type": "string", "readOnly": true, "description": "Identify Provider Issuer", "x-looker-nullable": true}, "idp_url": {"type": "string", "readOnly": true, "description": "Identify Provider Url", "x-looker-nullable": true}, "idp_cert": {"type": "string", "readOnly": true, "description": "Identify Provider Certificate", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "SamlUserAttributeRead": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Name of User Attribute in Saml", "x-looker-nullable": true}, "required": {"type": "boolean", "readOnly": true, "description": "Required to be in Saml assertion for login to be allowed to succeed", "x-looker-nullable": false}, "user_attributes": {"type": "array", "items": {"$ref": "#/definitions/UserAttribute"}, "readOnly": true, "description": "Looker User Attributes", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to saml config", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "SamlUserAttributeWrite": {"properties": {"name": {"type": "string", "description": "Name of User Attribute in Saml", "x-looker-nullable": true}, "required": {"type": "boolean", "description": "Required to be in Saml assertion for login to be allowed to succeed", "x-looker-nullable": false}, "user_attribute_ids": {"type": "array", "items": {"type": "string"}, "description": "Looker User Attribute Ids", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to saml config", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ScheduledPlanDestination": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "scheduled_plan_id": {"type": "string", "description": "Id of a scheduled plan you own", "x-looker-nullable": true}, "format": {"type": "string", "description": "The data format to send to the given destination. Supported formats vary by destination, but include: \"txt\", \"csv\", \"inline_json\", \"json\", \"json_detail\", \"xlsx\", \"html\", \"wysiwyg_pdf\", \"assembled_pdf\", \"wysiwyg_png\"", "x-looker-nullable": true}, "apply_formatting": {"type": "boolean", "description": "Are values formatted? (containing currency symbols, digit separators, etc.", "x-looker-nullable": false}, "apply_vis": {"type": "boolean", "description": "Whether visualization options are applied to the results.", "x-looker-nullable": false}, "address": {"type": "string", "description": "Address for recipient. For email e.g. 'user@example.com'. For webhooks e.g. 'https://domain/path'. For Amazon S3 e.g. 's3://bucket-name/path/'. For SFTP e.g. 'sftp://host-name/path/'. ", "x-looker-nullable": true}, "looker_recipient": {"type": "boolean", "readOnly": true, "description": "Whether the recipient is a Looker user on the current instance (only applicable for email recipients)", "x-looker-nullable": false}, "type": {"type": "string", "description": "Type of the address ('email', 'webhook', 's3', or 'sftp')", "x-looker-nullable": true}, "parameters": {"type": "string", "description": "JSON object containing parameters for external scheduling. For Amazon S3, this requires keys and values for access_key_id and region. For SFTP, this requires a key and value for username.", "x-looker-nullable": true}, "secret_parameters": {"type": "string", "x-looker-write-only": true, "description": "(Write-Only) JSON object containing secret parameters for external scheduling. For Amazon S3, this requires a key and value for secret_access_key. For SFTP, this requires a key and value for password.", "x-looker-nullable": true}, "message": {"type": "string", "description": "Optional message to be included in scheduled emails", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "WriteScheduledPlan": {"properties": {"name": {"type": "string", "description": "Name of this scheduled plan", "x-looker-nullable": true}, "user_id": {"type": "string", "description": "User Id which owns this scheduled plan", "x-looker-nullable": true}, "run_as_recipient": {"type": "boolean", "description": "Whether schedule is run as recipient (only applicable for email recipients)", "x-looker-nullable": false}, "enabled": {"type": "boolean", "description": "Whether the ScheduledPlan is enabled", "x-looker-nullable": false}, "look_id": {"type": "string", "description": "Id of a look", "x-looker-nullable": true}, "dashboard_id": {"type": "string", "description": "Id of a dashboard", "x-looker-nullable": true}, "lookml_dashboard_id": {"type": "string", "description": "Id of a LookML dashboard", "x-looker-nullable": true}, "filters_string": {"type": "string", "description": "Query string to run look or dashboard with", "x-looker-nullable": true}, "dashboard_filters": {"type": "string", "x-looker-deprecated": true, "description": "(DEPRECATED) Alias for filters_string field", "x-looker-nullable": true}, "require_results": {"type": "boolean", "description": "Delivery should occur if running the dashboard or look returns results", "x-looker-nullable": false}, "require_no_results": {"type": "boolean", "description": "Delivery should occur if the dashboard look does not return results", "x-looker-nullable": false}, "require_change": {"type": "boolean", "description": "Delivery should occur if data have changed since the last run", "x-looker-nullable": false}, "send_all_results": {"type": "boolean", "description": "Will run an unlimited query and send all results.", "x-looker-nullable": false}, "crontab": {"type": "string", "description": "Vixie-Style crontab specification when to run", "x-looker-nullable": true}, "datagroup": {"type": "string", "description": "Name of a datagroup; if specified will run when datagroup triggered (can't be used with cron string)", "x-looker-nullable": true}, "timezone": {"type": "string", "description": "Timezone for interpreting the specified crontab (default is Looker instance timezone)", "x-looker-nullable": true}, "query_id": {"type": "string", "description": "Query id", "x-looker-nullable": true}, "scheduled_plan_destination": {"type": "array", "items": {"$ref": "#/definitions/ScheduledPlanDestination"}, "description": "Scheduled plan destinations", "x-looker-nullable": true}, "run_once": {"type": "boolean", "description": "Whether the plan in question should only be run once (usually for testing)", "x-looker-nullable": false}, "include_links": {"type": "boolean", "description": "Whether links back to Looker should be included in this ScheduledPlan", "x-looker-nullable": false}, "custom_url_base": {"type": "string", "description": "Custom url domain for the scheduled entity", "x-looker-nullable": true}, "custom_url_params": {"type": "string", "description": "Custom url path and parameters for the scheduled entity", "x-looker-nullable": true}, "custom_url_label": {"type": "string", "description": "Custom url label for the scheduled entity", "x-looker-nullable": true}, "show_custom_url": {"type": "boolean", "description": "Whether to show custom link back instead of standard looker link", "x-looker-nullable": false}, "pdf_paper_size": {"type": "string", "description": "The size of paper the PDF should be formatted to fit. Valid values are: \"letter\", \"legal\", \"tabloid\", \"a0\", \"a1\", \"a2\", \"a3\", \"a4\", \"a5\".", "x-looker-nullable": true}, "pdf_landscape": {"type": "boolean", "description": "Whether the PDF should be formatted for landscape orientation", "x-looker-nullable": false}, "embed": {"type": "boolean", "description": "Whether this schedule is in an embed context or not", "x-looker-nullable": false}, "color_theme": {"type": "string", "description": "Color scheme of the dashboard if applicable", "x-looker-nullable": true}, "long_tables": {"type": "boolean", "description": "Whether or not to expand table vis to full length", "x-looker-nullable": false}, "inline_table_width": {"type": "integer", "format": "int64", "description": "The pixel width at which we render the inline table visualizations", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ScheduledPlan": {"properties": {"name": {"type": "string", "description": "Name of this scheduled plan", "x-looker-nullable": true}, "user_id": {"type": "string", "description": "User Id which owns this scheduled plan", "x-looker-nullable": true}, "run_as_recipient": {"type": "boolean", "description": "Whether schedule is run as recipient (only applicable for email recipients)", "x-looker-nullable": false}, "enabled": {"type": "boolean", "description": "Whether the ScheduledPlan is enabled", "x-looker-nullable": false}, "look_id": {"type": "string", "description": "Id of a look", "x-looker-nullable": true}, "dashboard_id": {"type": "string", "description": "Id of a dashboard", "x-looker-nullable": true}, "lookml_dashboard_id": {"type": "string", "description": "Id of a LookML dashboard", "x-looker-nullable": true}, "filters_string": {"type": "string", "description": "Query string to run look or dashboard with", "x-looker-nullable": true}, "dashboard_filters": {"type": "string", "x-looker-deprecated": true, "description": "(DEPRECATED) Alias for filters_string field", "x-looker-nullable": true}, "require_results": {"type": "boolean", "description": "Delivery should occur if running the dashboard or look returns results", "x-looker-nullable": false}, "require_no_results": {"type": "boolean", "description": "Delivery should occur if the dashboard look does not return results", "x-looker-nullable": false}, "require_change": {"type": "boolean", "description": "Delivery should occur if data have changed since the last run", "x-looker-nullable": false}, "send_all_results": {"type": "boolean", "description": "Will run an unlimited query and send all results.", "x-looker-nullable": false}, "crontab": {"type": "string", "description": "Vixie-Style crontab specification when to run", "x-looker-nullable": true}, "datagroup": {"type": "string", "description": "Name of a datagroup; if specified will run when datagroup triggered (can't be used with cron string)", "x-looker-nullable": true}, "timezone": {"type": "string", "description": "Timezone for interpreting the specified crontab (default is Looker instance timezone)", "x-looker-nullable": true}, "query_id": {"type": "string", "description": "Query id", "x-looker-nullable": true}, "scheduled_plan_destination": {"type": "array", "items": {"$ref": "#/definitions/ScheduledPlanDestination"}, "description": "Scheduled plan destinations", "x-looker-nullable": true}, "run_once": {"type": "boolean", "description": "Whether the plan in question should only be run once (usually for testing)", "x-looker-nullable": false}, "include_links": {"type": "boolean", "description": "Whether links back to Looker should be included in this ScheduledPlan", "x-looker-nullable": false}, "custom_url_base": {"type": "string", "description": "Custom url domain for the scheduled entity", "x-looker-nullable": true}, "custom_url_params": {"type": "string", "description": "Custom url path and parameters for the scheduled entity", "x-looker-nullable": true}, "custom_url_label": {"type": "string", "description": "Custom url label for the scheduled entity", "x-looker-nullable": true}, "show_custom_url": {"type": "boolean", "description": "Whether to show custom link back instead of standard looker link", "x-looker-nullable": false}, "pdf_paper_size": {"type": "string", "description": "The size of paper the PDF should be formatted to fit. Valid values are: \"letter\", \"legal\", \"tabloid\", \"a0\", \"a1\", \"a2\", \"a3\", \"a4\", \"a5\".", "x-looker-nullable": true}, "pdf_landscape": {"type": "boolean", "description": "Whether the PDF should be formatted for landscape orientation", "x-looker-nullable": false}, "embed": {"type": "boolean", "description": "Whether this schedule is in an embed context or not", "x-looker-nullable": false}, "color_theme": {"type": "string", "description": "Color scheme of the dashboard if applicable", "x-looker-nullable": true}, "long_tables": {"type": "boolean", "description": "Whether or not to expand table vis to full length", "x-looker-nullable": false}, "inline_table_width": {"type": "integer", "format": "int64", "description": "The pixel width at which we render the inline table visualizations", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "created_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Date and time when ScheduledPlan was created", "x-looker-nullable": true}, "updated_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Date and time when ScheduledPlan was last updated", "x-looker-nullable": true}, "title": {"type": "string", "readOnly": true, "description": "Title", "x-looker-nullable": true}, "user": {"$ref": "#/definitions/UserPublic", "readOnly": true, "description": "User who owns this ScheduledPlan", "x-looker-nullable": true}, "next_run_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "When the ScheduledPlan will next run (null if running once)", "x-looker-nullable": true}, "last_run_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "When the ScheduledPlan was last run", "x-looker-nullable": true}, "can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "SchemaColumn": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Schema item name", "x-looker-nullable": true}, "sql_escaped_name": {"type": "string", "readOnly": true, "description": "Full name of item", "x-looker-nullable": true}, "schema_name": {"type": "string", "readOnly": true, "description": "Name of schema", "x-looker-nullable": true}, "data_type_database": {"type": "string", "readOnly": true, "description": "SQL dialect data type", "x-looker-nullable": false}, "data_type": {"type": "string", "readOnly": true, "description": "Data type", "x-looker-nullable": false}, "data_type_looker": {"type": "string", "readOnly": true, "description": "Looker data type", "x-looker-nullable": false}, "description": {"type": "string", "readOnly": true, "description": "SQL data type", "x-looker-nullable": true}, "column_size": {"type": "integer", "format": "int64", "readOnly": true, "description": "Column data size", "x-looker-nullable": true}, "snippets": {"type": "array", "items": {"$ref": "#/definitions/Snippet"}, "readOnly": true, "description": "SQL Runner snippets for this connection", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "SchemaTable": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Schema item name", "x-looker-nullable": true}, "sql_escaped_name": {"type": "string", "readOnly": true, "description": "Full name of item", "x-looker-nullable": true}, "schema_name": {"type": "string", "readOnly": true, "description": "Name of schema", "x-looker-nullable": true}, "rows": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of data rows", "x-looker-nullable": true}, "external": {"type": "string", "readOnly": true, "description": "External reference???", "x-looker-nullable": true}, "snippets": {"type": "array", "items": {"$ref": "#/definitions/Snippet"}, "readOnly": true, "description": "SQL Runner snippets for connection", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "ConnectionFeatures": {"properties": {"dialect_name": {"type": "string", "readOnly": true, "description": "Name of the dialect for this connection", "x-looker-nullable": false}, "cost_estimate": {"type": "boolean", "readOnly": true, "description": "True for cost estimating support", "x-looker-nullable": false}, "multiple_databases": {"type": "boolean", "readOnly": true, "description": "True for multiple database support", "x-looker-nullable": false}, "column_search": {"type": "boolean", "readOnly": true, "description": "True for cost estimating support", "x-looker-nullable": false}, "persistent_table_indexes": {"type": "boolean", "readOnly": true, "description": "True for secondary index support", "x-looker-nullable": false}, "persistent_derived_tables": {"type": "boolean", "readOnly": true, "description": "True for persistent derived table support", "x-looker-nullable": false}, "turtles": {"type": "boolean", "readOnly": true, "description": "True for turtles support", "x-looker-nullable": false}, "percentile": {"type": "boolean", "readOnly": true, "description": "True for percentile support", "x-looker-nullable": false}, "distinct_percentile": {"type": "boolean", "readOnly": true, "description": "True for distinct percentile support", "x-looker-nullable": false}, "stable_views": {"type": "boolean", "readOnly": true, "description": "True for stable views support", "x-looker-nullable": false}, "milliseconds": {"type": "boolean", "readOnly": true, "description": "True for millisecond support", "x-looker-nullable": false}, "microseconds": {"type": "boolean", "readOnly": true, "description": "True for microsecond support", "x-looker-nullable": false}, "subtotals": {"type": "boolean", "readOnly": true, "description": "True for subtotal support", "x-looker-nullable": false}, "location": {"type": "boolean", "readOnly": true, "description": "True for geographic location support", "x-looker-nullable": false}, "timezone": {"type": "boolean", "readOnly": true, "description": "True for timezone conversion in query support", "x-looker-nullable": false}, "connection_pooling": {"type": "boolean", "readOnly": true, "description": "True for connection pooling support", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "Schema": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Schema name", "x-looker-nullable": false}, "is_default": {"type": "boolean", "readOnly": true, "description": "True if this is the default schema", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "SchemaTables": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Schema name", "x-looker-nullable": false}, "is_default": {"type": "boolean", "readOnly": true, "description": "True if this is the default schema", "x-looker-nullable": false}, "tables": {"type": "array", "items": {"$ref": "#/definitions/SchemaTable"}, "readOnly": true, "description": "Tables for this schema", "x-looker-nullable": false}, "table_limit_hit": {"type": "boolean", "readOnly": true, "description": "True if the table limit was hit while retrieving tables in this schema", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "SchemaColumns": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Schema item name", "x-looker-nullable": true}, "sql_escaped_name": {"type": "string", "readOnly": true, "description": "Full name of item", "x-looker-nullable": true}, "schema_name": {"type": "string", "readOnly": true, "description": "Name of schema", "x-looker-nullable": true}, "columns": {"type": "array", "items": {"$ref": "#/definitions/SchemaColumn"}, "readOnly": true, "description": "Columns for this schema", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "ColumnSearch": {"properties": {"schema_name": {"type": "string", "readOnly": true, "description": "Name of schema containing the table", "x-looker-nullable": true}, "table_name": {"type": "string", "readOnly": true, "description": "Name of table containing the column", "x-looker-nullable": true}, "column_name": {"type": "string", "readOnly": true, "description": "Name of column", "x-looker-nullable": true}, "data_type": {"type": "string", "readOnly": true, "description": "Column data type", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "CreateCostEstimate": {"properties": {"sql": {"type": "string", "readOnly": true, "description": "SQL statement to estimate", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "CostEstimate": {"properties": {"cost": {"type": "integer", "format": "int64", "readOnly": true, "description": "Cost of SQL statement", "x-looker-nullable": false}, "cache_hit": {"type": "boolean", "readOnly": true, "description": "Does the result come from the cache?", "x-looker-nullable": false}, "cost_unit": {"type": "string", "readOnly": true, "description": "Cost measurement size", "x-looker-nullable": false}, "message": {"type": "string", "readOnly": true, "description": "Human-friendly message", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "ModelFieldSuggestions": {"properties": {"suggestions": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "List of suggestions", "x-looker-nullable": false}, "error": {"type": "string", "readOnly": true, "description": "Error message", "x-looker-nullable": true}, "from_cache": {"type": "boolean", "readOnly": true, "description": "True if result came from the cache", "x-looker-nullable": false}, "hit_limit": {"type": "boolean", "readOnly": true, "description": "True if this was a hit limit", "x-looker-nullable": false}, "used_calcite_materialization": {"type": "boolean", "readOnly": true, "description": "True if calcite was used", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "ModelNamedValueFormats": {"properties": {"format_string": {"type": "string", "readOnly": true, "x-looker-nullable": false}, "label": {"type": "string", "readOnly": true, "x-looker-nullable": false}, "name": {"type": "string", "readOnly": true, "x-looker-nullable": false}, "strict_value_format": {"type": "boolean", "readOnly": true, "x-looker-nullable": false}}, "x-looker-status": "stable"}, "Model": {"properties": {"connection": {"type": "string", "readOnly": true, "x-looker-nullable": true}, "name": {"type": "string", "readOnly": true, "x-looker-nullable": false}, "value_formats": {"type": "array", "items": {"$ref": "#/definitions/ModelNamedValueFormats"}, "readOnly": true, "description": "Array of named value formats", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "SessionConfig": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "allow_persistent_sessions": {"type": "boolean", "description": "Allow users to have persistent sessions when they login", "x-looker-nullable": false}, "session_minutes": {"type": "integer", "format": "int64", "description": "Number of minutes for user sessions.  Must be between 5 and 43200", "x-looker-nullable": true}, "unlimited_sessions_per_user": {"type": "boolean", "description": "Allow users to have an unbounded number of concurrent sessions (otherwise, users will be limited to only one session at a time).", "x-looker-nullable": false}, "use_inactivity_based_logout": {"type": "boolean", "description": "Enforce session logout for sessions that are inactive for 15 minutes.", "x-looker-nullable": false}, "track_session_location": {"type": "boolean", "description": "Track location of session when user logs in.", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "Session": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "ip_address": {"type": "string", "readOnly": true, "description": "IP address of user when this session was initiated", "x-looker-nullable": true}, "browser": {"type": "string", "readOnly": true, "description": "User's browser type", "x-looker-nullable": true}, "operating_system": {"type": "string", "readOnly": true, "description": "User's Operating System", "x-looker-nullable": true}, "city": {"type": "string", "readOnly": true, "description": "City component of user location (derived from IP address)", "x-looker-nullable": true}, "state": {"type": "string", "readOnly": true, "description": "State component of user location (derived from IP address)", "x-looker-nullable": true}, "country": {"type": "string", "readOnly": true, "description": "Country component of user location (derived from IP address)", "x-looker-nullable": true}, "credentials_type": {"type": "string", "readOnly": true, "description": "Type of credentials used for logging in this session", "x-looker-nullable": true}, "extended_at": {"type": "string", "readOnly": true, "description": "Time when this session was last extended by the user", "x-looker-nullable": true}, "extended_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times this session was extended", "x-looker-nullable": true}, "sudo_user_id": {"type": "string", "readOnly": true, "description": "Actual user in the case when this session represents one user sudo'ing as another", "x-looker-nullable": true}, "created_at": {"type": "string", "readOnly": true, "description": "Time when this session was initiated", "x-looker-nullable": true}, "expires_at": {"type": "string", "readOnly": true, "description": "Time when this session will expire", "x-looker-nullable": true}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "Setting": {"properties": {"extension_framework_enabled": {"type": "boolean", "description": "Toggle extension framework on or off", "x-looker-nullable": false}, "extension_load_url_enabled": {"type": "boolean", "x-looker-deprecated": true, "description": "(DEPRECATED) Toggle extension extension load url on or off. Do not use. This is temporary setting that will eventually become a noop and subsequently deleted.", "x-looker-nullable": false}, "marketplace_auto_install_enabled": {"type": "boolean", "description": "Toggle marketplace auto install on or off. Note that auto install only runs if marketplace is enabled.", "x-looker-nullable": false}, "marketplace_enabled": {"type": "boolean", "description": "Toggle marketplace on or off", "x-looker-nullable": false}, "privatelabel_configuration": {"$ref": "#/definitions/PrivatelabelConfiguration", "readOnly": true, "description": "Private label configuration", "x-looker-nullable": false}, "custom_welcome_email": {"$ref": "#/definitions/CustomWelcomeEmail", "readOnly": true, "description": "Custom welcome email configuration", "x-looker-nullable": false}, "onboarding_enabled": {"type": "boolean", "description": "Toggle onboarding on or off", "x-looker-nullable": false}, "timezone": {"type": "string", "description": "Change instance-wide default timezone", "x-looker-nullable": false}, "allow_user_timezones": {"type": "boolean", "description": "Toggle user-specific timezones on or off", "x-looker-nullable": false}, "data_connector_default_enabled": {"type": "boolean", "description": "Toggle default future connectors on or off", "x-looker-nullable": false}, "host_url": {"type": "string", "description": "Change the base portion of your Looker instance URL setting", "x-looker-nullable": false}, "override_warnings": {"type": "boolean", "x-looker-write-only": true, "description": "(Write-Only) If warnings are preventing a host URL change, this parameter allows for overriding warnings to force update the setting. Does not directly change any Looker settings.", "x-looker-nullable": false}, "email_domain_allowlist": {"type": "array", "items": {"type": "string"}, "description": "An array of Email Domain Allowlist of type string for Scheduled Content", "x-looker-nullable": false}, "embed_cookieless_v2": {"type": "boolean", "description": "Toggle cookieless embed setting", "x-looker-nullable": false}, "embed_enabled": {"type": "boolean", "readOnly": true, "description": "True if embedding is enabled https://cloud.google.com/looker/docs/r/looker-core-feature-embed, false otherwise", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "SmtpStatus": {"properties": {"is_valid": {"type": "boolean", "readOnly": true, "description": "Overall SMTP status of cluster", "x-looker-nullable": false}, "node_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Total number of nodes in cluster", "x-looker-nullable": true}, "node_status": {"type": "array", "items": {"$ref": "#/definitions/SmtpNodeStatus"}, "readOnly": true, "description": "array of each node's status containing is_valid, message, hostname", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "SmtpNodeStatus": {"properties": {"is_valid": {"type": "boolean", "readOnly": true, "description": "SMTP status of node", "x-looker-nullable": false}, "message": {"type": "string", "readOnly": true, "description": "Error message for node", "x-looker-nullable": true}, "hostname": {"type": "string", "readOnly": true, "description": "Host name of node", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "Snippet": {"properties": {"name": {"type": "string", "readOnly": true, "description": "Name of the snippet", "x-looker-nullable": false}, "label": {"type": "string", "readOnly": true, "description": "Label of the snippet", "x-looker-nullable": false}, "sql": {"type": "string", "readOnly": true, "description": "SQL text of the snippet", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "SqlQueryCreate": {"properties": {"connection_name": {"type": "string", "description": "Name of the db connection on which to run this query", "x-looker-nullable": true}, "connection_id": {"type": "string", "x-looker-deprecated": true, "description": "(DEPRECATED) Use `connection_name` instead", "x-looker-nullable": true}, "model_name": {"type": "string", "description": "Name of LookML Model (this or `connection_id` required)", "x-looker-nullable": true}, "sql": {"type": "string", "description": "SQL query", "x-looker-nullable": true}, "vis_config": {"type": "object", "additionalProperties": {"type": "any", "format": "any"}, "description": "Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A \"type\" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "SqlQuery": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "slug": {"type": "string", "readOnly": true, "description": "The identifier of the SQL query", "x-looker-nullable": false}, "last_runtime": {"type": "number", "format": "float", "readOnly": true, "description": "Number of seconds this query took to run the most recent time it was run", "x-looker-nullable": true}, "run_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of times this query has been run", "x-looker-nullable": false}, "browser_limit": {"type": "integer", "format": "int64", "readOnly": true, "description": "Maximum number of rows this query will display on the SQL Runner page", "x-looker-nullable": false}, "sql": {"type": "string", "readOnly": true, "description": "SQL query text", "x-looker-nullable": false}, "last_run_at": {"type": "string", "readOnly": true, "description": "The most recent time this query was run", "x-looker-nullable": true}, "connection": {"$ref": "#/definitions/DBConnectionBase", "readOnly": true, "description": "Connection this query uses", "x-looker-nullable": true}, "model_name": {"type": "string", "readOnly": true, "description": "Model name this query uses", "x-looker-nullable": true}, "creator": {"$ref": "#/definitions/UserPublic", "readOnly": true, "description": "User who created this SQL query", "x-looker-nullable": true}, "explore_url": {"type": "string", "readOnly": true, "description": "Explore page URL for this SQL query", "x-looker-nullable": true}, "plaintext": {"type": "boolean", "readOnly": true, "description": "Should this query be rendered as plain text", "x-looker-nullable": false}, "vis_config": {"type": "object", "additionalProperties": {"type": "any", "format": "any"}, "description": "Visualization configuration properties. These properties are typically opaque and differ based on the type of visualization used. There is no specified set of allowed keys. The values can be any type supported by JSON. A \"type\" key with a string value is often present, and is used by Looker to determine which visualization to present. Visualizations ignore unknown vis_config properties.", "x-looker-nullable": true}, "result_maker_id": {"type": "string", "description": "ID of the ResultMakerLookup entry.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "SshPublicKey": {"properties": {"public_key": {"type": "string", "readOnly": true, "description": "The SSH public key created for this instance", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "SshServer": {"properties": {"ssh_server_id": {"type": "string", "readOnly": true, "description": "A unique id used to identify this SSH Server", "x-looker-nullable": false}, "ssh_server_name": {"type": "string", "description": "The name to identify this SSH Server", "x-looker-nullable": false}, "ssh_server_host": {"type": "string", "description": "The hostname or ip address of the SSH Server", "x-looker-nullable": false}, "ssh_server_port": {"type": "integer", "format": "int64", "description": "The port to connect to on the SSH Server", "x-looker-nullable": false}, "ssh_server_user": {"type": "string", "description": "The username used to connect to the SSH Server", "x-looker-nullable": false}, "finger_print": {"type": "string", "readOnly": true, "description": "The md5 fingerprint used to identify the SSH Server", "x-looker-nullable": false}, "sha_finger_print": {"type": "string", "readOnly": true, "description": "The SHA fingerprint used to identify the SSH Server", "x-looker-nullable": false}, "public_key": {"type": "string", "readOnly": true, "description": "The SSH public key created for this instance", "x-looker-nullable": false}, "status": {"type": "string", "readOnly": true, "description": "The current connection status to this SSH Server", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "SshTunnel": {"properties": {"tunnel_id": {"type": "string", "readOnly": true, "description": "Unique ID for the tunnel", "x-looker-nullable": false}, "ssh_server_id": {"type": "string", "description": "SSH Server ID", "x-looker-nullable": false}, "ssh_server_name": {"type": "string", "readOnly": true, "description": "SSH Server name", "x-looker-nullable": false}, "ssh_server_host": {"type": "string", "readOnly": true, "description": "SSH Server Hostname or IP Address", "x-looker-nullable": false}, "ssh_server_port": {"type": "integer", "format": "int64", "readOnly": true, "description": "SSH Server port", "x-looker-nullable": false}, "ssh_server_user": {"type": "string", "readOnly": true, "description": "Username used to connect to the SSH Server", "x-looker-nullable": false}, "last_attempt": {"type": "string", "readOnly": true, "description": "Time of last connect attempt", "x-looker-nullable": false}, "local_host_port": {"type": "integer", "format": "int64", "description": "Localhost Port used by the Looker instance to connect to the remote DB", "x-looker-nullable": false}, "database_host": {"type": "string", "description": "Hostname or IP Address of the Database Server", "x-looker-nullable": false}, "database_port": {"type": "integer", "format": "int64", "description": "Port that the Database Server is listening on", "x-looker-nullable": false}, "status": {"type": "string", "readOnly": true, "description": "Current connection status for this Tunnel", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "SupportAccessAllowlistEntry": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Unique ID", "x-looker-nullable": false}, "email": {"type": "string", "description": "Email address", "x-looker-nullable": true}, "full_name": {"type": "string", "readOnly": true, "description": "Full name of allowlisted user", "x-looker-nullable": true}, "reason": {"type": "string", "description": "Reason the Email is included in the Allowlist", "x-looker-nullable": true}, "created_date": {"type": "string", "format": "date-time", "readOnly": true, "description": "Date the Email was added to the Allowlist", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "SupportAccessAddEntries": {"properties": {"emails": {"type": "array", "items": {"type": "string"}, "description": "An array of emails to add to the Allowlist", "x-looker-nullable": true}, "reason": {"type": "string", "description": "Reason for adding emails to the Allowlist", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "SupportAccessEnable": {"properties": {"duration_in_seconds": {"type": "integer", "format": "int64", "description": "Duration Support Access will remain enabled", "x-looker-nullable": true}}, "x-looker-status": "stable", "required": ["duration_in_seconds"]}, "SupportAccessStatus": {"properties": {"open": {"type": "boolean", "readOnly": true, "description": "Whether or not Support Access is open", "x-looker-nullable": false}, "open_until": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time that Support Access will expire", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ThemeSettings": {"properties": {"background_color": {"type": "string", "description": "Default background color", "x-looker-nullable": false}, "base_font_size": {"type": "string", "description": "Base font size for scaling fonts (only supported by legacy dashboards)", "x-looker-nullable": true}, "color_collection_id": {"type": "string", "description": "Optional. ID of color collection to use with the theme. Use an empty string for none.", "x-looker-nullable": false}, "font_color": {"type": "string", "description": "Default font color", "x-looker-nullable": true}, "font_family": {"type": "string", "description": "Primary font family", "x-looker-nullable": false}, "font_source": {"type": "string", "description": "Source specification for font", "x-looker-nullable": true}, "info_button_color": {"type": "string", "x-looker-deprecated": true, "description": "(DEPRECATED) Info button color", "x-looker-nullable": false}, "primary_button_color": {"type": "string", "description": "Primary button color", "x-looker-nullable": false}, "show_filters_bar": {"type": "boolean", "description": "Toggle to show filters. Defaults to true.", "x-looker-nullable": false}, "show_title": {"type": "boolean", "description": "Toggle to show the title. Defaults to true.", "x-looker-nullable": false}, "text_tile_text_color": {"type": "string", "description": "Text color for text tiles", "x-looker-nullable": false}, "tile_background_color": {"type": "string", "description": "Background color for tiles", "x-looker-nullable": false}, "text_tile_background_color": {"type": "string", "description": "Background color for text tiles", "x-looker-nullable": false}, "tile_text_color": {"type": "string", "description": "Text color for tiles", "x-looker-nullable": false}, "title_color": {"type": "string", "description": "Color for titles", "x-looker-nullable": false}, "warn_button_color": {"type": "string", "x-looker-deprecated": true, "description": "(DEPRECATED) Warning button color", "x-looker-nullable": false}, "tile_title_alignment": {"type": "string", "description": "The text alignment of tile titles (New Dashboards)", "x-looker-nullable": false}, "tile_shadow": {"type": "boolean", "description": "Toggles the tile shadow (not supported)", "x-looker-nullable": false}, "show_last_updated_indicator": {"type": "boolean", "description": "Toggle to show the dashboard last updated indicator. Defaults to true.", "x-looker-nullable": false}, "show_reload_data_icon": {"type": "boolean", "description": "Toggle to show reload data icon/button. Defaults to true.", "x-looker-nullable": false}, "show_dashboard_menu": {"type": "boolean", "description": "Toggle to show the dashboard actions menu. Defaults to true.", "x-looker-nullable": false}, "show_filters_toggle": {"type": "boolean", "description": "Toggle to show the filters icon/toggle. Defaults to true.", "x-looker-nullable": false}, "show_dashboard_header": {"type": "boolean", "description": "Toggle to show the dashboard header. Defaults to true.", "x-looker-nullable": false}, "center_dashboard_title": {"type": "boolean", "description": "Toggle to center the dashboard title. Defaults to false.", "x-looker-nullable": false}, "dashboard_title_font_size": {"type": "string", "description": "Dashboard title font size.", "x-looker-nullable": false}, "box_shadow": {"type": "string", "description": "Default box shadow.", "x-looker-nullable": false}, "page_margin_top": {"type": "string", "description": "Dashboard page margin top.", "x-looker-nullable": false}, "page_margin_bottom": {"type": "string", "description": "Dashboard page margin bottom.", "x-looker-nullable": false}, "page_margin_sides": {"type": "string", "description": "Dashboard page margin left and right.", "x-looker-nullable": false}, "show_explore_header": {"type": "boolean", "description": "Toggle to show the explore page header. Defaults to true.", "x-looker-nullable": false}, "show_explore_title": {"type": "boolean", "description": "Toggle to show the explore page title. Defaults to true.", "x-looker-nullable": false}, "show_explore_last_run": {"type": "boolean", "description": "Toggle to show the explore page last run. Defaults to true.", "x-looker-nullable": false}, "show_explore_timezone": {"type": "boolean", "description": "Toggle to show the explore page timezone. Defaults to true.", "x-looker-nullable": false}, "show_explore_run_stop_button": {"type": "boolean", "description": "Toggle to show the explore page run button. Defaults to true.", "x-looker-nullable": false}, "show_explore_actions_button": {"type": "boolean", "description": "Toggle to show the explore page actions button. Defaults to true.", "x-looker-nullable": false}, "show_look_header": {"type": "boolean", "description": "Toggle to show the look page header. Defaults to true.", "x-looker-nullable": false}, "show_look_title": {"type": "boolean", "description": "Toggle to show the look page title. Defaults to true.", "x-looker-nullable": false}, "show_look_last_run": {"type": "boolean", "description": "Toggle to show the look page last run. Defaults to true.", "x-looker-nullable": false}, "show_look_timezone": {"type": "boolean", "description": "Toggle to show the look page timezone Defaults to true.", "x-looker-nullable": false}, "show_look_run_stop_button": {"type": "boolean", "description": "Toggle to show the look page run button. Defaults to true.", "x-looker-nullable": false}, "show_look_actions_button": {"type": "boolean", "description": "Toggle to show the look page actions button. Defaults to true.", "x-looker-nullable": false}, "tile_title_font_size": {"type": "string", "description": "Font size for tiles.", "x-looker-nullable": false}, "column_gap_size": {"type": "string", "description": "The vertical gap/gutter size between tiles.", "x-looker-nullable": false}, "row_gap_size": {"type": "string", "description": "The horizontal gap/gutter size between tiles.", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "Theme": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "begin_at": {"type": "string", "format": "date-time", "description": "Timestamp for when this theme becomes active. Null=always", "x-looker-nullable": true}, "end_at": {"type": "string", "format": "date-time", "description": "Timestamp for when this theme expires. Null=never", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "name": {"type": "string", "description": "Name of theme. Can only be alphanumeric and underscores.", "x-looker-nullable": false}, "settings": {"$ref": "#/definitions/ThemeSettings", "description": "Hash of name/value pairs for theme settings. These names get validated.", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "Timezone": {"properties": {"value": {"type": "string", "readOnly": true, "description": "Timezone", "x-looker-nullable": true}, "label": {"type": "string", "readOnly": true, "description": "Description of timezone", "x-looker-nullable": true}, "group": {"type": "string", "readOnly": true, "description": "Timezone group (e.g Common, Other, etc.)", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "UserAttribute": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "name": {"type": "string", "description": "Name of user attribute", "x-looker-nullable": true}, "label": {"type": "string", "description": "Human-friendly label for user attribute", "x-looker-nullable": true}, "type": {"type": "string", "description": "Type of user attribute (\"string\", \"number\", \"datetime\", \"yesno\", \"zipcode\")", "x-looker-nullable": true}, "default_value": {"type": "string", "description": "Default value for when no value is set on the user", "x-looker-nullable": true}, "is_system": {"type": "boolean", "readOnly": true, "description": "Attribute is a system default", "x-looker-nullable": false}, "is_permanent": {"type": "boolean", "readOnly": true, "description": "Attribute is permanent and cannot be deleted", "x-looker-nullable": false}, "value_is_hidden": {"type": "boolean", "description": "If true, users will not be able to view values of this attribute", "x-looker-nullable": false}, "user_can_view": {"type": "boolean", "description": "Non-admin users can see the values of their attributes and use them in filters", "x-looker-nullable": false}, "user_can_edit": {"type": "boolean", "description": "Users can change the value of this attribute for themselves", "x-looker-nullable": false}, "hidden_value_domain_whitelist": {"type": "string", "description": "Destinations to which a hidden attribute may be sent. Once set, cannot be edited.", "x-looker-nullable": true}}, "x-looker-status": "stable", "required": ["name", "label", "type"]}, "UserAttributeGroupValue": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id of this group-attribute relation", "x-looker-nullable": false}, "group_id": {"type": "string", "readOnly": true, "description": "Id of group", "x-looker-nullable": true}, "user_attribute_id": {"type": "string", "readOnly": true, "description": "Id of user attribute", "x-looker-nullable": true}, "value_is_hidden": {"type": "boolean", "readOnly": true, "description": "If true, the \"value\" field will be null, because the attribute settings block access to this value", "x-looker-nullable": false}, "rank": {"type": "integer", "format": "int64", "readOnly": true, "description": "Precedence for resolving value for user", "x-looker-nullable": true}, "value": {"type": "string", "readOnly": true, "description": "Value of user attribute for group", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "UserAttributeWithValue": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "name": {"type": "string", "readOnly": true, "description": "Name of user attribute", "x-looker-nullable": true}, "label": {"type": "string", "readOnly": true, "description": "Human-friendly label for user attribute", "x-looker-nullable": true}, "rank": {"type": "integer", "format": "int64", "readOnly": true, "description": "Precedence for setting value on user (lowest wins)", "x-looker-nullable": true}, "value": {"type": "string", "description": "Value of attribute for user", "x-looker-nullable": true}, "user_id": {"type": "string", "readOnly": true, "description": "Id of User", "x-looker-nullable": true}, "user_can_edit": {"type": "boolean", "readOnly": true, "description": "Can the user set this value", "x-looker-nullable": false}, "value_is_hidden": {"type": "boolean", "readOnly": true, "description": "If true, the \"value\" field will be null, because the attribute settings block access to this value", "x-looker-nullable": false}, "user_attribute_id": {"type": "string", "readOnly": true, "description": "Id of User Attribute", "x-looker-nullable": true}, "source": {"type": "string", "readOnly": true, "description": "How user got this value for this attribute", "x-looker-nullable": true}, "hidden_value_domain_whitelist": {"type": "string", "readOnly": true, "description": "If this user attribute is hidden, allowed list of destinations to which it may be sent.", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "UserEmailOnly": {"properties": {"email": {"type": "string", "description": "Email Address", "x-looker-nullable": false}}, "x-looker-status": "stable", "required": ["email"]}, "UserLoginLockout": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "key": {"type": "string", "readOnly": true, "description": "Hash of user's client id", "x-looker-nullable": true}, "auth_type": {"type": "string", "readOnly": true, "description": "Authentication method for login failures", "x-looker-nullable": true}, "ip": {"type": "string", "readOnly": true, "description": "IP address of most recent failed attempt", "x-looker-nullable": true}, "user_id": {"type": "string", "readOnly": true, "description": "User ID", "x-looker-nullable": true}, "remote_id": {"type": "string", "readOnly": true, "description": "Remote ID of user if using LDAP", "x-looker-nullable": true}, "full_name": {"type": "string", "readOnly": true, "description": "User's name", "x-looker-nullable": true}, "email": {"type": "string", "readOnly": true, "description": "Email address associated with the user's account", "x-looker-nullable": true}, "fail_count": {"type": "integer", "format": "int64", "readOnly": true, "description": "Number of failures that triggered the lockout", "x-looker-nullable": true}, "lockout_at": {"type": "string", "format": "date-time", "readOnly": true, "description": "Time when lockout was triggered", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "User": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "avatar_url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "URL for the avatar image (may be generic)", "x-looker-nullable": true}, "avatar_url_without_sizing": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "URL for the avatar image (may be generic), does not specify size", "x-looker-nullable": true}, "credentials_api3": {"type": "array", "items": {"$ref": "#/definitions/CredentialsApi3"}, "readOnly": true, "description": "API credentials", "x-looker-nullable": true}, "credentials_email": {"$ref": "#/definitions/CredentialsEmail", "readOnly": true, "description": "Email/Password login credentials", "x-looker-nullable": true}, "credentials_embed": {"type": "array", "items": {"$ref": "#/definitions/CredentialsEmbed"}, "readOnly": true, "description": "Embed credentials", "x-looker-nullable": true}, "credentials_google": {"$ref": "#/definitions/CredentialsGoogle", "readOnly": true, "description": "Google auth credentials", "x-looker-nullable": true}, "credentials_ldap": {"$ref": "#/definitions/CredentialsLDAP", "readOnly": true, "description": "LDAP credentials", "x-looker-nullable": true}, "credentials_looker_openid": {"$ref": "#/definitions/CredentialsLookerOpenid", "readOnly": true, "description": "LookerOpenID credentials. Used for login by Looker Analysts", "x-looker-nullable": true}, "credentials_oidc": {"$ref": "#/definitions/CredentialsOIDC", "readOnly": true, "description": "OpenID Connect auth credentials", "x-looker-nullable": true}, "credentials_saml": {"$ref": "#/definitions/CredentialsSaml", "readOnly": true, "description": "Saml auth credentials", "x-looker-nullable": true}, "credentials_totp": {"$ref": "#/definitions/CredentialsTotp", "readOnly": true, "description": "Two-factor credentials", "x-looker-nullable": true}, "display_name": {"type": "string", "readOnly": true, "description": "Full name for display (available only if both first_name and last_name are set)", "x-looker-nullable": true}, "email": {"type": "string", "readOnly": true, "description": "EMail address", "x-looker-nullable": true}, "embed_group_space_id": {"type": "string", "readOnly": true, "x-looker-deprecated": true, "description": "(DEPRECATED) (Embed only) ID of user's group space based on the external_group_id optionally specified during embed user login", "x-looker-nullable": true}, "first_name": {"type": "string", "description": "First name", "x-looker-nullable": true}, "group_ids": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "Array of ids of the groups for this user", "x-looker-nullable": true}, "home_folder_id": {"type": "string", "description": "ID string for user's home folder", "x-looker-nullable": true}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "is_disabled": {"type": "boolean", "description": "Account has been disabled", "x-looker-nullable": false}, "last_name": {"type": "string", "description": "Last name", "x-looker-nullable": true}, "locale": {"type": "string", "description": "User's preferred locale. User locale takes precedence over Looker's system-wide default locale. Locale determines language of display strings and date and numeric formatting in API responses. Locale string must be a 2 letter language code or a combination of language code and region code: 'en' or 'en-US', for example.", "x-looker-nullable": true}, "looker_versions": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "Array of strings representing the Looker versions that this user has used (this only goes back as far as '3.54.0')", "x-looker-nullable": true}, "models_dir_validated": {"type": "boolean", "description": "User's dev workspace has been checked for presence of applicable production projects", "x-looker-nullable": true}, "personal_folder_id": {"type": "string", "readOnly": true, "description": "ID of user's personal folder", "x-looker-nullable": true}, "presumed_looker_employee": {"type": "boolean", "readOnly": true, "description": "User is identified as an employee of Looker", "x-looker-nullable": false}, "role_ids": {"type": "array", "items": {"type": "string"}, "readOnly": true, "description": "Array of ids of the roles for this user", "x-looker-nullable": true}, "sessions": {"type": "array", "items": {"$ref": "#/definitions/Session"}, "readOnly": true, "description": "Active sessions", "x-looker-nullable": true}, "ui_state": {"type": "object", "additionalProperties": {"type": "string"}, "description": "Per user dictionary of undocumented state information owned by the Looker UI.", "x-looker-nullable": true}, "verified_looker_employee": {"type": "boolean", "readOnly": true, "description": "User is identified as an employee of Looker who has been verified via Looker corporate authentication", "x-looker-nullable": false}, "roles_externally_managed": {"type": "boolean", "readOnly": true, "description": "User's roles are managed by an external directory like SAML or LDAP and can not be changed directly.", "x-looker-nullable": false}, "allow_direct_roles": {"type": "boolean", "readOnly": true, "description": "User can be directly assigned a role.", "x-looker-nullable": false}, "allow_normal_group_membership": {"type": "boolean", "readOnly": true, "description": "User can be a direct member of a normal Looker group.", "x-looker-nullable": false}, "allow_roles_from_normal_groups": {"type": "boolean", "readOnly": true, "description": "User can inherit roles from a normal Looker group.", "x-looker-nullable": false}, "embed_group_folder_id": {"type": "string", "readOnly": true, "description": "(Embed only) ID of user's group folder based on the external_group_id optionally specified during embed user login", "x-looker-nullable": true}, "is_iam_admin": {"type": "boolean", "readOnly": true, "description": "User is an IAM Admin - only available in Looker (Google Cloud core)", "x-looker-nullable": false}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "UserPublic": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "first_name": {"type": "string", "readOnly": true, "description": "First Name", "x-looker-nullable": false}, "last_name": {"type": "string", "readOnly": true, "description": "Last Name", "x-looker-nullable": false}, "display_name": {"type": "string", "readOnly": true, "description": "Full name for display (available only if both first_name and last_name are set)", "x-looker-nullable": true}, "avatar_url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "URL for the avatar image (may be generic)", "x-looker-nullable": false}, "url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Link to get this item", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ApiVersionElement": {"properties": {"version": {"type": "string", "readOnly": true, "description": "Version number as it appears in '/api/xxx/' urls", "x-looker-nullable": true}, "full_version": {"type": "string", "readOnly": true, "description": "Full version number including minor version", "x-looker-nullable": true}, "status": {"type": "string", "readOnly": true, "description": "Status of this version", "x-looker-nullable": true}, "swagger_url": {"type": "string", "format": "uri-reference", "readOnly": true, "description": "Url for swagger.json for this version", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "ApiVersion": {"properties": {"looker_release_version": {"type": "string", "readOnly": true, "description": "Current Looker release version number", "x-looker-nullable": false}, "current_version": {"$ref": "#/definitions/ApiVersionElement", "readOnly": true, "description": "Current version for this Looker instance", "x-looker-nullable": false}, "supported_versions": {"type": "array", "items": {"$ref": "#/definitions/ApiVersionElement"}, "readOnly": true, "description": "Array of versions supported by this Looker instance", "x-looker-nullable": false}, "api_server_url": {"type": "string", "readOnly": true, "description": "API server base url", "x-looker-nullable": false}, "web_server_url": {"type": "string", "readOnly": true, "description": "Web server base url", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "WelcomeEmailTest": {"properties": {"content": {"type": "string", "description": "The content that would be sent in the body of a custom welcome email", "x-looker-nullable": true}, "subject": {"type": "string", "description": "The subject that would be sent for the custom welcome email", "x-looker-nullable": true}, "header": {"type": "string", "description": "The header that would be sent in the body of a custom welcome email", "x-looker-nullable": true}}, "x-looker-status": "stable"}, "WhitelabelConfiguration": {"properties": {"id": {"type": "string", "readOnly": true, "description": "Unique Id", "x-looker-nullable": false}, "logo_file": {"type": "string", "description": "Customer logo image. Expected base64 encoded data (write-only)", "x-looker-nullable": true}, "logo_url": {"type": "string", "readOnly": true, "description": "Logo image url (read-only)", "x-looker-nullable": true}, "favicon_file": {"type": "string", "description": "Custom favicon image. Expected base64 encoded data (write-only)", "x-looker-nullable": true}, "favicon_url": {"type": "string", "readOnly": true, "description": "Favicon image url (read-only)", "x-looker-nullable": true}, "default_title": {"type": "string", "description": "Default page title", "x-looker-nullable": true}, "show_help_menu": {"type": "boolean", "description": "Boolean to toggle showing help menus", "x-looker-nullable": false}, "show_docs": {"type": "boolean", "description": "Boolean to toggle showing docs", "x-looker-nullable": false}, "show_email_sub_options": {"type": "boolean", "description": "Boolean to toggle showing email subscription options.", "x-looker-nullable": false}, "allow_looker_mentions": {"type": "boolean", "description": "Boolean to toggle mentions of Looker in emails", "x-looker-nullable": false}, "allow_looker_links": {"type": "boolean", "description": "Boolean to toggle links to Looker in emails", "x-looker-nullable": false}, "custom_welcome_email_advanced": {"type": "boolean", "description": "Allow subject line and email heading customization in customized emails\u201d", "x-looker-nullable": false}, "setup_mentions": {"type": "boolean", "description": "Remove the word Looker from appearing in the account setup page", "x-looker-nullable": false}, "alerts_logo": {"type": "boolean", "description": "Remove Looker logo from Alerts", "x-looker-nullable": false}, "alerts_links": {"type": "boolean", "description": "Remove Looker links from Alerts", "x-looker-nullable": false}, "folders_mentions": {"type": "boolean", "description": "Remove Looker mentions in home folder page when you don\u2019t have any items saved", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "PrivatelabelConfiguration": {"properties": {"logo_file": {"type": "string", "description": "Customer logo image. Expected base64 encoded data (write-only)", "x-looker-nullable": true}, "logo_url": {"type": "string", "readOnly": true, "description": "Logo image url (read-only)", "x-looker-nullable": true}, "favicon_file": {"type": "string", "description": "Custom favicon image. Expected base64 encoded data (write-only)", "x-looker-nullable": true}, "favicon_url": {"type": "string", "readOnly": true, "description": "Favicon image url (read-only)", "x-looker-nullable": true}, "default_title": {"type": "string", "description": "Default page title", "x-looker-nullable": true}, "show_help_menu": {"type": "boolean", "description": "Boolean to toggle showing help menus", "x-looker-nullable": false}, "show_docs": {"type": "boolean", "description": "Boolean to toggle showing docs", "x-looker-nullable": false}, "show_email_sub_options": {"type": "boolean", "description": "Boolean to toggle showing email subscription options.", "x-looker-nullable": false}, "allow_looker_mentions": {"type": "boolean", "description": "Boolean to toggle mentions of Looker in emails", "x-looker-nullable": false}, "allow_looker_links": {"type": "boolean", "description": "Boolean to toggle links to Looker in emails", "x-looker-nullable": false}, "custom_welcome_email_advanced": {"type": "boolean", "description": "Allow subject line and email heading customization in customized emails\u201d", "x-looker-nullable": false}, "setup_mentions": {"type": "boolean", "description": "Remove the word Looker from appearing in the account setup page", "x-looker-nullable": false}, "alerts_logo": {"type": "boolean", "description": "Remove Looker logo from Alerts", "x-looker-nullable": false}, "alerts_links": {"type": "boolean", "description": "Remove Looker links from Alerts", "x-looker-nullable": false}, "folders_mentions": {"type": "boolean", "description": "Remove Looker mentions in home folder page when you don\u2019t have any items saved", "x-looker-nullable": false}}, "x-looker-status": "stable"}, "Workspace": {"properties": {"can": {"type": "object", "additionalProperties": {"type": "boolean"}, "readOnly": true, "description": "Operations the current user is able to perform on this object", "x-looker-nullable": false}, "id": {"type": "string", "readOnly": true, "description": "The unique id of this user workspace. Predefined workspace ids include \"production\" and \"dev\"", "x-looker-nullable": false}, "projects": {"type": "array", "items": {"$ref": "#/definitions/Project"}, "readOnly": true, "description": "The local state of each project in the workspace", "x-looker-nullable": true}}, "x-looker-status": "stable"}}}