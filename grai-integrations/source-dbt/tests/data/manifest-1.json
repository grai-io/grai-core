{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.0", "generated_at": "2022-08-25T12:15:55.076525Z", "invocation_id": "14c1c0c6-3242-44c3-8ff9-6e8a98d35416", "env": {}, "project_id": "823da893f76085fc54fc516e880f7cf6", "user_id": "2e0cb132-db49-4c1f-a33e-ee1afa11a370", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"model.augustdbt.dst_airtable_employees": {"raw_sql": "", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "DESTINATIONS", "database": null, "tags": ["destinations"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_DESTINATIONS", "fqn": ["augustdbt", "destinations", "airtable", "dst_airtable_employees"], "unique_id": "model.augustdbt.dst_airtable_employees", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "destinations/airtable/dst_airtable_employees.sql", "original_file_path": "models/destinations/airtable/dst_airtable_employees.sql", "name": "dst_airtable_employees", "alias": "dst_airtable_employees", "checksum": {"name": "sha256", "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, "tags": ["destinations"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "DESTINATIONS", "materialized": "table", "tags": "destinations"}, "created_at": 1661416272.2723432}, "model.augustdbt.dst_airtable_copanies": {"raw_sql": "", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "DESTINATIONS", "database": null, "tags": ["destinations"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_DESTINATIONS", "fqn": ["augustdbt", "destinations", "airtable", "dst_airtable_copanies"], "unique_id": "model.augustdbt.dst_airtable_copanies", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "destinations/airtable/dst_airtable_copanies.sql", "original_file_path": "models/destinations/airtable/dst_airtable_copanies.sql", "name": "dst_airtable_copanies", "alias": "dst_airtable_copanies", "checksum": {"name": "sha256", "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, "tags": ["destinations"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "DESTINATIONS", "materialized": "table", "tags": "destinations"}, "created_at": 1661416272.273524}, "model.augustdbt.int_sales_booking": {"raw_sql": "select ezekia_id,\n    date_of_booking,\n    initial_assignment_value,\n    total_assignment_value\n    from {{ref('sales_booking_from_spreadsheet')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.augustdbt.sales_booking_from_spreadsheet"]}, "config": {"enabled": true, "alias": null, "schema": "INT", "database": null, "tags": ["int"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_INT", "fqn": ["augustdbt", "int", "int_sales_booking"], "unique_id": "model.augustdbt.int_sales_booking", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "int/int_sales_booking.sql", "original_file_path": "models/int/int_sales_booking.sql", "name": "int_sales_booking", "alias": "int_sales_booking", "checksum": {"name": "sha256", "checksum": "267778fe1e363e2fd4fb8627762db2f730729791087efd6c0a5d807f2de0a372"}, "tags": ["int"], "refs": [["sales_booking_from_spreadsheet"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/int/int_sales_booking.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "INT", "materialized": "view", "tags": "int"}, "created_at": 1661416272.283402, "compiled_sql": "select ezekia_id,\n    date_of_booking,\n    initial_assignment_value,\n    total_assignment_value\n    from \"warehouse_august\".\"august_SEED\".\"sales_booking_from_spreadsheet\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_INT\".\"int_sales_booking\""}, "seed.augustdbt.ezekia_coe": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "SEED", "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_SEED", "fqn": ["augustdbt", "ezekia_coe"], "unique_id": "seed.augustdbt.ezekia_coe", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "ezekia_coe.csv", "original_file_path": "data/ezekia_coe.csv", "name": "ezekia_coe", "alias": "ezekia_coe", "checksum": {"name": "sha256", "checksum": "06b9b7eeeed179c80f88aaeb0d75896635e2d08ca9f3dcc1ab93fe41848ff488"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "SEED"}, "created_at": 1661416272.316517, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_SEED\".\"ezekia_coe\""}, "seed.augustdbt.sales_booking_from_spreadsheet": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "SEED", "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_SEED", "fqn": ["augustdbt", "sales_booking_from_spreadsheet"], "unique_id": "seed.augustdbt.sales_booking_from_spreadsheet", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "sales_booking_from_spreadsheet.csv", "original_file_path": "data/sales_booking_from_spreadsheet.csv", "name": "sales_booking_from_spreadsheet", "alias": "sales_booking_from_spreadsheet", "checksum": {"name": "sha256", "checksum": "5decda60b06629bbb97c110da01b2a51094903aaeee4036d3318fc8975dfcf31"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "SEED"}, "created_at": 1661416272.317651, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_SEED\".\"sales_booking_from_spreadsheet\""}, "seed.augustdbt.ezekia_practice_areas": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "SEED", "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_SEED", "fqn": ["augustdbt", "ezekia_practice_areas"], "unique_id": "seed.augustdbt.ezekia_practice_areas", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "ezekia_practice_areas.csv", "original_file_path": "data/ezekia_practice_areas.csv", "name": "ezekia_practice_areas", "alias": "ezekia_practice_areas", "checksum": {"name": "sha256", "checksum": "4c0ef196f44d5e8d560141ad020001718cccf233991464b3ca499db7d9e840ea"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "SEED"}, "created_at": 1661416272.3187819, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_SEED\".\"ezekia_practice_areas\""}, "seed.augustdbt.initial_assignment_value_seed": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "SEED", "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_SEED", "fqn": ["augustdbt", "initial_assignment_value_seed"], "unique_id": "seed.augustdbt.initial_assignment_value_seed", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "initial_assignment_value_seed.csv", "original_file_path": "data/initial_assignment_value_seed.csv", "name": "initial_assignment_value_seed", "alias": "initial_assignment_value_seed", "checksum": {"name": "sha256", "checksum": "805141b60b62e9c48c9ed4995207d08eb26aed594318f53093dd60649dbc2457"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "A table of initial assignment values for projects", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_of_booking": {"name": "date_of_booking", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ezekia_id": {"name": "ezekia_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client": {"name": "client", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project": {"name": "project", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "initial_assignment_value": {"name": "initial_assignment_value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://data/initial_assignment_value_seed.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "SEED"}, "created_at": 1661416272.339624, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_SEED\".\"initial_assignment_value_seed\""}, "seed.augustdbt.ezekia_assignment_region": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "SEED", "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_SEED", "fqn": ["augustdbt", "ezekia_assignment_region"], "unique_id": "seed.augustdbt.ezekia_assignment_region", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "ezekia_assignment_region.csv", "original_file_path": "data/ezekia_assignment_region.csv", "name": "ezekia_assignment_region", "alias": "ezekia_assignment_region", "checksum": {"name": "sha256", "checksum": "0c27d3b362da615016fbbc148cc19e0649211d6bf3915cf0104d0083928b4ffd"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "SEED"}, "created_at": 1661416272.321474, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_SEED\".\"ezekia_assignment_region\""}, "seed.augustdbt.time_entries_from_spreadsheets": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "SEED", "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_SEED", "fqn": ["augustdbt", "time_entries_from_spreadsheets"], "unique_id": "seed.augustdbt.time_entries_from_spreadsheets", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "time_entries_from_spreadsheets.csv", "original_file_path": "data/time_entries_from_spreadsheets.csv", "name": "time_entries_from_spreadsheets", "alias": "time_entries_from_spreadsheets", "checksum": {"name": "path", "checksum": "data/time_entries_from_spreadsheets.csv"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "A table of time entries drawn from old spreadsheets", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hours": {"name": "hours", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "researcher": {"name": "researcher", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company": {"name": "company", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ezekia_id": {"name": "ezekia_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project": {"name": "project", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type_of_job": {"name": "type_of_job", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "practice_area": {"name": "practice_area", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lead_partner": {"name": "lead_partner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "collaborating_partner_1": {"name": "collaborating_partner_1", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "collaborating_partner_2": {"name": "collaborating_partner_2", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "collaborating_partner_3": {"name": "collaborating_partner_3", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignment_stage": {"name": "assignment_stage", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agreement_available": {"name": "agreement_available", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "job_card_available": {"name": "job_card_available", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "po_available": {"name": "po_available", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_hash": {"name": "company_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_hash": {"name": "project_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_project_hash": {"name": "company_project_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "researcher_hash": {"name": "researcher_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type_of_job_hash": {"name": "type_of_job_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hour_hash": {"name": "hour_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ezekia_id_original": {"name": "ezekia_id_original", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "researcher_airtable_id": {"name": "researcher_airtable_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://data/time_entries_from_spreadsheets.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "SEED"}, "created_at": 1661416272.350065, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_SEED\".\"time_entries_from_spreadsheets\""}, "test.augustdbt.unique_initial_assignment_value_seed_ezekia_id.4f80eb6188": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ezekia_id", "model": "{{ get_where_subquery(ref('initial_assignment_value_seed')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["seed.augustdbt.initial_assignment_value_seed"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "unique_initial_assignment_value_seed_ezekia_id"], "unique_id": "test.augustdbt.unique_initial_assignment_value_seed_ezekia_id.4f80eb6188", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "unique_initial_assignment_value_seed_ezekia_id.sql", "original_file_path": "data/initial_assignment_value_seed.yml", "name": "unique_initial_assignment_value_seed_ezekia_id", "alias": "unique_initial_assignment_value_seed_ezekia_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["initial_assignment_value_seed"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/data/initial_assignment_value_seed.yml/unique_initial_assignment_value_seed_ezekia_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661416272.3433971, "compiled_sql": "\n    \n    \n\nselect\n    ezekia_id as unique_field,\n    count(*) as n_records\n\nfrom \"warehouse_august\".\"august_SEED\".\"initial_assignment_value_seed\"\nwhere ezekia_id is not null\ngroup by ezekia_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ezekia_id", "file_key_name": "seeds.initial_assignment_value_seed"}, "seed.augustdbt.quickbooks_save": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "SEED", "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_SEED", "fqn": ["augustdbt", "quickbooks_save"], "unique_id": "seed.augustdbt.quickbooks_save", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "quickbooks_save.csv", "original_file_path": "data/quickbooks_save.csv", "name": "quickbooks_save", "alias": "quickbooks_save", "checksum": {"name": "sha256", "checksum": "85a18dabd8375261d172b9ad8d2399e1160bbe92c3752eb4d572a159fd42d831"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {"quickbooks_id": {"name": "quickbooks_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EZEKIA_ID": {"name": "EZEKIA_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INVOICE_VALUE": {"name": "INVOICE_VALUE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INVOICE_BALANCE": {"name": "INVOICE_BALANCE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PAYMENT": {"name": "PAYMENT", "description": "", "meta": {"metrics": {"total_payments": {"label": "Total Payment", "type": "sum"}}}, "data_type": null, "quote": null, "tags": []}, "DATE_DUE": {"name": "DATE_DUE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RETAINER": {"name": "RETAINER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLACEMENT": {"name": "PLACEMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHORTLIST": {"name": "SHORTLIST", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FINAL": {"name": "FINAL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MATCHED_TO_EZEKIA": {"name": "MATCHED_TO_EZEKIA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://data/quickbooks_save.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "SEED"}, "created_at": 1661422418.069364, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_SEED\".\"quickbooks_save\""}, "seed.augustdbt.match_partners_from_ss_to_airtable": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "SEED", "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_SEED", "fqn": ["augustdbt", "match_partners_from_ss_to_airtable"], "unique_id": "seed.augustdbt.match_partners_from_ss_to_airtable", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "match_partners_from_ss_to_airtable.csv", "original_file_path": "data/match_partners_from_ss_to_airtable.csv", "name": "match_partners_from_ss_to_airtable", "alias": "match_partners_from_ss_to_airtable", "checksum": {"name": "sha256", "checksum": "61de756eb9221209d009597ae381f7da718461e4ba57699b7861b4e77a9797fb"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "SEED"}, "created_at": 1661422418.061003, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_SEED\".\"match_partners_from_ss_to_airtable\""}, "model.augustdbt.int_work_items_from_ss": {"raw_sql": "with unique_hash_duplicate_ezekia_id as (\n\nwith int_time_entries_start_date as (\n    select *\n    from {{ref('int_time_entries_partners')}}\n),\n\nremove_nulls_apply_values as (\n    select\n        company_project_hash,\n        min(ezekia_id)::text as ezekia_id,\n        max(type_of_job) as type_of_job,\n        max(subtype_of_job) as subtype_of_job,\n        min(company_id) as company_id,\n        max(project) as project,\n        max(company) as company,\n        max(description) as description,\n        max(practice_area) as practice_area,\n        max(lead_partner_airtable_id) as lead_partner,\n        max(collaborating_partner_1_airtable_id) as collaborating_partner_1,\n        max(collaborating_partner_2_airtable_id) as collaborating_partner_2,\n        max(collaborating_partner_3_airtable_id) as collaborating_partner_3,\n        max(company_hash) as company_hash\n    from int_time_entries_start_date\n    group by company_project_hash\n)\n\nselect\n    int_time_entries_start_date.company_project_hash,\n    min(int_time_entries_start_date.start_date_clean)::date as start_date,\n    min(date) as first_research_date,\n    max(date) as last_research_date,\n    remove_nulls_apply_values.ezekia_id::text as ezekia_id,\n    remove_nulls_apply_values.description,\n    remove_nulls_apply_values.type_of_job,\n    remove_nulls_apply_values.subtype_of_job,\n    remove_nulls_apply_values.company,\n    remove_nulls_apply_values.company_id,\n    remove_nulls_apply_values.project,\n    remove_nulls_apply_values.practice_area,\n    remove_nulls_apply_values.lead_partner,\n    remove_nulls_apply_values.collaborating_partner_1,\n    remove_nulls_apply_values.collaborating_partner_2,\n    remove_nulls_apply_values.collaborating_partner_3\nfrom int_time_entries_start_date\nleft join remove_nulls_apply_values on\n    int_time_entries_start_date.company_project_hash = remove_nulls_apply_values.company_project_hash\n    group by 1,5,6,7,8,9,10,11,12,13,14,15,16\n)\nselect\n    max (company_project_hash) company_project_hash,\n    min(start_date) start_date,\n    min(first_research_date) as first_research_date,\n    max(last_research_date) as last_research_date,\n    ezekia_id,\n    max(description) description,\n    max(type_of_job) type_of_job,\n    max(subtype_of_job) subtype_of_job,\n    max(company) company,\n    min(company_id) company_id,\n    max(project) project,\n    max(practice_area) practice_area,\n    max(lead_partner) lead_partner,\n    max(collaborating_partner_1) collaborating_partner_1,\n    max(collaborating_partner_2) collaborating_partner_2,\n    max(collaborating_partner_3) collaborating_partner_3\nfrom unique_hash_duplicate_ezekia_id\nwhere ezekia_id is not null\ngroup by ezekia_id\n\nunion all\n\n(with int_time_entries_start_date as (\n    select *\n    from {{ref('int_time_entries_partners')}}\n    where ezekia_id is  null\n),\n\nremove_nulls_apply_values as (\n    select\n        company_project_hash,\n        min(ezekia_id)::text as ezekia_id,\n        max(type_of_job) as type_of_job,\n        max(subtype_of_job) as subtype_of_job,\n        min(company_id) as company_id,\n        max(project) as project,\n        max(company) as company,\n        max(description) as description,\n        max(practice_area) as practice_area,\n        max(lead_partner_airtable_id) as lead_partner,\n        max(collaborating_partner_1_airtable_id) as collaborating_partner_1,\n        max(collaborating_partner_2_airtable_id) as collaborating_partner_2,\n        max(collaborating_partner_3_airtable_id) as collaborating_partner_3,\n        max(company_hash) as company_hash\n    from int_time_entries_start_date\n    group by company_project_hash\n)\n\nselect\n    int_time_entries_start_date.company_project_hash,\n    min(int_time_entries_start_date.start_date_clean) as start_date,\n    min(date) as first_research_date,\n    max(date) as last_research_date,\n    remove_nulls_apply_values.ezekia_id::text as ezekia_id,\n    remove_nulls_apply_values.description,\n    remove_nulls_apply_values.type_of_job,\n    remove_nulls_apply_values.subtype_of_job,\n    remove_nulls_apply_values.company,\n    remove_nulls_apply_values.company_id,\n    remove_nulls_apply_values.project,\n    remove_nulls_apply_values.practice_area,\n    remove_nulls_apply_values.lead_partner,\n    remove_nulls_apply_values.collaborating_partner_1,\n    remove_nulls_apply_values.collaborating_partner_2,\n    remove_nulls_apply_values.collaborating_partner_3\nfrom int_time_entries_start_date\nleft join remove_nulls_apply_values on\n    int_time_entries_start_date.company_project_hash = remove_nulls_apply_values.company_project_hash\n    \n    group by 1,5,6,7,8,9,10,11,12,13,14,15,16\n)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.int_time_entries_partners", "model.augustdbt.int_time_entries_partners"]}, "config": {"enabled": true, "alias": null, "schema": "INT", "database": null, "tags": ["int"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_INT", "fqn": ["augustdbt", "int", "int_work_items_from_ss"], "unique_id": "model.augustdbt.int_work_items_from_ss", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "int/int_work_items_from_ss.sql", "original_file_path": "models/int/int_work_items_from_ss.sql", "name": "int_work_items_from_ss", "alias": "int_work_items_from_ss", "checksum": {"name": "sha256", "checksum": "84a7ed431c60b6dfd0b0cbf03f952b834dc413b0df6bd918a500b71864c8113b"}, "tags": ["int"], "refs": [["int_time_entries_partners"], ["int_time_entries_partners"]], "sources": [], "metrics": [], "description": "", "columns": {"company_project_hash": {"name": "company_project_hash", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "first_research_date": {"name": "first_research_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "last_research_date": {"name": "last_research_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "ezekia_id": {"name": "ezekia_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "type_of_job": {"name": "type_of_job", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "subtype_of_job": {"name": "subtype_of_job", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "company": {"name": "company", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "company_id": {"name": "company_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "quote": null, "tags": []}, "project": {"name": "project", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "practice_area": {"name": "practice_area", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "lead_partner": {"name": "lead_partner", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "collaborating_partner_1": {"name": "collaborating_partner_1", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "collaborating_partner_2": {"name": "collaborating_partner_2", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "collaborating_partner_3": {"name": "collaborating_partner_3", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/int/int_work_items_from_ss.yml", "compiled_path": "target/compiled/augustdbt/models/int/int_work_items_from_ss.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "INT", "materialized": "view", "tags": "int"}, "created_at": 1661424035.6936479, "compiled_sql": "with unique_hash_duplicate_ezekia_id as (\n\nwith int_time_entries_start_date as (\n    select *\n    from \"warehouse_august\".\"august_INT\".\"int_time_entries_partners\"\n),\n\nremove_nulls_apply_values as (\n    select\n        company_project_hash,\n        min(ezekia_id)::text as ezekia_id,\n        max(type_of_job) as type_of_job,\n        max(subtype_of_job) as subtype_of_job,\n        min(company_id) as company_id,\n        max(project) as project,\n        max(company) as company,\n        max(description) as description,\n        max(practice_area) as practice_area,\n        max(lead_partner_airtable_id) as lead_partner,\n        max(collaborating_partner_1_airtable_id) as collaborating_partner_1,\n        max(collaborating_partner_2_airtable_id) as collaborating_partner_2,\n        max(collaborating_partner_3_airtable_id) as collaborating_partner_3,\n        max(company_hash) as company_hash\n    from int_time_entries_start_date\n    group by company_project_hash\n)\n\nselect\n    int_time_entries_start_date.company_project_hash,\n    min(int_time_entries_start_date.start_date_clean)::date as start_date,\n    min(date) as first_research_date,\n    max(date) as last_research_date,\n    remove_nulls_apply_values.ezekia_id::text as ezekia_id,\n    remove_nulls_apply_values.description,\n    remove_nulls_apply_values.type_of_job,\n    remove_nulls_apply_values.subtype_of_job,\n    remove_nulls_apply_values.company,\n    remove_nulls_apply_values.company_id,\n    remove_nulls_apply_values.project,\n    remove_nulls_apply_values.practice_area,\n    remove_nulls_apply_values.lead_partner,\n    remove_nulls_apply_values.collaborating_partner_1,\n    remove_nulls_apply_values.collaborating_partner_2,\n    remove_nulls_apply_values.collaborating_partner_3\nfrom int_time_entries_start_date\nleft join remove_nulls_apply_values on\n    int_time_entries_start_date.company_project_hash = remove_nulls_apply_values.company_project_hash\n    group by 1,5,6,7,8,9,10,11,12,13,14,15,16\n)\nselect\n    max (company_project_hash) company_project_hash,\n    min(start_date) start_date,\n    min(first_research_date) as first_research_date,\n    max(last_research_date) as last_research_date,\n    ezekia_id,\n    max(description) description,\n    max(type_of_job) type_of_job,\n    max(subtype_of_job) subtype_of_job,\n    max(company) company,\n    min(company_id) company_id,\n    max(project) project,\n    max(practice_area) practice_area,\n    max(lead_partner) lead_partner,\n    max(collaborating_partner_1) collaborating_partner_1,\n    max(collaborating_partner_2) collaborating_partner_2,\n    max(collaborating_partner_3) collaborating_partner_3\nfrom unique_hash_duplicate_ezekia_id\nwhere ezekia_id is not null\ngroup by ezekia_id\n\nunion all\n\n(with int_time_entries_start_date as (\n    select *\n    from \"warehouse_august\".\"august_INT\".\"int_time_entries_partners\"\n    where ezekia_id is  null\n),\n\nremove_nulls_apply_values as (\n    select\n        company_project_hash,\n        min(ezekia_id)::text as ezekia_id,\n        max(type_of_job) as type_of_job,\n        max(subtype_of_job) as subtype_of_job,\n        min(company_id) as company_id,\n        max(project) as project,\n        max(company) as company,\n        max(description) as description,\n        max(practice_area) as practice_area,\n        max(lead_partner_airtable_id) as lead_partner,\n        max(collaborating_partner_1_airtable_id) as collaborating_partner_1,\n        max(collaborating_partner_2_airtable_id) as collaborating_partner_2,\n        max(collaborating_partner_3_airtable_id) as collaborating_partner_3,\n        max(company_hash) as company_hash\n    from int_time_entries_start_date\n    group by company_project_hash\n)\n\nselect\n    int_time_entries_start_date.company_project_hash,\n    min(int_time_entries_start_date.start_date_clean) as start_date,\n    min(date) as first_research_date,\n    max(date) as last_research_date,\n    remove_nulls_apply_values.ezekia_id::text as ezekia_id,\n    remove_nulls_apply_values.description,\n    remove_nulls_apply_values.type_of_job,\n    remove_nulls_apply_values.subtype_of_job,\n    remove_nulls_apply_values.company,\n    remove_nulls_apply_values.company_id,\n    remove_nulls_apply_values.project,\n    remove_nulls_apply_values.practice_area,\n    remove_nulls_apply_values.lead_partner,\n    remove_nulls_apply_values.collaborating_partner_1,\n    remove_nulls_apply_values.collaborating_partner_2,\n    remove_nulls_apply_values.collaborating_partner_3\nfrom int_time_entries_start_date\nleft join remove_nulls_apply_values on\n    int_time_entries_start_date.company_project_hash = remove_nulls_apply_values.company_project_hash\n    \n    group by 1,5,6,7,8,9,10,11,12,13,14,15,16\n)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_INT\".\"int_work_items_from_ss\""}, "test.augustdbt.unique_int_work_items_from_ss_ezekia_id.bf86a55502": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ezekia_id", "model": "{{ get_where_subquery(ref('int_work_items_from_ss')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.augustdbt.int_work_items_from_ss"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "int", "unique_int_work_items_from_ss_ezekia_id"], "unique_id": "test.augustdbt.unique_int_work_items_from_ss_ezekia_id.bf86a55502", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "unique_int_work_items_from_ss_ezekia_id.sql", "original_file_path": "models/int/int_work_items_from_ss.yml", "name": "unique_int_work_items_from_ss_ezekia_id", "alias": "unique_int_work_items_from_ss_ezekia_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_work_items_from_ss"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/int/int_work_items_from_ss.yml/unique_int_work_items_from_ss_ezekia_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661424035.697896, "compiled_sql": "\n    \n    \n\nselect\n    ezekia_id as unique_field,\n    count(*) as n_records\n\nfrom \"warehouse_august\".\"august_INT\".\"int_work_items_from_ss\"\nwhere ezekia_id is not null\ngroup by ezekia_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ezekia_id", "file_key_name": "models.int_work_items_from_ss"}, "model.augustdbt.int_time_entries_partners": {"raw_sql": "-- combined harvest with spreadsheet history\n\nwith time_entries_from_spreadsheets as (\n    select *\n    from {{ref('int_time_entries_start_date')}}\n), partner_processing as (\n    select *\n    from {{ref('match_partners_from_ss_to_airtable')}}\n)\n\nselect\n    time_entries_from_spreadsheets.*,\n    date_trunc('month', date) as month,\n    partner_processing.lead_partner_clean as lead_partner_airtable_id,\n    partner_processing.collaborating_partner_1_clean as collaborating_partner_1_airtable_id,\n    partner_processing.collaborating_partner_2_clean as collaborating_partner_2_airtable_id,\n    partner_processing.collaborating_partner_3_clean as collaborating_partner_3_airtable_id\nfrom time_entries_from_spreadsheets\nleft join partner_processing on\n    time_entries_from_spreadsheets.partners_hash = partner_processing.partners_hash", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.int_time_entries_start_date", "seed.augustdbt.match_partners_from_ss_to_airtable"]}, "config": {"enabled": true, "alias": null, "schema": "INT", "database": null, "tags": ["int"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_INT", "fqn": ["augustdbt", "int", "int_time_entries_partners"], "unique_id": "model.augustdbt.int_time_entries_partners", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "int/int_time_entries_partners.sql", "original_file_path": "models/int/int_time_entries_partners.sql", "name": "int_time_entries_partners", "alias": "int_time_entries_partners", "checksum": {"name": "sha256", "checksum": "fc70ef98e113f892cd9e6e52c69e74e657a6460414132368e553d273d200fa4b"}, "tags": ["int"], "refs": [["int_time_entries_start_date"], ["match_partners_from_ss_to_airtable"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/int/int_time_entries_partners.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "INT", "materialized": "view", "tags": "int"}, "created_at": 1661425587.395176, "compiled_sql": "-- combined harvest with spreadsheet history\n\nwith time_entries_from_spreadsheets as (\n    select *\n    from \"warehouse_august\".\"august_INT\".\"int_time_entries_start_date\"\n), partner_processing as (\n    select *\n    from \"warehouse_august\".\"august_SEED\".\"match_partners_from_ss_to_airtable\"\n)\n\nselect\n    time_entries_from_spreadsheets.*,\n    date_trunc('month', date) as month,\n    partner_processing.lead_partner_clean as lead_partner_airtable_id,\n    partner_processing.collaborating_partner_1_clean as collaborating_partner_1_airtable_id,\n    partner_processing.collaborating_partner_2_clean as collaborating_partner_2_airtable_id,\n    partner_processing.collaborating_partner_3_clean as collaborating_partner_3_airtable_id\nfrom time_entries_from_spreadsheets\nleft join partner_processing on\n    time_entries_from_spreadsheets.partners_hash = partner_processing.partners_hash", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_INT\".\"int_time_entries_partners\""}, "model.augustdbt.int_time_entries_start_date": {"raw_sql": "-- combined harvest with spreadsheet history\n\nwith time_entries_from_spreadsheets as (\n    select *\n    from {{ref('time_entries_from_spreadsheets')}}\n), start_date_processing as (\n    select\n        hour_hash,\n        start_date,\n        case\n            when start_date = '\u00a012/22/2021' then '2021-12-22'::date\n            when start_date = '3/30/202' then '2022-03-30'::date\n            when start_date = '8/9/92021' then '2021-9-8'::date\n            when strpos(start_date, '-') > 0 then start_date::date\n            when\n                strpos(start_date::text, '/') > 0\n                and split_part(start_date, '/', 2)::integer <= 12\n                then to_timestamp(start_date, 'dd/mm/yyyy')::date\n            when\n                strpos(start_date::text, '/') > 0\n                and split_part(start_date, '/', 1)::integer <= 12\n                then to_timestamp(start_date, 'mm/dd/yyyy')::date\n            when\n                length(start_date::text) = 5\n                then ('1899-12-30'::date + start_date::integer * INTERVAL '1 day')::date\n            -- when\n            --     length(start_date::text) = 10\n            --     then to_timestamp(start_date, 'dd/mm/yyyy')::date\n        end as start_date_final\n    from time_entries_from_spreadsheets\n), start_date_processing2 as (\n    select *\n    from start_date_processing\n    where start_date_final is not null\n)\n\nselect\n    time_entries_from_spreadsheets.*,\n    start_date_processing2.start_date_final as start_date_clean\nfrom time_entries_from_spreadsheets\nleft join start_date_processing2\non time_entries_from_spreadsheets.hour_hash = start_date_processing2.hour_hash", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.augustdbt.time_entries_from_spreadsheets"]}, "config": {"enabled": true, "alias": null, "schema": "INT", "database": null, "tags": ["int"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_INT", "fqn": ["augustdbt", "int", "int_time_entries_start_date"], "unique_id": "model.augustdbt.int_time_entries_start_date", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "int/int_time_entries_start_date.sql", "original_file_path": "models/int/int_time_entries_start_date.sql", "name": "int_time_entries_start_date", "alias": "int_time_entries_start_date", "checksum": {"name": "sha256", "checksum": "f7aaed5d7642136a22190ec7b883bc50e581d902b1bbf54967e38f8923c1ff82"}, "tags": ["int"], "refs": [["time_entries_from_spreadsheets"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/int/int_time_entries_start_date.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "INT", "materialized": "view", "tags": "int"}, "created_at": 1661425587.40396, "compiled_sql": "-- combined harvest with spreadsheet history\n\nwith time_entries_from_spreadsheets as (\n    select *\n    from \"warehouse_august\".\"august_SEED\".\"time_entries_from_spreadsheets\"\n), start_date_processing as (\n    select\n        hour_hash,\n        start_date,\n        case\n            when start_date = '\u00a012/22/2021' then '2021-12-22'::date\n            when start_date = '3/30/202' then '2022-03-30'::date\n            when start_date = '8/9/92021' then '2021-9-8'::date\n            when strpos(start_date, '-') > 0 then start_date::date\n            when\n                strpos(start_date::text, '/') > 0\n                and split_part(start_date, '/', 2)::integer <= 12\n                then to_timestamp(start_date, 'dd/mm/yyyy')::date\n            when\n                strpos(start_date::text, '/') > 0\n                and split_part(start_date, '/', 1)::integer <= 12\n                then to_timestamp(start_date, 'mm/dd/yyyy')::date\n            when\n                length(start_date::text) = 5\n                then ('1899-12-30'::date + start_date::integer * INTERVAL '1 day')::date\n            -- when\n            --     length(start_date::text) = 10\n            --     then to_timestamp(start_date, 'dd/mm/yyyy')::date\n        end as start_date_final\n    from time_entries_from_spreadsheets\n), start_date_processing2 as (\n    select *\n    from start_date_processing\n    where start_date_final is not null\n)\n\nselect\n    time_entries_from_spreadsheets.*,\n    start_date_processing2.start_date_final as start_date_clean\nfrom time_entries_from_spreadsheets\nleft join start_date_processing2\non time_entries_from_spreadsheets.hour_hash = start_date_processing2.hour_hash", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_INT\".\"int_time_entries_start_date\""}, "model.augustdbt.dst_harvest_projects": {"raw_sql": "with projects as (\n  select ID,\n    name,\n    _AIRBYTE_EZEKIA_PROJECTS_HASHID\n  from {{ ref('stg_ezekia_projects') }}\n), relationships as (\n  select _AIRBYTE_RELATIONSHIPS_HASHID,\n    _AIRBYTE_EZEKIA_PROJECTS_HASHID\n  from {{ ref('stg_ezekia_projects_relationships') }}\n), companies as (\n  select name,\n    _AIRBYTE_RELATIONSHIPS_HASHID\n  from {{ ref('stg_ezekia_projects_relationships_company') }}\n), final as (\n  select ID,\n    projects.NAME,\n    companies.NAME as company_name\n  from projects\n  left join relationships on relationships._AIRBYTE_EZEKIA_PROJECTS_HASHID = projects._AIRBYTE_EZEKIA_PROJECTS_HASHID\n  left join companies on companies._AIRBYTE_RELATIONSHIPS_HASHID = relationships._AIRBYTE_RELATIONSHIPS_HASHID\n)\n\nselect *,\n  id as project_code,\n  trim(name) as project_name,\n  trim(company_name) as client_name\nfrom final\nwhere trim(company_name) is not null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.stg_ezekia_projects", "model.augustdbt.stg_ezekia_projects_relationships", "model.augustdbt.stg_ezekia_projects_relationships_company"]}, "config": {"enabled": true, "alias": null, "schema": "DESTINATIONS", "database": null, "tags": ["destinations"], "meta": {"destination": {"id": 2}, "connection": {"id": "77a82ede-3d10-48d8-a470-a3ff04a63e5b"}}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_DESTINATIONS", "fqn": ["augustdbt", "destinations", "harvest", "dst_harvest_projects"], "unique_id": "model.augustdbt.dst_harvest_projects", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "destinations/harvest/dst_harvest_projects.sql", "original_file_path": "models/destinations/harvest/dst_harvest_projects.sql", "name": "dst_harvest_projects", "alias": "dst_harvest_projects", "checksum": {"name": "sha256", "checksum": "843e8783d7cd196a8f2587764ea78cfd25a4c0cb9786e673e8ad8a9d0d3a5367"}, "tags": ["destinations"], "refs": [["stg_ezekia_projects"], ["stg_ezekia_projects_relationships"], ["stg_ezekia_projects_relationships_company"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {"destination": {"id": 2}, "connection": {"id": "77a82ede-3d10-48d8-a470-a3ff04a63e5b"}}, "docs": {"show": true}, "patch_path": "augustdbt://models/destinations/harvest/dst_harvest_projects.yml", "compiled_path": "target/compiled/augustdbt/models/destinations/harvest/dst_harvest_projects.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "DESTINATIONS", "materialized": "table", "tags": "destinations"}, "created_at": 1661429166.188214, "compiled_sql": "with projects as (\n  select ID,\n    name,\n    _AIRBYTE_EZEKIA_PROJECTS_HASHID\n  from \"warehouse_august\".\"august_STAGING\".\"stg_ezekia_projects\"\n), relationships as (\n  select _AIRBYTE_RELATIONSHIPS_HASHID,\n    _AIRBYTE_EZEKIA_PROJECTS_HASHID\n  from \"warehouse_august\".\"august_STAGING\".\"stg_ezekia_projects_relationships\"\n), companies as (\n  select name,\n    _AIRBYTE_RELATIONSHIPS_HASHID\n  from \"warehouse_august\".\"august_STAGING\".\"stg_ezekia_projects_relationships_company\"\n), final as (\n  select ID,\n    projects.NAME,\n    companies.NAME as company_name\n  from projects\n  left join relationships on relationships._AIRBYTE_EZEKIA_PROJECTS_HASHID = projects._AIRBYTE_EZEKIA_PROJECTS_HASHID\n  left join companies on companies._AIRBYTE_RELATIONSHIPS_HASHID = relationships._AIRBYTE_RELATIONSHIPS_HASHID\n)\n\nselect *,\n  id as project_code,\n  trim(name) as project_name,\n  trim(company_name) as client_name\nfrom final\nwhere trim(company_name) is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_DESTINATIONS\".\"dst_harvest_projects\""}, "model.augustdbt.dst_airtable_assignments": {"raw_sql": "select \n  COMPANY_PROJECT_HASH,\n  WORK_ITEM_AIRTABLE_ID,\n  EZEKIA_ID,\n  UNIQUE_ID,\n  BOOKING_DATE,\n  FIRST_RESEARCH_DATE,\n  LAST_RESEARCH_DATE,\n  ASSIGNMENT_TYPE_AIRTABLE,\n  TYPE_OF_JOB,\n  SUBTYPE_OF_JOB,\n  COMPANY_NAME as COMPANY,\n  COMPANY_EZEKIA_ID,\n  CLIENT_AIRTABLE_ID,\n  PROJECT_NAME as name,\n  PRACTICE_AREA,\n  COE,\n  ASSIGNMENT_LOCATION_COUNTRY,\n  ASSIGNMENT_LOCATION_REGION,\n  CLIENT_CONTACTS_ADDED,\n  SHORTLIST_SENT_DATE,\n  PITCH_STATUS,\n  PITCH_START_DATE,\n  PLACEMENT_DATE,\n  TOTAL_ASSIGNMENT_VALUE,\n  INITIAL_ASSIGNMENT_VALUE,\n  RESEARCH_HOURS,\n  REVENUE,\n  INVOICES,\n  LEAD_PARTNER,\n  EZEKIA_ID_EXISTS,\n  case ASSIGNMENT_LOCATION_REGION\n      when 'North America (NA)' then 'Americas'\n      when 'Asia Pacific (APAC)' then 'Asia Pacific'\n      when 'Europe (EU)' then 'Europe'\n      when 'Middle East North Africa (MENA)' then 'Middle East & Africa'\n      when 'South Asia' then 'Asia Pacific'\n      when 'Sub-Saharan Africa' then 'Middle East & Africa'\n      when 'Latin America (LATAM)' then 'Americas'\n  end as AIRTABLE_INPUT_REGION,\n  status,\n  concat(coalesce((PROJECT_NAME),''),coalesce(concat(' - ',COMPANY_NAME),' ')) as project_company_name\nfrom {{ref('assignments')}}\nwhere ezekia_id is not null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.assignments"]}, "config": {"enabled": true, "alias": null, "schema": "DESTINATIONS", "database": null, "tags": ["destinations"], "meta": {"destination": {"id": 3}, "connection": {"id": "455f54d6-5d17-4146-bf36-771cb27eac6c"}}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_DESTINATIONS", "fqn": ["augustdbt", "destinations", "airtable", "dst_airtable_assignments"], "unique_id": "model.augustdbt.dst_airtable_assignments", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "destinations/airtable/dst_airtable_assignments.sql", "original_file_path": "models/destinations/airtable/dst_airtable_assignments.sql", "name": "dst_airtable_assignments", "alias": "dst_airtable_assignments", "checksum": {"name": "sha256", "checksum": "07dbcf082cb8fd403e281bdde533ad426ac40e7d8d06c4f2ec965597b90c8e1a"}, "tags": ["destinations"], "refs": [["assignments"]], "sources": [], "metrics": [], "description": "", "columns": {"company_project_hash": {"name": "company_project_hash", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "work_item_airtable_id": {"name": "work_item_airtable_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "ezekia_id": {"name": "ezekia_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "unique_id": {"name": "unique_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "booking_date": {"name": "booking_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "first_research_date": {"name": "first_research_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "last_research_date": {"name": "last_research_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "assignment_type_airtable": {"name": "assignment_type_airtable", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "type_of_job": {"name": "type_of_job", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "subtype_of_job": {"name": "subtype_of_job", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "company": {"name": "company", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "company_ezekia_id": {"name": "company_ezekia_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "quote": null, "tags": []}, "client_airtable_id": {"name": "client_airtable_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "airtable_region": {"name": "airtable_region", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "airtable_status": {"name": "airtable_status", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "practice_area": {"name": "practice_area", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "coe": {"name": "coe", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "assignment_location_country": {"name": "assignment_location_country", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "assignment_location_region": {"name": "assignment_location_region", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "project_lead_consultant": {"name": "project_lead_consultant", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "client_contacts_added": {"name": "client_contacts_added", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "shortlist_sent_date": {"name": "shortlist_sent_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "pitch_status": {"name": "pitch_status", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "pitch_start_date": {"name": "pitch_start_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "placement_date": {"name": "placement_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "total_assignment_value": {"name": "total_assignment_value", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "initial_assignment_value": {"name": "initial_assignment_value", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "research_hours": {"name": "research_hours", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "quote": null, "tags": []}, "revenue": {"name": "revenue", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "quote": null, "tags": []}, "invoices": {"name": "invoices", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "quote": null, "tags": []}, "partner_name": {"name": "partner_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "partner_email": {"name": "partner_email", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "ezekia_id_exists": {"name": "ezekia_id_exists", "description": "", "meta": {"dimension": {"type": "boolean"}}, "data_type": null, "quote": null, "tags": []}}, "meta": {"destination": {"id": 3}, "connection": {"id": "455f54d6-5d17-4146-bf36-771cb27eac6c"}}, "docs": {"show": true}, "patch_path": "augustdbt://models/destinations/airtable/dst_airtable_assignments.yml", "compiled_path": "target/compiled/augustdbt/models/destinations/airtable/dst_airtable_assignments.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "DESTINATIONS", "materialized": "table", "tags": "destinations"}, "created_at": 1661429166.222697, "compiled_sql": "select \n  COMPANY_PROJECT_HASH,\n  WORK_ITEM_AIRTABLE_ID,\n  EZEKIA_ID,\n  UNIQUE_ID,\n  BOOKING_DATE,\n  FIRST_RESEARCH_DATE,\n  LAST_RESEARCH_DATE,\n  ASSIGNMENT_TYPE_AIRTABLE,\n  TYPE_OF_JOB,\n  SUBTYPE_OF_JOB,\n  COMPANY_NAME as COMPANY,\n  COMPANY_EZEKIA_ID,\n  CLIENT_AIRTABLE_ID,\n  PROJECT_NAME as name,\n  PRACTICE_AREA,\n  COE,\n  ASSIGNMENT_LOCATION_COUNTRY,\n  ASSIGNMENT_LOCATION_REGION,\n  CLIENT_CONTACTS_ADDED,\n  SHORTLIST_SENT_DATE,\n  PITCH_STATUS,\n  PITCH_START_DATE,\n  PLACEMENT_DATE,\n  TOTAL_ASSIGNMENT_VALUE,\n  INITIAL_ASSIGNMENT_VALUE,\n  RESEARCH_HOURS,\n  REVENUE,\n  INVOICES,\n  LEAD_PARTNER,\n  EZEKIA_ID_EXISTS,\n  case ASSIGNMENT_LOCATION_REGION\n      when 'North America (NA)' then 'Americas'\n      when 'Asia Pacific (APAC)' then 'Asia Pacific'\n      when 'Europe (EU)' then 'Europe'\n      when 'Middle East North Africa (MENA)' then 'Middle East & Africa'\n      when 'South Asia' then 'Asia Pacific'\n      when 'Sub-Saharan Africa' then 'Middle East & Africa'\n      when 'Latin America (LATAM)' then 'Americas'\n  end as AIRTABLE_INPUT_REGION,\n  status,\n  concat(coalesce((PROJECT_NAME),''),coalesce(concat(' - ',COMPANY_NAME),' ')) as project_company_name\nfrom \"warehouse_august\".\"august_FINAL\".\"assignments\"\nwhere ezekia_id is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_DESTINATIONS\".\"dst_airtable_assignments\""}, "model.augustdbt.dt_value_over_time": {"raw_sql": "with assignments as (\n  select\n    last_research_date as date,\n    sum(research_hours) as time,\n    sum(revenue) as money\n  from {{ref('assignments')}}\n  where first_research_date is not null\n    and research_hours is not null\n    and revenue is not null\n  group by date\n)\n\nselect\n  date,\n  time,\n  money,\n  money/time as value_per_hour\nfrom assignments", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.assignments"]}, "config": {"enabled": true, "alias": null, "schema": "DATA_TABLES", "database": null, "tags": ["dt"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_DATA_TABLES", "fqn": ["augustdbt", "data_tables", "dt_value_over_time"], "unique_id": "model.augustdbt.dt_value_over_time", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "data_tables/dt_value_over_time.sql", "original_file_path": "models/data_tables/dt_value_over_time.sql", "name": "dt_value_over_time", "alias": "dt_value_over_time", "checksum": {"name": "sha256", "checksum": "b7e1d663aaf7b8128fedbd4f67bbd548e754c4c5eea5281b8b3e631724112865"}, "tags": ["dt"], "refs": [["assignments"]], "sources": [], "metrics": [], "description": "", "columns": {"date": {"name": "date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "time": {"name": "time", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "quote": null, "tags": []}, "money": {"name": "money", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "quote": null, "tags": []}, "value_per_hour": {"name": "value_per_hour", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/data_tables/dt_value_over_time.yml", "compiled_path": "target/compiled/augustdbt/models/data_tables/dt_value_over_time.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "DATA_TABLES", "materialized": "table", "tags": "dt"}, "created_at": 1661429166.225434, "compiled_sql": "with assignments as (\n  select\n    last_research_date as date,\n    sum(research_hours) as time,\n    sum(revenue) as money\n  from \"warehouse_august\".\"august_FINAL\".\"assignments\"\n  where first_research_date is not null\n    and research_hours is not null\n    and revenue is not null\n  group by date\n)\n\nselect\n  date,\n  time,\n  money,\n  money/time as value_per_hour\nfrom assignments", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_DATA_TABLES\".\"dt_value_over_time\""}, "model.augustdbt.assignments": {"raw_sql": "with research_hours_grouped as (\n    select company_project_hash,\n    sum(hours) as research_hours\n    from {{ref('int_time_entries_partners')}} \n    group by company_project_hash\n),\ninvoices_grouped as (\n    select EZEKIA_ID,\n    sum(payment) as revenue,\n    sum(invoice_value) as invoices\n    from {{ref('invoices_quickbooks')}}\n    group by EZEKIA_ID\n),\npartners_grouped as (\n    select ID,name,email from {{ref('int_partners')}}\n),\nwork_items_consolidated as (\n    select * from {{ref('int_work_items_consolidated')}}\n)\nselect\n    COMPANY as company_name, \n    work_items_consolidated.NAME as project_name, \n    concat(coalesce(concat(COMPANY,' - '),''),coalesce(work_items_consolidated.name,' ')) as company_project_name,\n    TYPE_OF_JOB, \n    SUBTYPE_OF_JOB, \n    partners_grouped.name as lead_partner,\n    COE, \n    PRACTICE_AREA, \n    work_items_consolidated.EZEKIA_ID, \n    status,\n    BOOKING_DATE, \n    TOTAL_ASSIGNMENT_VALUE, \n    INITIAL_ASSIGNMENT_VALUE,\n    ASSIGNMENT_LOCATION_REGION, \n    ASSIGNMENT_LOCATION_COUNTRY, \n    CLIENT_CONTACTS_ADDED, \n    SHORTLIST_SENT_DATE, \n    PITCH_STATUS, \n    PITCH_START_DATE, \n    PLACEMENT_DATE,\n    FIRST_RESEARCH_DATE, \n    LAST_RESEARCH_DATE, \n    ASSIGNMENT_TYPE_AIRTABLE,\n    research_hours_grouped.research_hours,\n    invoices_grouped.revenue,   \n    invoices_grouped.invoices,\n    case when work_items_consolidated.ezekia_id is not null then true else false end as ezekia_id_exists,\n    work_items_consolidated.COMPANY_PROJECT_HASH,\n    WORK_ITEM_AIRTABLE_ID, \n    COMPANY_EZEKIA_ID, \n    CLIENT_AIRTABLE_ID, \n    UNIQUE_ID\nfrom work_items_consolidated\nleft join research_hours_grouped\n    on work_items_consolidated.COMPANY_PROJECT_HASH\n    = research_hours_grouped.COMPANY_PROJECT_HASH\nleft join invoices_grouped\n    on work_items_consolidated.ezekia_id\n    = invoices_grouped.EZEKIA_ID\nleft join partners_grouped\n    on work_items_consolidated.LEAD_PARTNER_AIRTABLE_ID\n    = partners_grouped.ID", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.int_time_entries_partners", "model.augustdbt.invoices_quickbooks", "model.augustdbt.int_partners", "model.augustdbt.int_work_items_consolidated"]}, "config": {"enabled": true, "alias": null, "schema": "FINAL", "database": null, "tags": ["final"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_FINAL", "fqn": ["augustdbt", "final", "assignments"], "unique_id": "model.augustdbt.assignments", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "final/assignments.sql", "original_file_path": "models/final/assignments.sql", "name": "assignments", "alias": "assignments", "checksum": {"name": "sha256", "checksum": "97c67eeefc642261f7cbe6cc3f6d54aeef46178a2ca8a85e6a6d7e5269203da0"}, "tags": ["final"], "refs": [["int_time_entries_partners"], ["invoices_quickbooks"], ["int_partners"], ["int_work_items_consolidated"]], "sources": [], "metrics": [], "description": "", "columns": {"company_name": {"name": "company_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "company_project_name": {"name": "company_project_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "type_of_job": {"name": "type_of_job", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "subtype_of_job": {"name": "subtype_of_job", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "lead_partner": {"name": "lead_partner", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "coe": {"name": "coe", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "practice_area": {"name": "practice_area", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "ezekia_id": {"name": "ezekia_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "booking_date": {"name": "booking_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "total_assignment_value": {"name": "total_assignment_value", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "initial_assignment_value": {"name": "initial_assignment_value", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "assignment_location_region": {"name": "assignment_location_region", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "assignment_location_country": {"name": "assignment_location_country", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "client_contacts_added": {"name": "client_contacts_added", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "shortlist_sent_date": {"name": "shortlist_sent_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "pitch_status": {"name": "pitch_status", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "pitch_start_date": {"name": "pitch_start_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "placement_date": {"name": "placement_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "first_research_date": {"name": "first_research_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "last_research_date": {"name": "last_research_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "assignment_type_airtable": {"name": "assignment_type_airtable", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "research_hours": {"name": "research_hours", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "quote": null, "tags": []}, "revenue": {"name": "revenue", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "quote": null, "tags": []}, "invoices": {"name": "invoices", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "quote": null, "tags": []}, "ezekia_id_exists": {"name": "ezekia_id_exists", "description": "", "meta": {"dimension": {"type": "boolean"}}, "data_type": null, "quote": null, "tags": []}, "company_project_hash": {"name": "company_project_hash", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "work_item_airtable_id": {"name": "work_item_airtable_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "company_ezekia_id": {"name": "company_ezekia_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "quote": null, "tags": []}, "client_airtable_id": {"name": "client_airtable_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "unique_id": {"name": "unique_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/final/assignments.yml", "compiled_path": "target/compiled/augustdbt/models/final/assignments.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "FINAL", "materialized": "table", "tags": "final"}, "created_at": 1661429166.210686, "compiled_sql": "with research_hours_grouped as (\n    select company_project_hash,\n    sum(hours) as research_hours\n    from \"warehouse_august\".\"august_INT\".\"int_time_entries_partners\" \n    group by company_project_hash\n),\ninvoices_grouped as (\n    select EZEKIA_ID,\n    sum(payment) as revenue,\n    sum(invoice_value) as invoices\n    from \"warehouse_august\".\"august_FINAL\".\"invoices_quickbooks\"\n    group by EZEKIA_ID\n),\npartners_grouped as (\n    select ID,name,email from \"warehouse_august\".\"august_INT\".\"int_partners\"\n),\nwork_items_consolidated as (\n    select * from \"warehouse_august\".\"august_INT\".\"int_work_items_consolidated\"\n)\nselect\n    COMPANY as company_name, \n    work_items_consolidated.NAME as project_name, \n    concat(coalesce(concat(COMPANY,' - '),''),coalesce(work_items_consolidated.name,' ')) as company_project_name,\n    TYPE_OF_JOB, \n    SUBTYPE_OF_JOB, \n    partners_grouped.name as lead_partner,\n    COE, \n    PRACTICE_AREA, \n    work_items_consolidated.EZEKIA_ID, \n    status,\n    BOOKING_DATE, \n    TOTAL_ASSIGNMENT_VALUE, \n    INITIAL_ASSIGNMENT_VALUE,\n    ASSIGNMENT_LOCATION_REGION, \n    ASSIGNMENT_LOCATION_COUNTRY, \n    CLIENT_CONTACTS_ADDED, \n    SHORTLIST_SENT_DATE, \n    PITCH_STATUS, \n    PITCH_START_DATE, \n    PLACEMENT_DATE,\n    FIRST_RESEARCH_DATE, \n    LAST_RESEARCH_DATE, \n    ASSIGNMENT_TYPE_AIRTABLE,\n    research_hours_grouped.research_hours,\n    invoices_grouped.revenue,   \n    invoices_grouped.invoices,\n    case when work_items_consolidated.ezekia_id is not null then true else false end as ezekia_id_exists,\n    work_items_consolidated.COMPANY_PROJECT_HASH,\n    WORK_ITEM_AIRTABLE_ID, \n    COMPANY_EZEKIA_ID, \n    CLIENT_AIRTABLE_ID, \n    UNIQUE_ID\nfrom work_items_consolidated\nleft join research_hours_grouped\n    on work_items_consolidated.COMPANY_PROJECT_HASH\n    = research_hours_grouped.COMPANY_PROJECT_HASH\nleft join invoices_grouped\n    on work_items_consolidated.ezekia_id\n    = invoices_grouped.EZEKIA_ID\nleft join partners_grouped\n    on work_items_consolidated.LEAD_PARTNER_AIRTABLE_ID\n    = partners_grouped.ID", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_FINAL\".\"assignments\""}, "model.augustdbt.work_logs": {"raw_sql": "--this is all just historic at the moment, it needs harvest hours too\n\nwith partners as (\n    select * from {{ref('int_partners')}}\n),\nresearchers as (\n    select * from {{ref('int_researchers')}}\n),\nprojects as (\n    select * from {{ref('int_work_items_consolidated')}}\n),\ntime_entries as (\n    select * from {{ref('int_time_entries_partners')}}\n)\nselect\n    date,\n    projects.COMPANY as company_name,\n    projects.name as project_name,\n    concat(coalesce(projects.COMPANY,' '),' - ',coalesce(projects.name,' ')) as company_project_name,\n    time_entries.type_of_job,\n    time_entries.subtype_of_job,\n    partners.name as lead_partner,\n    researchers.name as researcher,\n    hours,\n    month,\n    coe,\n    time_entries.practice_area,\n    time_entries.ezekia_id,\n    projects.TOTAL_ASSIGNMENT_VALUE,\n    projects.INITIAL_ASSIGNMENT_VALUE,\n    projects.ASSIGNMENT_LOCATION_REGION, \n    projects.ASSIGNMENT_LOCATION_COUNTRY, \n    projects.CLIENT_CONTACTS_ADDED, \n    projects.SHORTLIST_SENT_DATE, \n    projects.PITCH_STATUS, \n    projects.PITCH_START_DATE, \n    projects.PLACEMENT_DATE,\n    projects.FIRST_RESEARCH_DATE, \n    projects.LAST_RESEARCH_DATE, \n    time_entries.company_project_hash,\n    start_date,\n    status\nfrom time_entries\nleft join projects on  \ntime_entries.company_project_hash=projects.company_project_hash\nleft join researchers on  \ntime_entries.RESEARCHER_AIRTABLE_ID=researchers._airtable_id\nleft join partners on  \ntime_entries.lead_partner_airtable_id=partners.ID", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.int_partners", "model.augustdbt.int_researchers", "model.augustdbt.int_work_items_consolidated", "model.augustdbt.int_time_entries_partners"]}, "config": {"enabled": true, "alias": null, "schema": "FINAL", "database": null, "tags": ["final"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_FINAL", "fqn": ["augustdbt", "final", "work_logs"], "unique_id": "model.augustdbt.work_logs", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "final/work_logs.sql", "original_file_path": "models/final/work_logs.sql", "name": "work_logs", "alias": "work_logs", "checksum": {"name": "sha256", "checksum": "46be34b24de1444be68d205bebb6d550fb7c5c57d7b057112e906154847aaf26"}, "tags": ["final"], "refs": [["int_partners"], ["int_researchers"], ["int_work_items_consolidated"], ["int_time_entries_partners"]], "sources": [], "metrics": [], "description": "", "columns": {"date": {"name": "date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "company_project_name": {"name": "company_project_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "type_of_job": {"name": "type_of_job", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "subtype_of_job": {"name": "subtype_of_job", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "lead_partner": {"name": "lead_partner", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "researcher": {"name": "researcher", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "hours": {"name": "hours", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "coe": {"name": "coe", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "practice_area": {"name": "practice_area", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "ezekia_id": {"name": "ezekia_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "quote": null, "tags": []}, "total_assignment_value": {"name": "total_assignment_value", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "initial_assignment_value": {"name": "initial_assignment_value", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "assignment_location_region": {"name": "assignment_location_region", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "assignment_location_country": {"name": "assignment_location_country", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "client_contacts_added": {"name": "client_contacts_added", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "shortlist_sent_date": {"name": "shortlist_sent_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "pitch_status": {"name": "pitch_status", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "pitch_start_date": {"name": "pitch_start_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "placement_date": {"name": "placement_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "first_research_date": {"name": "first_research_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "last_research_date": {"name": "last_research_date", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": null, "quote": null, "tags": []}, "company_project_hash": {"name": "company_project_hash", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/final/work_logs.yml", "compiled_path": "target/compiled/augustdbt/models/final/work_logs.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "FINAL", "materialized": "table", "tags": "final"}, "created_at": 1661429166.232917, "compiled_sql": "--this is all just historic at the moment, it needs harvest hours too\n\nwith partners as (\n    select * from \"warehouse_august\".\"august_INT\".\"int_partners\"\n),\nresearchers as (\n    select * from \"warehouse_august\".\"august_INT\".\"int_researchers\"\n),\nprojects as (\n    select * from \"warehouse_august\".\"august_INT\".\"int_work_items_consolidated\"\n),\ntime_entries as (\n    select * from \"warehouse_august\".\"august_INT\".\"int_time_entries_partners\"\n)\nselect\n    date,\n    projects.COMPANY as company_name,\n    projects.name as project_name,\n    concat(coalesce(projects.COMPANY,' '),' - ',coalesce(projects.name,' ')) as company_project_name,\n    time_entries.type_of_job,\n    time_entries.subtype_of_job,\n    partners.name as lead_partner,\n    researchers.name as researcher,\n    hours,\n    month,\n    coe,\n    time_entries.practice_area,\n    time_entries.ezekia_id,\n    projects.TOTAL_ASSIGNMENT_VALUE,\n    projects.INITIAL_ASSIGNMENT_VALUE,\n    projects.ASSIGNMENT_LOCATION_REGION, \n    projects.ASSIGNMENT_LOCATION_COUNTRY, \n    projects.CLIENT_CONTACTS_ADDED, \n    projects.SHORTLIST_SENT_DATE, \n    projects.PITCH_STATUS, \n    projects.PITCH_START_DATE, \n    projects.PLACEMENT_DATE,\n    projects.FIRST_RESEARCH_DATE, \n    projects.LAST_RESEARCH_DATE, \n    time_entries.company_project_hash,\n    start_date,\n    status\nfrom time_entries\nleft join projects on  \ntime_entries.company_project_hash=projects.company_project_hash\nleft join researchers on  \ntime_entries.RESEARCHER_AIRTABLE_ID=researchers._airtable_id\nleft join partners on  \ntime_entries.lead_partner_airtable_id=partners.ID", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_FINAL\".\"work_logs\""}, "model.augustdbt.int_work_items_consolidated": {"raw_sql": "--this should coalesce in from spreadsheets, ezekia, airtable, harvesta\n\nwith work_items_from_ss as (\n    select * from {{ref('int_work_items_from_ss')}}\n), work_items_from_airtable as (\n    select * from {{ref('int_work_items_from_airtable')}}\n), projects_from_ezekia as (\n    select * from {{ref('int_projects_from_ezekia')}}\n), ss_and_airtable as (\n    select\n        work_items_from_ss.COMPANY_PROJECT_HASH,\n        work_items_from_airtable.work_item_airtable_id,\n        coalesce(work_items_from_ss.EZEKIA_ID::text, work_items_from_airtable.EZEKIA_ID::text)::text as ezekia_id_,\n        coalesce(\n            work_items_from_airtable.booking_date,\n            work_items_from_ss.START_DATE\n        )::date as booking_date,\n        work_items_from_ss.FIRST_RESEARCH_DATE,\n        work_items_from_ss.LAST_RESEARCH_DATE,\n        work_items_from_airtable.assignment_type as assignment_type_airtable,\n        work_items_from_ss.TYPE_OF_JOB,\n        work_items_from_ss.SUBTYPE_OF_JOB,\n        coalesce(work_items_from_ss.COMPANY,work_items_from_airtable.company_name) as company,\n        work_items_from_ss.COMPANY_ID as company_ezekia_id,\n        work_items_from_airtable.client_airtable_id,\n        work_items_from_airtable.region as airtable_region,\n        work_items_from_airtable.status as airtable_status,\n        coalesce(\n            work_items_from_airtable.name,\n            work_items_from_ss.project\n        ) as name,\n        work_items_from_ss.PRACTICE_AREA,\n        coalesce(\n            work_items_from_airtable.lead_partner_airtable_id,\n            work_items_from_ss.LEAD_PARTNER\n        ) as lead_partner_airtable_id,\n        work_items_from_ss.COLLABORATING_PARTNER_1,\n        work_items_from_ss.COLLABORATING_PARTNER_2,\n        work_items_from_ss.COLLABORATING_PARTNER_3,\n        work_items_from_airtable.total_assignment_value,\n        work_items_from_airtable.initial_assignment_value\n    from\n        work_items_from_ss full\n        outer join work_items_from_airtable on work_items_from_ss.ezekia_id = work_items_from_airtable.ezekia_id\n), ss_and_airtable2 as (\n    select *,\n        concat(coalesce(COMPANY_PROJECT_HASH::text,'_'),'_',coalesce(work_item_airtable_id::text,'_'),'_',coalesce(ezekia_id_::text,'_'))::text as unique_id\n    from ss_and_airtable\n)\n\nselect\n    ss_and_airtable2.COMPANY_PROJECT_HASH,\n    ss_and_airtable2.work_item_airtable_id,\n    coalesce(ss_and_airtable2.EZEKIA_ID_::text, projects_from_ezekia.ezekia_id::text)::text as ezekia_id,\n    concat(coalesce(COMPANY_PROJECT_HASH::text,'_'),'_',coalesce(ss_and_airtable2.work_item_airtable_id::text,'_'),'_',coalesce(ezekia_id::text,'_'))::text as unique_id,\n    ss_and_airtable2.booking_date,\n    ss_and_airtable2.FIRST_RESEARCH_DATE,\n    ss_and_airtable2.LAST_RESEARCH_DATE,\n    ss_and_airtable2.assignment_type_airtable,\n    ss_and_airtable2.TYPE_OF_JOB,\n    ss_and_airtable2.SUBTYPE_OF_JOB,\n    coalesce(\n        projects_from_ezekia.company_name,\n        ss_and_airtable2.COMPANY\n    ) as company,\n    coalesce(\n        projects_from_ezekia.company_id,\n        ss_and_airtable2.company_ezekia_id\n    ) as company_ezekia_id,\n    ss_and_airtable2.client_airtable_id,\n    ss_and_airtable2.airtable_region,\n    ss_and_airtable2.airtable_status,\n    coalesce(\n        projects_from_ezekia.name,\n        ss_and_airtable2.name\n    ) as name,\n    coalesce(\n        projects_from_ezekia.practice_area,\n        ss_and_airtable2.PRACTICE_AREA\n    ) as practice_area,\n    lead_partner_airtable_id,\n    ss_and_airtable2.COLLABORATING_PARTNER_1,\n    ss_and_airtable2.COLLABORATING_PARTNER_2,\n    ss_and_airtable2.COLLABORATING_PARTNER_3,\n    projects_from_ezekia.coe,\n    projects_from_ezekia.assignment_location_country,\n    projects_from_ezekia.assignment_location_region,\n    projects_from_ezekia.project_lead_consultant,\n    projects_from_ezekia.client_contacts_added,\n    projects_from_ezekia.shortlist_sent_date,\n    projects_from_ezekia.pitch_status,\n    projects_from_ezekia.pitch_start_date,\n    projects_from_ezekia.placement_date,\n    projects_from_ezekia.status,\n    ss_and_airtable2.total_assignment_value,\n    ss_and_airtable2.initial_assignment_value\nfrom ss_and_airtable2 full\nouter join projects_from_ezekia on ss_and_airtable2.ezekia_id_ = projects_from_ezekia.ezekia_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.int_work_items_from_ss", "model.augustdbt.int_work_items_from_airtable", "model.augustdbt.int_projects_from_ezekia"]}, "config": {"enabled": true, "alias": null, "schema": "INT", "database": null, "tags": ["int"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_INT", "fqn": ["augustdbt", "int", "int_work_items_consolidated"], "unique_id": "model.augustdbt.int_work_items_consolidated", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "int/int_work_items_consolidated.sql", "original_file_path": "models/int/int_work_items_consolidated.sql", "name": "int_work_items_consolidated", "alias": "int_work_items_consolidated", "checksum": {"name": "sha256", "checksum": "7a0c977e6dc5331413e7554c608235c30fc4bce13178638b4eeb501c612bf33c"}, "tags": ["int"], "refs": [["int_work_items_from_ss"], ["int_work_items_from_airtable"], ["int_projects_from_ezekia"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/int/int_work_items_consolidated.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "INT", "materialized": "view", "tags": "int"}, "created_at": 1661429166.127103, "compiled_sql": "--this should coalesce in from spreadsheets, ezekia, airtable, harvesta\n\nwith work_items_from_ss as (\n    select * from \"warehouse_august\".\"august_INT\".\"int_work_items_from_ss\"\n), work_items_from_airtable as (\n    select * from \"warehouse_august\".\"august_INT\".\"int_work_items_from_airtable\"\n), projects_from_ezekia as (\n    select * from \"warehouse_august\".\"august_INT\".\"int_projects_from_ezekia\"\n), ss_and_airtable as (\n    select\n        work_items_from_ss.COMPANY_PROJECT_HASH,\n        work_items_from_airtable.work_item_airtable_id,\n        coalesce(work_items_from_ss.EZEKIA_ID::text, work_items_from_airtable.EZEKIA_ID::text)::text as ezekia_id_,\n        coalesce(\n            work_items_from_airtable.booking_date,\n            work_items_from_ss.START_DATE\n        )::date as booking_date,\n        work_items_from_ss.FIRST_RESEARCH_DATE,\n        work_items_from_ss.LAST_RESEARCH_DATE,\n        work_items_from_airtable.assignment_type as assignment_type_airtable,\n        work_items_from_ss.TYPE_OF_JOB,\n        work_items_from_ss.SUBTYPE_OF_JOB,\n        coalesce(work_items_from_ss.COMPANY,work_items_from_airtable.company_name) as company,\n        work_items_from_ss.COMPANY_ID as company_ezekia_id,\n        work_items_from_airtable.client_airtable_id,\n        work_items_from_airtable.region as airtable_region,\n        work_items_from_airtable.status as airtable_status,\n        coalesce(\n            work_items_from_airtable.name,\n            work_items_from_ss.project\n        ) as name,\n        work_items_from_ss.PRACTICE_AREA,\n        coalesce(\n            work_items_from_airtable.lead_partner_airtable_id,\n            work_items_from_ss.LEAD_PARTNER\n        ) as lead_partner_airtable_id,\n        work_items_from_ss.COLLABORATING_PARTNER_1,\n        work_items_from_ss.COLLABORATING_PARTNER_2,\n        work_items_from_ss.COLLABORATING_PARTNER_3,\n        work_items_from_airtable.total_assignment_value,\n        work_items_from_airtable.initial_assignment_value\n    from\n        work_items_from_ss full\n        outer join work_items_from_airtable on work_items_from_ss.ezekia_id = work_items_from_airtable.ezekia_id\n), ss_and_airtable2 as (\n    select *,\n        concat(coalesce(COMPANY_PROJECT_HASH::text,'_'),'_',coalesce(work_item_airtable_id::text,'_'),'_',coalesce(ezekia_id_::text,'_'))::text as unique_id\n    from ss_and_airtable\n)\n\nselect\n    ss_and_airtable2.COMPANY_PROJECT_HASH,\n    ss_and_airtable2.work_item_airtable_id,\n    coalesce(ss_and_airtable2.EZEKIA_ID_::text, projects_from_ezekia.ezekia_id::text)::text as ezekia_id,\n    concat(coalesce(COMPANY_PROJECT_HASH::text,'_'),'_',coalesce(ss_and_airtable2.work_item_airtable_id::text,'_'),'_',coalesce(ezekia_id::text,'_'))::text as unique_id,\n    ss_and_airtable2.booking_date,\n    ss_and_airtable2.FIRST_RESEARCH_DATE,\n    ss_and_airtable2.LAST_RESEARCH_DATE,\n    ss_and_airtable2.assignment_type_airtable,\n    ss_and_airtable2.TYPE_OF_JOB,\n    ss_and_airtable2.SUBTYPE_OF_JOB,\n    coalesce(\n        projects_from_ezekia.company_name,\n        ss_and_airtable2.COMPANY\n    ) as company,\n    coalesce(\n        projects_from_ezekia.company_id,\n        ss_and_airtable2.company_ezekia_id\n    ) as company_ezekia_id,\n    ss_and_airtable2.client_airtable_id,\n    ss_and_airtable2.airtable_region,\n    ss_and_airtable2.airtable_status,\n    coalesce(\n        projects_from_ezekia.name,\n        ss_and_airtable2.name\n    ) as name,\n    coalesce(\n        projects_from_ezekia.practice_area,\n        ss_and_airtable2.PRACTICE_AREA\n    ) as practice_area,\n    lead_partner_airtable_id,\n    ss_and_airtable2.COLLABORATING_PARTNER_1,\n    ss_and_airtable2.COLLABORATING_PARTNER_2,\n    ss_and_airtable2.COLLABORATING_PARTNER_3,\n    projects_from_ezekia.coe,\n    projects_from_ezekia.assignment_location_country,\n    projects_from_ezekia.assignment_location_region,\n    projects_from_ezekia.project_lead_consultant,\n    projects_from_ezekia.client_contacts_added,\n    projects_from_ezekia.shortlist_sent_date,\n    projects_from_ezekia.pitch_status,\n    projects_from_ezekia.pitch_start_date,\n    projects_from_ezekia.placement_date,\n    projects_from_ezekia.status,\n    ss_and_airtable2.total_assignment_value,\n    ss_and_airtable2.initial_assignment_value\nfrom ss_and_airtable2 full\nouter join projects_from_ezekia on ss_and_airtable2.ezekia_id_ = projects_from_ezekia.ezekia_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_INT\".\"int_work_items_consolidated\""}, "model.augustdbt.companies": {"raw_sql": "with partners as (\n    select * from {{ref('int_partners')}}\n),\ncompanies as (\n    select * from {{ref('int_companies')}}\n)\nselect\n    companies.name,\n    ezekia_company_id,\n    company_hash,\n    airtable_company_id,\n    partner_owner_airtable_id,\n    unique_company_id,\n    partners.name as partner_owner\nfrom companies\nleft join partners on \ncompanies.partner_owner_airtable_id=partners.id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.int_partners", "model.augustdbt.int_companies"]}, "config": {"enabled": true, "alias": null, "schema": "FINAL", "database": null, "tags": ["final"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_FINAL", "fqn": ["augustdbt", "final", "companies"], "unique_id": "model.augustdbt.companies", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "final/companies.sql", "original_file_path": "models/final/companies.sql", "name": "companies", "alias": "companies", "checksum": {"name": "sha256", "checksum": "40bffe0134d68b37eb7446f625fcc3a27655460c3034be91532bf67853f356e7"}, "tags": ["final"], "refs": [["int_partners"], ["int_companies"]], "sources": [], "metrics": [], "description": "A table of all companies who are clients at August.", "columns": {"name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ezekia_company_id": {"name": "ezekia_company_id", "description": "", "meta": {"dimension": {"label": "Company ID from Ezekia"}}, "data_type": null, "quote": null, "tags": []}, "company_hash": {"name": "company_hash", "description": "", "meta": {"dimension": {"hidden": true}}, "data_type": null, "quote": null, "tags": []}, "airtable_company_id": {"name": "airtable_company_id", "description": "", "meta": {"dimension": {"label": "Company ID from Airtable"}}, "data_type": null, "quote": null, "tags": []}, "partner_owner_airtable_id": {"name": "partner_owner_airtable_id", "description": "", "meta": {"dimension": {"hidden": true}}, "data_type": null, "quote": null, "tags": []}, "unique_company_id": {"name": "unique_company_id", "description": "", "meta": {"dimension": {"hidden": true}, "metrics": {"total_companies": {"label": "Total Companies", "type": "count_distinct"}}}, "data_type": null, "quote": null, "tags": []}, "partner_owner": {"name": "partner_owner", "description": "", "meta": {"dimension": {"label": "Partner Owner from Ezekia"}}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/final/companies.yml", "compiled_path": "target/compiled/augustdbt/models/final/companies.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "FINAL", "materialized": "table", "tags": "final"}, "created_at": 1661429166.2501829, "compiled_sql": "with partners as (\n    select * from \"warehouse_august\".\"august_INT\".\"int_partners\"\n),\ncompanies as (\n    select * from \"warehouse_august\".\"august_INT\".\"int_companies\"\n)\nselect\n    companies.name,\n    ezekia_company_id,\n    company_hash,\n    airtable_company_id,\n    partner_owner_airtable_id,\n    unique_company_id,\n    partners.name as partner_owner\nfrom companies\nleft join partners on \ncompanies.partner_owner_airtable_id=partners.id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_FINAL\".\"companies\""}, "model.augustdbt.stg_ezekia_project_custom_fields_field": {"raw_sql": "select\n    id,\n    count,\n    label,\n    \"order\",\n    hashid,\n    labeldata\n    labeltype,\n    sectionname,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _airbyte_ezekia_proj___custom_fields_hashid\nfrom\n    {{ source('ezekia', 'ezekia_project_custom_fields_field') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.ezekia.ezekia_project_custom_fields_field"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "ezekia", "stg_ezekia_project_custom_fields_field"], "unique_id": "model.augustdbt.stg_ezekia_project_custom_fields_field", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/ezekia/stg_ezekia_project_custom_fields_field.sql", "original_file_path": "models/staging/ezekia/stg_ezekia_project_custom_fields_field.sql", "name": "stg_ezekia_project_custom_fields_field", "alias": "stg_ezekia_project_custom_fields_field", "checksum": {"name": "sha256", "checksum": "1532377489784b42d30240fd1db273f10b236619d434b99b2d81818ae13e2801"}, "tags": ["staging"], "refs": [], "sources": [["ezekia", "ezekia_project_custom_fields_field"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/staging/ezekia/stg_ezekia_project_custom_fields_field.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429166.1458938, "compiled_sql": "select\n    id,\n    count,\n    label,\n    \"order\",\n    hashid,\n    labeldata\n    labeltype,\n    sectionname,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _airbyte_ezekia_proj___custom_fields_hashid\nfrom\n    \"warehouse_august\".\"august_airbyte\".\"ezekia_project_custom_fields_field\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_ezekia_project_custom_fields_field\""}, "model.augustdbt.stg_ezekia_project_custom_fields": {"raw_sql": "select\n    id,\n    field,\n    value,\n    project_id,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _airbyte_ezekia_proj___custom_fields_hashid\nfrom {{ source('ezekia', 'ezekia_project_custom_fields') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.ezekia.ezekia_project_custom_fields"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "ezekia", "stg_ezekia_project_custom_fields"], "unique_id": "model.augustdbt.stg_ezekia_project_custom_fields", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/ezekia/stg_ezekia_project_custom_fields.sql", "original_file_path": "models/staging/ezekia/stg_ezekia_project_custom_fields.sql", "name": "stg_ezekia_project_custom_fields", "alias": "stg_ezekia_project_custom_fields", "checksum": {"name": "sha256", "checksum": "8bfc407d74bd8ac87027880886c4edce031269c303b96ade9d18251d7659c892"}, "tags": ["staging"], "refs": [], "sources": [["ezekia", "ezekia_project_custom_fields"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/staging/ezekia/stg_ezekia_project_custom_fields.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429166.146865, "compiled_sql": "select\n    id,\n    field,\n    value,\n    project_id,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _airbyte_ezekia_proj___custom_fields_hashid\nfrom \"warehouse_august\".\"august_airbyte\".\"ezekia_project_custom_fields\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_ezekia_project_custom_fields\""}, "model.augustdbt.int_work_items_from_airtable": {"raw_sql": "-- is there a timestamp for statuses?\n\nwith airtable_work_items as (\n    select *\n    from {{ref('stg_airtable_assignments')}}\n), airtable_companies as (\n    select *\n    from {{ref('stg_airtable_companies')}}\n)\n\nselect\n    airtable_work_items._AIRTABLE_ID as work_item_airtable_id,\n    case\n        when \"Ezekia ID\" = 'n/a' then null\n        else \"Ezekia ID\"\n    end as ezekia_id,\n    \"Date of Booking\"::date as booking_date,\n    split_part(\n        CLIENT,\n        '''',\n        2)::text as client_airtable_id,\n        REGION,\n        STATUS,\n        POSITION as name,\n        airtable_companies.NAME as company_name,\n        split_part(\n            \"Lead Partner\",\n            '''',\n            2)::text as lead_partner_airtable_id,\n            split_part(\n                \"Practice Area\",\n                '''',\n                2)::text as practice_area,\n                \"Assignment Type\" as assignment_type,\n                \"Total Assignment Value\" as total_assignment_value,\n                \"Initial Assignment Value\" as initial_assignment_value\nfrom airtable_work_items\nleft join airtable_companies on airtable_work_items.client = airtable_companies._AIRTABLE_ID", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.stg_airtable_assignments", "model.augustdbt.stg_airtable_companies"]}, "config": {"enabled": true, "alias": null, "schema": "INT", "database": null, "tags": ["int"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_INT", "fqn": ["augustdbt", "int", "int_work_items_from_airtable"], "unique_id": "model.augustdbt.int_work_items_from_airtable", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "int/int_work_items_from_airtable.sql", "original_file_path": "models/int/int_work_items_from_airtable.sql", "name": "int_work_items_from_airtable", "alias": "int_work_items_from_airtable", "checksum": {"name": "sha256", "checksum": "aba33244158648d74582894cf5ca02b4a11bbec3dd50ad163b6486d2de86b240"}, "tags": ["int"], "refs": [["stg_airtable_assignments"], ["stg_airtable_companies"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/int/int_work_items_from_airtable.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "INT", "materialized": "view", "tags": "int"}, "created_at": 1661429166.147928, "compiled_sql": "-- is there a timestamp for statuses?\n\nwith airtable_work_items as (\n    select *\n    from \"warehouse_august\".\"august_STAGING\".\"stg_airtable_assignments\"\n), airtable_companies as (\n    select *\n    from \"warehouse_august\".\"august_STAGING\".\"stg_airtable_companies\"\n)\n\nselect\n    airtable_work_items._AIRTABLE_ID as work_item_airtable_id,\n    case\n        when \"Ezekia ID\" = 'n/a' then null\n        else \"Ezekia ID\"\n    end as ezekia_id,\n    \"Date of Booking\"::date as booking_date,\n    split_part(\n        CLIENT,\n        '''',\n        2)::text as client_airtable_id,\n        REGION,\n        STATUS,\n        POSITION as name,\n        airtable_companies.NAME as company_name,\n        split_part(\n            \"Lead Partner\",\n            '''',\n            2)::text as lead_partner_airtable_id,\n            split_part(\n                \"Practice Area\",\n                '''',\n                2)::text as practice_area,\n                \"Assignment Type\" as assignment_type,\n                \"Total Assignment Value\" as total_assignment_value,\n                \"Initial Assignment Value\" as initial_assignment_value\nfrom airtable_work_items\nleft join airtable_companies on airtable_work_items.client = airtable_companies._AIRTABLE_ID", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_INT\".\"int_work_items_from_airtable\""}, "model.augustdbt.stg_airtable_companies": {"raw_sql": "select \"Name\" as name,\n    _AIRTABLE_ID,\n    _AIRTABLE_CREATED_TIME,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_AIRTABLE_COMPANIES_HASHID\nfrom {{ source('airtable', 'airtable_companies') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.airtable.airtable_companies"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "airtable", "stg_airtable_companies"], "unique_id": "model.augustdbt.stg_airtable_companies", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/airtable/stg_airtable_companies.sql", "original_file_path": "models/staging/airtable/stg_airtable_companies.sql", "name": "stg_airtable_companies", "alias": "stg_airtable_companies", "checksum": {"name": "sha256", "checksum": "f48489fe2dbdfec80f9725bc1a8c7c7586341c27ba689236aa5914c862afd4dc"}, "tags": ["staging"], "refs": [], "sources": [["airtable", "airtable_companies"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/staging/airtable/stg_airtable_companies.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429166.151963, "compiled_sql": "select \"Name\" as name,\n    _AIRTABLE_ID,\n    _AIRTABLE_CREATED_TIME,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_AIRTABLE_COMPANIES_HASHID\nfrom \"warehouse_august\".\"august_airbyte\".\"airtable_companies\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_airtable_companies\""}, "model.augustdbt.regions": {"raw_sql": "-- there is a region for a project and a region for a partner\n\nselect name\nfrom {{ref('stg_airtable_regions')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.stg_airtable_regions"]}, "config": {"enabled": true, "alias": null, "schema": "FINAL", "database": null, "tags": ["final"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_FINAL", "fqn": ["augustdbt", "final", "regions"], "unique_id": "model.augustdbt.regions", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "final/regions.sql", "original_file_path": "models/final/regions.sql", "name": "regions", "alias": "regions", "checksum": {"name": "sha256", "checksum": "1f57d35165331061fa4bfa37db70f80d88e7cc61e6c2d5f8d54270d9a65a5c00"}, "tags": ["final"], "refs": [["stg_airtable_regions"]], "sources": [], "metrics": [], "description": "A table of all regions served at August.", "columns": {"NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/final/regions.yml", "compiled_path": "target/compiled/augustdbt/models/final/regions.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "FINAL", "materialized": "table", "tags": "final"}, "created_at": 1661429166.2758322, "compiled_sql": "-- there is a region for a project and a region for a partner\n\nselect name\nfrom \"warehouse_august\".\"august_STAGING\".\"stg_airtable_regions\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_FINAL\".\"regions\""}, "model.augustdbt.roles": {"raw_sql": "select\n    id,\n    _airtable_id,\n    name\nfrom {{ref('stg_airtable_roles')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.stg_airtable_roles"]}, "config": {"enabled": true, "alias": null, "schema": "FINAL", "database": null, "tags": ["final"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_FINAL", "fqn": ["augustdbt", "final", "roles"], "unique_id": "model.augustdbt.roles", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "final/roles.sql", "original_file_path": "models/final/roles.sql", "name": "roles", "alias": "roles", "checksum": {"name": "sha256", "checksum": "114c95e0bba81b3c099e6d0e237bb61576379fb652d2681bebfe0107be687a2e"}, "tags": ["final"], "refs": [["stg_airtable_roles"]], "sources": [], "metrics": [], "description": "", "columns": {"ID": {"name": "ID", "description": "", "meta": {"dimension": {}}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_ID": {"name": "_AIRTABLE_ID", "description": "", "meta": {"dimension": {}}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {"dimension": {}}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "_airtable_id": {"name": "_airtable_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/final/roles.yml", "compiled_path": "target/compiled/augustdbt/models/final/roles.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "FINAL", "materialized": "table", "tags": "final"}, "created_at": 1661429166.277271, "compiled_sql": "select\n    id,\n    _airtable_id,\n    name\nfrom \"warehouse_august\".\"august_STAGING\".\"stg_airtable_roles\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_FINAL\".\"roles\""}, "model.augustdbt.stg_airtable_roles": {"raw_sql": "select \"Name\" as name,\n  \"Role ID\" as id,\n  _airtable_id,\n  _airtable_created_time,\n  _airbyte_ab_id,\n  _airbyte_emitted_at,\n  _airbyte_normalized_at,\n  _airbyte_airtable_roles_hashid\nfrom {{ source('airtable', 'airtable_roles') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.airtable.airtable_roles"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "airtable", "stg_airtable_roles"], "unique_id": "model.augustdbt.stg_airtable_roles", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/airtable/stg_airtable_roles.sql", "original_file_path": "models/staging/airtable/stg_airtable_roles.sql", "name": "stg_airtable_roles", "alias": "stg_airtable_roles", "checksum": {"name": "sha256", "checksum": "212006fc790462d25e89523a7e31bfd2cf3b78efbd8f47d70b3b7657a37a1199"}, "tags": ["staging"], "refs": [], "sources": [["airtable", "airtable_roles"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/staging/airtable/stg_airtable_roles.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429166.1599529, "compiled_sql": "select \"Name\" as name,\n  \"Role ID\" as id,\n  _airtable_id,\n  _airtable_created_time,\n  _airbyte_ab_id,\n  _airbyte_emitted_at,\n  _airbyte_normalized_at,\n  _airbyte_airtable_roles_hashid\nfrom \"warehouse_august\".\"august_airbyte\".\"airtable_roles\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_airtable_roles\""}, "model.augustdbt.int_invoices": {"raw_sql": "select\n    _AIRTABLE_ID,\n    NAME as invoice_name,\n    ASSIGNMENT as _AIRTABLE_PROJECT_ID,\n    COMPANY_ID,\n    ezekia_id,\n    formula_name as project_stage,\n    invoice_type,\n    invoice_amount,\n    invoice_issued_date,\n    invoice_due_date,\n    invoice_paid_date,\n    case when invoice_issued_date is not null then true else false end as issued,\n    case when invoice_paid_date is not null then true else false end as paid,\n    case when issued and not paid then true else false end as outstanding,\n    case when invoice_due_date<current_date and not paid then true else false end as overdue,\n    case when invoice_due_date<current_date and paid then true else false end as paid_late,\n    case when paid then 'Paid' when outstanding then 'Outstanding' when overdue then 'Overdue' else null end as invoice_status\nfrom {{ref('stg_airtable_invoices')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.stg_airtable_invoices"]}, "config": {"enabled": true, "alias": null, "schema": "INT", "database": null, "tags": ["int"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_INT", "fqn": ["augustdbt", "int", "int_invoices"], "unique_id": "model.augustdbt.int_invoices", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "int/int_invoices.sql", "original_file_path": "models/int/int_invoices.sql", "name": "int_invoices", "alias": "int_invoices", "checksum": {"name": "sha256", "checksum": "b6ed096bf54289e6c8a0587e946e943c5927230aca9bd70f58f5869cfe74d89f"}, "tags": ["int"], "refs": [["stg_airtable_invoices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/int/int_invoices.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "INT", "materialized": "view", "tags": "int"}, "created_at": 1661429166.171191, "compiled_sql": "select\n    _AIRTABLE_ID,\n    NAME as invoice_name,\n    ASSIGNMENT as _AIRTABLE_PROJECT_ID,\n    COMPANY_ID,\n    ezekia_id,\n    formula_name as project_stage,\n    invoice_type,\n    invoice_amount,\n    invoice_issued_date,\n    invoice_due_date,\n    invoice_paid_date,\n    case when invoice_issued_date is not null then true else false end as issued,\n    case when invoice_paid_date is not null then true else false end as paid,\n    case when issued and not paid then true else false end as outstanding,\n    case when invoice_due_date<current_date and not paid then true else false end as overdue,\n    case when invoice_due_date<current_date and paid then true else false end as paid_late,\n    case when paid then 'Paid' when outstanding then 'Outstanding' when overdue then 'Overdue' else null end as invoice_status\nfrom \"warehouse_august\".\"august_STAGING\".\"stg_airtable_invoices\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_INT\".\"int_invoices\""}, "model.augustdbt.stg_airtable_tasks": {"raw_sql": "select * \nfrom {{ source('airtable', 'airtable_tasks') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.airtable.airtable_tasks"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "airtable", "stg_airtable_tasks"], "unique_id": "model.augustdbt.stg_airtable_tasks", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/airtable/stg_airtable_tasks.sql", "original_file_path": "models/staging/airtable/stg_airtable_tasks.sql", "name": "stg_airtable_tasks", "alias": "stg_airtable_tasks", "checksum": {"name": "sha256", "checksum": "cc8106a5e0f440d56a58d18993b904f9446468ac01d55ec026515ede9ef1341e"}, "tags": ["staging"], "refs": [], "sources": [["airtable", "airtable_tasks"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/staging/airtable/stg_airtable_tasks.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429166.173128, "compiled_sql": "select * \nfrom \"warehouse_august\".\"august_airbyte\".\"airtable_tasks\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_airtable_tasks\""}, "model.augustdbt.stg_airtable_work_logs": {"raw_sql": "select * \nfrom {{ source('airtable', 'airtable_work_logs') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.airtable.airtable_work_logs"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "airtable", "stg_airtable_work_logs"], "unique_id": "model.augustdbt.stg_airtable_work_logs", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/airtable/stg_airtable_work_logs.sql", "original_file_path": "models/staging/airtable/stg_airtable_work_logs.sql", "name": "stg_airtable_work_logs", "alias": "stg_airtable_work_logs", "checksum": {"name": "sha256", "checksum": "27bd022f45f0779311962a9ba44f2979bf2efc9cee8c0851d384e96ae55d0f66"}, "tags": ["staging"], "refs": [], "sources": [["airtable", "airtable_work_logs"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/staging/airtable/stg_airtable_work_logs.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429166.174479, "compiled_sql": "select * \nfrom \"warehouse_august\".\"august_airbyte\".\"airtable_work_logs\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_airtable_work_logs\""}, "test.augustdbt.unique_assignments_unique_id.1f9edac13a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "unique_id", "model": "{{ get_where_subquery(ref('assignments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.augustdbt.assignments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "final", "unique_assignments_unique_id"], "unique_id": "test.augustdbt.unique_assignments_unique_id.1f9edac13a", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "unique_assignments_unique_id.sql", "original_file_path": "models/final/assignments.yml", "name": "unique_assignments_unique_id", "alias": "unique_assignments_unique_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["assignments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/final/assignments.yml/unique_assignments_unique_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661429166.211183, "compiled_sql": "\n    \n    \n\nselect\n    unique_id as unique_field,\n    count(*) as n_records\n\nfrom \"warehouse_august\".\"august_FINAL\".\"assignments\"\nwhere unique_id is not null\ngroup by unique_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "unique_id", "file_key_name": "models.assignments"}, "test.augustdbt.unique_dst_airtable_assignments_ezekia_id.f4873ab4c0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ezekia_id", "model": "{{ get_where_subquery(ref('dst_airtable_assignments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.augustdbt.dst_airtable_assignments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "destinations", "airtable", "unique_dst_airtable_assignments_ezekia_id"], "unique_id": "test.augustdbt.unique_dst_airtable_assignments_ezekia_id.f4873ab4c0", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "unique_dst_airtable_assignments_ezekia_id.sql", "original_file_path": "models/destinations/airtable/dst_airtable_assignments.yml", "name": "unique_dst_airtable_assignments_ezekia_id", "alias": "unique_dst_airtable_assignments_ezekia_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dst_airtable_assignments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/destinations/airtable/dst_airtable_assignments.yml/unique_dst_airtable_assignments_ezekia_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661429166.223228, "compiled_sql": "\n    \n    \n\nselect\n    ezekia_id as unique_field,\n    count(*) as n_records\n\nfrom \"warehouse_august\".\"august_DESTINATIONS\".\"dst_airtable_assignments\"\nwhere ezekia_id is not null\ngroup by ezekia_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ezekia_id", "file_key_name": "models.dst_airtable_assignments"}, "test.augustdbt.not_null_work_logs_date.6e64d6a36a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('work_logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.augustdbt.work_logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "final", "not_null_work_logs_date"], "unique_id": "test.augustdbt.not_null_work_logs_date.6e64d6a36a", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "not_null_work_logs_date.sql", "original_file_path": "models/final/work_logs.yml", "name": "not_null_work_logs_date", "alias": "not_null_work_logs_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["work_logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/final/work_logs.yml/not_null_work_logs_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661429166.233435, "compiled_sql": "\n    \n    \n\n\n\nselect date\nfrom \"warehouse_august\".\"august_FINAL\".\"work_logs\"\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.work_logs"}, "test.augustdbt.not_null_work_logs_hours.63199a7db3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hours", "model": "{{ get_where_subquery(ref('work_logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.augustdbt.work_logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "final", "not_null_work_logs_hours"], "unique_id": "test.augustdbt.not_null_work_logs_hours.63199a7db3", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "not_null_work_logs_hours.sql", "original_file_path": "models/final/work_logs.yml", "name": "not_null_work_logs_hours", "alias": "not_null_work_logs_hours", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["work_logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/final/work_logs.yml/not_null_work_logs_hours.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661429166.234508, "compiled_sql": "\n    \n    \n\n\n\nselect hours\nfrom \"warehouse_august\".\"august_FINAL\".\"work_logs\"\nwhere hours is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hours", "file_key_name": "models.work_logs"}, "model.augustdbt.int_ezekia_custom_fields": {"raw_sql": "with pivoted_fields as (\n    select\n        project_id,\n        cf.value,\n        label,\n        case when label = 'CoE' then value end::text as coe,\n        case when label = 'Practice Area' then value end::text as practice_area,\n        case\n            when label = 'Assignment Location - Country' then value\n        end::text as assignment_location_country,\n        case\n            when label = 'Assignment Location - Region' then value\n        end::json->>0 as assignment_location_region,\n        case\n            when label = 'Project Lead - Consultant' then value\n        end::text as project_lead_consultant,\n        case\n            when label = 'Client Contacts Added' then value\n        end as client_contacts_added,\n        case\n            when label = 'Shortlists Sent Date' then value\n        end::text::date as shortlist_sent_date,\n        case when label = 'Pitch status' then value end::json->>0 as pitch_status,\n        case\n            when label = 'Pitch Start Date' then value\n        end::text::date as pitch_start_date,\n        case\n            when label = 'Placement Date' then value\n        end::text::date as placement_date\n    from {{ref('stg_ezekia_project_custom_fields')}} as cf\n    left join {{ref('stg_ezekia_project_custom_fields_field')}} as cff on\n        cf._airbyte_ezekia_proj___custom_fields_hashid = cff._airbyte_ezekia_proj___custom_fields_hashid\n),\n\ncoe as (\n    select\n        project_id,\n        coe\n    from pivoted_fields where coe is not null group by 1, 2\n),\n\npractice_area as (\n    select\n        project_id,\n        practice_area\n    from pivoted_fields where practice_area is not null group by 1, 2\n),\n\nassignment_location_country as (\n    select\n        project_id,\n        assignment_location_country\n    from\n        pivoted_fields\n    where assignment_location_country is not null group by 1, 2\n),\n\nassignment_location_region as (\n    select\n        project_id,\n        assignment_location_region\n    from\n        pivoted_fields\n    where assignment_location_region is not null group by 1, 2\n),\n\nproject_lead_consultant as (\n    select\n        project_id,\n        project_lead_consultant\n    from pivoted_fields where project_lead_consultant is not null group by 1, 2\n),\n\nclient_contacts_added as (\n    select\n        project_id,\n        client_contacts_added\n    from pivoted_fields where client_contacts_added is not null group by 1, 2\n),\n\nshortlist_sent_date as (\n    select\n        project_id,\n        shortlist_sent_date\n    from pivoted_fields where shortlist_sent_date is not null group by 1, 2\n),\n\npitch_status as (\n    select\n        project_id,\n        pitch_status\n    from pivoted_fields where pitch_status is not null group by 1, 2\n),\n\npitch_start_date as (\n    select\n        project_id,\n        pitch_start_date\n    from pivoted_fields where pitch_start_date is not null group by 1, 2\n),\n\nplacement_date as (\n    select\n        project_id,\n        placement_date\n    from pivoted_fields where placement_date is not null group by 1, 2\n)\n\nselect\n    coe.project_id as ezekia_id,\n    coe,\n    practice_area,\n    assignment_location_country,\n    assignment_location_region,\n    project_lead_consultant,\n    client_contacts_added,\n    shortlist_sent_date,\n    pitch_status,\n    pitch_start_date,\n    placement_date\nfrom coe\nleft join practice_area on coe.project_id = practice_area.project_id\nleft join\n    assignment_location_country on\n        coe.project_id = assignment_location_country.project_id\nleft join\n    assignment_location_region on\n        coe.project_id = assignment_location_region.project_id\nleft join\n    project_lead_consultant on\n        coe.project_id = project_lead_consultant.project_id\nleft join\n    client_contacts_added on coe.project_id = client_contacts_added.project_id\nleft join shortlist_sent_date on coe.project_id = shortlist_sent_date.project_id\nleft join pitch_status on coe.project_id = pitch_status.project_id\nleft join pitch_start_date on coe.project_id = pitch_start_date.project_id\nleft join placement_date on coe.project_id = placement_date.project_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.stg_ezekia_project_custom_fields", "model.augustdbt.stg_ezekia_project_custom_fields_field"]}, "config": {"enabled": true, "alias": null, "schema": "INT", "database": null, "tags": ["int"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_INT", "fqn": ["augustdbt", "int", "int_ezekia_custom_fields"], "unique_id": "model.augustdbt.int_ezekia_custom_fields", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "int/int_ezekia_custom_fields.sql", "original_file_path": "models/int/int_ezekia_custom_fields.sql", "name": "int_ezekia_custom_fields", "alias": "int_ezekia_custom_fields", "checksum": {"name": "sha256", "checksum": "0af62240a4d269cebefc46b9c44a74c1470684daa906cb06fc025333fc85ed18"}, "tags": ["int"], "refs": [["stg_ezekia_project_custom_fields"], ["stg_ezekia_project_custom_fields_field"]], "sources": [], "metrics": [], "description": "", "columns": {"ezekia_id": {"name": "ezekia_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COE": {"name": "COE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRACTICE_AREA": {"name": "PRACTICE_AREA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSIGNMENT_LOCATION_COUNTRY": {"name": "ASSIGNMENT_LOCATION_COUNTRY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSIGNMENT_LOCATION_REGION": {"name": "ASSIGNMENT_LOCATION_REGION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_LEAD_CONSULTANT": {"name": "PROJECT_LEAD_CONSULTANT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLIENT_CONTACTS_ADDED": {"name": "CLIENT_CONTACTS_ADDED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHORTLIST_SENT_DATE": {"name": "SHORTLIST_SENT_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PITCH_STATUS": {"name": "PITCH_STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PITCH_START_DATE": {"name": "PITCH_START_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLACEMENT_DATE": {"name": "PLACEMENT_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/int/int_ezekia_custom_fields.yml", "compiled_path": "target/compiled/augustdbt/models/int/int_ezekia_custom_fields.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "INT", "materialized": "view", "tags": "int"}, "created_at": 1661429289.970099, "compiled_sql": "with pivoted_fields as (\n    select\n        project_id,\n        cf.value,\n        label,\n        case when label = 'CoE' then value end::text as coe,\n        case when label = 'Practice Area' then value end::text as practice_area,\n        case\n            when label = 'Assignment Location - Country' then value\n        end::text as assignment_location_country,\n        case\n            when label = 'Assignment Location - Region' then value\n        end::json->>0 as assignment_location_region,\n        case\n            when label = 'Project Lead - Consultant' then value\n        end::text as project_lead_consultant,\n        case\n            when label = 'Client Contacts Added' then value\n        end as client_contacts_added,\n        case\n            when label = 'Shortlists Sent Date' then value\n        end::text::date as shortlist_sent_date,\n        case when label = 'Pitch status' then value end::json->>0 as pitch_status,\n        case\n            when label = 'Pitch Start Date' then value\n        end::text::date as pitch_start_date,\n        case\n            when label = 'Placement Date' then value\n        end::text::date as placement_date\n    from \"warehouse_august\".\"august_STAGING\".\"stg_ezekia_project_custom_fields\" as cf\n    left join \"warehouse_august\".\"august_STAGING\".\"stg_ezekia_project_custom_fields_field\" as cff on\n        cf._airbyte_ezekia_proj___custom_fields_hashid = cff._airbyte_ezekia_proj___custom_fields_hashid\n),\n\ncoe as (\n    select\n        project_id,\n        coe\n    from pivoted_fields where coe is not null group by 1, 2\n),\n\npractice_area as (\n    select\n        project_id,\n        practice_area\n    from pivoted_fields where practice_area is not null group by 1, 2\n),\n\nassignment_location_country as (\n    select\n        project_id,\n        assignment_location_country\n    from\n        pivoted_fields\n    where assignment_location_country is not null group by 1, 2\n),\n\nassignment_location_region as (\n    select\n        project_id,\n        assignment_location_region\n    from\n        pivoted_fields\n    where assignment_location_region is not null group by 1, 2\n),\n\nproject_lead_consultant as (\n    select\n        project_id,\n        project_lead_consultant\n    from pivoted_fields where project_lead_consultant is not null group by 1, 2\n),\n\nclient_contacts_added as (\n    select\n        project_id,\n        client_contacts_added\n    from pivoted_fields where client_contacts_added is not null group by 1, 2\n),\n\nshortlist_sent_date as (\n    select\n        project_id,\n        shortlist_sent_date\n    from pivoted_fields where shortlist_sent_date is not null group by 1, 2\n),\n\npitch_status as (\n    select\n        project_id,\n        pitch_status\n    from pivoted_fields where pitch_status is not null group by 1, 2\n),\n\npitch_start_date as (\n    select\n        project_id,\n        pitch_start_date\n    from pivoted_fields where pitch_start_date is not null group by 1, 2\n),\n\nplacement_date as (\n    select\n        project_id,\n        placement_date\n    from pivoted_fields where placement_date is not null group by 1, 2\n)\n\nselect\n    coe.project_id as ezekia_id,\n    coe,\n    practice_area,\n    assignment_location_country,\n    assignment_location_region,\n    project_lead_consultant,\n    client_contacts_added,\n    shortlist_sent_date,\n    pitch_status,\n    pitch_start_date,\n    placement_date\nfrom coe\nleft join practice_area on coe.project_id = practice_area.project_id\nleft join\n    assignment_location_country on\n        coe.project_id = assignment_location_country.project_id\nleft join\n    assignment_location_region on\n        coe.project_id = assignment_location_region.project_id\nleft join\n    project_lead_consultant on\n        coe.project_id = project_lead_consultant.project_id\nleft join\n    client_contacts_added on coe.project_id = client_contacts_added.project_id\nleft join shortlist_sent_date on coe.project_id = shortlist_sent_date.project_id\nleft join pitch_status on coe.project_id = pitch_status.project_id\nleft join pitch_start_date on coe.project_id = pitch_start_date.project_id\nleft join placement_date on coe.project_id = placement_date.project_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_INT\".\"int_ezekia_custom_fields\""}, "test.augustdbt.not_null_int_ezekia_custom_fields_ezekia_id.0b9a4c0da0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ezekia_id", "model": "{{ get_where_subquery(ref('int_ezekia_custom_fields')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.augustdbt.int_ezekia_custom_fields"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "int", "not_null_int_ezekia_custom_fields_ezekia_id"], "unique_id": "test.augustdbt.not_null_int_ezekia_custom_fields_ezekia_id.0b9a4c0da0", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "not_null_int_ezekia_custom_fields_ezekia_id.sql", "original_file_path": "models/int/int_ezekia_custom_fields.yml", "name": "not_null_int_ezekia_custom_fields_ezekia_id", "alias": "not_null_int_ezekia_custom_fields_ezekia_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_ezekia_custom_fields"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/int/int_ezekia_custom_fields.yml/not_null_int_ezekia_custom_fields_ezekia_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661429289.973927, "compiled_sql": "\n    \n    \n\n\n\nselect ezekia_id\nfrom \"warehouse_august\".\"august_INT\".\"int_ezekia_custom_fields\"\nwhere ezekia_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ezekia_id", "file_key_name": "models.int_ezekia_custom_fields"}, "test.augustdbt.unique_int_ezekia_custom_fields_ezekia_id.9b8bf99af7": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ezekia_id", "model": "{{ get_where_subquery(ref('int_ezekia_custom_fields')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.augustdbt.int_ezekia_custom_fields"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "int", "unique_int_ezekia_custom_fields_ezekia_id"], "unique_id": "test.augustdbt.unique_int_ezekia_custom_fields_ezekia_id.9b8bf99af7", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "unique_int_ezekia_custom_fields_ezekia_id.sql", "original_file_path": "models/int/int_ezekia_custom_fields.yml", "name": "unique_int_ezekia_custom_fields_ezekia_id", "alias": "unique_int_ezekia_custom_fields_ezekia_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_ezekia_custom_fields"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/int/int_ezekia_custom_fields.yml/unique_int_ezekia_custom_fields_ezekia_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661429289.974829, "compiled_sql": "\n    \n    \n\nselect\n    ezekia_id as unique_field,\n    count(*) as n_records\n\nfrom \"warehouse_august\".\"august_INT\".\"int_ezekia_custom_fields\"\nwhere ezekia_id is not null\ngroup by ezekia_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ezekia_id", "file_key_name": "models.int_ezekia_custom_fields"}, "model.augustdbt.int_projects_from_ezekia": {"raw_sql": "-- customer fields here from ezekia\n-- coe\n-- practice area\n-- status\n-- pitch status\n-- pitch start date\n-- shortlist sent date\n-- placement date\n-- pitch status\n-- practice area\n-- this isn't quite right, these are not all projects, essentially there are internal and external projects\n-- external projects are booked or not\n-- pitches have a status of converted or not\n-- pitches have a status of their own, sent or won, and a sent date\n-- pitches should be in ezekia though\n\nwith projects as (\n    select *\n    from {{ref('stg_ezekia_projects')}}\n), relationships as (\n    select *\n    from {{ref('stg_ezekia_projects_relationships')}}\n), company as (\n    select *\n    from {{ref('stg_ezekia_projects_relationships_company')}}\n), owner as (\n    select *\n    from {{ref('stg_ezekia_projects_owner')}}\n), custom_fields as (\n    select * from {{ref('int_ezekia_custom_fields')}}\n)\n\nselect projects.id::text as ezekia_id,\n    projects.name,\n    company.id as company_id,\n    company.name as company_name,\n    owner.id as lead_partner_ezekia_id,\n    owner.fullname as lead_partner_fullname,\n    custom_fields.coe,\n    custom_fields.practice_area,\n    custom_fields.assignment_location_country,\n    custom_fields.assignment_location_region,\n    custom_fields.project_lead_consultant,\n    custom_fields.client_contacts_added,\n    custom_fields.shortlist_sent_date,\n    custom_fields.pitch_status,\n    custom_fields.pitch_start_date,\n    custom_fields.placement_date,\n    status\nfrom projects\nleft join relationships on projects._AIRBYTE_EZEKIA_PROJECTS_HASHID=relationships._AIRBYTE_EZEKIA_PROJECTS_HASHID\nleft join company on relationships._AIRBYTE_RELATIONSHIPS_HASHID=company._AIRBYTE_RELATIONSHIPS_HASHID\nleft join owner on projects._AIRBYTE_EZEKIA_PROJECTS_HASHID=owner._AIRBYTE_EZEKIA_PROJECTS_HASHID\nleft join custom_fields on projects.id = custom_fields.ezekia_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.stg_ezekia_projects", "model.augustdbt.stg_ezekia_projects_relationships", "model.augustdbt.stg_ezekia_projects_relationships_company", "model.augustdbt.stg_ezekia_projects_owner", "model.augustdbt.int_ezekia_custom_fields"]}, "config": {"enabled": true, "alias": null, "schema": "INT", "database": null, "tags": ["int"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_INT", "fqn": ["augustdbt", "int", "int_projects_from_ezekia"], "unique_id": "model.augustdbt.int_projects_from_ezekia", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "int/int_projects_from_ezekia.sql", "original_file_path": "models/int/int_projects_from_ezekia.sql", "name": "int_projects_from_ezekia", "alias": "int_projects_from_ezekia", "checksum": {"name": "sha256", "checksum": "c2f2734cc9d1f4b90a82c0ca4adf0a564834b681f325fe82c29dec3ba05698cd"}, "tags": ["int"], "refs": [["stg_ezekia_projects"], ["stg_ezekia_projects_relationships"], ["stg_ezekia_projects_relationships_company"], ["stg_ezekia_projects_owner"], ["int_ezekia_custom_fields"]], "sources": [], "metrics": [], "description": "", "columns": {"EZEKIA_ID": {"name": "EZEKIA_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANY_ID": {"name": "COMPANY_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANY_NAME": {"name": "COMPANY_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lead_partner_ezekia_id": {"name": "lead_partner_ezekia_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lead_partner_fullname": {"name": "lead_partner_fullname", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "coe": {"name": "coe", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "practice_area": {"name": "practice_area", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignment_location_country": {"name": "assignment_location_country", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignment_location_region": {"name": "assignment_location_region", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_lead_consultant": {"name": "project_lead_consultant", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "client_contacts_added": {"name": "client_contacts_added", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shortlist_sent_date": {"name": "shortlist_sent_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pitch_status": {"name": "pitch_status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pitch_start_date": {"name": "pitch_start_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "placement_date": {"name": "placement_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/int/int_projects_from_ezekia.yml", "compiled_path": "target/compiled/augustdbt/models/int/int_projects_from_ezekia.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "INT", "materialized": "view", "tags": "int"}, "created_at": 1661429369.448839, "compiled_sql": "-- customer fields here from ezekia\n-- coe\n-- practice area\n-- status\n-- pitch status\n-- pitch start date\n-- shortlist sent date\n-- placement date\n-- pitch status\n-- practice area\n-- this isn't quite right, these are not all projects, essentially there are internal and external projects\n-- external projects are booked or not\n-- pitches have a status of converted or not\n-- pitches have a status of their own, sent or won, and a sent date\n-- pitches should be in ezekia though\n\nwith projects as (\n    select *\n    from \"warehouse_august\".\"august_STAGING\".\"stg_ezekia_projects\"\n), relationships as (\n    select *\n    from \"warehouse_august\".\"august_STAGING\".\"stg_ezekia_projects_relationships\"\n), company as (\n    select *\n    from \"warehouse_august\".\"august_STAGING\".\"stg_ezekia_projects_relationships_company\"\n), owner as (\n    select *\n    from \"warehouse_august\".\"august_STAGING\".\"stg_ezekia_projects_owner\"\n), custom_fields as (\n    select * from \"warehouse_august\".\"august_INT\".\"int_ezekia_custom_fields\"\n)\n\nselect projects.id::text as ezekia_id,\n    projects.name,\n    company.id as company_id,\n    company.name as company_name,\n    owner.id as lead_partner_ezekia_id,\n    owner.fullname as lead_partner_fullname,\n    custom_fields.coe,\n    custom_fields.practice_area,\n    custom_fields.assignment_location_country,\n    custom_fields.assignment_location_region,\n    custom_fields.project_lead_consultant,\n    custom_fields.client_contacts_added,\n    custom_fields.shortlist_sent_date,\n    custom_fields.pitch_status,\n    custom_fields.pitch_start_date,\n    custom_fields.placement_date,\n    status\nfrom projects\nleft join relationships on projects._AIRBYTE_EZEKIA_PROJECTS_HASHID=relationships._AIRBYTE_EZEKIA_PROJECTS_HASHID\nleft join company on relationships._AIRBYTE_RELATIONSHIPS_HASHID=company._AIRBYTE_RELATIONSHIPS_HASHID\nleft join owner on projects._AIRBYTE_EZEKIA_PROJECTS_HASHID=owner._AIRBYTE_EZEKIA_PROJECTS_HASHID\nleft join custom_fields on projects.id = custom_fields.ezekia_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_INT\".\"int_projects_from_ezekia\""}, "model.augustdbt.stg_ezekia_projects": {"raw_sql": "select\n    ID,\n    NAME,\n    LABEL,\n    OWNER,\n    TITLE,\n    DATATYPE,\n    END_DATE,\n    CREATEDAT,\n    PROJECTID,\n    UPDATEDAT,\n    INDUSTRIES,\n    START_DATE,\n    DESCRIPTION,\n    RELATIONSHIPS,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_EZEKIA_PROJECTS_HASHID,\n    json_extract_path(manager::json, 'status', 'text') as status\nfrom {{ source('ezekia', 'ezekia_projects') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.ezekia.ezekia_projects"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "ezekia", "stg_ezekia_projects"], "unique_id": "model.augustdbt.stg_ezekia_projects", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/ezekia/stg_ezekia_projects.sql", "original_file_path": "models/staging/ezekia/stg_ezekia_projects.sql", "name": "stg_ezekia_projects", "alias": "stg_ezekia_projects", "checksum": {"name": "sha256", "checksum": "4f7ca2be7cc713bcbb4ffe10059cf330c4b602f99fbbac9f18e5a92b63835965"}, "tags": ["staging"], "refs": [], "sources": [["ezekia", "ezekia_projects"]], "metrics": [], "description": "", "columns": {"ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OWNER": {"name": "OWNER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TITLE": {"name": "TITLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATATYPE": {"name": "DATATYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "END_DATE": {"name": "END_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATEDAT": {"name": "CREATEDAT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECTID": {"name": "PROJECTID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UPDATEDAT": {"name": "UPDATEDAT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INDUSTRIES": {"name": "INDUSTRIES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "START_DATE": {"name": "START_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DESCRIPTION": {"name": "DESCRIPTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RELATIONSHIPS": {"name": "RELATIONSHIPS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AB_ID": {"name": "_AIRBYTE_AB_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_EMITTED_AT": {"name": "_AIRBYTE_EMITTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_NORMALIZED_AT": {"name": "_AIRBYTE_NORMALIZED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_EZEKIA_PROJECTS_HASHID": {"name": "_AIRBYTE_EZEKIA_PROJECTS_HASHID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/ezekia/stg_ezekia_projects.yml", "compiled_path": "target/compiled/augustdbt/models/staging/ezekia/stg_ezekia_projects.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429369.456718, "compiled_sql": "select\n    ID,\n    NAME,\n    LABEL,\n    OWNER,\n    TITLE,\n    DATATYPE,\n    END_DATE,\n    CREATEDAT,\n    PROJECTID,\n    UPDATEDAT,\n    INDUSTRIES,\n    START_DATE,\n    DESCRIPTION,\n    RELATIONSHIPS,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_EZEKIA_PROJECTS_HASHID,\n    json_extract_path(manager::json, 'status', 'text') as status\nfrom \"warehouse_august\".\"august_airbyte\".\"ezekia_projects\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_ezekia_projects\""}, "test.augustdbt.unique_int_projects_from_ezekia_EZEKIA_ID.127b4cd0a6": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "EZEKIA_ID", "model": "{{ get_where_subquery(ref('int_projects_from_ezekia')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.augustdbt.int_projects_from_ezekia"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "int", "unique_int_projects_from_ezekia_EZEKIA_ID"], "unique_id": "test.augustdbt.unique_int_projects_from_ezekia_EZEKIA_ID.127b4cd0a6", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "unique_int_projects_from_ezekia_EZEKIA_ID.sql", "original_file_path": "models/int/int_projects_from_ezekia.yml", "name": "unique_int_projects_from_ezekia_EZEKIA_ID", "alias": "unique_int_projects_from_ezekia_EZEKIA_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_projects_from_ezekia"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/int/int_projects_from_ezekia.yml/unique_int_projects_from_ezekia_EZEKIA_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661429369.452582, "compiled_sql": "\n    \n    \n\nselect\n    EZEKIA_ID as unique_field,\n    count(*) as n_records\n\nfrom \"warehouse_august\".\"august_INT\".\"int_projects_from_ezekia\"\nwhere EZEKIA_ID is not null\ngroup by EZEKIA_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EZEKIA_ID", "file_key_name": "models.int_projects_from_ezekia"}, "test.augustdbt.not_null_int_projects_from_ezekia_EZEKIA_ID.5378c2ce23": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EZEKIA_ID", "model": "{{ get_where_subquery(ref('int_projects_from_ezekia')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.augustdbt.int_projects_from_ezekia"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "int", "not_null_int_projects_from_ezekia_EZEKIA_ID"], "unique_id": "test.augustdbt.not_null_int_projects_from_ezekia_EZEKIA_ID.5378c2ce23", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "not_null_int_projects_from_ezekia_EZEKIA_ID.sql", "original_file_path": "models/int/int_projects_from_ezekia.yml", "name": "not_null_int_projects_from_ezekia_EZEKIA_ID", "alias": "not_null_int_projects_from_ezekia_EZEKIA_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_projects_from_ezekia"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/int/int_projects_from_ezekia.yml/not_null_int_projects_from_ezekia_EZEKIA_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661429369.4534762, "compiled_sql": "\n    \n    \n\n\n\nselect EZEKIA_ID\nfrom \"warehouse_august\".\"august_INT\".\"int_projects_from_ezekia\"\nwhere EZEKIA_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EZEKIA_ID", "file_key_name": "models.int_projects_from_ezekia"}, "test.augustdbt.unique_stg_ezekia_projects_ID.476846b07e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ID", "model": "{{ get_where_subquery(ref('stg_ezekia_projects')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.augustdbt.stg_ezekia_projects"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "staging", "ezekia", "unique_stg_ezekia_projects_ID"], "unique_id": "test.augustdbt.unique_stg_ezekia_projects_ID.476846b07e", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "unique_stg_ezekia_projects_ID.sql", "original_file_path": "models/staging/ezekia/stg_ezekia_projects.yml", "name": "unique_stg_ezekia_projects_ID", "alias": "unique_stg_ezekia_projects_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_ezekia_projects"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/staging/ezekia/stg_ezekia_projects.yml/unique_stg_ezekia_projects_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661429369.457109, "compiled_sql": "\n    \n    \n\nselect\n    ID as unique_field,\n    count(*) as n_records\n\nfrom \"warehouse_august\".\"august_STAGING\".\"stg_ezekia_projects\"\nwhere ID is not null\ngroup by ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ID", "file_key_name": "models.stg_ezekia_projects"}, "model.augustdbt.stg_ezekia_industries": {"raw_sql": "select\n    id,\n    name\nfrom {{ source('ezekia', 'projects_industries') }}\ngroup by 1, 2\norder by id asc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.ezekia.projects_industries"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "ezekia", "stg_ezekia_industries"], "unique_id": "model.augustdbt.stg_ezekia_industries", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/ezekia/stg_ezekia_industries.sql", "original_file_path": "models/staging/ezekia/stg_ezekia_industries.sql", "name": "stg_ezekia_industries", "alias": "stg_ezekia_industries", "checksum": {"name": "sha256", "checksum": "b2765d4ff5c0effaa6800b8ed99d010702d376c2c515de53f304043776510200"}, "tags": ["staging"], "refs": [], "sources": [["ezekia", "projects_industries"]], "metrics": [], "description": "", "columns": {"ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/ezekia/stg_ezekia_industries.yml", "compiled_path": "target/compiled/augustdbt/models/staging/ezekia/stg_ezekia_industries.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429719.6230872, "compiled_sql": "select\n    id,\n    name\nfrom \"warehouse_august\".\"august_airbyte\".\"ezekia_projects_industries\"\ngroup by 1, 2\norder by id asc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_ezekia_industries\""}, "model.augustdbt.employees": {"raw_sql": "select\n    BIO, \n    NAME,\n    EMAIL, \n    LOCATION, \n    \"Role new\"as role, \n    \"Booked Feb\" as booked_feb, \n    \"Booked Jan\" as booked_jan, \n    FINANCIALS, \n    \"Total Booked\" as total_booked, \n    _AIRTABLE_ID, \n    \"Profile Image\" as profile_image, \n    \"Projects as Lead\" as projects_as_lead, \n    \"Role ID (from Role)\" as role_id\nfrom {{ref('stg_airtable_employees')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.stg_airtable_employees"]}, "config": {"enabled": true, "alias": null, "schema": "FINAL", "database": null, "tags": ["final"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_FINAL", "fqn": ["augustdbt", "final", "employees"], "unique_id": "model.augustdbt.employees", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "final/employees.sql", "original_file_path": "models/final/employees.sql", "name": "employees", "alias": "employees", "checksum": {"name": "sha256", "checksum": "b80fc3cd5b9925ae65157d6400d96e467e43b227f32f2d2ac82db28be0db3fc0"}, "tags": ["final"], "refs": [["stg_airtable_employees"]], "sources": [], "metrics": [], "description": "", "columns": {"BIO": {"name": "BIO", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAIL": {"name": "EMAIL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOCATION": {"name": "LOCATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Role_new": {"name": "Role_new", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Booked_Feb": {"name": "Booked_Feb", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Booked_Jan": {"name": "Booked_Jan", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FINANCIALS": {"name": "FINANCIALS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Total_Booked": {"name": "Total_Booked", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_ID": {"name": "_AIRTABLE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Profile_Image": {"name": "Profile_Image", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Projects_as_Lead": {"name": "Projects_as_Lead", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Role_ID": {"name": "Role_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/final/employees.yml", "compiled_path": "target/compiled/augustdbt/models/final/employees.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "FINAL", "materialized": "table", "tags": "final"}, "created_at": 1661429719.625358, "compiled_sql": "select\n    BIO, \n    NAME,\n    EMAIL, \n    LOCATION, \n    \"Role new\"as role, \n    \"Booked Feb\" as booked_feb, \n    \"Booked Jan\" as booked_jan, \n    FINANCIALS, \n    \"Total Booked\" as total_booked, \n    _AIRTABLE_ID, \n    \"Profile Image\" as profile_image, \n    \"Projects as Lead\" as projects_as_lead, \n    \"Role ID (from Role)\" as role_id\nfrom \"warehouse_august\".\"august_STAGING\".\"stg_airtable_employees\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_FINAL\".\"employees\""}, "model.augustdbt.stg_ezekia_projects_owner": {"raw_sql": "select\n    _AIRBYTE_EZEKIA_PROJECTS_HASHID,\n    ID,\n    EMAIL,\n    PHONE,\n    FULLNAME,\n    LASTNAME,\n    LOCATION,\n    FIRSTNAME,\n    PROFILEPICTURE,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_OWNER_HASHID\nfrom {{ source('ezekia', 'ezekia_projects_owner') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.ezekia.ezekia_projects_owner"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "ezekia", "stg_ezekia_projects_owner"], "unique_id": "model.augustdbt.stg_ezekia_projects_owner", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/ezekia/stg_ezekia_projects_owner.sql", "original_file_path": "models/staging/ezekia/stg_ezekia_projects_owner.sql", "name": "stg_ezekia_projects_owner", "alias": "stg_ezekia_projects_owner", "checksum": {"name": "sha256", "checksum": "ce328110424cd2925c82ea4066a43c58739efe93fc9318941b1505d35202f52b"}, "tags": ["staging"], "refs": [], "sources": [["ezekia", "ezekia_projects_owner"]], "metrics": [], "description": "", "columns": {"_AIRBYTE_EZEKIA_PROJECTS_HASHID": {"name": "_AIRBYTE_EZEKIA_PROJECTS_HASHID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAIL": {"name": "EMAIL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PHONE": {"name": "PHONE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FULLNAME": {"name": "FULLNAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTNAME": {"name": "LASTNAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOCATION": {"name": "LOCATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FIRSTNAME": {"name": "FIRSTNAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROFILEPICTURE": {"name": "PROFILEPICTURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AB_ID": {"name": "_AIRBYTE_AB_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_EMITTED_AT": {"name": "_AIRBYTE_EMITTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_NORMALIZED_AT": {"name": "_AIRBYTE_NORMALIZED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_OWNER_HASHID": {"name": "_AIRBYTE_OWNER_HASHID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/ezekia/stg_ezekia_projects_owner.yml", "compiled_path": "target/compiled/augustdbt/models/staging/ezekia/stg_ezekia_projects_owner.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429719.62907, "compiled_sql": "select\n    _AIRBYTE_EZEKIA_PROJECTS_HASHID,\n    ID,\n    EMAIL,\n    PHONE,\n    FULLNAME,\n    LASTNAME,\n    LOCATION,\n    FIRSTNAME,\n    PROFILEPICTURE,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_OWNER_HASHID\nfrom \"warehouse_august\".\"august_airbyte\".\"ezekia_projects_owner\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_ezekia_projects_owner\""}, "model.augustdbt.stg_ezekia_projects_relationships_company": {"raw_sql": "select\n    _AIRBYTE_RELATIONSHIPS_HASHID,\n    ID,\n    NAME,\n    IMAGE,\n    CREATEDAT,\n    UPDATEDAT,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_COMPANY_HASHID\nfrom {{ source('ezekia', 'ezekia_projects_relationships_company') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.ezekia.ezekia_projects_relationships_company"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "ezekia", "stg_ezekia_projects_relationships_company"], "unique_id": "model.augustdbt.stg_ezekia_projects_relationships_company", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/ezekia/stg_ezekia_projects_relationships_company.sql", "original_file_path": "models/staging/ezekia/stg_ezekia_projects_relationships_company.sql", "name": "stg_ezekia_projects_relationships_company", "alias": "stg_ezekia_projects_relationships_company", "checksum": {"name": "sha256", "checksum": "3a13cde3fd09051f0ad0ca39f92a2722d9acc17bea5482509ef35b12b681931d"}, "tags": ["staging"], "refs": [], "sources": [["ezekia", "ezekia_projects_relationships_company"]], "metrics": [], "description": "", "columns": {"_AIRBYTE_RELATIONSHIPS_HASHID": {"name": "_AIRBYTE_RELATIONSHIPS_HASHID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMAGE": {"name": "IMAGE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATEDAT": {"name": "CREATEDAT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UPDATEDAT": {"name": "UPDATEDAT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AB_ID": {"name": "_AIRBYTE_AB_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_EMITTED_AT": {"name": "_AIRBYTE_EMITTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_NORMALIZED_AT": {"name": "_AIRBYTE_NORMALIZED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_COMPANY_HASHID": {"name": "_AIRBYTE_COMPANY_HASHID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/ezekia/stg_ezekia_projects_relationships_company.yml", "compiled_path": "target/compiled/augustdbt/models/staging/ezekia/stg_ezekia_projects_relationships_company.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429719.630854, "compiled_sql": "select\n    _AIRBYTE_RELATIONSHIPS_HASHID,\n    ID,\n    NAME,\n    IMAGE,\n    CREATEDAT,\n    UPDATEDAT,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_COMPANY_HASHID\nfrom \"warehouse_august\".\"august_airbyte\".\"ezekia_projects_relationships_company\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_ezekia_projects_relationships_company\""}, "model.augustdbt.int_companies": {"raw_sql": "with spreadsheet_companies as (\n    select\n        company_hash,\n        company_id as ezekia_company_id,\n        company as name,\n        min(lead_partner_airtable_id) as partner_owner_airtable_id\n    from\n        {{ref('int_time_entries_partners')}}\n    where\n        company_hash is not null\n    group by\n        1,\n        2,\n        3\n),\nezekia_companies as (\n    select\n        id as ezekia_company_id,\n        name,\n        json_extract_path(owner::json, 'id') as partner_owner_ezekia_id\n    from\n        {{ref('stg_ezekia_companies')}}\n),\nairtable_companies as (\n    select\n        _airtable_id as airtable_company_id,\n        name,\n        null as ezekia_company_id\n    from\n        {{ref('stg_airtable_companies')}}\n)\nselect\n    coalesce(airtable_companies.name,ezekia_companies.name,spreadsheet_companies.name) as name,\n    ezekia_companies.ezekia_company_id,\n    spreadsheet_companies.company_hash,\n    airtable_companies.airtable_company_id,\n    spreadsheet_companies.partner_owner_airtable_id,\n    concat(coalesce(company_hash,' '),'_',coalesce(airtable_company_id,' '),' ',coalesce(ezekia_companies.ezekia_company_id::text,' ')) as unique_company_id\nfrom\n    spreadsheet_companies\n    full outer join ezekia_companies\n    on spreadsheet_companies.ezekia_company_id=ezekia_companies.ezekia_company_id\n    full outer join airtable_companies\n    on spreadsheet_companies.ezekia_company_id::text=airtable_companies.ezekia_company_id\norder by 1,2", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.int_time_entries_partners", "model.augustdbt.stg_ezekia_companies", "model.augustdbt.stg_airtable_companies"]}, "config": {"enabled": true, "alias": null, "schema": "INT", "database": null, "tags": ["int"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_INT", "fqn": ["augustdbt", "int", "int_companies"], "unique_id": "model.augustdbt.int_companies", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "int/int_companies.sql", "original_file_path": "models/int/int_companies.sql", "name": "int_companies", "alias": "int_companies", "checksum": {"name": "sha256", "checksum": "98ed8790b27393bc79637356b837d6583a46a1fb528dfe610ab1626a9a300373"}, "tags": ["int"], "refs": [["int_time_entries_partners"], ["stg_ezekia_companies"], ["stg_airtable_companies"]], "sources": [], "metrics": [], "description": "", "columns": {"COMPANY_ID": {"name": "COMPANY_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/int/int_companies.yml", "compiled_path": "target/compiled/augustdbt/models/int/int_companies.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "INT", "materialized": "view", "tags": "int"}, "created_at": 1661429719.6313999, "compiled_sql": "with spreadsheet_companies as (\n    select\n        company_hash,\n        company_id as ezekia_company_id,\n        company as name,\n        min(lead_partner_airtable_id) as partner_owner_airtable_id\n    from\n        \"warehouse_august\".\"august_INT\".\"int_time_entries_partners\"\n    where\n        company_hash is not null\n    group by\n        1,\n        2,\n        3\n),\nezekia_companies as (\n    select\n        id as ezekia_company_id,\n        name,\n        json_extract_path(owner::json, 'id') as partner_owner_ezekia_id\n    from\n        \"warehouse_august\".\"august_STAGING\".\"stg_ezekia_companies\"\n),\nairtable_companies as (\n    select\n        _airtable_id as airtable_company_id,\n        name,\n        null as ezekia_company_id\n    from\n        \"warehouse_august\".\"august_STAGING\".\"stg_airtable_companies\"\n)\nselect\n    coalesce(airtable_companies.name,ezekia_companies.name,spreadsheet_companies.name) as name,\n    ezekia_companies.ezekia_company_id,\n    spreadsheet_companies.company_hash,\n    airtable_companies.airtable_company_id,\n    spreadsheet_companies.partner_owner_airtable_id,\n    concat(coalesce(company_hash,' '),'_',coalesce(airtable_company_id,' '),' ',coalesce(ezekia_companies.ezekia_company_id::text,' ')) as unique_company_id\nfrom\n    spreadsheet_companies\n    full outer join ezekia_companies\n    on spreadsheet_companies.ezekia_company_id=ezekia_companies.ezekia_company_id\n    full outer join airtable_companies\n    on spreadsheet_companies.ezekia_company_id::text=airtable_companies.ezekia_company_id\norder by 1,2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_INT\".\"int_companies\""}, "model.augustdbt.partner_financials": {"raw_sql": "select\nBANK, SPLIT, CLIENT, REGION, STATUS, PARTNER, PROJECT, TRUE_UP, POSITION, RECEIPTS, ADMIN_FEE, EZEKIA_ID, INVOLVEMENT, RECEIVABLES, PARTNER_NAME, _AIRTABLE_ID, PARTNER_IMAGE, PRACTICE_AREA, RETAINER_VALUE, ASSIGNMENT_TYPE, DATE_OF_BOOKING, INVOICES_RAISED, PLACEMENT_VALUE, SHORTLIST_VALUE, RETAINER_INVOICE_NO, EMAIL_FROM_PARTNER, FOURTH_INVOICE_VALUE, PARTNER_HOURS_CONSUMED, TOTAL_ASSIGNMENT_VALUE, _AIRTABLE_CREATED_TIME, INVOICE_FROM_PROJECT, OPEN_ASSIGNMENT_BALANCE, RECEIPTS_FROM_PROJECT, EZEKIA_ID_FROM_PROJECT, INITIAL_ASSIGNMENT_VALUE, RECEIVABLES_FROM_PROJECT, TRUE_UP_FROM_ASSIGNMENTS, INVOICE_FROM_PROJECT_COPY, ADMIN_FEE_FROM_ASSIGNMENTS, INVOICES_RAISED_FROM_PROJECT, RETAINER_DUE_FROM_ASSIGNMENT, RETAINER_ISSUED_FROM_PROJECT, SHORTLIST_DUE_FROM_ASSIGNMENT, SHORTLIST_ISSUED_FROM_PROJECT, RETAINER_RECEIVED_FROM_PROJECT, FOURTH_INVOICE_YN_FROM_PROJECT, RETAINER_VALUE_FROM_ASSIGNMENTS, SHORTLIST_RECEIVED_FROM_PROJECT, SHORTLIST_VALUE_FROM_ASSIGNMENTS, PLACEMENT_INVOICE_NO_FROM_PROJECT, SHORTLIST_INVOICE_NO_FROM_PROJECT, OPEN_ASSIGNMENT_BALANCE_FROM_PROJECT, AMPLIFY_HOURS_CONSUMED_FROM_ASSIGNMENTS, INITIAL_ASSIGNMENT_VALUE_FROM_ASSIGNMENTS, _AIRBYTE_AB_ID, _AIRBYTE_EMITTED_AT, _AIRBYTE_NORMALIZED_AT, _AIRBYTE_AIRTABLE_FINANCIALS_HASHID\nfrom {{ ref('stg_airtable_financials') }} as stg_airtable_financials", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.stg_airtable_financials"]}, "config": {"enabled": true, "alias": null, "schema": "FINAL", "database": null, "tags": ["final"], "meta": {"label": "Financials Partner Share"}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_FINAL", "fqn": ["augustdbt", "final", "partner_financials"], "unique_id": "model.augustdbt.partner_financials", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "final/partner_financials.sql", "original_file_path": "models/final/partner_financials.sql", "name": "partner_financials", "alias": "partner_financials", "checksum": {"name": "sha256", "checksum": "4ff9b90d78555a0e5b5222374540dfe00dc863e35ad3165a3f98d630ebae204d"}, "tags": ["final"], "refs": [["stg_airtable_financials"]], "sources": [], "metrics": [], "description": "", "columns": {"BANK": {"name": "BANK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SPLIT": {"name": "SPLIT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLIENT": {"name": "CLIENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REGION": {"name": "REGION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARTNER": {"name": "PARTNER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT": {"name": "PROJECT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "True_Up": {"name": "True_Up", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POSITION": {"name": "POSITION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPTS": {"name": "RECEIPTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Admin_Fee": {"name": "Admin_Fee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Ezekia_ID": {"name": "Ezekia_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INVOLVEMENT": {"name": "INVOLVEMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVABLES": {"name": "RECEIVABLES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Partner_Name": {"name": "Partner_Name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_ID": {"name": "_AIRTABLE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Partner_Image": {"name": "Partner_Image", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Practice_Area": {"name": "Practice_Area", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Retainer_Value": {"name": "Retainer_Value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Assignment_Type": {"name": "Assignment_Type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Date_of_Booking": {"name": "Date_of_Booking", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Invoices_Raised": {"name": "Invoices_Raised", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Placement_Value": {"name": "Placement_Value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Shortlist_Value": {"name": "Shortlist_Value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Retainer_Invoice_No": {"name": "Retainer_Invoice_No", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Email_from_Partner": {"name": "Email_from_Partner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Fourth_Invoice_Value": {"name": "Fourth_Invoice_Value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Partner_Hours_Consumed": {"name": "Partner_Hours_Consumed", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Total_Assignment_Value": {"name": "Total_Assignment_Value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_CREATED_TIME": {"name": "_AIRTABLE_CREATED_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_from_Project": {"name": "invoice_from_Project", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Open_Assignment_Balance": {"name": "Open_Assignment_Balance", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Receipts_from_Project": {"name": "Receipts_from_Project", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Ezekia_ID_from_Project": {"name": "Ezekia_ID_from_Project", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Initial_Assignment_Value": {"name": "Initial_Assignment_Value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Receivables_from_Project": {"name": "Receivables_from_Project", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "True_Up_from_Assignments": {"name": "True_Up_from_Assignments", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_from_Project_copy": {"name": "invoice_from_Project_copy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Admin_Fee_from_Assignments": {"name": "Admin_Fee_from_Assignments", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Invoices_Raised_from_Project": {"name": "Invoices_Raised_from_Project", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Retainer_Due_From_Assignment": {"name": "Retainer_Due_From_Assignment", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Retainer_Issued_from_Project": {"name": "Retainer_Issued_from_Project", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Shortlist_Due_from_Assignment": {"name": "Shortlist_Due_from_Assignment", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Shortlist_Issued_from_Project": {"name": "Shortlist_Issued_from_Project", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Retainer_Received_from_Project": {"name": "Retainer_Received_from_Project", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Fourth_Invoice_YN_from_Project": {"name": "Fourth_Invoice_YN_from_Project", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Retainer_Value_from_Assignments": {"name": "Retainer_Value_from_Assignments", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Shortlist_Received_from_Project": {"name": "Shortlist_Received_from_Project", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Shortlist_Value_from_Assignments": {"name": "Shortlist_Value_from_Assignments", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Placement_Invoice_No_from_Project": {"name": "Placement_Invoice_No_from_Project", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Shortlist_Invoice_No_from_Project": {"name": "Shortlist_Invoice_No_from_Project", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Open_Assignment_Balance_from_Project": {"name": "Open_Assignment_Balance_from_Project", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Amplify_Hours_Consumed_from_Assignments": {"name": "Amplify_Hours_Consumed_from_Assignments", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Initial_Assignment_Value_from_Assignments": {"name": "Initial_Assignment_Value_from_Assignments", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"label": "Financials Partner Share"}, "docs": {"show": true}, "patch_path": "augustdbt://models/final/partner_financials.yml", "compiled_path": "target/compiled/augustdbt/models/final/partner_financials.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "FINAL", "materialized": "table", "tags": "final"}, "created_at": 1661429719.640494, "compiled_sql": "select\nBANK, SPLIT, CLIENT, REGION, STATUS, PARTNER, PROJECT, TRUE_UP, POSITION, RECEIPTS, ADMIN_FEE, EZEKIA_ID, INVOLVEMENT, RECEIVABLES, PARTNER_NAME, _AIRTABLE_ID, PARTNER_IMAGE, PRACTICE_AREA, RETAINER_VALUE, ASSIGNMENT_TYPE, DATE_OF_BOOKING, INVOICES_RAISED, PLACEMENT_VALUE, SHORTLIST_VALUE, RETAINER_INVOICE_NO, EMAIL_FROM_PARTNER, FOURTH_INVOICE_VALUE, PARTNER_HOURS_CONSUMED, TOTAL_ASSIGNMENT_VALUE, _AIRTABLE_CREATED_TIME, INVOICE_FROM_PROJECT, OPEN_ASSIGNMENT_BALANCE, RECEIPTS_FROM_PROJECT, EZEKIA_ID_FROM_PROJECT, INITIAL_ASSIGNMENT_VALUE, RECEIVABLES_FROM_PROJECT, TRUE_UP_FROM_ASSIGNMENTS, INVOICE_FROM_PROJECT_COPY, ADMIN_FEE_FROM_ASSIGNMENTS, INVOICES_RAISED_FROM_PROJECT, RETAINER_DUE_FROM_ASSIGNMENT, RETAINER_ISSUED_FROM_PROJECT, SHORTLIST_DUE_FROM_ASSIGNMENT, SHORTLIST_ISSUED_FROM_PROJECT, RETAINER_RECEIVED_FROM_PROJECT, FOURTH_INVOICE_YN_FROM_PROJECT, RETAINER_VALUE_FROM_ASSIGNMENTS, SHORTLIST_RECEIVED_FROM_PROJECT, SHORTLIST_VALUE_FROM_ASSIGNMENTS, PLACEMENT_INVOICE_NO_FROM_PROJECT, SHORTLIST_INVOICE_NO_FROM_PROJECT, OPEN_ASSIGNMENT_BALANCE_FROM_PROJECT, AMPLIFY_HOURS_CONSUMED_FROM_ASSIGNMENTS, INITIAL_ASSIGNMENT_VALUE_FROM_ASSIGNMENTS, _AIRBYTE_AB_ID, _AIRBYTE_EMITTED_AT, _AIRBYTE_NORMALIZED_AT, _AIRBYTE_AIRTABLE_FINANCIALS_HASHID\nfrom \"warehouse_august\".\"august_STAGING\".\"stg_airtable_financials\" as stg_airtable_financials", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_FINAL\".\"partner_financials\""}, "model.augustdbt.stg_ezekia_users": {"raw_sql": "select\n    ID,\n    EMAIL,\n    PHONE,\n    FULLNAME,\n    LASTNAME,\n    LOCATION,\n    FIRSTNAME,\n    PROFILEPICTURE,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_EZEKIA_USERS_HASHID\nfrom {{ source('ezekia', 'ezekia_users') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.ezekia.ezekia_users"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "ezekia", "stg_ezekia_users"], "unique_id": "model.augustdbt.stg_ezekia_users", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/ezekia/stg_ezekia_users.sql", "original_file_path": "models/staging/ezekia/stg_ezekia_users.sql", "name": "stg_ezekia_users", "alias": "stg_ezekia_users", "checksum": {"name": "sha256", "checksum": "d7aad6d0b64eb4c5a1d9fdcfed417ac417f133ac6c60713f3c5cee8c1dccbe63"}, "tags": ["staging"], "refs": [], "sources": [["ezekia", "ezekia_users"]], "metrics": [], "description": "", "columns": {"ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAIL": {"name": "EMAIL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PHONE": {"name": "PHONE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FULLNAME": {"name": "FULLNAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTNAME": {"name": "LASTNAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOCATION": {"name": "LOCATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FIRSTNAME": {"name": "FIRSTNAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROFILEPICTURE": {"name": "PROFILEPICTURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AB_ID": {"name": "_AIRBYTE_AB_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_EMITTED_AT": {"name": "_AIRBYTE_EMITTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_NORMALIZED_AT": {"name": "_AIRBYTE_NORMALIZED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_EZEKIA_USERS_HASHID": {"name": "_AIRBYTE_EZEKIA_USERS_HASHID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/ezekia/stg_ezekia_users.yml", "compiled_path": "target/compiled/augustdbt/models/staging/ezekia/stg_ezekia_users.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429719.64292, "compiled_sql": "select\n    ID,\n    EMAIL,\n    PHONE,\n    FULLNAME,\n    LASTNAME,\n    LOCATION,\n    FIRSTNAME,\n    PROFILEPICTURE,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_EZEKIA_USERS_HASHID\nfrom \"warehouse_august\".\"august_airbyte\".\"ezekia_users\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_ezekia_users\""}, "model.augustdbt.stg_airtable_regions": {"raw_sql": "select\n    \"Name\" as name\nfrom {{source('airtable','airtable_regions')}}\ngroup by 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.airtable.airtable_regions"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "airtable", "stg_airtable_regions"], "unique_id": "model.augustdbt.stg_airtable_regions", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/airtable/stg_airtable_regions.sql", "original_file_path": "models/staging/airtable/stg_airtable_regions.sql", "name": "stg_airtable_regions", "alias": "stg_airtable_regions", "checksum": {"name": "sha256", "checksum": "d3a49e06f56e05edb2df38179adfb757c1412b53b6f462e820d13c968178ed1f"}, "tags": ["staging"], "refs": [], "sources": [["airtable", "airtable_regions"]], "metrics": [], "description": "", "columns": {"ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/airtable/stg_airtable_regions.yml", "compiled_path": "target/compiled/augustdbt/models/staging/airtable/stg_airtable_regions.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429719.6435041, "compiled_sql": "select\n    \"Name\" as name\nfrom \"warehouse_august\".\"august_airbyte\".\"airtable_regions\"\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_airtable_regions\""}, "model.augustdbt.stg_airtable_practice_area": {"raw_sql": "select\n    \"Name\" as name,\n    EMPLOYEES,\n    \"Ezekia ID\" as ezekia_practice_area_id,\n    _AIRTABLE_ID,\n    _AIRTABLE_CREATED_TIME,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_AIRTABLE_PRACTICE_AREAS_HASHID\nfrom {{ source('airtable', 'airtable_practice_areas') }}\norder by name", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.airtable.airtable_practice_areas"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "airtable", "stg_airtable_practice_area"], "unique_id": "model.augustdbt.stg_airtable_practice_area", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/airtable/stg_airtable_practice_area.sql", "original_file_path": "models/staging/airtable/stg_airtable_practice_area.sql", "name": "stg_airtable_practice_area", "alias": "stg_airtable_practice_area", "checksum": {"name": "sha256", "checksum": "7d66627c582ea3072cc42b30531ef5ac8627f20b1a45f6ea7f9fe7040a3fcdeb"}, "tags": ["staging"], "refs": [], "sources": [["airtable", "airtable_practice_areas"]], "metrics": [], "description": "", "columns": {"NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMPLOYEES": {"name": "EMPLOYEES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Ezekia ID": {"name": "Ezekia ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_ID": {"name": "_AIRTABLE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_CREATED_TIME": {"name": "_AIRTABLE_CREATED_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AB_ID": {"name": "_AIRBYTE_AB_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_EMITTED_AT": {"name": "_AIRBYTE_EMITTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_NORMALIZED_AT": {"name": "_AIRBYTE_NORMALIZED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AIRTABLE_PRACTICE_AREAS_HASHID": {"name": "_AIRBYTE_AIRTABLE_PRACTICE_AREAS_HASHID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/airtable/stg_airtable_practice_area.yml", "compiled_path": "target/compiled/augustdbt/models/staging/airtable/stg_airtable_practice_area.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429719.6457732, "compiled_sql": "select\n    \"Name\" as name,\n    EMPLOYEES,\n    \"Ezekia ID\" as ezekia_practice_area_id,\n    _AIRTABLE_ID,\n    _AIRTABLE_CREATED_TIME,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_AIRTABLE_PRACTICE_AREAS_HASHID\nfrom \"warehouse_august\".\"august_airbyte\".\"airtable_practice_areas\"\norder by name", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_airtable_practice_area\""}, "model.augustdbt.researchers": {"raw_sql": "select\r\n    _airtable_id as Id,\r\n    Name,\r\n    Email\r\nfrom {{ ref('int_researchers') }}\r\norder by Name asc\r\n-- this could be joined to give total total hours here, but wouldn't be filterable by \r\n-- month or project so maybe better just as a list", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.int_researchers"]}, "config": {"enabled": true, "alias": null, "schema": "FINAL", "database": null, "tags": ["final"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_FINAL", "fqn": ["augustdbt", "final", "researchers"], "unique_id": "model.augustdbt.researchers", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "final/researchers.sql", "original_file_path": "models/final/researchers.sql", "name": "researchers", "alias": "researchers", "checksum": {"name": "sha256", "checksum": "5164f0dedbaa9f3456ce4fb95d98cb8a1d74f5f5a3f29a2c5069cecc31b0a8ba"}, "tags": ["final"], "refs": [["int_researchers"]], "sources": [], "metrics": [], "description": "A table of all researchers at August from Harvest.", "columns": {"ID": {"name": "ID", "description": "", "meta": {"dimension": {"hidden": true}, "metrics": {"total_companies": {"label": "Total Reseachers", "type": "count_distinct"}}}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAIL": {"name": "EMAIL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/final/researchers.yml", "compiled_path": "target/compiled/augustdbt/models/final/researchers.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "FINAL", "materialized": "table", "tags": "final"}, "created_at": 1661429719.64688, "compiled_sql": "select\n    _airtable_id as Id,\n    Name,\n    Email\nfrom \"warehouse_august\".\"august_INT\".\"int_researchers\"\norder by Name asc\n-- this could be joined to give total total hours here, but wouldn't be filterable by \n-- month or project so maybe better just as a list", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_FINAL\".\"researchers\""}, "model.augustdbt.stg_ezekia_companies": {"raw_sql": "--weirdly there are several duplicates in the table, e.g. 378285\n\nselect\n    id,\n    name,\n    email,\n    owner\nfrom {{ source('ezekia', 'ezekia_companies') }}\ngroup by 1, 2, 3,4", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.ezekia.ezekia_companies"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "ezekia", "stg_ezekia_companies"], "unique_id": "model.augustdbt.stg_ezekia_companies", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/ezekia/stg_ezekia_companies.sql", "original_file_path": "models/staging/ezekia/stg_ezekia_companies.sql", "name": "stg_ezekia_companies", "alias": "stg_ezekia_companies", "checksum": {"name": "sha256", "checksum": "fb94876a6c3d2fb1558a1dcd44a90a1a3b8acbcbbed986d55114fa06682632e5"}, "tags": ["staging"], "refs": [], "sources": [["ezekia", "ezekia_companies"]], "metrics": [], "description": "", "columns": {"ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAIL": {"name": "EMAIL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OWNER": {"name": "OWNER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/ezekia/stg_ezekia_companies.yml", "compiled_path": "target/compiled/augustdbt/models/staging/ezekia/stg_ezekia_companies.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429719.654513, "compiled_sql": "--weirdly there are several duplicates in the table, e.g. 378285\n\nselect\n    id,\n    name,\n    email,\n    owner\nfrom \"warehouse_august\".\"august_airbyte\".\"ezekia_companies\"\ngroup by 1, 2, 3,4", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_ezekia_companies\""}, "model.augustdbt.int_partners": {"raw_sql": "--this is somewhat clumsy\n-- there is a concept of an onboarded partner who has over 6 months\n-- concept of currently active or not\n-- partners have a target of $750k annually which can also be mapped pro rata\n\nwith airtable_partners as (\n    select * from {{ref ('stg_airtable_employees') }}\n    where \"Role new\" = 'Partner'\n),\n\nezekia_partners as (\n    select\n        id,\n        email,\n        fullname,\n        phone\n    from {{ ref('stg_ezekia_users') }}\n)\n\nselect\n    airtable_partners._airtable_id as id,\n    airtable_partners.name,\n    airtable_partners.email,\n    ezekia_partners.id as ezekia_partner_id\nfrom airtable_partners\nleft join ezekia_partners on\n    airtable_partners.email = ezekia_partners.email", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.stg_airtable_employees", "model.augustdbt.stg_ezekia_users"]}, "config": {"enabled": true, "alias": null, "schema": "INT", "database": null, "tags": ["int"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_INT", "fqn": ["augustdbt", "int", "int_partners"], "unique_id": "model.augustdbt.int_partners", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "int/int_partners.sql", "original_file_path": "models/int/int_partners.sql", "name": "int_partners", "alias": "int_partners", "checksum": {"name": "sha256", "checksum": "e70b9f9701bdcf3fcc5f891dcfdd1a5dcc59525940e1a052d1b93c2aefbe86ab"}, "tags": ["int"], "refs": [["stg_airtable_employees"], ["stg_ezekia_users"]], "sources": [], "metrics": [], "description": "", "columns": {"ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAIL": {"name": "EMAIL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EZEKIA_PARTNER_ID": {"name": "EZEKIA_PARTNER_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/int/int_partners.yml", "compiled_path": "target/compiled/augustdbt/models/int/int_partners.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "INT", "materialized": "view", "tags": "int"}, "created_at": 1661429719.6553862, "compiled_sql": "--this is somewhat clumsy\n-- there is a concept of an onboarded partner who has over 6 months\n-- concept of currently active or not\n-- partners have a target of $750k annually which can also be mapped pro rata\n\nwith airtable_partners as (\n    select * from \"warehouse_august\".\"august_STAGING\".\"stg_airtable_employees\"\n    where \"Role new\" = 'Partner'\n),\n\nezekia_partners as (\n    select\n        id,\n        email,\n        fullname,\n        phone\n    from \"warehouse_august\".\"august_STAGING\".\"stg_ezekia_users\"\n)\n\nselect\n    airtable_partners._airtable_id as id,\n    airtable_partners.name,\n    airtable_partners.email,\n    ezekia_partners.id as ezekia_partner_id\nfrom airtable_partners\nleft join ezekia_partners on\n    airtable_partners.email = ezekia_partners.email", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_INT\".\"int_partners\""}, "model.augustdbt.stg_ezekia_people": {"raw_sql": "select\n    ID,\n    NAME,\n    LABEL,\n    LINKS,\n    OWNER,\n    EMAILS,\n    PHONES,\n    DATATYPE,\n    FULLNAME,\n    LASTNAME,\n    ADDRESSES,\n    CREATEDAT,\n    FIRSTNAME,\n    HONORIFIC,\n    UPDATEDAT,\n    PROFILEPICTURE,\n    FULLNAMESEARCHABLE,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_EZEKIA_PEOPLE_HASHID\nfrom {{ source('ezekia', 'ezekia_people') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.ezekia.ezekia_people"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "ezekia", "stg_ezekia_people"], "unique_id": "model.augustdbt.stg_ezekia_people", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/ezekia/stg_ezekia_people.sql", "original_file_path": "models/staging/ezekia/stg_ezekia_people.sql", "name": "stg_ezekia_people", "alias": "stg_ezekia_people", "checksum": {"name": "sha256", "checksum": "7a58a2c0c0858a737850f90d576ac94e592631c91e0452f3151ad3d018489d5a"}, "tags": ["staging"], "refs": [], "sources": [["ezekia", "ezekia_people"]], "metrics": [], "description": "", "columns": {"ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LINKS": {"name": "LINKS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OWNER": {"name": "OWNER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAILS": {"name": "EMAILS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PHONES": {"name": "PHONES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATATYPE": {"name": "DATATYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FULLNAME": {"name": "FULLNAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LASTNAME": {"name": "LASTNAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESSES": {"name": "ADDRESSES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATEDAT": {"name": "CREATEDAT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FIRSTNAME": {"name": "FIRSTNAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HONORIFIC": {"name": "HONORIFIC", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UPDATEDAT": {"name": "UPDATEDAT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROFILEPICTURE": {"name": "PROFILEPICTURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FULLNAMESEARCHABLE": {"name": "FULLNAMESEARCHABLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AB_ID": {"name": "_AIRBYTE_AB_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_EMITTED_AT": {"name": "_AIRBYTE_EMITTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_NORMALIZED_AT": {"name": "_AIRBYTE_NORMALIZED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_EZEKIA_PEOPLE_HASHID": {"name": "_AIRBYTE_EZEKIA_PEOPLE_HASHID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/ezekia/stg_ezekia_people.yml", "compiled_path": "target/compiled/augustdbt/models/staging/ezekia/stg_ezekia_people.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429719.65872, "compiled_sql": "select\n    ID,\n    NAME,\n    LABEL,\n    LINKS,\n    OWNER,\n    EMAILS,\n    PHONES,\n    DATATYPE,\n    FULLNAME,\n    LASTNAME,\n    ADDRESSES,\n    CREATEDAT,\n    FIRSTNAME,\n    HONORIFIC,\n    UPDATEDAT,\n    PROFILEPICTURE,\n    FULLNAMESEARCHABLE,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_EZEKIA_PEOPLE_HASHID\nfrom \"warehouse_august\".\"august_airbyte\".\"ezekia_people\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_ezekia_people\""}, "model.augustdbt.int_practice_areas": {"raw_sql": "with airtable_practice_areas as (\n    select *\n    from {{ref('stg_airtable_practice_area')}}\n),\nezekia_industries as (\n    select *\n    from {{ref('stg_ezekia_industries')}}\n)\n\nselect * from airtable_practice_areas", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.stg_airtable_practice_area", "model.augustdbt.stg_ezekia_industries"]}, "config": {"enabled": true, "alias": null, "schema": "INT", "database": null, "tags": ["int"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_INT", "fqn": ["augustdbt", "int", "int_practice_areas"], "unique_id": "model.augustdbt.int_practice_areas", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "int/int_practice_areas.sql", "original_file_path": "models/int/int_practice_areas.sql", "name": "int_practice_areas", "alias": "int_practice_areas", "checksum": {"name": "sha256", "checksum": "1a2da067ece95e1c003d5fbf77f97f03efc51217db6ef4aea0582c3d8386d532"}, "tags": ["int"], "refs": [["stg_airtable_practice_area"], ["stg_ezekia_industries"]], "sources": [], "metrics": [], "description": "", "columns": {"NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMPLOYEES": {"name": "EMPLOYEES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Ezekia ID": {"name": "Ezekia ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_ID": {"name": "_AIRTABLE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_CREATED_TIME": {"name": "_AIRTABLE_CREATED_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AB_ID": {"name": "_AIRBYTE_AB_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_EMITTED_AT": {"name": "_AIRBYTE_EMITTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_NORMALIZED_AT": {"name": "_AIRBYTE_NORMALIZED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AIRTABLE_PRACTICE_AREAS_HASHID": {"name": "_AIRBYTE_AIRTABLE_PRACTICE_AREAS_HASHID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/int/int_practice_areas.yml", "compiled_path": "target/compiled/augustdbt/models/int/int_practice_areas.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "INT", "materialized": "view", "tags": "int"}, "created_at": 1661429719.660471, "compiled_sql": "with airtable_practice_areas as (\n    select *\n    from \"warehouse_august\".\"august_STAGING\".\"stg_airtable_practice_area\"\n),\nezekia_industries as (\n    select *\n    from \"warehouse_august\".\"august_STAGING\".\"stg_ezekia_industries\"\n)\n\nselect * from airtable_practice_areas", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_INT\".\"int_practice_areas\""}, "model.augustdbt.int_researchers": {"raw_sql": "--this is somewhat clumsy\n-- there is a concept of a trained resource and an untrained resource\n\n\nwith researchers as (\n    select * from {{ref('stg_airtable_employees')}}\n    where \"Role new\" = 'Amplify'\n)\nselect _airtable_id,\n    name,\n    email\nfrom researchers", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.stg_airtable_employees"]}, "config": {"enabled": true, "alias": null, "schema": "INT", "database": null, "tags": ["int"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_INT", "fqn": ["augustdbt", "int", "int_researchers"], "unique_id": "model.augustdbt.int_researchers", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "int/int_researchers.sql", "original_file_path": "models/int/int_researchers.sql", "name": "int_researchers", "alias": "int_researchers", "checksum": {"name": "sha256", "checksum": "33cf6ec788666a9cf9c0f1812b1e80d0044a0d1b562e8848fafdbbe0d8055371"}, "tags": ["int"], "refs": [["stg_airtable_employees"]], "sources": [], "metrics": [], "description": "", "columns": {"_AIRTABLE_ID": {"name": "_AIRTABLE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAIL": {"name": "EMAIL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/int/int_researchers.yml", "compiled_path": "target/compiled/augustdbt/models/int/int_researchers.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "INT", "materialized": "view", "tags": "int"}, "created_at": 1661429719.6611829, "compiled_sql": "--this is somewhat clumsy\n-- there is a concept of a trained resource and an untrained resource\n\n\nwith researchers as (\n    select * from \"warehouse_august\".\"august_STAGING\".\"stg_airtable_employees\"\n    where \"Role new\" = 'Amplify'\n)\nselect _airtable_id,\n    name,\n    email\nfrom researchers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_INT\".\"int_researchers\""}, "model.augustdbt.stg_ezekia_projects_relationships": {"raw_sql": "select\n    _AIRBYTE_EZEKIA_PROJECTS_HASHID,\n    COMPANY,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_RELATIONSHIPS_HASHID\nfrom {{ source('ezekia', 'ezekia_projects_relationships') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.ezekia.ezekia_projects_relationships"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "ezekia", "stg_ezekia_projects_relationships"], "unique_id": "model.augustdbt.stg_ezekia_projects_relationships", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/ezekia/stg_ezekia_projects_relationships.sql", "original_file_path": "models/staging/ezekia/stg_ezekia_projects_relationships.sql", "name": "stg_ezekia_projects_relationships", "alias": "stg_ezekia_projects_relationships", "checksum": {"name": "sha256", "checksum": "708a22e84d821cfa5aff35cbe20d363a0de299c869dc7fd72c5c5322be7eb39e"}, "tags": ["staging"], "refs": [], "sources": [["ezekia", "ezekia_projects_relationships"]], "metrics": [], "description": "", "columns": {"_AIRBYTE_EZEKIA_PROJECTS_HASHID": {"name": "_AIRBYTE_EZEKIA_PROJECTS_HASHID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANY": {"name": "COMPANY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AB_ID": {"name": "_AIRBYTE_AB_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_EMITTED_AT": {"name": "_AIRBYTE_EMITTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_NORMALIZED_AT": {"name": "_AIRBYTE_NORMALIZED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_RELATIONSHIPS_HASHID": {"name": "_AIRBYTE_RELATIONSHIPS_HASHID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/ezekia/stg_ezekia_projects_relationships.yml", "compiled_path": "target/compiled/augustdbt/models/staging/ezekia/stg_ezekia_projects_relationships.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429719.662376, "compiled_sql": "select\n    _AIRBYTE_EZEKIA_PROJECTS_HASHID,\n    COMPANY,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_RELATIONSHIPS_HASHID\nfrom \"warehouse_august\".\"august_airbyte\".\"ezekia_projects_relationships\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_ezekia_projects_relationships\""}, "model.augustdbt.stg_ezekia_practice_areas": {"raw_sql": "select\n    id,\n    name\nfrom {{ source('ezekia', 'projects_industries') }}\ngroup by 1, 2\norder by id asc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.ezekia.projects_industries"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "ezekia", "stg_ezekia_practice_areas"], "unique_id": "model.augustdbt.stg_ezekia_practice_areas", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/ezekia/stg_ezekia_practice_areas.sql", "original_file_path": "models/staging/ezekia/stg_ezekia_practice_areas.sql", "name": "stg_ezekia_practice_areas", "alias": "stg_ezekia_practice_areas", "checksum": {"name": "sha256", "checksum": "b2765d4ff5c0effaa6800b8ed99d010702d376c2c515de53f304043776510200"}, "tags": ["staging"], "refs": [], "sources": [["ezekia", "projects_industries"]], "metrics": [], "description": "", "columns": {"ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/ezekia/stg_ezekia_practice_areas.yml", "compiled_path": "target/compiled/augustdbt/models/staging/ezekia/stg_ezekia_practice_areas.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429719.6630578, "compiled_sql": "select\n    id,\n    name\nfrom \"warehouse_august\".\"august_airbyte\".\"ezekia_projects_industries\"\ngroup by 1, 2\norder by id asc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_ezekia_practice_areas\""}, "model.augustdbt.int_time_entries": {"raw_sql": "-- combined harvest with spreadsheet history\n\nwith time_entries_from_spreadsheets as (\n    select *\n    from {{ref('time_entries_from_spreadsheets')}}\n),\n\nstart_date_processing as (\n    select\n        hour_hash,\n        start_date,\n        case when strpos(start_date, '-') > 0 then start_date::date end as date_1,\n        case\n            when start_date = '\u00a012/22/2021' then '2021-12-22'::date\n        end as date_5,\n        case when start_date = '8/9/92021' then '2021-9-8'::date end as date_6,\n        case\n            when\n                strpos(\n                    start_date, '/'\n                ) > 0 and start_date != '\u00a012/22/2021' and start_date != '8/9/92021' and split_part(\n                    start_date, '/', 2\n                )::integer <= 12 then to_timestamp(start_date, 'dd/mm/yyyy')\n        end::date as date_2,\n        case\n            when\n                strpos(\n                    start_date, '/'\n                ) > 0 and start_date != '\u00a012/22/2021' and start_date != '8/9/92021' and split_part(\n                    start_date, '/', 1\n                )::integer <= 12 then to_timestamp(start_date, 'mm/dd/yyyy')\n        end::date as date_7,\n        case\n            when\n                length(\n                    start_date\n                ) = 5 then '1899-12-30'::date + start_date::integer * INTERVAL '1 day'\n        end as date_3,\n        case\n            when\n                length(\n                    start_date\n                ) = 10 and not strpos(\n                    start_date, '/'\n                ) > 0 and not strpos(\n                    start_date, '-'\n                ) > 0 then to_timestamp(start_date, 'dd/mm/yyyy')\n        end as date_4\n    from time_entries_from_spreadsheets\n), start_date_processing2 as (\n    select *,\n        coalesce(\n            date_1, date_2, date_3, date_4, date_5, date_6, date_7\n        ) as start_date_final\n    from start_date_processing\n    where start_date is not null\n), remove_nulls_apply_values as (\n    select\n        company_project_hash,\n        min(ezekia_id) as ezekia_id,\n        min(type_of_job) as type_of_job,\n        min(subtype_of_job) as subtype_of_job,\n        min(company_id) as company_id,\n        min(project) as project,\n        min(company) as company,\n        min(description) as description,\n        min(practice_area) as practice_area\n    from time_entries_from_spreadsheets\n    group by company_project_hash\n)\n\nselect\n    date::date as date,\n    time_entries_from_spreadsheets.hour_hash,\n    time_entries_from_spreadsheets.company_project_hash,\n    start_date_processing2.start_date_final::date as start_date,\n    researcher_airtable_id,\n    time_entries_from_spreadsheets.researcher,\n    remove_nulls_apply_values.ezekia_id,\n    remove_nulls_apply_values.type_of_job,\n    remove_nulls_apply_values.subtype_of_job,\n    remove_nulls_apply_values.company,\n    remove_nulls_apply_values.company_id,\n    remove_nulls_apply_values.project,\n    remove_nulls_apply_values.practice_area,\n    hours::decimal as hours,\n    date_trunc('month', date::date) as month\nfrom time_entries_from_spreadsheets\nleft join start_date_processing2 on\n    time_entries_from_spreadsheets.hour_hash = start_date_processing2.hour_hash\nleft join remove_nulls_apply_values on\n    time_entries_from_spreadsheets.company_project_hash = remove_nulls_apply_values.company_project_hash", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.augustdbt.time_entries_from_spreadsheets"]}, "config": {"enabled": true, "alias": null, "schema": "INT", "database": null, "tags": ["int"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_INT", "fqn": ["augustdbt", "int", "int_time_entries"], "unique_id": "model.augustdbt.int_time_entries", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "int/int_time_entries.sql", "original_file_path": "models/int/int_time_entries.sql", "name": "int_time_entries", "alias": "int_time_entries", "checksum": {"name": "sha256", "checksum": "cb71795adf61ff2d78aa22b6d4a322ffea17724821c7b036d8e50559d90187ef"}, "tags": ["int"], "refs": [["time_entries_from_spreadsheets"]], "sources": [], "metrics": [], "description": "", "columns": {"DATE": {"name": "DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hour_hash": {"name": "hour_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EZEKIA_ID": {"name": "EZEKIA_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HOURS": {"name": "HOURS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MONTH": {"name": "MONTH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RESEARCHER_AIRTABLE_ID": {"name": "RESEARCHER_AIRTABLE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "company_project_hash": {"name": "company_project_hash", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/int/int_time_entries.yml", "compiled_path": "target/compiled/augustdbt/models/int/int_time_entries.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "INT", "materialized": "view", "tags": "int"}, "created_at": 1661429719.664352, "compiled_sql": "-- combined harvest with spreadsheet history\n\nwith time_entries_from_spreadsheets as (\n    select *\n    from \"warehouse_august\".\"august_SEED\".\"time_entries_from_spreadsheets\"\n),\n\nstart_date_processing as (\n    select\n        hour_hash,\n        start_date,\n        case when strpos(start_date, '-') > 0 then start_date::date end as date_1,\n        case\n            when start_date = '\u00a012/22/2021' then '2021-12-22'::date\n        end as date_5,\n        case when start_date = '8/9/92021' then '2021-9-8'::date end as date_6,\n        case\n            when\n                strpos(\n                    start_date, '/'\n                ) > 0 and start_date != '\u00a012/22/2021' and start_date != '8/9/92021' and split_part(\n                    start_date, '/', 2\n                )::integer <= 12 then to_timestamp(start_date, 'dd/mm/yyyy')\n        end::date as date_2,\n        case\n            when\n                strpos(\n                    start_date, '/'\n                ) > 0 and start_date != '\u00a012/22/2021' and start_date != '8/9/92021' and split_part(\n                    start_date, '/', 1\n                )::integer <= 12 then to_timestamp(start_date, 'mm/dd/yyyy')\n        end::date as date_7,\n        case\n            when\n                length(\n                    start_date\n                ) = 5 then '1899-12-30'::date + start_date::integer * INTERVAL '1 day'\n        end as date_3,\n        case\n            when\n                length(\n                    start_date\n                ) = 10 and not strpos(\n                    start_date, '/'\n                ) > 0 and not strpos(\n                    start_date, '-'\n                ) > 0 then to_timestamp(start_date, 'dd/mm/yyyy')\n        end as date_4\n    from time_entries_from_spreadsheets\n), start_date_processing2 as (\n    select *,\n        coalesce(\n            date_1, date_2, date_3, date_4, date_5, date_6, date_7\n        ) as start_date_final\n    from start_date_processing\n    where start_date is not null\n), remove_nulls_apply_values as (\n    select\n        company_project_hash,\n        min(ezekia_id) as ezekia_id,\n        min(type_of_job) as type_of_job,\n        min(subtype_of_job) as subtype_of_job,\n        min(company_id) as company_id,\n        min(project) as project,\n        min(company) as company,\n        min(description) as description,\n        min(practice_area) as practice_area\n    from time_entries_from_spreadsheets\n    group by company_project_hash\n)\n\nselect\n    date::date as date,\n    time_entries_from_spreadsheets.hour_hash,\n    time_entries_from_spreadsheets.company_project_hash,\n    start_date_processing2.start_date_final::date as start_date,\n    researcher_airtable_id,\n    time_entries_from_spreadsheets.researcher,\n    remove_nulls_apply_values.ezekia_id,\n    remove_nulls_apply_values.type_of_job,\n    remove_nulls_apply_values.subtype_of_job,\n    remove_nulls_apply_values.company,\n    remove_nulls_apply_values.company_id,\n    remove_nulls_apply_values.project,\n    remove_nulls_apply_values.practice_area,\n    hours::decimal as hours,\n    date_trunc('month', date::date) as month\nfrom time_entries_from_spreadsheets\nleft join start_date_processing2 on\n    time_entries_from_spreadsheets.hour_hash = start_date_processing2.hour_hash\nleft join remove_nulls_apply_values on\n    time_entries_from_spreadsheets.company_project_hash = remove_nulls_apply_values.company_project_hash", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_INT\".\"int_time_entries\""}, "model.augustdbt.practice_areas": {"raw_sql": "select\n    _AIRTABLE_ID as id,\n    name,\n    employees,\n    ezekia_practice_area_id\nfrom {{ ref('stg_airtable_practice_area') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.stg_airtable_practice_area"]}, "config": {"enabled": true, "alias": null, "schema": "FINAL", "database": null, "tags": ["final"], "meta": {"label": "Practice Areas"}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_FINAL", "fqn": ["augustdbt", "final", "practice_areas"], "unique_id": "model.augustdbt.practice_areas", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "final/practice_areas.sql", "original_file_path": "models/final/practice_areas.sql", "name": "practice_areas", "alias": "practice_areas", "checksum": {"name": "sha256", "checksum": "328d65baf521f3027a5cb104943582263d68c76abf09a62136caa5a92bda3686"}, "tags": ["final"], "refs": [["stg_airtable_practice_area"]], "sources": [], "metrics": [], "description": "A table of all industries served at August.", "columns": {"ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMPLOYEES": {"name": "EMPLOYEES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ezekia_practice_area_id": {"name": "ezekia_practice_area_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"label": "Practice Areas"}, "docs": {"show": true}, "patch_path": "augustdbt://models/final/practice_areas.yml", "compiled_path": "target/compiled/augustdbt/models/final/practice_areas.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "FINAL", "materialized": "table", "tags": "final"}, "created_at": 1661429719.66862, "compiled_sql": "select\n    _AIRTABLE_ID as id,\n    name,\n    employees,\n    ezekia_practice_area_id\nfrom \"warehouse_august\".\"august_STAGING\".\"stg_airtable_practice_area\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_FINAL\".\"practice_areas\""}, "model.augustdbt.stg_harvest_users": {"raw_sql": "SELECT\n    id,\n    first_name,\n    last_name,\n    email,\n    strpos(roles::text, 'Researcher') > 0 as researcher\nFROM\n    {{ source('harvest','users') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.harvest.users"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "harvest", "stg_harvest_users"], "unique_id": "model.augustdbt.stg_harvest_users", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/harvest/stg_harvest_users.sql", "original_file_path": "models/staging/harvest/stg_harvest_users.sql", "name": "stg_harvest_users", "alias": "stg_harvest_users", "checksum": {"name": "sha256", "checksum": "10020916124ebc4717ede834931371db22dfbb1d53eb60e23b5d140284a49d8e"}, "tags": ["staging"], "refs": [], "sources": [["harvest", "users"]], "metrics": [], "description": "", "columns": {"ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FIRST_NAME": {"name": "FIRST_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_NAME": {"name": "LAST_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAIL": {"name": "EMAIL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RESEARCHER": {"name": "RESEARCHER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/harvest/stg_harvest_users.yml", "compiled_path": "target/compiled/augustdbt/models/staging/harvest/stg_harvest_users.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429719.669853, "compiled_sql": "SELECT\n    id,\n    first_name,\n    last_name,\n    email,\n    strpos(roles::text, 'Researcher') > 0 as researcher\nFROM\n    \"warehouse_august\".\"august_airbyte\".\"harvest_users\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_harvest_users\""}, "model.augustdbt.stg_airtable_invoices": {"raw_sql": "select\n    \"Name\" as name,\n    split_part(\"Assignment\", '''', 2)::text as assignment,\n    \"Invoice due\"::date as invoice_due_date,\n    \"Days Overdue\" as days_overdue,\n    \"Formula Name\" as formula_name,\n    \"Invoice Type\" as invoice_type,\n    _AIRTABLE_ID,\n    \"Invoice Amount\" as invoice_amount,\n    \"Invoice Issued\"::date as invoice_issued_date,\n    \"Invoice Issued\" is not null as issued,\n    \"Invoice Received\"::date as invoice_paid_date,\n    \"Invoice Received\" is not null as paid,\n    \"Invoice Received\" is null as outstanding,\n    \"Days Overdue Formula\" as days_overdue_formula,\n    \"Days Overdue Formula\"::integer > 0 as overdue,\n    _AIRTABLE_CREATED_TIME,\n    split_part(\"Bank (from Assignments)\", '''', 2)::text as bank,\n    split_part(\"Client (from Assignments)\", '''', 2)::text as company_id,\n    \"Position (from Assignments)\" as position,\n    split_part(\"Ezekia ID (from Assignments)\", '''', 2)::text as ezekia_id,\n    \"Custom Invoice Number (optional)\" as custom_invoice_number,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_AIRTABLE_INVOICES_HASHID\nfrom {{ source('airtable', 'airtable_invoices') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.airtable.airtable_invoices"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "airtable", "stg_airtable_invoices"], "unique_id": "model.augustdbt.stg_airtable_invoices", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/airtable/stg_airtable_invoices.sql", "original_file_path": "models/staging/airtable/stg_airtable_invoices.sql", "name": "stg_airtable_invoices", "alias": "stg_airtable_invoices", "checksum": {"name": "sha256", "checksum": "84432550adc0211b01a92f94e9bad880eea84efe5ce42565b3ba9350aa36f003"}, "tags": ["staging"], "refs": [], "sources": [["airtable", "airtable_invoices"]], "metrics": [], "description": "", "columns": {"NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSIGNMENT": {"name": "ASSIGNMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INVOICE_DUE": {"name": "INVOICE_DUE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAYS_OVERDUE": {"name": "DAYS_OVERDUE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FORMULA_NAME": {"name": "FORMULA_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INVOICE_TYPE": {"name": "INVOICE_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_ID": {"name": "_AIRTABLE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INVOICE_AMOUNT": {"name": "INVOICE_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INVOICE_ISSUED": {"name": "INVOICE_ISSUED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INVOICE_RECEIVED": {"name": "INVOICE_RECEIVED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAYS_OVERDUE_FORMULA": {"name": "DAYS_OVERDUE_FORMULA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_CREATED_TIME": {"name": "_AIRTABLE_CREATED_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BANK": {"name": "BANK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COMPANY_ID": {"name": "COMPANY_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POSITION": {"name": "POSITION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EZEKIA_ID": {"name": "EZEKIA_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUSTOM_INVOICE_NUMBER": {"name": "CUSTOM_INVOICE_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AB_ID": {"name": "_AIRBYTE_AB_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_EMITTED_AT": {"name": "_AIRBYTE_EMITTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_NORMALIZED_AT": {"name": "_AIRBYTE_NORMALIZED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AIRTABLE_INVOICES_HASHID": {"name": "_AIRBYTE_AIRTABLE_INVOICES_HASHID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/airtable/stg_airtable_invoices.yml", "compiled_path": "target/compiled/augustdbt/models/staging/airtable/stg_airtable_invoices.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429719.673623, "compiled_sql": "select\n    \"Name\" as name,\n    split_part(\"Assignment\", '''', 2)::text as assignment,\n    \"Invoice due\"::date as invoice_due_date,\n    \"Days Overdue\" as days_overdue,\n    \"Formula Name\" as formula_name,\n    \"Invoice Type\" as invoice_type,\n    _AIRTABLE_ID,\n    \"Invoice Amount\" as invoice_amount,\n    \"Invoice Issued\"::date as invoice_issued_date,\n    \"Invoice Issued\" is not null as issued,\n    \"Invoice Received\"::date as invoice_paid_date,\n    \"Invoice Received\" is not null as paid,\n    \"Invoice Received\" is null as outstanding,\n    \"Days Overdue Formula\" as days_overdue_formula,\n    \"Days Overdue Formula\"::integer > 0 as overdue,\n    _AIRTABLE_CREATED_TIME,\n    split_part(\"Bank (from Assignments)\", '''', 2)::text as bank,\n    split_part(\"Client (from Assignments)\", '''', 2)::text as company_id,\n    \"Position (from Assignments)\" as position,\n    split_part(\"Ezekia ID (from Assignments)\", '''', 2)::text as ezekia_id,\n    \"Custom Invoice Number (optional)\" as custom_invoice_number,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_AIRTABLE_INVOICES_HASHID\nfrom \"warehouse_august\".\"august_airbyte\".\"airtable_invoices\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_airtable_invoices\""}, "model.augustdbt.invoices_quickbooks": {"raw_sql": "select \n*\nfrom {{ref('quickbooks_save')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.augustdbt.quickbooks_save"]}, "config": {"enabled": true, "alias": null, "schema": "FINAL", "database": null, "tags": ["final"], "meta": {"label": "Invoices (Quickbooks Source)"}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_FINAL", "fqn": ["augustdbt", "final", "invoices_quickbooks"], "unique_id": "model.augustdbt.invoices_quickbooks", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "final/invoices_quickbooks.sql", "original_file_path": "models/final/invoices_quickbooks.sql", "name": "invoices_quickbooks", "alias": "invoices_quickbooks", "checksum": {"name": "sha256", "checksum": "bffd7876bb0ac06e136dfd5f88551ed4fe3299ecbb76df5f7ec6da664d2a7743"}, "tags": ["final"], "refs": [["quickbooks_save"]], "sources": [], "metrics": [], "description": "", "columns": {"quickbooks_id": {"name": "quickbooks_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EZEKIA_ID": {"name": "EZEKIA_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INVOICE_VALUE": {"name": "INVOICE_VALUE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INVOICE_BALANCE": {"name": "INVOICE_BALANCE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PAYMENT": {"name": "PAYMENT", "description": "", "meta": {"metrics": {"total_payments": {"label": "Total Payment", "type": "sum"}}}, "data_type": null, "quote": null, "tags": []}, "DATE_DUE": {"name": "DATE_DUE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RETAINER": {"name": "RETAINER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLACEMENT": {"name": "PLACEMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHORTLIST": {"name": "SHORTLIST", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FINAL": {"name": "FINAL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MATCHED_TO_EZEKIA": {"name": "MATCHED_TO_EZEKIA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {"label": "Invoices (Quickbooks Source)"}, "docs": {"show": true}, "patch_path": "augustdbt://models/final/invoices_quickbooks.yml", "compiled_path": "target/compiled/augustdbt/models/final/invoices_quickbooks.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "FINAL", "materialized": "table", "tags": "final"}, "created_at": 1661429719.676862, "compiled_sql": "select \n*\nfrom \"warehouse_august\".\"august_SEED\".\"quickbooks_save\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_FINAL\".\"invoices_quickbooks\""}, "model.augustdbt.stg_airtable_assignments": {"raw_sql": "select BANK,\n    {{ array_first(\"client\") }} as client,\n    REGION,\n    STATUS,\n    \"True Up\",\n    \"Position\" as position,\n    RECEIPTS,\n    \"*reciepts\",\n    \"Admin Fee\",\n    case\n        when \"Ezekia ID\" in ('-1', '0', 'n/a') then null\n        else \"Ezekia ID\"\n    end as \"Ezekia ID\",\n    \"Split Sum\",\n    FINANCIALS,\n    RECEIVABLES,\n    \"Split Error\",\n    \"*receivables\",\n    \"Lead Partner\",\n    _AIRTABLE_ID,\n    \"Exchange Rate\",\n    \"Practice Area\",\n    \"Assignment Type\",\n    \"Date of Booking\",\n    \"Invoices Raised\",\n    \"*invoices raised\",\n    \"Agreement Signed\",\n    \"Lead Partner Email\",\n    \"Retainer Invoice No\",\n    \"Placement Invoice No\",\n    \"Shortlist Invoice No\",\n    \"Amplify Hours Consumed\",\n    \"Total Assignment Value\",\n    _AIRTABLE_CREATED_TIME,\n    \"Ezekia ID (from Client)\",\n    \"Open Assignment Balance\",\n    \"True up Date of Booking\",\n    \"*open Assignment Balance\",\n    \"Initial Assignment Value\",\n    -- \"Name (from Practice Area)\",\n    \"Invoice to Total Amt Error\",\n    \"Invoices - Total Amt Error\",\n    \"Currency at Time of Signing\",\n    -- \"Ezekia ID (from Practice Area)\",\n    \"True Up in Currency of Agreement\",\n    \"Assignment Value in Currency of Agreement\",\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_AIRTABLE_ASSIGNMENTS_HASHID\nfrom {{ source('airtable', 'airtable_assignments') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.augustdbt.array_first"], "nodes": ["source.augustdbt.airtable.airtable_assignments"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "airtable", "stg_airtable_assignments"], "unique_id": "model.augustdbt.stg_airtable_assignments", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/airtable/stg_airtable_assignments.sql", "original_file_path": "models/staging/airtable/stg_airtable_assignments.sql", "name": "stg_airtable_assignments", "alias": "stg_airtable_assignments", "checksum": {"name": "sha256", "checksum": "d9fc1c14be18138fc36e6e657dba5120e51cd045ca370f9887c21a6e9151edc4"}, "tags": ["staging"], "refs": [], "sources": [["airtable", "airtable_assignments"]], "metrics": [], "description": "", "columns": {"BANK": {"name": "BANK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLIENT": {"name": "CLIENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REGION": {"name": "REGION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "True Up": {"name": "True Up", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POSITION": {"name": "POSITION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPTS": {"name": "RECEIPTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "*reciepts": {"name": "*reciepts", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Admin Fee": {"name": "Admin Fee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Ezekia ID": {"name": "Ezekia ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Split Sum": {"name": "Split Sum", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FINANCIALS": {"name": "FINANCIALS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVABLES": {"name": "RECEIVABLES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Split Error": {"name": "Split Error", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "*receivables": {"name": "*receivables", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Lead Partner": {"name": "Lead Partner", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_ID": {"name": "_AIRTABLE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Exchange Rate": {"name": "Exchange Rate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Practice Area": {"name": "Practice Area", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Assignment Type": {"name": "Assignment Type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Date of Booking": {"name": "Date of Booking", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Invoices Raised": {"name": "Invoices Raised", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "*invoices raised": {"name": "*invoices raised", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Agreement Signed": {"name": "Agreement Signed", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Lead Partner Email": {"name": "Lead Partner Email", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Retainer Invoice No": {"name": "Retainer Invoice No", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Placement Invoice No": {"name": "Placement Invoice No", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Shortlist Invoice No": {"name": "Shortlist Invoice No", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Amplify Hours Consumed": {"name": "Amplify Hours Consumed", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Total Assignment Value": {"name": "Total Assignment Value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_CREATED_TIME": {"name": "_AIRTABLE_CREATED_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Ezekia ID (from Client)": {"name": "Ezekia ID (from Client)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Open Assignment Balance": {"name": "Open Assignment Balance", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "True up Date of Booking": {"name": "True up Date of Booking", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "*open Assignment Balance": {"name": "*open Assignment Balance", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Initial Assignment Value": {"name": "Initial Assignment Value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Name (from Practice Area)": {"name": "Name (from Practice Area)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Invoice to Total Amt Error": {"name": "Invoice to Total Amt Error", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Invoices - Total Amt Error": {"name": "Invoices - Total Amt Error", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Currency at Time of Signing": {"name": "Currency at Time of Signing", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Ezekia ID (from Practice Area)": {"name": "Ezekia ID (from Practice Area)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "True Up in Currency of Agreement": {"name": "True Up in Currency of Agreement", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Assignment Value in Currency of Agreement": {"name": "Assignment Value in Currency of Agreement", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AB_ID": {"name": "_AIRBYTE_AB_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_EMITTED_AT": {"name": "_AIRBYTE_EMITTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_NORMALIZED_AT": {"name": "_AIRBYTE_NORMALIZED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AIRTABLE_ASSIGNMENTS_HASHID": {"name": "_AIRBYTE_AIRTABLE_ASSIGNMENTS_HASHID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/airtable/stg_airtable_assignments.yml", "compiled_path": "target/compiled/augustdbt/models/staging/airtable/stg_airtable_assignments.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429719.709452, "compiled_sql": "select BANK,\n    \n    replace(replace(replace(client, '[', ''), '''', ''), $$]$$, '')\n as client,\n    REGION,\n    STATUS,\n    \"True Up\",\n    \"Position\" as position,\n    RECEIPTS,\n    \"*reciepts\",\n    \"Admin Fee\",\n    case\n        when \"Ezekia ID\" in ('-1', '0', 'n/a') then null\n        else \"Ezekia ID\"\n    end as \"Ezekia ID\",\n    \"Split Sum\",\n    FINANCIALS,\n    RECEIVABLES,\n    \"Split Error\",\n    \"*receivables\",\n    \"Lead Partner\",\n    _AIRTABLE_ID,\n    \"Exchange Rate\",\n    \"Practice Area\",\n    \"Assignment Type\",\n    \"Date of Booking\",\n    \"Invoices Raised\",\n    \"*invoices raised\",\n    \"Agreement Signed\",\n    \"Lead Partner Email\",\n    \"Retainer Invoice No\",\n    \"Placement Invoice No\",\n    \"Shortlist Invoice No\",\n    \"Amplify Hours Consumed\",\n    \"Total Assignment Value\",\n    _AIRTABLE_CREATED_TIME,\n    \"Ezekia ID (from Client)\",\n    \"Open Assignment Balance\",\n    \"True up Date of Booking\",\n    \"*open Assignment Balance\",\n    \"Initial Assignment Value\",\n    -- \"Name (from Practice Area)\",\n    \"Invoice to Total Amt Error\",\n    \"Invoices - Total Amt Error\",\n    \"Currency at Time of Signing\",\n    -- \"Ezekia ID (from Practice Area)\",\n    \"True Up in Currency of Agreement\",\n    \"Assignment Value in Currency of Agreement\",\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_AIRTABLE_ASSIGNMENTS_HASHID\nfrom \"warehouse_august\".\"august_airbyte\".\"airtable_assignments\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_airtable_assignments\""}, "model.augustdbt.invoices": {"raw_sql": "select\n    _AIRTABLE_ID,\n    invoice_name,\n    _AIRTABLE_PROJECT_ID,\n    company_id,\n    ezekia_id,\n    project_stage,\n    invoice_type,\n    invoice_amount,\n    invoice_issued_date,\n    invoice_due_date,\n    invoice_paid_date,\n    issued,\n    paid,\n    outstanding,\n    overdue,\n    paid_late,\n    invoice_status\nfrom {{ref('int_invoices')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.int_invoices"]}, "config": {"enabled": true, "alias": null, "schema": "FINAL", "database": null, "tags": ["final"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_FINAL", "fqn": ["augustdbt", "final", "invoices"], "unique_id": "model.augustdbt.invoices", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "final/invoices.sql", "original_file_path": "models/final/invoices.sql", "name": "invoices", "alias": "invoices", "checksum": {"name": "sha256", "checksum": "369b09c1e8c4718929eef59e32de85c37b4061f4589b2473dc377fbfc0ffa423"}, "tags": ["final"], "refs": [["int_invoices"]], "sources": [], "metrics": [], "description": "", "columns": {"_AIRTABLE_ID": {"name": "_AIRTABLE_ID", "description": "", "meta": {"dimension": {"hidden": true}}, "data_type": null, "quote": null, "tags": []}, "INVOICE_NAME": {"name": "INVOICE_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_PROJECT_ID": {"name": "_AIRTABLE_PROJECT_ID", "description": "", "meta": {"dimension": {"hidden": true}}, "data_type": null, "quote": null, "tags": []}, "EZEKIA_ID": {"name": "EZEKIA_ID", "description": "Project identifier", "meta": {"dimension": {"hidden": true}}, "data_type": null, "quote": null, "tags": []}, "COMPANY_ID": {"name": "COMPANY_ID", "description": "", "meta": {"dimension": {"hidden": true}}, "data_type": null, "quote": null, "tags": []}, "PROJECT_STAGE": {"name": "PROJECT_STAGE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INVOICE_TYPE": {"name": "INVOICE_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INVOICE_AMOUNT": {"name": "INVOICE_AMOUNT", "description": "", "meta": {"dimension": {"round": 2, "format": "usd"}, "metrics": {"total_hours": {"label": "Total Invoices", "type": "sum"}}}, "data_type": null, "quote": null, "tags": []}, "INVOICE_ISSUED_DATE": {"name": "INVOICE_ISSUED_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INVOICE_DUE_DATE": {"name": "INVOICE_DUE_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INVOICE_PAID_DATE": {"name": "INVOICE_PAID_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ISSUED": {"name": "ISSUED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PAID": {"name": "PAID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OUTSTANDING": {"name": "OUTSTANDING", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OVERDUE": {"name": "OVERDUE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PAID_LATE": {"name": "PAID_LATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INVOICE_STATUS": {"name": "INVOICE_STATUS", "description": "", "meta": {"label": "Invoices (Airtable Source)"}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/final/invoices.yml", "compiled_path": "target/compiled/augustdbt/models/final/invoices.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "FINAL", "materialized": "table", "tags": "final"}, "created_at": 1661429719.719305, "compiled_sql": "select\n    _AIRTABLE_ID,\n    invoice_name,\n    _AIRTABLE_PROJECT_ID,\n    company_id,\n    ezekia_id,\n    project_stage,\n    invoice_type,\n    invoice_amount,\n    invoice_issued_date,\n    invoice_due_date,\n    invoice_paid_date,\n    issued,\n    paid,\n    outstanding,\n    overdue,\n    paid_late,\n    invoice_status\nfrom \"warehouse_august\".\"august_INT\".\"int_invoices\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_FINAL\".\"invoices\""}, "model.augustdbt.stg_airtable_financials": {"raw_sql": "select\n    {{ array_first(\"bank\") }} as bank,\n    SPLIT::float as split,\n    {{ array_first(\"client\")}} as client,\n    {{ array_first(\"REGION\") }} as REGION,\n    {{ array_first(\"STATUS\") }} as STATUS,\n    {{ array_first(\"PARTNER\") }} as PARTNER,\n    {{ array_first(\"PROJECT\") }} as PROJECT,\n    \"True Up\"::float True_Up,\n    \"Position\" as position,\n    RECEIPTS::float as receipts,\n    \"Admin Fee\"::float Admin_Fee,\n    {{ array_first('\"Ezekia ID\"') }}::text as Ezekia_ID,\n    INVOLVEMENT,\n    RECEIVABLES::float receivables,\n    {{ array_first('\"Partner Name\"') }}::text as Partner_Name,\n    _AIRTABLE_ID,\n    \"Partner Image\" Partner_Image,\n    {{ array_first('\"Practice Area\"') }}::text as Practice_Area,\n    \"Retainer Value\"::float Retainer_Value,\n    {{ array_first('\"Assignment Type\"') }}::text as Assignment_Type,\n    {{ array_first('\"Date of Booking\"') }}::date as Date_of_Booking,\n    \"Invoices Raised\"::float Invoices_Raised,\n    \"Placement Value\"::float Placement_Value,\n    \"Shortlist Value\"::float Shortlist_Value,\n    {{ array_first('\"Retainer Invoice No\"') }}::text as Retainer_Invoice_No,\n     {{ array_first('\"Email (from Partner)\"') }}::text as Email_from_Partner,\n    \"Fourth Invoice Value\"::float Fourth_Invoice_Value,\n    \"Partner Hours Consumed\"::float Partner_Hours_Consumed,\n    \"Total Assignment Value\"::float Total_Assignment_Value,\n    _AIRTABLE_CREATED_TIME,\n    \"*invoice (from Project)\" as invoice_from_Project,\n    \"Open Assignment Balance\"::float Open_Assignment_Balance,\n    {{ array_first('\"Receipts (from Project)\"') }}::float as Receipts_from_Project,\n    {{ array_first('\"Ezekia ID (from Project)\"') }}::text as Ezekia_ID_from_Project,\n    \"Initial Assignment Value\"::float Initial_Assignment_Value,\n    {{ array_first('\"Receivables (from Project)\"') }}::float as Receivables_from_Project,\n    {{ array_first('\"True Up (from Assignments)\"') }}::float as True_Up_from_Assignments,\n    \"*invoice (from Project) copy\" invoice_from_Project_copy,\n    {{ array_first('\"Admin Fee (from Assignments)\"') }}::float as Admin_Fee_from_Assignments,\n    {{ array_first('\"Invoices Raised (from Project)\"') }}::float as Invoices_Raised_from_Project,\n    {{ array_first('\"Retainer Due (From Assignment)\"') }}::date as Retainer_Due_From_Assignment,\n    {{ array_first('\"Retainer Issued (from Project)\"') }}::date as Retainer_Issued_from_Project,\n    {{ array_first('\"Shortlist Due (from Assignment)\"') }}::date as Shortlist_Due_from_Assignment,\n    {{ array_first('\"Shortlist Issued (from Project)\"') }}::date as Shortlist_Issued_from_Project,\n    {{ array_first('\"Retainer Received (from Project)\"') }}::date as Retainer_Received_from_Project,\n    \"Fourth Invoice Y/N (from Project)\" Fourth_Invoice_YN_from_Project,\n    {{ array_first('\"Retainer Value (from Assignments)\"') }}::float as Retainer_Value_from_Assignments,\n    {{ array_first('\"Shortlist Received (from Project)\"') }}::date as Shortlist_Received_from_Project,\n    {{ array_first('\"Shortlist Value (from Assignments)\"') }}::float as Shortlist_Value_from_Assignments,\n    {{ array_first('\"Placement Invoice No (from Project)\"') }}::text as Placement_Invoice_No_from_Project,\n    {{ array_first('\"Shortlist Invoice No (from Project)\"') }}::text as Shortlist_Invoice_No_from_Project,\n    {{ array_first('\"Open Assignment Balance (from Project)\"') }}::float as Open_Assignment_Balance_from_Project,\n    {{ array_first('\"Amplify Hours Consumed (from Assignments)\"') }}::float as Amplify_Hours_Consumed_from_Assignments,\n    {{ array_first('\"Initial Assignment Value (from Assignments)\"') }}::float as Initial_Assignment_Value_from_Assignments,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_AIRTABLE_FINANCIALS_HASHID\nfrom {{ source('airtable', 'airtable_financials') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.augustdbt.array_first"], "nodes": ["source.augustdbt.airtable.airtable_financials"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "airtable", "stg_airtable_financials"], "unique_id": "model.augustdbt.stg_airtable_financials", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/airtable/stg_airtable_financials.sql", "original_file_path": "models/staging/airtable/stg_airtable_financials.sql", "name": "stg_airtable_financials", "alias": "stg_airtable_financials", "checksum": {"name": "sha256", "checksum": "ae5dcb781fae67aae0cf00e082f9c7d76e751612f9693e2ddc1a42583af9ff1b"}, "tags": ["staging"], "refs": [], "sources": [["airtable", "airtable_financials"]], "metrics": [], "description": "", "columns": {"BANK": {"name": "BANK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SPLIT": {"name": "SPLIT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CLIENT": {"name": "CLIENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REGION": {"name": "REGION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARTNER": {"name": "PARTNER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT": {"name": "PROJECT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "True Up": {"name": "True Up", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POSITION": {"name": "POSITION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPTS": {"name": "RECEIPTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Admin Fee": {"name": "Admin Fee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Ezekia ID": {"name": "Ezekia ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INVOLVEMENT": {"name": "INVOLVEMENT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVABLES": {"name": "RECEIVABLES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Partner Name": {"name": "Partner Name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_ID": {"name": "_AIRTABLE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Partner Image": {"name": "Partner Image", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Practice Area": {"name": "Practice Area", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Retainer Value": {"name": "Retainer Value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Assignment Type": {"name": "Assignment Type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Date of Booking": {"name": "Date of Booking", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Invoices Raised": {"name": "Invoices Raised", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Placement Value": {"name": "Placement Value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Shortlist Value": {"name": "Shortlist Value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Retainer Invoice No": {"name": "Retainer Invoice No", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Email (from Partner)": {"name": "Email (from Partner)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Fourth Invoice Value": {"name": "Fourth Invoice Value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Partner Hours Consumed": {"name": "Partner Hours Consumed", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Total Assignment Value": {"name": "Total Assignment Value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_CREATED_TIME": {"name": "_AIRTABLE_CREATED_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "*invoice (from Project)": {"name": "*invoice (from Project)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Open Assignment Balance": {"name": "Open Assignment Balance", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Receipts (from Project)": {"name": "Receipts (from Project)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Ezekia ID (from Project)": {"name": "Ezekia ID (from Project)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Initial Assignment Value": {"name": "Initial Assignment Value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Receivables (from Project)": {"name": "Receivables (from Project)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "True Up (from Assignments)": {"name": "True Up (from Assignments)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "*invoice (from Project) copy": {"name": "*invoice (from Project) copy", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Admin Fee (from Assignments)": {"name": "Admin Fee (from Assignments)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Invoices Raised (from Project)": {"name": "Invoices Raised (from Project)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Retainer Due (From Assignment)": {"name": "Retainer Due (From Assignment)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Retainer Issued (from Project)": {"name": "Retainer Issued (from Project)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Shortlist Due (from Assignment)": {"name": "Shortlist Due (from Assignment)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Shortlist Issued (from Project)": {"name": "Shortlist Issued (from Project)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Retainer Received (from Project)": {"name": "Retainer Received (from Project)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Fourth Invoice Y/N (from Project)": {"name": "Fourth Invoice Y/N (from Project)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Retainer Value (from Assignments)": {"name": "Retainer Value (from Assignments)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Shortlist Received (from Project)": {"name": "Shortlist Received (from Project)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Shortlist Value (from Assignments)": {"name": "Shortlist Value (from Assignments)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Placement Invoice No (from Project)": {"name": "Placement Invoice No (from Project)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Shortlist Invoice No (from Project)": {"name": "Shortlist Invoice No (from Project)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Open Assignment Balance (from Project)": {"name": "Open Assignment Balance (from Project)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Amplify Hours Consumed (from Assignments)": {"name": "Amplify Hours Consumed (from Assignments)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Initial Assignment Value (from Assignments)": {"name": "Initial Assignment Value (from Assignments)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AB_ID": {"name": "_AIRBYTE_AB_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_EMITTED_AT": {"name": "_AIRBYTE_EMITTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_NORMALIZED_AT": {"name": "_AIRBYTE_NORMALIZED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AIRTABLE_FINANCIALS_HASHID": {"name": "_AIRBYTE_AIRTABLE_FINANCIALS_HASHID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/airtable/stg_airtable_financials.yml", "compiled_path": "target/compiled/augustdbt/models/staging/airtable/stg_airtable_financials.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429719.73742, "compiled_sql": "select\n    \n    replace(replace(replace(bank, '[', ''), '''', ''), $$]$$, '')\n as bank,\n    SPLIT::float as split,\n    \n    replace(replace(replace(client, '[', ''), '''', ''), $$]$$, '')\n as client,\n    \n    replace(replace(replace(REGION, '[', ''), '''', ''), $$]$$, '')\n as REGION,\n    \n    replace(replace(replace(STATUS, '[', ''), '''', ''), $$]$$, '')\n as STATUS,\n    \n    replace(replace(replace(PARTNER, '[', ''), '''', ''), $$]$$, '')\n as PARTNER,\n    \n    replace(replace(replace(PROJECT, '[', ''), '''', ''), $$]$$, '')\n as PROJECT,\n    \"True Up\"::float True_Up,\n    \"Position\" as position,\n    RECEIPTS::float as receipts,\n    \"Admin Fee\"::float Admin_Fee,\n    \n    replace(replace(replace(\"Ezekia ID\", '[', ''), '''', ''), $$]$$, '')\n::text as Ezekia_ID,\n    INVOLVEMENT,\n    RECEIVABLES::float receivables,\n    \n    replace(replace(replace(\"Partner Name\", '[', ''), '''', ''), $$]$$, '')\n::text as Partner_Name,\n    _AIRTABLE_ID,\n    \"Partner Image\" Partner_Image,\n    \n    replace(replace(replace(\"Practice Area\", '[', ''), '''', ''), $$]$$, '')\n::text as Practice_Area,\n    \"Retainer Value\"::float Retainer_Value,\n    \n    replace(replace(replace(\"Assignment Type\", '[', ''), '''', ''), $$]$$, '')\n::text as Assignment_Type,\n    \n    replace(replace(replace(\"Date of Booking\", '[', ''), '''', ''), $$]$$, '')\n::date as Date_of_Booking,\n    \"Invoices Raised\"::float Invoices_Raised,\n    \"Placement Value\"::float Placement_Value,\n    \"Shortlist Value\"::float Shortlist_Value,\n    \n    replace(replace(replace(\"Retainer Invoice No\", '[', ''), '''', ''), $$]$$, '')\n::text as Retainer_Invoice_No,\n     \n    replace(replace(replace(\"Email (from Partner)\", '[', ''), '''', ''), $$]$$, '')\n::text as Email_from_Partner,\n    \"Fourth Invoice Value\"::float Fourth_Invoice_Value,\n    \"Partner Hours Consumed\"::float Partner_Hours_Consumed,\n    \"Total Assignment Value\"::float Total_Assignment_Value,\n    _AIRTABLE_CREATED_TIME,\n    \"*invoice (from Project)\" as invoice_from_Project,\n    \"Open Assignment Balance\"::float Open_Assignment_Balance,\n    \n    replace(replace(replace(\"Receipts (from Project)\", '[', ''), '''', ''), $$]$$, '')\n::float as Receipts_from_Project,\n    \n    replace(replace(replace(\"Ezekia ID (from Project)\", '[', ''), '''', ''), $$]$$, '')\n::text as Ezekia_ID_from_Project,\n    \"Initial Assignment Value\"::float Initial_Assignment_Value,\n    \n    replace(replace(replace(\"Receivables (from Project)\", '[', ''), '''', ''), $$]$$, '')\n::float as Receivables_from_Project,\n    \n    replace(replace(replace(\"True Up (from Assignments)\", '[', ''), '''', ''), $$]$$, '')\n::float as True_Up_from_Assignments,\n    \"*invoice (from Project) copy\" invoice_from_Project_copy,\n    \n    replace(replace(replace(\"Admin Fee (from Assignments)\", '[', ''), '''', ''), $$]$$, '')\n::float as Admin_Fee_from_Assignments,\n    \n    replace(replace(replace(\"Invoices Raised (from Project)\", '[', ''), '''', ''), $$]$$, '')\n::float as Invoices_Raised_from_Project,\n    \n    replace(replace(replace(\"Retainer Due (From Assignment)\", '[', ''), '''', ''), $$]$$, '')\n::date as Retainer_Due_From_Assignment,\n    \n    replace(replace(replace(\"Retainer Issued (from Project)\", '[', ''), '''', ''), $$]$$, '')\n::date as Retainer_Issued_from_Project,\n    \n    replace(replace(replace(\"Shortlist Due (from Assignment)\", '[', ''), '''', ''), $$]$$, '')\n::date as Shortlist_Due_from_Assignment,\n    \n    replace(replace(replace(\"Shortlist Issued (from Project)\", '[', ''), '''', ''), $$]$$, '')\n::date as Shortlist_Issued_from_Project,\n    \n    replace(replace(replace(\"Retainer Received (from Project)\", '[', ''), '''', ''), $$]$$, '')\n::date as Retainer_Received_from_Project,\n    \"Fourth Invoice Y/N (from Project)\" Fourth_Invoice_YN_from_Project,\n    \n    replace(replace(replace(\"Retainer Value (from Assignments)\", '[', ''), '''', ''), $$]$$, '')\n::float as Retainer_Value_from_Assignments,\n    \n    replace(replace(replace(\"Shortlist Received (from Project)\", '[', ''), '''', ''), $$]$$, '')\n::date as Shortlist_Received_from_Project,\n    \n    replace(replace(replace(\"Shortlist Value (from Assignments)\", '[', ''), '''', ''), $$]$$, '')\n::float as Shortlist_Value_from_Assignments,\n    \n    replace(replace(replace(\"Placement Invoice No (from Project)\", '[', ''), '''', ''), $$]$$, '')\n::text as Placement_Invoice_No_from_Project,\n    \n    replace(replace(replace(\"Shortlist Invoice No (from Project)\", '[', ''), '''', ''), $$]$$, '')\n::text as Shortlist_Invoice_No_from_Project,\n    \n    replace(replace(replace(\"Open Assignment Balance (from Project)\", '[', ''), '''', ''), $$]$$, '')\n::float as Open_Assignment_Balance_from_Project,\n    \n    replace(replace(replace(\"Amplify Hours Consumed (from Assignments)\", '[', ''), '''', ''), $$]$$, '')\n::float as Amplify_Hours_Consumed_from_Assignments,\n    \n    replace(replace(replace(\"Initial Assignment Value (from Assignments)\", '[', ''), '''', ''), $$]$$, '')\n::float as Initial_Assignment_Value_from_Assignments,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_AIRTABLE_FINANCIALS_HASHID\nfrom \"warehouse_august\".\"august_airbyte\".\"airtable_financials\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_airtable_financials\""}, "model.augustdbt.partners": {"raw_sql": "--concept of active or not\n\nselect\n    id,\n    name,\n    email,\n    ezekia_partner_id\nfrom {{ ref('int_partners') }}\n-- join some stuff?\n-- list of companies, projects?\n-- list_agg distinct with order?\n-- partner page, list of projects?\n-- booked feb, booked jan, dont need this here\n-- total booked\n-- projects as lead?\n-- role id?", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.augustdbt.int_partners"]}, "config": {"enabled": true, "alias": null, "schema": "FINAL", "database": null, "tags": ["final"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_FINAL", "fqn": ["augustdbt", "final", "partners"], "unique_id": "model.augustdbt.partners", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "final/partners.sql", "original_file_path": "models/final/partners.sql", "name": "partners", "alias": "partners", "checksum": {"name": "sha256", "checksum": "fdd748755be8cdcd76102e5bb551794766550758fd7a5d5cee31a83dd04da13d"}, "tags": ["final"], "refs": [["int_partners"]], "sources": [], "metrics": [], "description": "A table of all partners at August from Ezekia.", "columns": {"ID": {"name": "ID", "description": "", "meta": {"metrics": {"total_partners": {"label": "Total Partners", "type": "count_distinct"}}}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAIL": {"name": "EMAIL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EZEKIA_PARTNER_ID": {"name": "EZEKIA_PARTNER_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/final/partners.yml", "compiled_path": "target/compiled/augustdbt/models/final/partners.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "FINAL", "materialized": "table", "tags": "final"}, "created_at": 1661429719.7386339, "compiled_sql": "--concept of active or not\n\nselect\n    id,\n    name,\n    email,\n    ezekia_partner_id\nfrom \"warehouse_august\".\"august_INT\".\"int_partners\"\n-- join some stuff?\n-- list of companies, projects?\n-- list_agg distinct with order?\n-- partner page, list of projects?\n-- booked feb, booked jan, dont need this here\n-- total booked\n-- projects as lead?\n-- role id?", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_FINAL\".\"partners\""}, "model.augustdbt.stg_airtable_employees": {"raw_sql": "select\n    BIO,\n    \"Name\" as name,\n    \"Role\" as role,\n    EMAIL,\n    CREATED,\n    \"Location\" as location,\n    \"Role new\",\n    \"Booked Feb\",\n    \"Booked Jan\",\n    FINANCIALS,\n    \"Total Booked\",\n    _AIRTABLE_ID,\n    \"Profile Image\",\n    \"Projects as Lead\",\n    \"Role ID (from Role)\",\n    _AIRTABLE_CREATED_TIME,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_AIRTABLE_EMPLOYEES_HASHID\nfrom {{ source('airtable', 'airtable_employees') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.airtable.airtable_employees"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "airtable", "stg_airtable_employees"], "unique_id": "model.augustdbt.stg_airtable_employees", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/airtable/stg_airtable_employees.sql", "original_file_path": "models/staging/airtable/stg_airtable_employees.sql", "name": "stg_airtable_employees", "alias": "stg_airtable_employees", "checksum": {"name": "sha256", "checksum": "cd182bae7406bc568095a2fbf55f899759668bc59d185b954eac62cef580c72c"}, "tags": ["staging"], "refs": [], "sources": [["airtable", "airtable_employees"]], "metrics": [], "description": "", "columns": {"BIO": {"name": "BIO", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ROLE": {"name": "ROLE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMAIL": {"name": "EMAIL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED": {"name": "CREATED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOCATION": {"name": "LOCATION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Role new": {"name": "Role new", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Booked Feb": {"name": "Booked Feb", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Booked Jan": {"name": "Booked Jan", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FINANCIALS": {"name": "FINANCIALS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Total Booked": {"name": "Total Booked", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_ID": {"name": "_AIRTABLE_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Profile Image": {"name": "Profile Image", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Projects as Lead": {"name": "Projects as Lead", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Role ID (from Role)": {"name": "Role ID (from Role)", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRTABLE_CREATED_TIME": {"name": "_AIRTABLE_CREATED_TIME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AB_ID": {"name": "_AIRBYTE_AB_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_EMITTED_AT": {"name": "_AIRBYTE_EMITTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_NORMALIZED_AT": {"name": "_AIRBYTE_NORMALIZED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_AIRBYTE_AIRTABLE_EMPLOYEES_HASHID": {"name": "_AIRBYTE_AIRTABLE_EMPLOYEES_HASHID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/airtable/stg_airtable_employees.yml", "compiled_path": "target/compiled/augustdbt/models/staging/airtable/stg_airtable_employees.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429719.741793, "compiled_sql": "select\n    BIO,\n    \"Name\" as name,\n    \"Role\" as role,\n    EMAIL,\n    CREATED,\n    \"Location\" as location,\n    \"Role new\",\n    \"Booked Feb\",\n    \"Booked Jan\",\n    FINANCIALS,\n    \"Total Booked\",\n    _AIRTABLE_ID,\n    \"Profile Image\",\n    \"Projects as Lead\",\n    \"Role ID (from Role)\",\n    _AIRTABLE_CREATED_TIME,\n    _AIRBYTE_AB_ID,\n    _AIRBYTE_EMITTED_AT,\n    _AIRBYTE_NORMALIZED_AT,\n    _AIRBYTE_AIRTABLE_EMPLOYEES_HASHID\nfrom \"warehouse_august\".\"august_airbyte\".\"airtable_employees\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_airtable_employees\""}, "model.augustdbt.stg_harvest_time_entires": {"raw_sql": "select id,\n  hours,\n  notes,\n  created_at,\n  spent_date\nfrom {{ source('harvest', 'time_entries') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.augustdbt.harvest.time_entries"]}, "config": {"enabled": true, "alias": null, "schema": "STAGING", "database": null, "tags": ["staging"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "warehouse_august", "schema": "august_STAGING", "fqn": ["augustdbt", "staging", "harvest", "stg_harvest_time_entires"], "unique_id": "model.augustdbt.stg_harvest_time_entires", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "staging/harvest/stg_harvest_time_entires.sql", "original_file_path": "models/staging/harvest/stg_harvest_time_entires.sql", "name": "stg_harvest_time_entires", "alias": "stg_harvest_time_entires", "checksum": {"name": "sha256", "checksum": "a96f51cfeaae141091d6b54b87da28b3f9689bddc45887455cb89b06217ec609"}, "tags": ["staging"], "refs": [], "sources": [["harvest", "time_entries"]], "metrics": [], "description": "", "columns": {"ID": {"name": "ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HOURS": {"name": "HOURS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NOTES": {"name": "NOTES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATED_AT": {"name": "CREATED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SPENT_DATE": {"name": "SPENT_DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "augustdbt://models/staging/harvest/stg_harvest_time_entires.yml", "compiled_path": "target/compiled/augustdbt/models/staging/harvest/stg_harvest_time_entires.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "STAGING", "materialized": "view", "tags": "staging"}, "created_at": 1661429719.742805, "compiled_sql": "select id,\n  hours,\n  notes,\n  created_at,\n  spent_date\nfrom \"warehouse_august\".\"august_airbyte\".\"harvest_time_entries\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"warehouse_august\".\"august_STAGING\".\"stg_harvest_time_entires\""}, "test.augustdbt.not_null_researchers_ID.a22c2938f2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ID", "model": "{{ get_where_subquery(ref('researchers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.augustdbt.researchers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "final", "not_null_researchers_ID"], "unique_id": "test.augustdbt.not_null_researchers_ID.a22c2938f2", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "not_null_researchers_ID.sql", "original_file_path": "models/final/researchers.yml", "name": "not_null_researchers_ID", "alias": "not_null_researchers_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["researchers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/final/researchers.yml/not_null_researchers_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661429719.651389, "compiled_sql": "\n    \n    \n\n\n\nselect ID\nfrom \"warehouse_august\".\"august_FINAL\".\"researchers\"\nwhere ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ID", "file_key_name": "models.researchers"}, "test.augustdbt.unique_researchers_ID.868fa48707": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ID", "model": "{{ get_where_subquery(ref('researchers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.augustdbt.researchers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "final", "unique_researchers_ID"], "unique_id": "test.augustdbt.unique_researchers_ID.868fa48707", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "unique_researchers_ID.sql", "original_file_path": "models/final/researchers.yml", "name": "unique_researchers_ID", "alias": "unique_researchers_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["researchers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/final/researchers.yml/unique_researchers_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661429719.652709, "compiled_sql": "\n    \n    \n\nselect\n    ID as unique_field,\n    count(*) as n_records\n\nfrom \"warehouse_august\".\"august_FINAL\".\"researchers\"\nwhere ID is not null\ngroup by ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ID", "file_key_name": "models.researchers"}, "test.augustdbt.not_null_int_time_entries_DATE.7e65965c46": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATE", "model": "{{ get_where_subquery(ref('int_time_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.augustdbt.int_time_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "int", "not_null_int_time_entries_DATE"], "unique_id": "test.augustdbt.not_null_int_time_entries_DATE.7e65965c46", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "not_null_int_time_entries_DATE.sql", "original_file_path": "models/int/int_time_entries.yml", "name": "not_null_int_time_entries_DATE", "alias": "not_null_int_time_entries_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_time_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/int/int_time_entries.yml/not_null_int_time_entries_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661429719.664949, "compiled_sql": "\n    \n    \n\n\n\nselect DATE\nfrom \"warehouse_august\".\"august_INT\".\"int_time_entries\"\nwhere DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATE", "file_key_name": "models.int_time_entries"}, "test.augustdbt.unique_int_time_entries_hour_hash.e32c2a241f": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "hour_hash", "model": "{{ get_where_subquery(ref('int_time_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.augustdbt.int_time_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "int", "unique_int_time_entries_hour_hash"], "unique_id": "test.augustdbt.unique_int_time_entries_hour_hash.e32c2a241f", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "unique_int_time_entries_hour_hash.sql", "original_file_path": "models/int/int_time_entries.yml", "name": "unique_int_time_entries_hour_hash", "alias": "unique_int_time_entries_hour_hash", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_time_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/int/int_time_entries.yml/unique_int_time_entries_hour_hash.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661429719.666083, "compiled_sql": "\n    \n    \n\nselect\n    hour_hash as unique_field,\n    count(*) as n_records\n\nfrom \"warehouse_august\".\"august_INT\".\"int_time_entries\"\nwhere hour_hash is not null\ngroup by hour_hash\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "hour_hash", "file_key_name": "models.int_time_entries"}, "test.augustdbt.not_null_invoices__AIRTABLE_ID.48f52a86f7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_AIRTABLE_ID", "model": "{{ get_where_subquery(ref('invoices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.augustdbt.invoices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "final", "not_null_invoices__AIRTABLE_ID"], "unique_id": "test.augustdbt.not_null_invoices__AIRTABLE_ID.48f52a86f7", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "not_null_invoices__AIRTABLE_ID.sql", "original_file_path": "models/final/invoices.yml", "name": "not_null_invoices__AIRTABLE_ID", "alias": "not_null_invoices__AIRTABLE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["invoices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/final/invoices.yml/not_null_invoices__AIRTABLE_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661429719.7198, "compiled_sql": "\n    \n    \n\n\n\nselect _AIRTABLE_ID\nfrom \"warehouse_august\".\"august_FINAL\".\"invoices\"\nwhere _AIRTABLE_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_AIRTABLE_ID", "file_key_name": "models.invoices"}, "test.augustdbt.unique_invoices__AIRTABLE_ID.d6c54c9f3b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "_AIRTABLE_ID", "model": "{{ get_where_subquery(ref('invoices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.augustdbt.invoices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "warehouse_august", "schema": "august_dbt_test__audit", "fqn": ["augustdbt", "final", "unique_invoices__AIRTABLE_ID"], "unique_id": "test.augustdbt.unique_invoices__AIRTABLE_ID.d6c54c9f3b", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "unique_invoices__AIRTABLE_ID.sql", "original_file_path": "models/final/invoices.yml", "name": "unique_invoices__AIRTABLE_ID", "alias": "unique_invoices__AIRTABLE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["invoices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/augustdbt/models/final/invoices.yml/unique_invoices__AIRTABLE_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1661429719.7208161, "compiled_sql": "\n    \n    \n\nselect\n    _AIRTABLE_ID as unique_field,\n    count(*) as n_records\n\nfrom \"warehouse_august\".\"august_FINAL\".\"invoices\"\nwhere _AIRTABLE_ID is not null\ngroup by _AIRTABLE_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_AIRTABLE_ID", "file_key_name": "models.invoices"}}, "sources": {"source.augustdbt.quickbooks.quickbooks_invoices_ltd1": {"fqn": ["augustdbt", "sources", "quickbooks", "quickbooks_invoices_ltd1"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.quickbooks.quickbooks_invoices_ltd1", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/quickbooks.yml", "original_file_path": "models/sources/quickbooks.yml", "name": "quickbooks_invoices_ltd1", "source_name": "quickbooks", "source_description": "", "loader": "", "identifier": "QUICKBOOKS_AUGUSTLLD1_INVOICES", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["quickbooks"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"QUICKBOOKS_AUGUSTLLD1_INVOICES\"", "created_at": 1661416272.503547}, "source.augustdbt.quickbooks.quickbooks_invoices_ltd2": {"fqn": ["augustdbt", "sources", "quickbooks", "quickbooks_invoices_ltd2"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.quickbooks.quickbooks_invoices_ltd2", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/quickbooks.yml", "original_file_path": "models/sources/quickbooks.yml", "name": "quickbooks_invoices_ltd2", "source_name": "quickbooks", "source_description": "", "loader": "", "identifier": "QUICKBOOKS_AUGUSTLLD2_INVOICES", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["quickbooks"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"QUICKBOOKS_AUGUSTLLD2_INVOICES\"", "created_at": 1661416272.503598}, "source.augustdbt.quickbooks.quickbooks_invoices_llc": {"fqn": ["augustdbt", "sources", "quickbooks", "quickbooks_invoices_llc"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.quickbooks.quickbooks_invoices_llc", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/quickbooks.yml", "original_file_path": "models/sources/quickbooks.yml", "name": "quickbooks_invoices_llc", "source_name": "quickbooks", "source_description": "", "loader": "", "identifier": "QUICKBOOKS_AUGUSTLLC_INVOICES", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["quickbooks"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"QUICKBOOKS_AUGUSTLLC_INVOICES\"", "created_at": 1661416272.5036511}, "source.augustdbt.quickbooks.quickbooks_invoices_cv": {"fqn": ["augustdbt", "sources", "quickbooks", "quickbooks_invoices_cv"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.quickbooks.quickbooks_invoices_cv", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/quickbooks.yml", "original_file_path": "models/sources/quickbooks.yml", "name": "quickbooks_invoices_cv", "source_name": "quickbooks", "source_description": "", "loader": "", "identifier": "QUICKBOOKS_AUGUSTCV_INVOICES", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["quickbooks"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"QUICKBOOKS_AUGUSTCV_INVOICES\"", "created_at": 1661416272.503701}, "source.augustdbt.harvest.clients": {"fqn": ["augustdbt", "sources", "harvest", "clients"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.harvest.clients", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/harvest.yml", "original_file_path": "models/sources/harvest.yml", "name": "clients", "source_name": "harvest", "source_description": "", "loader": "", "identifier": "harvest_clients", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 2}, "connection": {"id": "5f048b12-5887-4e5b-bd69-6d3b659ffcb9"}}, "tags": ["harvest"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"harvest_clients\"", "created_at": 1661429166.311003}, "source.augustdbt.harvest.harvest_projects": {"fqn": ["augustdbt", "sources", "harvest", "harvest_projects"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.harvest.harvest_projects", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/harvest.yml", "original_file_path": "models/sources/harvest.yml", "name": "harvest_projects", "source_name": "harvest", "source_description": "", "loader": "", "identifier": "harvest_projects", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 2}, "connection": {"id": "5f048b12-5887-4e5b-bd69-6d3b659ffcb9"}}, "tags": ["harvest"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"harvest_projects\"", "created_at": 1661429166.311094}, "source.augustdbt.harvest.time_entries": {"fqn": ["augustdbt", "sources", "harvest", "time_entries"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.harvest.time_entries", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/harvest.yml", "original_file_path": "models/sources/harvest.yml", "name": "time_entries", "source_name": "harvest", "source_description": "", "loader": "", "identifier": "harvest_time_entries", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 2}, "connection": {"id": "5f048b12-5887-4e5b-bd69-6d3b659ffcb9"}}, "tags": ["harvest"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"harvest_time_entries\"", "created_at": 1661429166.311153}, "source.augustdbt.harvest.users": {"fqn": ["augustdbt", "sources", "harvest", "users"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.harvest.users", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/harvest.yml", "original_file_path": "models/sources/harvest.yml", "name": "users", "source_name": "harvest", "source_description": "", "loader": "", "identifier": "harvest_users", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 2}, "connection": {"id": "5f048b12-5887-4e5b-bd69-6d3b659ffcb9"}}, "tags": ["harvest"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"harvest_users\"", "created_at": 1661429166.311209}, "source.augustdbt.ezekia.ezekia_projects": {"fqn": ["augustdbt", "sources", "ezekia", "ezekia_projects"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.ezekia.ezekia_projects", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/ezekia.yml", "original_file_path": "models/sources/ezekia.yml", "name": "ezekia_projects", "source_name": "ezekia", "source_description": "", "loader": "", "identifier": "ezekia_projects", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 1}, "connection": {"id": "2c403393-a827-4fb0-8625-2f5eadb0112f"}}, "tags": ["ezekia"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"ezekia_projects\"", "created_at": 1661429166.311265}, "source.augustdbt.ezekia.ezekia_projects_relationships": {"fqn": ["augustdbt", "sources", "ezekia", "ezekia_projects_relationships"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.ezekia.ezekia_projects_relationships", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/ezekia.yml", "original_file_path": "models/sources/ezekia.yml", "name": "ezekia_projects_relationships", "source_name": "ezekia", "source_description": "", "loader": "", "identifier": "ezekia_projects_relationships", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 1}, "connection": {"id": "2c403393-a827-4fb0-8625-2f5eadb0112f"}}, "tags": ["ezekia"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"ezekia_projects_relationships\"", "created_at": 1661429166.311319}, "source.augustdbt.ezekia.ezekia_projects_relationships_company": {"fqn": ["augustdbt", "sources", "ezekia", "ezekia_projects_relationships_company"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.ezekia.ezekia_projects_relationships_company", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/ezekia.yml", "original_file_path": "models/sources/ezekia.yml", "name": "ezekia_projects_relationships_company", "source_name": "ezekia", "source_description": "", "loader": "", "identifier": "ezekia_projects_relationships_company", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 1}, "connection": {"id": "2c403393-a827-4fb0-8625-2f5eadb0112f"}}, "tags": ["ezekia"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"ezekia_projects_relationships_company\"", "created_at": 1661429166.311371}, "source.augustdbt.ezekia.ezekia_projects_owner": {"fqn": ["augustdbt", "sources", "ezekia", "ezekia_projects_owner"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.ezekia.ezekia_projects_owner", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/ezekia.yml", "original_file_path": "models/sources/ezekia.yml", "name": "ezekia_projects_owner", "source_name": "ezekia", "source_description": "", "loader": "", "identifier": "ezekia_projects_owner", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 1}, "connection": {"id": "2c403393-a827-4fb0-8625-2f5eadb0112f"}}, "tags": ["ezekia"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"ezekia_projects_owner\"", "created_at": 1661429166.311424}, "source.augustdbt.ezekia.projects_industries": {"fqn": ["augustdbt", "sources", "ezekia", "projects_industries"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.ezekia.projects_industries", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/ezekia.yml", "original_file_path": "models/sources/ezekia.yml", "name": "projects_industries", "source_name": "ezekia", "source_description": "", "loader": "", "identifier": "ezekia_projects_industries", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 1}, "connection": {"id": "2c403393-a827-4fb0-8625-2f5eadb0112f"}}, "tags": ["ezekia"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"ezekia_projects_industries\"", "created_at": 1661429166.311475}, "source.augustdbt.ezekia.ezekia_people": {"fqn": ["augustdbt", "sources", "ezekia", "ezekia_people"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.ezekia.ezekia_people", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/ezekia.yml", "original_file_path": "models/sources/ezekia.yml", "name": "ezekia_people", "source_name": "ezekia", "source_description": "", "loader": "", "identifier": "ezekia_people", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 1}, "connection": {"id": "2c403393-a827-4fb0-8625-2f5eadb0112f"}}, "tags": ["ezekia"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"ezekia_people\"", "created_at": 1661429166.3115258}, "source.augustdbt.ezekia.ezekia_users": {"fqn": ["augustdbt", "sources", "ezekia", "ezekia_users"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.ezekia.ezekia_users", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/ezekia.yml", "original_file_path": "models/sources/ezekia.yml", "name": "ezekia_users", "source_name": "ezekia", "source_description": "", "loader": "", "identifier": "ezekia_users", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 1}, "connection": {"id": "2c403393-a827-4fb0-8625-2f5eadb0112f"}}, "tags": ["ezekia"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"ezekia_users\"", "created_at": 1661429166.3115761}, "source.augustdbt.ezekia.ezekia_companies": {"fqn": ["augustdbt", "sources", "ezekia", "ezekia_companies"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.ezekia.ezekia_companies", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/ezekia.yml", "original_file_path": "models/sources/ezekia.yml", "name": "ezekia_companies", "source_name": "ezekia", "source_description": "", "loader": "", "identifier": "ezekia_companies", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 1}, "connection": {"id": "2c403393-a827-4fb0-8625-2f5eadb0112f"}}, "tags": ["ezekia"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"ezekia_companies\"", "created_at": 1661429166.311626}, "source.augustdbt.ezekia.ezekia_project_custom_fields_field": {"fqn": ["augustdbt", "sources", "ezekia", "ezekia_project_custom_fields_field"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.ezekia.ezekia_project_custom_fields_field", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/ezekia.yml", "original_file_path": "models/sources/ezekia.yml", "name": "ezekia_project_custom_fields_field", "source_name": "ezekia", "source_description": "", "loader": "", "identifier": "ezekia_project_custom_fields_field", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 1}, "connection": {"id": "2c403393-a827-4fb0-8625-2f5eadb0112f"}}, "tags": ["ezekia"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"ezekia_project_custom_fields_field\"", "created_at": 1661429166.311677}, "source.augustdbt.ezekia.ezekia_project_custom_fields": {"fqn": ["augustdbt", "sources", "ezekia", "ezekia_project_custom_fields"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.ezekia.ezekia_project_custom_fields", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/ezekia.yml", "original_file_path": "models/sources/ezekia.yml", "name": "ezekia_project_custom_fields", "source_name": "ezekia", "source_description": "", "loader": "", "identifier": "ezekia_project_custom_fields", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 1}, "connection": {"id": "2c403393-a827-4fb0-8625-2f5eadb0112f"}}, "tags": ["ezekia"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"ezekia_project_custom_fields\"", "created_at": 1661429166.3117251}, "source.augustdbt.airtable.airtable_assignments": {"fqn": ["augustdbt", "sources", "airtable", "airtable_assignments"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.airtable.airtable_assignments", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/airtable.yml", "original_file_path": "models/sources/airtable.yml", "name": "airtable_assignments", "source_name": "airtable", "source_description": "", "loader": "", "identifier": "airtable_assignments", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 3}, "connection": {"id": "ff28ad66-9687-4fa2-96d7-46c577cbd49b"}}, "tags": ["airtable"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"airtable_assignments\"", "created_at": 1661429166.311774}, "source.augustdbt.airtable.airtable_companies": {"fqn": ["augustdbt", "sources", "airtable", "airtable_companies"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.airtable.airtable_companies", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/airtable.yml", "original_file_path": "models/sources/airtable.yml", "name": "airtable_companies", "source_name": "airtable", "source_description": "", "loader": "", "identifier": "airtable_companies", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 3}, "connection": {"id": "ff28ad66-9687-4fa2-96d7-46c577cbd49b"}}, "tags": ["airtable"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"airtable_companies\"", "created_at": 1661429166.3118222}, "source.augustdbt.airtable.airtable_employees": {"fqn": ["augustdbt", "sources", "airtable", "airtable_employees"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.airtable.airtable_employees", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/airtable.yml", "original_file_path": "models/sources/airtable.yml", "name": "airtable_employees", "source_name": "airtable", "source_description": "", "loader": "", "identifier": "airtable_employees", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 3}, "connection": {"id": "ff28ad66-9687-4fa2-96d7-46c577cbd49b"}}, "tags": ["airtable"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"airtable_employees\"", "created_at": 1661429166.3118699}, "source.augustdbt.airtable.airtable_regions": {"fqn": ["augustdbt", "sources", "airtable", "airtable_regions"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.airtable.airtable_regions", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/airtable.yml", "original_file_path": "models/sources/airtable.yml", "name": "airtable_regions", "source_name": "airtable", "source_description": "", "loader": "", "identifier": "airtable_regions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 3}, "connection": {"id": "ff28ad66-9687-4fa2-96d7-46c577cbd49b"}}, "tags": ["airtable"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"airtable_regions\"", "created_at": 1661429166.3119202}, "source.augustdbt.airtable.airtable_roles": {"fqn": ["augustdbt", "sources", "airtable", "airtable_roles"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.airtable.airtable_roles", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/airtable.yml", "original_file_path": "models/sources/airtable.yml", "name": "airtable_roles", "source_name": "airtable", "source_description": "", "loader": "", "identifier": "airtable_roles", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 3}, "connection": {"id": "ff28ad66-9687-4fa2-96d7-46c577cbd49b"}}, "tags": ["airtable"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"airtable_roles\"", "created_at": 1661429166.3119712}, "source.augustdbt.airtable.airtable_financials": {"fqn": ["augustdbt", "sources", "airtable", "airtable_financials"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.airtable.airtable_financials", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/airtable.yml", "original_file_path": "models/sources/airtable.yml", "name": "airtable_financials", "source_name": "airtable", "source_description": "", "loader": "", "identifier": "airtable_financials", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 3}, "connection": {"id": "ff28ad66-9687-4fa2-96d7-46c577cbd49b"}}, "tags": ["airtable"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"airtable_financials\"", "created_at": 1661429166.31202}, "source.augustdbt.airtable.airtable_practice_areas": {"fqn": ["augustdbt", "sources", "airtable", "airtable_practice_areas"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.airtable.airtable_practice_areas", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/airtable.yml", "original_file_path": "models/sources/airtable.yml", "name": "airtable_practice_areas", "source_name": "airtable", "source_description": "", "loader": "", "identifier": "airtable_practice_areas", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 3}, "connection": {"id": "ff28ad66-9687-4fa2-96d7-46c577cbd49b"}}, "tags": ["airtable"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"airtable_practice_areas\"", "created_at": 1661429166.3120708}, "source.augustdbt.airtable.airtable_invoices": {"fqn": ["augustdbt", "sources", "airtable", "airtable_invoices"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.airtable.airtable_invoices", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/airtable.yml", "original_file_path": "models/sources/airtable.yml", "name": "airtable_invoices", "source_name": "airtable", "source_description": "", "loader": "", "identifier": "airtable_invoices", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 3}, "connection": {"id": "ff28ad66-9687-4fa2-96d7-46c577cbd49b"}}, "tags": ["airtable"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"airtable_invoices\"", "created_at": 1661429166.3121212}, "source.augustdbt.airtable.airtable_tasks": {"fqn": ["augustdbt", "sources", "airtable", "airtable_tasks"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.airtable.airtable_tasks", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/airtable.yml", "original_file_path": "models/sources/airtable.yml", "name": "airtable_tasks", "source_name": "airtable", "source_description": "", "loader": "", "identifier": "airtable_tasks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 3}, "connection": {"id": "ff28ad66-9687-4fa2-96d7-46c577cbd49b"}}, "tags": ["airtable"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"airtable_tasks\"", "created_at": 1661429166.31217}, "source.augustdbt.airtable.airtable_work_logs": {"fqn": ["augustdbt", "sources", "airtable", "airtable_work_logs"], "database": "warehouse_august", "schema": "august_airbyte", "unique_id": "source.augustdbt.airtable.airtable_work_logs", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "models/sources/airtable.yml", "original_file_path": "models/sources/airtable.yml", "name": "airtable_work_logs", "source_name": "airtable", "source_description": "", "loader": "", "identifier": "airtable_work_logs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {"source": {"id": 3}, "connection": {"id": "ff28ad66-9687-4fa2-96d7-46c577cbd49b"}}, "tags": ["airtable"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"warehouse_august\".\"august_airbyte\".\"airtable_work_logs\"", "created_at": 1661429166.3122199}}, "macros": {"macro.augustdbt._log_columns_list": {"unique_id": "macro.augustdbt._log_columns_list", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "macros/_log_columns_list.sql", "original_file_path": "macros/_log_columns_list.sql", "name": "_log_columns_list", "macro_sql": "{% macro _log_columns_list(sql=none, resource_name=none) %}\n    {% if sql is none %}\n        {% set sql = 'select * from ' ~ ref(resource_name) %}\n    {% endif %}\n    {% if execute %}\n        {{ log(get_columns_in_query(sql), info=True) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.821724}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.822913}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.823616}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.829482}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.829976}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.830291}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8306088}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8310778}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.831518}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.831689}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.832049}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.832441}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8325171}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.832691}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.832791}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8336132}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.833808}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.834124}, "macro.dbt_postgres.postgres__make_backup_relation": {"unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.834395}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8348138}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.835039}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.835639}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8358579}, "macro.dbt_postgres.postgres__copy_grants": {"unique_id": "macro.dbt_postgres.postgres__copy_grants", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.835983}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.836755}, "macro.dbt_postgres.postgres__dateadd": {"unique_id": "macro.dbt_postgres.postgres__dateadd", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.837031}, "macro.dbt_postgres.postgres__listagg": {"unique_id": "macro.dbt_postgres.postgres__listagg", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8376791}, "macro.dbt_postgres.postgres__datediff": {"unique_id": "macro.dbt_postgres.postgres__datediff", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.840816}, "macro.dbt_postgres.postgres__any_value": {"unique_id": "macro.dbt_postgres.postgres__any_value", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.841027}, "macro.dbt_postgres.postgres__last_day": {"unique_id": "macro.dbt_postgres.postgres__last_day", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.841568}, "macro.dbt_postgres.postgres__split_part": {"unique_id": "macro.dbt_postgres.postgres__split_part", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8420212}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8430982}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.843293}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.843433}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.843574}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8437152}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8441222}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8444211}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.844722}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.845189}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.845454}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.848774}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.848943}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.84916}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.849301}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8493938}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.850101}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.850267}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8504372}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.851806}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.853151}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8567622}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.857044}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8572109}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.857294}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.857435}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.857545}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.857746}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8585951}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.858784}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.85903}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8594592}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.86566}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.867933}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8685088}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.868844}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.869303}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8697112}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.87061}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.871291}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.871968}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8771598}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.878722}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.87906}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8797948}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.880061}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.880687}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8814678}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.885782}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8900921}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.891297}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.892469}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8931708}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.89589}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.8964171}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.89662}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.896839}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.897286}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.899982}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.900372}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.900609}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.90224}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9026911}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9028668}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.903061}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9033432}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.906872}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.911663}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9126358}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.912887}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9134011}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9136052}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.913749}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9139001}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9140182}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.914195}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.914314}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9148428}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.915041}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.916398}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.916939}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.917181}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.917778}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.918058}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9183612}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9188359}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.919104}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.91953}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9199092}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.92023}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9208739}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9220731}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.922689}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.923004}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.924858}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.926465}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9272718}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.927525}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.927892}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.927974}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.928388}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.928561}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.928888}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.92902}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.92935}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.929464}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.929879}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.930052}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.93035}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.93043}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.930774}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.930919}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.93128}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9314182}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.932092}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.932605}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.933028}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.933196}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.933551}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.933693}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9340212}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.934186}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.934496}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.934665}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9349902}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9350982}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.93545}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9355898}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.935903}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.93601}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.936901}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9370492}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9372091}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.937357}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9375901}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9377432}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.937902}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.938076}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.938231}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.938378}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.938537}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.938678}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.938986}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.93909}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.939477}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.939743}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.939887}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9404302}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9405959}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.94081}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.941136}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.941262}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.941668}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9418502}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.942009}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.942251}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.942731}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.942864}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9430149}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.943414}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.946374}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.946537}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.946752}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9470358}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.947278}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9475951}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.947776}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.947985}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.948163}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.948319}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.948519}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9487948}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.949037}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.949643}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.949872}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.950013}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9502048}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.950699}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9508429}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.951066}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.951481}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.953082}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9531982}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.953363}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9534678}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.953805}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.953986}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.954085}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.954313}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9545012}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.954726}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.954912}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.95514}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.955869}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.956054}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.956288}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.956513}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9576309}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9583218}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9584892}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9586859}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.958848}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9591181}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.959598}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.960984}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.961235}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.961419}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.961565}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.961877}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.962145}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.962367}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.962692}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.962892}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9630651}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.964797}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.965051}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.965387}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.965587}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9659462}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.96619}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9668329}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.96711}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.967944}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.968578}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9688268}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.969132}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.96943}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.96977}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.969852}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.969923}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.970337}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9705138}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.970839}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9709718}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.971692}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9718258}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.971979}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9720588}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.972131}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9723048}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.972384}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.972456}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.97263}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.972707}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.97278}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.972949}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.973026}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9730968}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.973262}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9733398}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.973412}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9735801}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9736562}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.973727}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.974288}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.974677}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9747891}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.974895}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.975604}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.975782}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9759538}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.976125}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.97633}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.976649}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.976727}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.976798}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9774091}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.977547}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.97771}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.977866}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.980337}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.980497}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.980652}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.982435}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.982641}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.983058}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9831948}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.983316}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.983435}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.983767}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.983912}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.984041}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.984395}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.984534}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9846559}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.985164}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.985264}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.985358}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.985761}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.985892}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9860191}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.986311}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9864142}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.986987}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9871612}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.987231}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.987298}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9874501}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9875588}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.987701}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9878101}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.987936}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9893188}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.989779}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9902358}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.990422}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.99101}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.991272}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.9914172}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.991806}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.99198}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.99245}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.992619}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.992789}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.993176}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.993365}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.993494}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416271.994339}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0003939}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.000962}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0013068}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.00184}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0075579}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.008151}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.008676}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.009254}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.009962}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.010366}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.010709}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.011053}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.011231}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.011586}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.011801}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.012138}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0123289}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.012887}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.013504}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.013751}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0142238}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.014542}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.015413}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.015866}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0163782}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.016744}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.017154}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.017339}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.018032}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.018543}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.019182}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.019594}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.020092}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.020279}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.02069}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0208771}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0215611}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.022246}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0228858}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.023252}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.023799}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.024199}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0247009}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.025326}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.026109}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.026716}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0272481}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.027435}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.028279}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.029235}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0324428}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.034057}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.035209}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.035831}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.036077}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.036452}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0369039}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0372648}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0379899}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.038847}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.039698}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.040114}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.040302}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0408168}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.041534}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0424}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.042867}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.043156}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.043915}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.045075}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.046823}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0488498}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.050422}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.052765}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.053121}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.053369}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.053987}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.054927}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0553741}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.055663}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.056053}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.056384}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.057916}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0581682}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.058859}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.059436}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.060446}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n{% if default is none %}\n    {% set default = [] %}\n{% endif %}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return(default) }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0618382}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0629928}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0638819}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.064381}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.065026}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.066148}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.0664499}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.067073}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661416272.067932}, "macro.augustdbt.array_first": {"unique_id": "macro.augustdbt.array_first", "package_name": "augustdbt", "root_path": "/Users/edwardlouth/dev/roundtable/august-dbt", "path": "macros/array_first.sql", "original_file_path": "macros/array_first.sql", "name": "array_first", "macro_sql": "{% macro array_first(column) %}\n    replace(replace(replace({{column}}, '[', ''), '''', ''), $$]$$, '')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1661417070.1733298}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.augustdbt.dst_airtable_employees": [], "model.augustdbt.dst_airtable_copanies": [], "model.augustdbt.int_sales_booking": ["seed.augustdbt.sales_booking_from_spreadsheet"], "seed.augustdbt.ezekia_coe": [], "seed.augustdbt.sales_booking_from_spreadsheet": [], "seed.augustdbt.ezekia_practice_areas": [], "seed.augustdbt.initial_assignment_value_seed": [], "seed.augustdbt.ezekia_assignment_region": [], "seed.augustdbt.time_entries_from_spreadsheets": [], "test.augustdbt.unique_initial_assignment_value_seed_ezekia_id.4f80eb6188": ["seed.augustdbt.initial_assignment_value_seed"], "seed.augustdbt.quickbooks_save": [], "seed.augustdbt.match_partners_from_ss_to_airtable": [], "model.augustdbt.int_work_items_from_ss": ["model.augustdbt.int_time_entries_partners", "model.augustdbt.int_time_entries_partners"], "test.augustdbt.unique_int_work_items_from_ss_ezekia_id.bf86a55502": ["model.augustdbt.int_work_items_from_ss"], "model.augustdbt.int_time_entries_partners": ["model.augustdbt.int_time_entries_start_date", "seed.augustdbt.match_partners_from_ss_to_airtable"], "model.augustdbt.int_time_entries_start_date": ["seed.augustdbt.time_entries_from_spreadsheets"], "model.augustdbt.dst_harvest_projects": ["model.augustdbt.stg_ezekia_projects", "model.augustdbt.stg_ezekia_projects_relationships", "model.augustdbt.stg_ezekia_projects_relationships_company"], "model.augustdbt.dst_airtable_assignments": ["model.augustdbt.assignments"], "model.augustdbt.dt_value_over_time": ["model.augustdbt.assignments"], "model.augustdbt.assignments": ["model.augustdbt.int_partners", "model.augustdbt.int_time_entries_partners", "model.augustdbt.int_work_items_consolidated", "model.augustdbt.invoices_quickbooks"], "model.augustdbt.work_logs": ["model.augustdbt.int_partners", "model.augustdbt.int_researchers", "model.augustdbt.int_time_entries_partners", "model.augustdbt.int_work_items_consolidated"], "model.augustdbt.int_work_items_consolidated": ["model.augustdbt.int_projects_from_ezekia", "model.augustdbt.int_work_items_from_airtable", "model.augustdbt.int_work_items_from_ss"], "model.augustdbt.companies": ["model.augustdbt.int_companies", "model.augustdbt.int_partners"], "model.augustdbt.stg_ezekia_project_custom_fields_field": ["source.augustdbt.ezekia.ezekia_project_custom_fields_field"], "model.augustdbt.stg_ezekia_project_custom_fields": ["source.augustdbt.ezekia.ezekia_project_custom_fields"], "model.augustdbt.int_work_items_from_airtable": ["model.augustdbt.stg_airtable_assignments", "model.augustdbt.stg_airtable_companies"], "model.augustdbt.stg_airtable_companies": ["source.augustdbt.airtable.airtable_companies"], "model.augustdbt.regions": ["model.augustdbt.stg_airtable_regions"], "model.augustdbt.roles": ["model.augustdbt.stg_airtable_roles"], "model.augustdbt.stg_airtable_roles": ["source.augustdbt.airtable.airtable_roles"], "model.augustdbt.int_invoices": ["model.augustdbt.stg_airtable_invoices"], "model.augustdbt.stg_airtable_tasks": ["source.augustdbt.airtable.airtable_tasks"], "model.augustdbt.stg_airtable_work_logs": ["source.augustdbt.airtable.airtable_work_logs"], "test.augustdbt.unique_assignments_unique_id.1f9edac13a": ["model.augustdbt.assignments"], "test.augustdbt.unique_dst_airtable_assignments_ezekia_id.f4873ab4c0": ["model.augustdbt.dst_airtable_assignments"], "test.augustdbt.not_null_work_logs_date.6e64d6a36a": ["model.augustdbt.work_logs"], "test.augustdbt.not_null_work_logs_hours.63199a7db3": ["model.augustdbt.work_logs"], "model.augustdbt.int_ezekia_custom_fields": ["model.augustdbt.stg_ezekia_project_custom_fields", "model.augustdbt.stg_ezekia_project_custom_fields_field"], "test.augustdbt.not_null_int_ezekia_custom_fields_ezekia_id.0b9a4c0da0": ["model.augustdbt.int_ezekia_custom_fields"], "test.augustdbt.unique_int_ezekia_custom_fields_ezekia_id.9b8bf99af7": ["model.augustdbt.int_ezekia_custom_fields"], "model.augustdbt.int_projects_from_ezekia": ["model.augustdbt.int_ezekia_custom_fields", "model.augustdbt.stg_ezekia_projects", "model.augustdbt.stg_ezekia_projects_owner", "model.augustdbt.stg_ezekia_projects_relationships", "model.augustdbt.stg_ezekia_projects_relationships_company"], "model.augustdbt.stg_ezekia_projects": ["source.augustdbt.ezekia.ezekia_projects"], "test.augustdbt.unique_int_projects_from_ezekia_EZEKIA_ID.127b4cd0a6": ["model.augustdbt.int_projects_from_ezekia"], "test.augustdbt.not_null_int_projects_from_ezekia_EZEKIA_ID.5378c2ce23": ["model.augustdbt.int_projects_from_ezekia"], "test.augustdbt.unique_stg_ezekia_projects_ID.476846b07e": ["model.augustdbt.stg_ezekia_projects"], "model.augustdbt.stg_ezekia_industries": ["source.augustdbt.ezekia.projects_industries"], "model.augustdbt.employees": ["model.augustdbt.stg_airtable_employees"], "model.augustdbt.stg_ezekia_projects_owner": ["source.augustdbt.ezekia.ezekia_projects_owner"], "model.augustdbt.stg_ezekia_projects_relationships_company": ["source.augustdbt.ezekia.ezekia_projects_relationships_company"], "model.augustdbt.int_companies": ["model.augustdbt.int_time_entries_partners", "model.augustdbt.stg_airtable_companies", "model.augustdbt.stg_ezekia_companies"], "model.augustdbt.partner_financials": ["model.augustdbt.stg_airtable_financials"], "model.augustdbt.stg_ezekia_users": ["source.augustdbt.ezekia.ezekia_users"], "model.augustdbt.stg_airtable_regions": ["source.augustdbt.airtable.airtable_regions"], "model.augustdbt.stg_airtable_practice_area": ["source.augustdbt.airtable.airtable_practice_areas"], "model.augustdbt.researchers": ["model.augustdbt.int_researchers"], "model.augustdbt.stg_ezekia_companies": ["source.augustdbt.ezekia.ezekia_companies"], "model.augustdbt.int_partners": ["model.augustdbt.stg_airtable_employees", "model.augustdbt.stg_ezekia_users"], "model.augustdbt.stg_ezekia_people": ["source.augustdbt.ezekia.ezekia_people"], "model.augustdbt.int_practice_areas": ["model.augustdbt.stg_airtable_practice_area", "model.augustdbt.stg_ezekia_industries"], "model.augustdbt.int_researchers": ["model.augustdbt.stg_airtable_employees"], "model.augustdbt.stg_ezekia_projects_relationships": ["source.augustdbt.ezekia.ezekia_projects_relationships"], "model.augustdbt.stg_ezekia_practice_areas": ["source.augustdbt.ezekia.projects_industries"], "model.augustdbt.int_time_entries": ["seed.augustdbt.time_entries_from_spreadsheets"], "model.augustdbt.practice_areas": ["model.augustdbt.stg_airtable_practice_area"], "model.augustdbt.stg_harvest_users": ["source.augustdbt.harvest.users"], "model.augustdbt.stg_airtable_invoices": ["source.augustdbt.airtable.airtable_invoices"], "model.augustdbt.invoices_quickbooks": ["seed.augustdbt.quickbooks_save"], "model.augustdbt.stg_airtable_assignments": ["source.augustdbt.airtable.airtable_assignments"], "model.augustdbt.invoices": ["model.augustdbt.int_invoices"], "model.augustdbt.stg_airtable_financials": ["source.augustdbt.airtable.airtable_financials"], "model.augustdbt.partners": ["model.augustdbt.int_partners"], "model.augustdbt.stg_airtable_employees": ["source.augustdbt.airtable.airtable_employees"], "model.augustdbt.stg_harvest_time_entires": ["source.augustdbt.harvest.time_entries"], "test.augustdbt.not_null_researchers_ID.a22c2938f2": ["model.augustdbt.researchers"], "test.augustdbt.unique_researchers_ID.868fa48707": ["model.augustdbt.researchers"], "test.augustdbt.not_null_int_time_entries_DATE.7e65965c46": ["model.augustdbt.int_time_entries"], "test.augustdbt.unique_int_time_entries_hour_hash.e32c2a241f": ["model.augustdbt.int_time_entries"], "test.augustdbt.not_null_invoices__AIRTABLE_ID.48f52a86f7": ["model.augustdbt.invoices"], "test.augustdbt.unique_invoices__AIRTABLE_ID.d6c54c9f3b": ["model.augustdbt.invoices"], "source.augustdbt.quickbooks.quickbooks_invoices_ltd1": [], "source.augustdbt.quickbooks.quickbooks_invoices_ltd2": [], "source.augustdbt.quickbooks.quickbooks_invoices_llc": [], "source.augustdbt.quickbooks.quickbooks_invoices_cv": [], "source.augustdbt.harvest.clients": [], "source.augustdbt.harvest.harvest_projects": [], "source.augustdbt.harvest.time_entries": [], "source.augustdbt.harvest.users": [], "source.augustdbt.ezekia.ezekia_projects": [], "source.augustdbt.ezekia.ezekia_projects_relationships": [], "source.augustdbt.ezekia.ezekia_projects_relationships_company": [], "source.augustdbt.ezekia.ezekia_projects_owner": [], "source.augustdbt.ezekia.projects_industries": [], "source.augustdbt.ezekia.ezekia_people": [], "source.augustdbt.ezekia.ezekia_users": [], "source.augustdbt.ezekia.ezekia_companies": [], "source.augustdbt.ezekia.ezekia_project_custom_fields_field": [], "source.augustdbt.ezekia.ezekia_project_custom_fields": [], "source.augustdbt.airtable.airtable_assignments": [], "source.augustdbt.airtable.airtable_companies": [], "source.augustdbt.airtable.airtable_employees": [], "source.augustdbt.airtable.airtable_regions": [], "source.augustdbt.airtable.airtable_roles": [], "source.augustdbt.airtable.airtable_financials": [], "source.augustdbt.airtable.airtable_practice_areas": [], "source.augustdbt.airtable.airtable_invoices": [], "source.augustdbt.airtable.airtable_tasks": [], "source.augustdbt.airtable.airtable_work_logs": []}, "child_map": {"model.augustdbt.dst_airtable_employees": [], "model.augustdbt.dst_airtable_copanies": [], "model.augustdbt.int_sales_booking": [], "seed.augustdbt.ezekia_coe": [], "seed.augustdbt.sales_booking_from_spreadsheet": ["model.augustdbt.int_sales_booking"], "seed.augustdbt.ezekia_practice_areas": [], "seed.augustdbt.initial_assignment_value_seed": ["test.augustdbt.unique_initial_assignment_value_seed_ezekia_id.4f80eb6188"], "seed.augustdbt.ezekia_assignment_region": [], "seed.augustdbt.time_entries_from_spreadsheets": ["model.augustdbt.int_time_entries", "model.augustdbt.int_time_entries_start_date"], "test.augustdbt.unique_initial_assignment_value_seed_ezekia_id.4f80eb6188": [], "seed.augustdbt.quickbooks_save": ["model.augustdbt.invoices_quickbooks"], "seed.augustdbt.match_partners_from_ss_to_airtable": ["model.augustdbt.int_time_entries_partners"], "model.augustdbt.int_work_items_from_ss": ["model.augustdbt.int_work_items_consolidated", "test.augustdbt.unique_int_work_items_from_ss_ezekia_id.bf86a55502"], "test.augustdbt.unique_int_work_items_from_ss_ezekia_id.bf86a55502": [], "model.augustdbt.int_time_entries_partners": ["model.augustdbt.assignments", "model.augustdbt.int_companies", "model.augustdbt.int_work_items_from_ss", "model.augustdbt.int_work_items_from_ss", "model.augustdbt.work_logs"], "model.augustdbt.int_time_entries_start_date": ["model.augustdbt.int_time_entries_partners"], "model.augustdbt.dst_harvest_projects": [], "model.augustdbt.dst_airtable_assignments": ["test.augustdbt.unique_dst_airtable_assignments_ezekia_id.f4873ab4c0"], "model.augustdbt.dt_value_over_time": [], "model.augustdbt.assignments": ["model.augustdbt.dst_airtable_assignments", "model.augustdbt.dt_value_over_time", "test.augustdbt.unique_assignments_unique_id.1f9edac13a"], "model.augustdbt.work_logs": ["test.augustdbt.not_null_work_logs_date.6e64d6a36a", "test.augustdbt.not_null_work_logs_hours.63199a7db3"], "model.augustdbt.int_work_items_consolidated": ["model.augustdbt.assignments", "model.augustdbt.work_logs"], "model.augustdbt.companies": [], "model.augustdbt.stg_ezekia_project_custom_fields_field": ["model.augustdbt.int_ezekia_custom_fields"], "model.augustdbt.stg_ezekia_project_custom_fields": ["model.augustdbt.int_ezekia_custom_fields"], "model.augustdbt.int_work_items_from_airtable": ["model.augustdbt.int_work_items_consolidated"], "model.augustdbt.stg_airtable_companies": ["model.augustdbt.int_companies", "model.augustdbt.int_work_items_from_airtable"], "model.augustdbt.regions": [], "model.augustdbt.roles": [], "model.augustdbt.stg_airtable_roles": ["model.augustdbt.roles"], "model.augustdbt.int_invoices": ["model.augustdbt.invoices"], "model.augustdbt.stg_airtable_tasks": [], "model.augustdbt.stg_airtable_work_logs": [], "test.augustdbt.unique_assignments_unique_id.1f9edac13a": [], "test.augustdbt.unique_dst_airtable_assignments_ezekia_id.f4873ab4c0": [], "test.augustdbt.not_null_work_logs_date.6e64d6a36a": [], "test.augustdbt.not_null_work_logs_hours.63199a7db3": [], "model.augustdbt.int_ezekia_custom_fields": ["model.augustdbt.int_projects_from_ezekia", "test.augustdbt.not_null_int_ezekia_custom_fields_ezekia_id.0b9a4c0da0", "test.augustdbt.unique_int_ezekia_custom_fields_ezekia_id.9b8bf99af7"], "test.augustdbt.not_null_int_ezekia_custom_fields_ezekia_id.0b9a4c0da0": [], "test.augustdbt.unique_int_ezekia_custom_fields_ezekia_id.9b8bf99af7": [], "model.augustdbt.int_projects_from_ezekia": ["model.augustdbt.int_work_items_consolidated", "test.augustdbt.not_null_int_projects_from_ezekia_EZEKIA_ID.5378c2ce23", "test.augustdbt.unique_int_projects_from_ezekia_EZEKIA_ID.127b4cd0a6"], "model.augustdbt.stg_ezekia_projects": ["model.augustdbt.dst_harvest_projects", "model.augustdbt.int_projects_from_ezekia", "test.augustdbt.unique_stg_ezekia_projects_ID.476846b07e"], "test.augustdbt.unique_int_projects_from_ezekia_EZEKIA_ID.127b4cd0a6": [], "test.augustdbt.not_null_int_projects_from_ezekia_EZEKIA_ID.5378c2ce23": [], "test.augustdbt.unique_stg_ezekia_projects_ID.476846b07e": [], "model.augustdbt.stg_ezekia_industries": ["model.augustdbt.int_practice_areas"], "model.augustdbt.employees": [], "model.augustdbt.stg_ezekia_projects_owner": ["model.augustdbt.int_projects_from_ezekia"], "model.augustdbt.stg_ezekia_projects_relationships_company": ["model.augustdbt.dst_harvest_projects", "model.augustdbt.int_projects_from_ezekia"], "model.augustdbt.int_companies": ["model.augustdbt.companies"], "model.augustdbt.partner_financials": [], "model.augustdbt.stg_ezekia_users": ["model.augustdbt.int_partners"], "model.augustdbt.stg_airtable_regions": ["model.augustdbt.regions"], "model.augustdbt.stg_airtable_practice_area": ["model.augustdbt.int_practice_areas", "model.augustdbt.practice_areas"], "model.augustdbt.researchers": ["test.augustdbt.not_null_researchers_ID.a22c2938f2", "test.augustdbt.unique_researchers_ID.868fa48707"], "model.augustdbt.stg_ezekia_companies": ["model.augustdbt.int_companies"], "model.augustdbt.int_partners": ["model.augustdbt.assignments", "model.augustdbt.companies", "model.augustdbt.partners", "model.augustdbt.work_logs"], "model.augustdbt.stg_ezekia_people": [], "model.augustdbt.int_practice_areas": [], "model.augustdbt.int_researchers": ["model.augustdbt.researchers", "model.augustdbt.work_logs"], "model.augustdbt.stg_ezekia_projects_relationships": ["model.augustdbt.dst_harvest_projects", "model.augustdbt.int_projects_from_ezekia"], "model.augustdbt.stg_ezekia_practice_areas": [], "model.augustdbt.int_time_entries": ["test.augustdbt.not_null_int_time_entries_DATE.7e65965c46", "test.augustdbt.unique_int_time_entries_hour_hash.e32c2a241f"], "model.augustdbt.practice_areas": [], "model.augustdbt.stg_harvest_users": [], "model.augustdbt.stg_airtable_invoices": ["model.augustdbt.int_invoices"], "model.augustdbt.invoices_quickbooks": ["model.augustdbt.assignments"], "model.augustdbt.stg_airtable_assignments": ["model.augustdbt.int_work_items_from_airtable"], "model.augustdbt.invoices": ["test.augustdbt.not_null_invoices__AIRTABLE_ID.48f52a86f7", "test.augustdbt.unique_invoices__AIRTABLE_ID.d6c54c9f3b"], "model.augustdbt.stg_airtable_financials": ["model.augustdbt.partner_financials"], "model.augustdbt.partners": [], "model.augustdbt.stg_airtable_employees": ["model.augustdbt.employees", "model.augustdbt.int_partners", "model.augustdbt.int_researchers"], "model.augustdbt.stg_harvest_time_entires": [], "test.augustdbt.not_null_researchers_ID.a22c2938f2": [], "test.augustdbt.unique_researchers_ID.868fa48707": [], "test.augustdbt.not_null_int_time_entries_DATE.7e65965c46": [], "test.augustdbt.unique_int_time_entries_hour_hash.e32c2a241f": [], "test.augustdbt.not_null_invoices__AIRTABLE_ID.48f52a86f7": [], "test.augustdbt.unique_invoices__AIRTABLE_ID.d6c54c9f3b": [], "source.augustdbt.quickbooks.quickbooks_invoices_ltd1": [], "source.augustdbt.quickbooks.quickbooks_invoices_ltd2": [], "source.augustdbt.quickbooks.quickbooks_invoices_llc": [], "source.augustdbt.quickbooks.quickbooks_invoices_cv": [], "source.augustdbt.harvest.clients": [], "source.augustdbt.harvest.harvest_projects": [], "source.augustdbt.harvest.time_entries": ["model.augustdbt.stg_harvest_time_entires"], "source.augustdbt.harvest.users": ["model.augustdbt.stg_harvest_users"], "source.augustdbt.ezekia.ezekia_projects": ["model.augustdbt.stg_ezekia_projects"], "source.augustdbt.ezekia.ezekia_projects_relationships": ["model.augustdbt.stg_ezekia_projects_relationships"], "source.augustdbt.ezekia.ezekia_projects_relationships_company": ["model.augustdbt.stg_ezekia_projects_relationships_company"], "source.augustdbt.ezekia.ezekia_projects_owner": ["model.augustdbt.stg_ezekia_projects_owner"], "source.augustdbt.ezekia.projects_industries": ["model.augustdbt.stg_ezekia_industries", "model.augustdbt.stg_ezekia_practice_areas"], "source.augustdbt.ezekia.ezekia_people": ["model.augustdbt.stg_ezekia_people"], "source.augustdbt.ezekia.ezekia_users": ["model.augustdbt.stg_ezekia_users"], "source.augustdbt.ezekia.ezekia_companies": ["model.augustdbt.stg_ezekia_companies"], "source.augustdbt.ezekia.ezekia_project_custom_fields_field": ["model.augustdbt.stg_ezekia_project_custom_fields_field"], "source.augustdbt.ezekia.ezekia_project_custom_fields": ["model.augustdbt.stg_ezekia_project_custom_fields"], "source.augustdbt.airtable.airtable_assignments": ["model.augustdbt.stg_airtable_assignments"], "source.augustdbt.airtable.airtable_companies": ["model.augustdbt.stg_airtable_companies"], "source.augustdbt.airtable.airtable_employees": ["model.augustdbt.stg_airtable_employees"], "source.augustdbt.airtable.airtable_regions": ["model.augustdbt.stg_airtable_regions"], "source.augustdbt.airtable.airtable_roles": ["model.augustdbt.stg_airtable_roles"], "source.augustdbt.airtable.airtable_financials": ["model.augustdbt.stg_airtable_financials"], "source.augustdbt.airtable.airtable_practice_areas": ["model.augustdbt.stg_airtable_practice_area"], "source.augustdbt.airtable.airtable_invoices": ["model.augustdbt.stg_airtable_invoices"], "source.augustdbt.airtable.airtable_tasks": ["model.augustdbt.stg_airtable_tasks"], "source.augustdbt.airtable.airtable_work_logs": ["model.augustdbt.stg_airtable_work_logs"]}}
