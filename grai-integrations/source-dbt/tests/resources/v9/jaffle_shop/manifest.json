{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v9.json", "dbt_version": "1.5.0rc1", "generated_at": "2023-04-14T04:30:34.933840Z", "invocation_id": "ed1e635c-bd68-4d84-a81f-f94b69ad2d93", "env": {}, "project_id": "06e5b98c2db46f8a72cc4f66410e9b3b", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "bigquery"}, "nodes": {"model.jaffle_shop.customers": {"database": "your-gcp-project", "schema": "jaffle_shop", "name": "customers", "resource_type": "model", "package_name": "jaffle_shop", "path": "customers.sql", "original_file_path": "models/customers.sql", "unique_id": "model.jaffle_shop.customers", "fqn": ["jaffle_shop", "customers"], "alias": "customers", "checksum": {"name": "sha256", "checksum": "60bd72e33da43fff3a7e7609135c17cd4468bd22afec0735dd36018bfb5af30a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This table has basic information about a customer, as well as some derived facts based on a customer's orders", "columns": {"customer_id": {"name": "customer_id", "description": "This is a unique identifier for a customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "Customer's first name. PII.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Customer's last name. PII.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_order": {"name": "first_order", "description": "Date (UTC) of a customer's first order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_recent_order": {"name": "most_recent_order", "description": "Date (UTC) of a customer's most recent order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_of_orders": {"name": "number_of_orders", "description": "Count of the number of orders a customer has placed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_order_amount": {"name": "total_order_amount", "description": "Total value (AUD) of a customer's orders", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "no_such_column": {"name": "no_such_column", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "jaffle_shop://models/schema.yml", "build_path": "target/run/jaffle_shop/models/customers.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1681446636.464889, "relation_name": "`your-gcp-project`.`jaffle_shop`.`customers`", "raw_code": "with customers as (\n\n    select * from {{ ref('stg_customers') }}\n\n),\n\norders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}, {"name": "stg_orders", "package": null, "version": null}, {"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.jaffle_shop.stg_customers", "model.jaffle_shop.stg_orders", "model.jaffle_shop.stg_payments"]}, "compiled_path": "target/compiled/jaffle_shop/models/customers.sql", "compiled": true, "compiled_code": "with customers as (\n\n    select * from `your-gcp-project`.`jaffle_shop`.`stg_customers`\n\n),\n\norders as (\n\n    select * from `your-gcp-project`.`jaffle_shop`.`stg_orders`\n\n),\n\npayments as (\n\n    select * from `your-gcp-project`.`jaffle_shop`.`stg_payments`\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.jaffle_shop.orders": {"database": "your-gcp-project", "schema": "jaffle_shop", "name": "orders", "resource_type": "model", "package_name": "jaffle_shop", "path": "orders.sql", "original_file_path": "models/orders.sql", "unique_id": "model.jaffle_shop.orders", "fqn": ["jaffle_shop", "orders"], "alias": "orders", "checksum": {"name": "sha256", "checksum": "5f6701528858988e8f681836bb2e631ec233c3a383e28553cedc01cc23645c28"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This table has basic information about orders, as well as some derived facts based on payments", "columns": {"order_id": {"name": "order_id", "description": "This is a unique identifier for an order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Foreign key to the customers table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "Date (UTC) that the order was placed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Total amount (AUD) of the order", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_card_amount": {"name": "credit_card_amount", "description": "Amount of the order (AUD) paid for by credit card", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coupon_amount": {"name": "coupon_amount", "description": "Amount of the order (AUD) paid for by coupon", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bank_transfer_amount": {"name": "bank_transfer_amount", "description": "Amount of the order (AUD) paid for by bank transfer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gift_card_amount": {"name": "gift_card_amount", "description": "Amount of the order (AUD) paid for by gift card", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "jaffle_shop://models/schema.yml", "build_path": "target/run/jaffle_shop/models/orders.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1681446636.466793, "relation_name": "`your-gcp-project`.`jaffle_shop`.`orders`", "raw_code": "{% set payment_methods = ['credit_card', 'coupon', 'bank_transfer', 'gift_card'] %}\n\nwith orders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\npayments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        {% for payment_method in payment_methods -%}\n        sum(case when payment_method = '{{ payment_method }}' then amount else 0 end) as {{ payment_method }}_amount,\n        {% endfor -%}\n\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n        no_such_column_v2,\n\n        {% for payment_method in payment_methods -%}\n\n        order_payments.{{ payment_method }}_amount,\n\n        {% endfor -%}\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}, {"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.jaffle_shop.stg_orders", "model.jaffle_shop.stg_payments"]}, "compiled_path": "target/compiled/jaffle_shop/models/orders.sql", "compiled": true, "compiled_code": "\n\nwith orders as (\n\n    select * from `your-gcp-project`.`jaffle_shop`.`stg_orders`\n\n),\n\npayments as (\n\n    select * from `your-gcp-project`.`jaffle_shop`.`stg_payments`\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n        no_such_column_v2,\n\n        order_payments.credit_card_amount,\n\n        order_payments.coupon_amount,\n\n        order_payments.bank_transfer_amount,\n\n        order_payments.gift_card_amount,\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.jaffle_shop.stg_customers": {"database": "your-gcp-project", "schema": "jaffle_shop", "name": "stg_customers", "resource_type": "model", "package_name": "jaffle_shop", "path": "staging/stg_customers.sql", "original_file_path": "models/staging/stg_customers.sql", "unique_id": "model.jaffle_shop.stg_customers", "fqn": ["jaffle_shop", "staging", "stg_customers"], "alias": "stg_customers", "checksum": {"name": "sha256", "checksum": "80e3223cd54387e11fa16cd0f4cbe15f8ff74dcd9900b93856b9e39416178c9d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "jaffle_shop://models/staging/schema.yml", "build_path": "target/run/jaffle_shop/models/staging/stg_customers.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1681446636.496011, "relation_name": "`your-gcp-project`.`jaffle_shop`.`stg_customers`", "raw_code": "with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_customers') }}\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [{"name": "raw_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.jaffle_shop.raw_customers"]}, "compiled_path": "target/compiled/jaffle_shop/models/staging/stg_customers.sql", "compiled": true, "compiled_code": "with source as (\n    select * from `your-gcp-project`.`jaffle_shop`.`raw_customers`\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.jaffle_shop.stg_payments": {"database": "your-gcp-project", "schema": "jaffle_shop", "name": "stg_payments", "resource_type": "model", "package_name": "jaffle_shop", "path": "staging/stg_payments.sql", "original_file_path": "models/staging/stg_payments.sql", "unique_id": "model.jaffle_shop.stg_payments", "fqn": ["jaffle_shop", "staging", "stg_payments"], "alias": "stg_payments", "checksum": {"name": "sha256", "checksum": "9c1ee3bfb10e07c2dfc325d55925da0e521887136d9051768cb8acf09dc86bda"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"payment_id": {"name": "payment_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method": {"name": "payment_method", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "jaffle_shop://models/staging/schema.yml", "build_path": "target/run/jaffle_shop/models/staging/stg_payments.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1681446636.497198, "relation_name": "`your-gcp-project`.`jaffle_shop`.`stg_payments`", "raw_code": "with source as (\n    \n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_payments') }}\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [{"name": "raw_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.jaffle_shop.raw_payments"]}, "compiled_path": "target/compiled/jaffle_shop/models/staging/stg_payments.sql", "compiled": true, "compiled_code": "with source as (\n    select * from `your-gcp-project`.`jaffle_shop`.`raw_payments`\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.jaffle_shop.stg_orders": {"database": "your-gcp-project", "schema": "jaffle_shop", "name": "stg_orders", "resource_type": "model", "package_name": "jaffle_shop", "path": "staging/stg_orders.sql", "original_file_path": "models/staging/stg_orders.sql", "unique_id": "model.jaffle_shop.stg_orders", "fqn": ["jaffle_shop", "staging", "stg_orders"], "alias": "stg_orders", "checksum": {"name": "sha256", "checksum": "f4f881cb09d2c4162200fc331d7401df6d1abd4fed492554a7db70dede347108"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "jaffle_shop://models/staging/schema.yml", "build_path": "target/run/jaffle_shop/models/staging/stg_orders.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1681446636.496618, "relation_name": "`your-gcp-project`.`jaffle_shop`.`stg_orders`", "raw_code": "with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_orders') }}\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [{"name": "raw_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["seed.jaffle_shop.raw_orders"]}, "compiled_path": "target/compiled/jaffle_shop/models/staging/stg_orders.sql", "compiled": true, "compiled_code": "with source as (\n    select * from `your-gcp-project`.`jaffle_shop`.`raw_orders`\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "seed.jaffle_shop.raw_customers": {"database": "your-gcp-project", "schema": "jaffle_shop", "name": "raw_customers", "resource_type": "seed", "package_name": "jaffle_shop", "path": "raw_customers.csv", "original_file_path": "seeds/raw_customers.csv", "unique_id": "seed.jaffle_shop.raw_customers", "fqn": ["jaffle_shop", "raw_customers"], "alias": "raw_customers", "checksum": {"name": "sha256", "checksum": "357d173dda65a741ad97d6683502286cc2655bb396ab5f4dfad12b8c39bd2a63"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/jaffle_shop/seeds/raw_customers.csv", "deferred": false, "unrendered_config": {}, "created_at": 1681446636.078534, "relation_name": "`your-gcp-project`.`jaffle_shop`.`raw_customers`", "raw_code": "", "root_path": "/Users/foo/local/src/github/jaffle_shop", "depends_on": {"macros": []}}, "seed.jaffle_shop.raw_orders": {"database": "your-gcp-project", "schema": "jaffle_shop", "name": "raw_orders", "resource_type": "seed", "package_name": "jaffle_shop", "path": "raw_orders.csv", "original_file_path": "seeds/raw_orders.csv", "unique_id": "seed.jaffle_shop.raw_orders", "fqn": ["jaffle_shop", "raw_orders"], "alias": "raw_orders", "checksum": {"name": "sha256", "checksum": "ddecd7adf70a07a88b9c302aec2a03fce615b925c2c06f2d5ef99a5c97b41250"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/jaffle_shop/seeds/raw_orders.csv", "deferred": false, "unrendered_config": {}, "created_at": 1681446636.079734, "relation_name": "`your-gcp-project`.`jaffle_shop`.`raw_orders`", "raw_code": "", "root_path": "/Users/foo/local/src/github/jaffle_shop", "depends_on": {"macros": []}}, "seed.jaffle_shop.raw_payments": {"database": "your-gcp-project", "schema": "jaffle_shop", "name": "raw_payments", "resource_type": "seed", "package_name": "jaffle_shop", "path": "raw_payments.csv", "original_file_path": "seeds/raw_payments.csv", "unique_id": "seed.jaffle_shop.raw_payments", "fqn": ["jaffle_shop", "raw_payments"], "alias": "raw_payments", "checksum": {"name": "sha256", "checksum": "6de0626a8db9c1750eefd1b2e17fac4c2a4b9f778eb50532d8b377b90de395e6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/jaffle_shop/seeds/raw_payments.csv", "deferred": false, "unrendered_config": {}, "created_at": 1681446636.080897, "relation_name": "`your-gcp-project`.`jaffle_shop`.`raw_payments`", "raw_code": "", "root_path": "/Users/foo/local/src/github/jaffle_shop", "depends_on": {"macros": []}}, "model.elementary.snapshot_run_results": {"database": "your-gcp-project", "schema": "elementary", "name": "snapshot_run_results", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/snapshot_run_results.sql", "original_file_path": "models/edr/run_results/snapshot_run_results.sql", "unique_id": "model.elementary.snapshot_run_results", "fqn": ["elementary", "edr", "run_results", "snapshot_run_results"], "alias": "snapshot_run_results", "checksum": {"name": "sha256", "checksum": "e0866c2902da876a5efce28c6ba0a8181330f01b5a2a04abcafd5bf4e46e7b64"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Run results of dbt snapshots, enriched with snapshots metadata. Each row is the result of a single snapshot. This is a view that joins data from `dbt_run_results` and `dbt_snapshots`.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/run_results.yml", "build_path": "target/run/elementary/models/edr/run_results/snapshot_run_results.sql", "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "elementary"}, "created_at": 1681446636.529807, "relation_name": "`your-gcp-project`.`elementary`.`snapshot_run_results`", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith dbt_run_results as (\n    select * from {{ ref('dbt_run_results') }}\n),\n\ndbt_snapshots as (\n    select * from {{ ref('dbt_snapshots') }}\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.thread_id,\n    snapshots.database_name,\n    snapshots.schema_name,\n    snapshots.materialization,\n    snapshots.tags,\n    snapshots.package_name,\n    snapshots.path,\n    snapshots.original_path,\n    snapshots.owner,\n    snapshots.alias\nFROM dbt_run_results run_results\nJOIN dbt_snapshots snapshots ON run_results.unique_id = snapshots.unique_id", "language": "sql", "refs": [{"name": "dbt_run_results", "package": null, "version": null}, {"name": "dbt_snapshots", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.elementary.dbt_run_results", "model.elementary.dbt_snapshots"]}, "compiled_path": "target/compiled/elementary/models/edr/run_results/snapshot_run_results.sql", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from `your-gcp-project`.`elementary`.`dbt_run_results`\n),\n\ndbt_snapshots as (\n    select * from `your-gcp-project`.`elementary`.`dbt_snapshots`\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.thread_id,\n    snapshots.database_name,\n    snapshots.schema_name,\n    snapshots.materialization,\n    snapshots.tags,\n    snapshots.package_name,\n    snapshots.path,\n    snapshots.original_path,\n    snapshots.owner,\n    snapshots.alias\nFROM dbt_run_results run_results\nJOIN dbt_snapshots snapshots ON run_results.unique_id = snapshots.unique_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.job_run_results": {"database": "your-gcp-project", "schema": "elementary", "name": "job_run_results", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/job_run_results.sql", "original_file_path": "models/edr/run_results/job_run_results.sql", "unique_id": "model.elementary.job_run_results", "fqn": ["elementary", "edr", "run_results", "job_run_results"], "alias": "job_run_results", "checksum": {"name": "sha256", "checksum": "70fa0f75184f074237575d1146a8caf3048d0d0300a5da5013b7a88f137bc810"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Run results of dbt invocations, enriched with jobs metadata. Each row is the result of a single job. This is a view on `dbt_invocations`.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/run_results.yml", "build_path": "target/run/elementary/models/edr/run_results/job_run_results.sql", "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "elementary"}, "created_at": 1681446636.529998, "relation_name": "`your-gcp-project`.`elementary`.`job_run_results`", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\n{% set job_run_started_at %}\nmin({{ elementary.edr_cast_as_timestamp(\"run_started_at\") }})\n{% endset %}\n\n{% set job_run_completed_at %}\nmax({{ elementary.edr_cast_as_timestamp(\"run_completed_at\") }})\n{% endset %}\n\nwith jobs as (\n  select\n    job_name,\n    job_id,\n    job_run_id,\n    {{ job_run_started_at }} as job_run_started_at,\n    {{ job_run_completed_at }} as job_run_completed_at,\n    {{ elementary.timediff(\"second\", job_run_started_at, job_run_completed_at) }} as job_run_execution_time\n  from {{ ref('dbt_invocations') }}\n  where job_id is not null\n  group by job_name, job_id, job_run_id\n)\n\nselect\n  job_name as name,\n  job_id as id,\n  job_run_id as run_id,\n  job_run_started_at as run_started_at,\n  job_run_completed_at as run_completed_at,\n  job_run_execution_time as run_execution_time\nfrom jobs", "language": "sql", "refs": [{"name": "dbt_invocations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.edr_cast_as_timestamp", "macro.elementary.timediff"], "nodes": ["model.elementary.dbt_invocations"]}, "compiled_path": "target/compiled/elementary/models/edr/run_results/job_run_results.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith jobs as (\n  select\n    job_name,\n    job_id,\n    job_run_id,\n    \nmin(cast(run_started_at as TIMESTAMP))\n as job_run_started_at,\n    \nmax(cast(run_completed_at as TIMESTAMP))\n as job_run_completed_at,\n    \n    timestamp_diff(\nmax(cast(run_completed_at as TIMESTAMP))\n, \nmin(cast(run_started_at as TIMESTAMP))\n, second)\n as job_run_execution_time\n  from `your-gcp-project`.`elementary`.`dbt_invocations`\n  where job_id is not null\n  group by job_name, job_id, job_run_id\n)\n\nselect\n  job_name as name,\n  job_id as id,\n  job_run_id as run_id,\n  job_run_started_at as run_started_at,\n  job_run_completed_at as run_completed_at,\n  job_run_execution_time as run_execution_time\nfrom jobs", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.model_run_results": {"database": "your-gcp-project", "schema": "elementary", "name": "model_run_results", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/model_run_results.sql", "original_file_path": "models/edr/run_results/model_run_results.sql", "unique_id": "model.elementary.model_run_results", "fqn": ["elementary", "edr", "run_results", "model_run_results"], "alias": "model_run_results", "checksum": {"name": "sha256", "checksum": "c88027ee6b582f74578216a52ff0b4a5ee20d3ec5c1af2361d6f601c79841dc0"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Run results of dbt models, enriched with models metadata. Each row is the result of a single model. This is a view that joins data from `dbt_run_results` and `dbt_models`.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/run_results.yml", "build_path": "target/run/elementary/models/edr/run_results/model_run_results.sql", "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "elementary"}, "created_at": 1681446636.529619, "relation_name": "`your-gcp-project`.`elementary`.`model_run_results`", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith dbt_run_results as (\n    select * from {{ ref('dbt_run_results') }}\n),\n\ndbt_models as (\n    select * from {{ ref('dbt_models') }}\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.thread_id,\n    models.database_name,\n    models.schema_name,\n    models.materialization,\n    models.tags,\n    models.package_name,\n    models.path,\n    models.original_path,\n    models.owner,\n    models.alias,\n    ROW_NUMBER() OVER (PARTITION BY run_results.unique_id ORDER BY run_results.generated_at DESC) AS model_invocation_reverse_index,\n    CASE WHEN FIRST_VALUE(invocation_id) OVER (PARTITION BY {{ elementary.edr_time_trunc('day', 'run_results.generated_at') }} ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_first_invocation_of_the_day,\n    CASE WHEN LAST_VALUE(invocation_id) OVER (PARTITION BY {{ elementary.edr_time_trunc('day', 'run_results.generated_at') }} ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_last_invocation_of_the_day\n    \nFROM dbt_run_results run_results\nJOIN dbt_models models ON run_results.unique_id = models.unique_id", "language": "sql", "refs": [{"name": "dbt_run_results", "package": null, "version": null}, {"name": "dbt_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.edr_time_trunc"], "nodes": ["model.elementary.dbt_run_results", "model.elementary.dbt_models"]}, "compiled_path": "target/compiled/elementary/models/edr/run_results/model_run_results.sql", "compiled": true, "compiled_code": "\n\nwith dbt_run_results as (\n    select * from `your-gcp-project`.`elementary`.`dbt_run_results`\n),\n\ndbt_models as (\n    select * from `your-gcp-project`.`elementary`.`dbt_models`\n)\n\nSELECT\n    run_results.model_execution_id,\n    run_results.unique_id,\n    run_results.invocation_id,\n    run_results.query_id,\n    run_results.name,\n    run_results.generated_at,\n    run_results.status,\n    run_results.full_refresh,\n    run_results.message,\n    run_results.execution_time,\n    run_results.execute_started_at,\n    run_results.execute_completed_at,\n    run_results.compile_started_at,\n    run_results.compile_completed_at,\n    run_results.compiled_code,\n    run_results.thread_id,\n    models.database_name,\n    models.schema_name,\n    models.materialization,\n    models.tags,\n    models.package_name,\n    models.path,\n    models.original_path,\n    models.owner,\n    models.alias,\n    ROW_NUMBER() OVER (PARTITION BY run_results.unique_id ORDER BY run_results.generated_at DESC) AS model_invocation_reverse_index,\n    CASE WHEN FIRST_VALUE(invocation_id) OVER (PARTITION BY \n    timestamp_trunc(cast(run_results.generated_at as timestamp), day)\n ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_first_invocation_of_the_day,\n    CASE WHEN LAST_VALUE(invocation_id) OVER (PARTITION BY \n    timestamp_trunc(cast(run_results.generated_at as timestamp), day)\n ORDER BY run_results.generated_at ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) = invocation_id\n              THEN TRUE\n              ELSE FALSE \n         END                                                               AS is_the_last_invocation_of_the_day\n    \nFROM dbt_run_results run_results\nJOIN dbt_models models ON run_results.unique_id = models.unique_id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.test_result_rows": {"database": "your-gcp-project", "schema": "elementary", "name": "test_result_rows", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/test_result_rows.sql", "original_file_path": "models/edr/run_results/test_result_rows.sql", "unique_id": "model.elementary.test_result_rows", "fqn": ["elementary", "edr", "run_results", "test_result_rows"], "alias": "test_result_rows", "checksum": {"name": "sha256", "checksum": "87791b8556fe93f1b6be7537eddcd1570b720121fd4f53421c740d93387cd96e"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {"timestamp_column": "detected_at"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "elementary_test_results_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [{"sql": "{{ elementary.backfill_result_rows() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"timestamp_column": "detected_at"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/elementary/models/edr/run_results/test_result_rows.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "elementary_test_results_id", "on_schema_change": "append_new_columns", "full_refresh": false, "meta": {"timestamp_column": "detected_at"}, "post-hook": ["{{ elementary.backfill_result_rows() }}"], "schema": "elementary"}, "created_at": 1681446636.116842, "relation_name": "`your-gcp-project`.`elementary`.`test_result_rows`", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    unique_key = 'elementary_test_results_id',\n    on_schema_change = 'append_new_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh'),\n    post_hook='{{ elementary.backfill_result_rows() }}',\n    meta={\"timestamp_column\": \"detected_at\"}\n  )\n}}\n\n-- depends_on: {{ ref('elementary_test_results') }}\n{{ elementary.empty_table([\n    ('elementary_test_results_id', 'long_string'),\n    ('result_row', 'long_string'),\n    ('detected_at','timestamp'),\n]) }}", "language": "sql", "refs": [{"name": "elementary_test_results", "package": null, "version": null}, {"name": "elementary_test_results", "package": null, "version": null}, {"name": "elementary_test_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.empty_table", "macro.elementary.backfill_result_rows"], "nodes": ["model.elementary.elementary_test_results", "model.elementary.elementary_test_results", "model.elementary.elementary_test_results"]}, "compiled_path": "target/compiled/elementary/models/edr/run_results/test_result_rows.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: `your-gcp-project`.`elementary`.`elementary_test_results`\nwith empty_table as (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as string) as elementary_test_results_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as result_row\n\n,\n                cast('2091-02-17' as TIMESTAMP) as detected_at\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.elementary_test_results": {"database": "your-gcp-project", "schema": "elementary", "name": "elementary_test_results", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/elementary_test_results.sql", "original_file_path": "models/edr/run_results/elementary_test_results.sql", "unique_id": "model.elementary.elementary_test_results", "fqn": ["elementary", "edr", "run_results", "elementary_test_results"], "alias": "elementary_test_results", "checksum": {"name": "sha256", "checksum": "7b92ed7eb8aa32dd1af920bc70ab408480f469992371aaa6e2fa9722927beb08"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {"timestamp_column": "detected_at"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Run results of all dbt tests, with fields and metadata needed to produce the Elementary report UI. Each row is the result of a single test, including native dbt tests, packages tests and elementary tests. New data is loaded to this model on an on-run-end hook named `elementary.handle_tests_results`.\n", "columns": {}, "meta": {"timestamp_column": "detected_at"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/run_results.yml", "build_path": "target/run/elementary/models/edr/run_results/elementary_test_results.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "id", "on_schema_change": "append_new_columns", "full_refresh": false, "meta": {"timestamp_column": "detected_at"}, "schema": "elementary"}, "created_at": 1681446636.529429, "relation_name": "`your-gcp-project`.`elementary`.`elementary_test_results`", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    unique_key = 'id',\n    on_schema_change = 'append_new_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh'),\n    meta={\"timestamp_column\": \"detected_at\"},\n  )\n}}\n\n{{ elementary.empty_elementary_test_results() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.empty_elementary_test_results"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/run_results/elementary_test_results.sql", "compiled": true, "compiled_code": "\n\n\n    with empty_table as (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as string) as id\n\n,\n                \n        cast('dummy_string' as string) as data_issue_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as test_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as test_unique_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as model_unique_id\n\n,\n                \n        cast('dummy_string' as string) as invocation_id\n\n,\n                cast('2091-02-17' as TIMESTAMP) as detected_at\n\n,\n                \n        cast('dummy_string' as string) as database_name\n\n,\n                \n        cast('dummy_string' as string) as schema_name\n\n,\n                \n        cast('dummy_string' as string) as table_name\n\n,\n                \n        cast('dummy_string' as string) as column_name\n\n,\n                \n        cast('dummy_string' as string) as test_type\n\n,\n                \n        cast('dummy_string' as string) as test_sub_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as test_results_description\n\n,\n                \n        cast('dummy_string' as string) as owners\n\n,\n                \n        cast('dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as test_results_query\n\n,\n                \n        cast('dummy_string' as string) as other\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as test_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as test_params\n\n,\n                \n        cast('dummy_string' as string) as severity\n\n,\n                \n        cast('dummy_string' as string) as status\n\n,\n                \n        cast(31474836478 as bigint) as failures\n\n,\n                \n        cast('dummy_string' as string) as test_short_name\n\n,\n                \n        cast('dummy_string' as string) as test_alias\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as result_rows\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_source_freshness_results": {"database": "your-gcp-project", "schema": "elementary", "name": "dbt_source_freshness_results", "resource_type": "model", "package_name": "elementary", "path": "edr/run_results/dbt_source_freshness_results.sql", "original_file_path": "models/edr/run_results/dbt_source_freshness_results.sql", "unique_id": "model.elementary.dbt_source_freshness_results", "fqn": ["elementary", "edr", "run_results", "dbt_source_freshness_results"], "alias": "dbt_source_freshness_results", "checksum": {"name": "sha256", "checksum": "5094d2b16dbb3fb48b78d75ed56090a81221d0e1bc5016148cfbb55e08f48ec8"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {"timestamp_column": "generated_at"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "source_freshness_execution_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {"timestamp_column": "generated_at"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/elementary/models/edr/run_results/dbt_source_freshness_results.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "source_freshness_execution_id", "on_schema_change": "append_new_columns", "full_refresh": false, "meta": {"timestamp_column": "generated_at"}, "schema": "elementary"}, "created_at": 1681446636.1621902, "relation_name": "`your-gcp-project`.`elementary`.`dbt_source_freshness_results`", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    unique_key = 'source_freshness_execution_id',\n    on_schema_change = 'append_new_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh'),\n    meta={\"timestamp_column\": \"generated_at\"}\n  )\n}}\n\n{{ elementary.empty_dbt_source_freshness_results() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.empty_dbt_source_freshness_results"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/run_results/dbt_source_freshness_results.sql", "compiled": true, "compiled_code": "\n\n\n    with empty_table as (\n            select\n            \n                \n        cast('dummy_string' as string) as source_freshness_execution_id\n\n,\n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as max_loaded_at\n\n,\n                \n        cast('dummy_string' as string) as snapshotted_at\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast(123456789.99 as FLOAT64) as max_loaded_at_time_ago_in_s\n\n,\n                \n        cast('dummy_string' as string) as status\n\n,\n                \n        cast('dummy_string' as string) as error\n\n,\n                \n        cast('dummy_string' as string) as compile_started_at\n\n,\n                \n        cast('dummy_string' as string) as compile_completed_at\n\n,\n                \n        cast('dummy_string' as string) as execute_started_at\n\n,\n                \n        cast('dummy_string' as string) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as string) as invocation_id\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.alerts_dbt_tests": {"database": "your-gcp-project", "schema": "elementary", "name": "alerts_dbt_tests", "resource_type": "model", "package_name": "elementary", "path": "edr/alerts/alerts_dbt_tests.sql", "original_file_path": "models/edr/alerts/alerts_dbt_tests.sql", "unique_id": "model.elementary.alerts_dbt_tests", "fqn": ["elementary", "edr", "alerts", "alerts_dbt_tests"], "alias": "alerts_dbt_tests", "checksum": {"name": "sha256", "checksum": "b8545517eaa84c583a0d86a65b6d5881a6de9b7f104329bfbd8e467f4072bca9"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A view that is used by the Elementary CLI to generate dbt tests alerts, including all the fields the alert will include such as owner, tags, error message, etc. This view includes data about all dbt tests except elementary tests. It filters alerts according to configuration.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/alerts_views.yml", "build_path": "target/run/elementary/models/edr/alerts/alerts_dbt_tests.sql", "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "elementary"}, "created_at": 1681446636.514485, "relation_name": "`your-gcp-project`.`elementary`.`alerts_dbt_tests`", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith elementary_test_results as (\n    select * from {{ ref('elementary_test_results') }}\n),\n\nalerts_dbt_tests as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where {{ not elementary.get_config_var('disable_test_alerts') }} and lower(status) != 'pass' {%- if elementary.get_config_var('disable_warn_alerts') -%} and lower(status) != 'warn' {%- endif -%} {%- if elementary.get_config_var('disable_skipped_test_alerts') -%} and lower(status) != 'skipped' {%- endif -%} and test_type = 'dbt_test'\n)\n\nselect * from alerts_dbt_tests", "language": "sql", "refs": [{"name": "elementary_test_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var"], "nodes": ["model.elementary.elementary_test_results"]}, "compiled_path": "target/compiled/elementary/models/edr/alerts/alerts_dbt_tests.sql", "compiled": true, "compiled_code": "\n\nwith elementary_test_results as (\n    select * from `your-gcp-project`.`elementary`.`elementary_test_results`\n),\n\nalerts_dbt_tests as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'dbt_test'\n)\n\nselect * from alerts_dbt_tests", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.alerts_schema_changes": {"database": "your-gcp-project", "schema": "elementary", "name": "alerts_schema_changes", "resource_type": "model", "package_name": "elementary", "path": "edr/alerts/alerts_schema_changes.sql", "original_file_path": "models/edr/alerts/alerts_schema_changes.sql", "unique_id": "model.elementary.alerts_schema_changes", "fqn": ["elementary", "edr", "alerts", "alerts_schema_changes"], "alias": "alerts_schema_changes", "checksum": {"name": "sha256", "checksum": "96c9a42ca06d726bff66c903a314b13c6beb1641347aba54d93710161d2391e1"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A view that is used by the Elementary CLI to generate alerts on schema changes detected using elementary tests. The view filters alerts according to configuration.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/alerts_views.yml", "build_path": "target/run/elementary/models/edr/alerts/alerts_schema_changes.sql", "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "enabled": true, "schema": "elementary"}, "created_at": 1681446636.51486, "relation_name": "`your-gcp-project`.`elementary`.`alerts_schema_changes`", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False,\n    enabled = target.type != 'databricks' and target.type != 'spark' | as_bool()\n  )\n}}\n\n\nwith elementary_test_results as (\n    select * from {{ ref('elementary_test_results') }}\n),\n\nalerts_schema_changes as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where {{ not elementary.get_config_var('disable_test_alerts') }} and lower(status) != 'pass' {%- if elementary.get_config_var('disable_warn_alerts') -%} and lower(status) != 'warn' {%- endif -%} {%- if elementary.get_config_var('disable_skipped_test_alerts') -%} and lower(status) != 'skipped' {%- endif -%} and test_type = 'schema_change'\n)\n\nselect * from alerts_schema_changes", "language": "sql", "refs": [{"name": "elementary_test_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var"], "nodes": ["model.elementary.elementary_test_results"]}, "compiled_path": "target/compiled/elementary/models/edr/alerts/alerts_schema_changes.sql", "compiled": true, "compiled_code": "\n\n\nwith elementary_test_results as (\n    select * from `your-gcp-project`.`elementary`.`elementary_test_results`\n),\n\nalerts_schema_changes as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'schema_change'\n)\n\nselect * from alerts_schema_changes", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.alerts_dbt_source_freshness": {"database": "your-gcp-project", "schema": "elementary", "name": "alerts_dbt_source_freshness", "resource_type": "model", "package_name": "elementary", "path": "edr/alerts/alerts_dbt_source_freshness.sql", "original_file_path": "models/edr/alerts/alerts_dbt_source_freshness.sql", "unique_id": "model.elementary.alerts_dbt_source_freshness", "fqn": ["elementary", "edr", "alerts", "alerts_dbt_source_freshness"], "alias": "alerts_dbt_source_freshness", "checksum": {"name": "sha256", "checksum": "ca4eca45129d0e51d368c4c9cc6818a1258290ac531146f3e8a4a61871ff71df"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/elementary/models/edr/alerts/alerts_dbt_source_freshness.sql", "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "elementary"}, "created_at": 1681446636.184603, "relation_name": "`your-gcp-project`.`elementary`.`alerts_dbt_source_freshness`", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith results as (\n  select * from {{ ref('dbt_source_freshness_results') }}\n),\n\nsources as (\n  select * from {{ ref('dbt_sources') }}\n)\n\nselect\n  results.source_freshness_execution_id as alert_id,\n  results.max_loaded_at,\n  results.snapshotted_at,\n  results.generated_at as detected_at,\n  results.max_loaded_at_time_ago_in_s,\n  results.status,\n  results.error,\n  sources.unique_id,\n  sources.database_name,\n  sources.schema_name,\n  sources.source_name,\n  sources.identifier,\n  sources.freshness_error_after,\n  sources.freshness_warn_after,\n  sources.freshness_filter,\n  sources.tags,\n  sources.meta,\n  sources.owner,\n  sources.package_name,\n  sources.path\nfrom results\njoin sources on results.unique_id = sources.unique_id\nwhere {{ not elementary.get_config_var('disable_source_freshness_alerts') }} and lower(status) != 'pass'", "language": "sql", "refs": [{"name": "dbt_source_freshness_results", "package": null, "version": null}, {"name": "dbt_sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var"], "nodes": ["model.elementary.dbt_source_freshness_results", "model.elementary.dbt_sources"]}, "compiled_path": "target/compiled/elementary/models/edr/alerts/alerts_dbt_source_freshness.sql", "compiled": true, "compiled_code": "\n\nwith results as (\n  select * from `your-gcp-project`.`elementary`.`dbt_source_freshness_results`\n),\n\nsources as (\n  select * from `your-gcp-project`.`elementary`.`dbt_sources`\n)\n\nselect\n  results.source_freshness_execution_id as alert_id,\n  results.max_loaded_at,\n  results.snapshotted_at,\n  results.generated_at as detected_at,\n  results.max_loaded_at_time_ago_in_s,\n  results.status,\n  results.error,\n  sources.unique_id,\n  sources.database_name,\n  sources.schema_name,\n  sources.source_name,\n  sources.identifier,\n  sources.freshness_error_after,\n  sources.freshness_warn_after,\n  sources.freshness_filter,\n  sources.tags,\n  sources.meta,\n  sources.owner,\n  sources.package_name,\n  sources.path\nfrom results\njoin sources on results.unique_id = sources.unique_id\nwhere True and lower(status) != 'pass'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.alerts_anomaly_detection": {"database": "your-gcp-project", "schema": "elementary", "name": "alerts_anomaly_detection", "resource_type": "model", "package_name": "elementary", "path": "edr/alerts/alerts_anomaly_detection.sql", "original_file_path": "models/edr/alerts/alerts_anomaly_detection.sql", "unique_id": "model.elementary.alerts_anomaly_detection", "fqn": ["elementary", "edr", "alerts", "alerts_anomaly_detection"], "alias": "alerts_anomaly_detection", "checksum": {"name": "sha256", "checksum": "0d2bb9c33ded81e6501643abeeacde1b21695f406b861f748923e4bd9ce0c4c8"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A view that is used by the Elementary CLI to generate alerts on data anomalies detected using the elementary anomaly detection tests. The view filters alerts according to configuration.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/alerts_views.yml", "build_path": "target/run/elementary/models/edr/alerts/alerts_anomaly_detection.sql", "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "elementary"}, "created_at": 1681446636.514672, "relation_name": "`your-gcp-project`.`elementary`.`alerts_anomaly_detection`", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind =False\n  )\n}}\n\nwith elementary_test_results as (\n    select * from {{ ref('elementary_test_results') }}\n),\n\nalerts_anomaly_detection as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where {{ not elementary.get_config_var('disable_test_alerts') }} and lower(status) != 'pass' {%- if elementary.get_config_var('disable_warn_alerts') -%} and lower(status) != 'warn' {%- endif -%} {%- if elementary.get_config_var('disable_skipped_test_alerts') -%} and lower(status) != 'skipped' {%- endif -%} and test_type = 'anomaly_detection'\n)\n\nselect * from alerts_anomaly_detection", "language": "sql", "refs": [{"name": "elementary_test_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var"], "nodes": ["model.elementary.elementary_test_results"]}, "compiled_path": "target/compiled/elementary/models/edr/alerts/alerts_anomaly_detection.sql", "compiled": true, "compiled_code": "\n\nwith elementary_test_results as (\n    select * from `your-gcp-project`.`elementary`.`elementary_test_results`\n),\n\nalerts_anomaly_detection as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_short_name,\n           test_params,\n           severity,\n           status,\n           result_rows\n        from elementary_test_results\n        where True and lower(status) != 'pass'and lower(status) != 'skipped'and test_type = 'anomaly_detection'\n)\n\nselect * from alerts_anomaly_detection", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.alerts_dbt_models": {"database": "your-gcp-project", "schema": "elementary", "name": "alerts_dbt_models", "resource_type": "model", "package_name": "elementary", "path": "edr/alerts/alerts_dbt_models.sql", "original_file_path": "models/edr/alerts/alerts_dbt_models.sql", "unique_id": "model.elementary.alerts_dbt_models", "fqn": ["elementary", "edr", "alerts", "alerts_dbt_models"], "alias": "alerts_dbt_models", "checksum": {"name": "sha256", "checksum": "d039f6459f8b9cb0d6f1e4cf653de020cc90eb035e31107860dfbaea302304f9"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A view that is used by the Elementary CLI to generate models alerts, including all the fields the alert will include such as owner, tags, error message, etc. It joins data about models and snapshots run results, and filters alerts according to configuration.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/alerts_views.yml", "build_path": "target/run/elementary/models/edr/alerts/alerts_dbt_models.sql", "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "elementary"}, "created_at": 1681446636.514291, "relation_name": "`your-gcp-project`.`elementary`.`alerts_dbt_models`", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith error_models as (\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias \n    from {{ ref('model_run_results') }}\n  \n    union all\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias  \n  from {{ ref('snapshot_run_results') }}\n)\n\n\nselect model_execution_id as alert_id,\n       unique_id,\n       generated_at as detected_at,\n       database_name,\n       materialization,\n       path,\n       original_path,\n       schema_name,\n       message,\n       owner as owners,\n       tags,\n       alias,\n       status,\n       full_refresh\nfrom error_models\nwhere {{ not elementary.get_config_var('disable_model_alerts') }} and lower(status) != 'success' {%- if elementary.get_config_var('disable_skipped_model_alerts') -%} and lower(status) != 'skipped' {%- endif -%}", "language": "sql", "refs": [{"name": "model_run_results", "package": null, "version": null}, {"name": "snapshot_run_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var"], "nodes": ["model.elementary.model_run_results", "model.elementary.snapshot_run_results"]}, "compiled_path": "target/compiled/elementary/models/edr/alerts/alerts_dbt_models.sql", "compiled": true, "compiled_code": "\n\nwith error_models as (\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias \n    from `your-gcp-project`.`elementary`.`model_run_results`\n  \n    union all\n  \n    select  model_execution_id,\n            unique_id,\n            invocation_id,\n            name,\n            generated_at,\n            status,\n            full_refresh,\n            message,\n            execution_time,\n            execute_started_at,\n            execute_completed_at,\n            compile_started_at,\n            compile_completed_at,\n            compiled_code,\n            database_name,\n            schema_name,\n            materialization,\n            tags,\n            package_name,\n            path,\n            original_path,\n            owner,\n            alias  \n  from `your-gcp-project`.`elementary`.`snapshot_run_results`\n)\n\n\nselect model_execution_id as alert_id,\n       unique_id,\n       generated_at as detected_at,\n       database_name,\n       materialization,\n       path,\n       original_path,\n       schema_name,\n       message,\n       owner as owners,\n       tags,\n       alias,\n       status,\n       full_refresh\nfrom error_models\nwhere True and lower(status) != 'success'and lower(status) != 'skipped'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.monitors_runs": {"database": "your-gcp-project", "schema": "elementary", "name": "monitors_runs", "resource_type": "model", "package_name": "elementary", "path": "edr/system/monitors_runs.sql", "original_file_path": "models/edr/system/monitors_runs.sql", "unique_id": "model.elementary.monitors_runs", "fqn": ["elementary", "edr", "system", "monitors_runs"], "alias": "monitors_runs", "checksum": {"name": "sha256", "checksum": "127aabf69bb42ce2ac263cae4960debf7d221643a75464bca66ad8779d860b06"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This is a view on `data_monitoring_metrics` that is used to determine when a specific anomaly detection test was last executed. Each anomaly detection test queries this view to decide on a start time for collecting metrics.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/elementary_tests.yml", "build_path": "target/run/elementary/models/edr/system/monitors_runs.sql", "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "elementary"}, "created_at": 1681446636.51343, "relation_name": "`your-gcp-project`.`elementary`.`monitors_runs`", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith data_monitoring_metrics as (\n\n    select * from {{ ref('data_monitoring_metrics') }}\n\n),\n\nmax_bucket_end as (\n\n    select full_table_name,\n           column_name,\n           metric_name,\n           metric_properties,\n           max(bucket_end) as last_bucket_end\n    from data_monitoring_metrics\n    group by 1,2,3,4\n\n)\n\nselect * from max_bucket_end", "language": "sql", "refs": [{"name": "data_monitoring_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.elementary.data_monitoring_metrics"]}, "compiled_path": "target/compiled/elementary/models/edr/system/monitors_runs.sql", "compiled": true, "compiled_code": "\n\nwith data_monitoring_metrics as (\n\n    select * from `your-gcp-project`.`elementary`.`data_monitoring_metrics`\n\n),\n\nmax_bucket_end as (\n\n    select full_table_name,\n           column_name,\n           metric_name,\n           metric_properties,\n           max(bucket_end) as last_bucket_end\n    from data_monitoring_metrics\n    group by 1,2,3,4\n\n)\n\nselect * from max_bucket_end", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.metadata": {"database": "your-gcp-project", "schema": "elementary", "name": "metadata", "resource_type": "model", "package_name": "elementary", "path": "edr/system/metadata.sql", "original_file_path": "models/edr/system/metadata.sql", "unique_id": "model.elementary.metadata", "fqn": ["elementary", "edr", "system", "metadata"], "alias": "metadata", "checksum": {"name": "sha256", "checksum": "7d06c726499b330d51c340d2dc2774ac95f958fd6824c09711b3881b39b76a84"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/elementary/models/edr/system/metadata.sql", "deferred": false, "unrendered_config": {"materialized": "table", "schema": "elementary"}, "created_at": 1681446636.201306, "relation_name": "`your-gcp-project`.`elementary`.`metadata`", "raw_code": "{{ config(materialized='table') }}\n\nSELECT\n    '{{ elementary.get_elementary_package_version() }}' as dbt_pkg_version", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_elementary_package_version"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/system/metadata.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    '0.7.4' as dbt_pkg_version", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_tests": {"database": "your-gcp-project", "schema": "elementary", "name": "dbt_tests", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_tests.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_tests.sql", "unique_id": "model.elementary.dbt_tests", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_tests"], "alias": "dbt_tests", "checksum": {"name": "sha256", "checksum": "741409041141e4601052d37da988d545419809fd0c630fa7cfee31d75e66a5c2"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_tests() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Metadata about tests in the project, including configuration and properties from the dbt graph. Each row contains information about a single test. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": {"unique_id": {"name": "unique_id", "description": "The unique id of the test.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "The tested model database name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "The tested model schema name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The test name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "short_name": {"name": "short_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "test_column_name": {"name": "test_column_name", "description": "The name of the tested column.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "severity": {"name": "severity", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "warn_if": {"name": "warn_if", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "error_if": {"name": "error_if", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "test_params": {"name": "test_params", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "test_namespace": {"name": "test_namespace", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "model_tags": {"name": "model_tags", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "model_owners": {"name": "model_owners", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_macros": {"name": "depends_on_macros", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "parent_model_unique_id": {"name": "parent_model_unique_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": "target/run/elementary/models/edr/dbt_artifacts/dbt_tests.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "full_refresh": false, "post-hook": ["{{ elementary.upload_dbt_tests() }}"], "schema": "elementary"}, "created_at": 1681446636.54253, "relation_name": "`your-gcp-project`.`elementary`.`dbt_tests`", "raw_code": "{{\n  config(\n    materialized='incremental',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_tests() }}',\n    unique_key='unique_id',\n    on_schema_change='sync_all_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh')\n  )\n}}\n\n{{ elementary.get_dbt_tests_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_tests_empty_table_query", "macro.elementary.upload_dbt_tests"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_tests.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as database_name\n\n,\n                \n        cast('dummy_string' as string) as schema_name\n\n,\n                \n        cast('dummy_string' as string) as name\n\n,\n                \n        cast('dummy_string' as string) as short_name\n\n,\n                \n        cast('dummy_string' as string) as alias\n\n,\n                \n        cast('dummy_string' as string) as test_column_name\n\n,\n                \n        cast('dummy_string' as string) as severity\n\n,\n                \n        cast('dummy_string' as string) as warn_if\n\n,\n                \n        cast('dummy_string' as string) as error_if\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as test_params\n\n,\n                \n        cast('dummy_string' as string) as test_namespace\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as model_tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as model_owners\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as meta\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_nodes\n\n,\n                \n        cast('dummy_string' as string) as parent_model_unique_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as description\n\n,\n                \n        cast('dummy_string' as string) as package_name\n\n,\n                \n        cast('dummy_string' as string) as type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as original_path\n\n,\n                \n        cast('dummy_string' as string) as path\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('dummy_string' as string) as metadata_hash\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_models": {"database": "your-gcp-project", "schema": "elementary", "name": "dbt_models", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_models.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_models.sql", "unique_id": "model.elementary.dbt_models", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_models"], "alias": "dbt_models", "checksum": {"name": "sha256", "checksum": "593b000e1d5ce7b219e4de4086c067491fb0333274ab375e793ccb2fb9fd3759"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_models() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Metadata about models in the project, including configuration and properties from the dbt graph. Each row contains information about a single model. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": {"unique_id": {"name": "unique_id", "description": "The unique id of the model.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "Model file checksum.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "The model materialization config.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "Model tags property.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "The content of 'meta' property key.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "owner": {"name": "owner", "description": "Model owner property (configured under 'meta' key).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "The model database name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "The model schema name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_macros": {"name": "depends_on_macros", "description": "The macros the model directly depends on.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "The nodes the model directly depends on.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Model description.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Model name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Package name of the model.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "Full path of the model file.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "Short path of the model file.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "Update time of the table.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": "target/run/elementary/models/edr/dbt_artifacts/dbt_models.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "full_refresh": false, "post-hook": ["{{ elementary.upload_dbt_models() }}"], "schema": "elementary"}, "created_at": 1681446636.535212, "relation_name": "`your-gcp-project`.`elementary`.`dbt_models`", "raw_code": "{{\n  config(\n    materialized='incremental',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_models() }}',\n    unique_key='unique_id',\n    on_schema_change='sync_all_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh')\n  )\n}}\n\n{{ elementary.get_dbt_models_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_models_empty_table_query", "macro.elementary.upload_dbt_models"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_models.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as alias\n\n,\n                \n        cast('dummy_string' as string) as checksum\n\n,\n                \n        cast('dummy_string' as string) as materialization\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as meta\n\n,\n                \n        cast('dummy_string' as string) as owner\n\n,\n                \n        cast('dummy_string' as string) as database_name\n\n,\n                \n        cast('dummy_string' as string) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as description\n\n,\n                \n        cast('dummy_string' as string) as name\n\n,\n                \n        cast('dummy_string' as string) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as original_path\n\n,\n                \n        cast('dummy_string' as string) as path\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('dummy_string' as string) as metadata_hash\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_sources": {"database": "your-gcp-project", "schema": "elementary", "name": "dbt_sources", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_sources.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_sources.sql", "unique_id": "model.elementary.dbt_sources", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_sources"], "alias": "dbt_sources", "checksum": {"name": "sha256", "checksum": "d8a8439c596b52172075bc5b4106ba6c38d6dbfddbb83677b08815ea400bc712"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_sources() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Metadata about sources in the project, including configuration and properties from the dbt graph. Each row contains information about a single source. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": {"unique_id": {"name": "unique_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "freshness_warn_after": {"name": "freshness_warn_after", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "freshness_error_after": {"name": "freshness_error_after", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "freshness_filter": {"name": "freshness_filter", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "relation_name": {"name": "relation_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "owner": {"name": "owner", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "source_description": {"name": "source_description", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": "target/run/elementary/models/edr/dbt_artifacts/dbt_sources.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "full_refresh": false, "post-hook": ["{{ elementary.upload_dbt_sources() }}"], "schema": "elementary"}, "created_at": 1681446636.548387, "relation_name": "`your-gcp-project`.`elementary`.`dbt_sources`", "raw_code": "{{\n  config(\n    materialized='incremental',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_sources() }}',\n    unique_key='unique_id',\n    on_schema_change='sync_all_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh')\n    )\n}}\n\n{{ elementary.get_dbt_sources_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_sources_empty_table_query", "macro.elementary.upload_dbt_sources"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_sources.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as database_name\n\n,\n                \n        cast('dummy_string' as string) as schema_name\n\n,\n                \n        cast('dummy_string' as string) as source_name\n\n,\n                \n        cast('dummy_string' as string) as name\n\n,\n                \n        cast('dummy_string' as string) as identifier\n\n,\n                \n        cast('dummy_string' as string) as loaded_at_field\n\n,\n                \n        cast('dummy_string' as string) as freshness_warn_after\n\n,\n                \n        cast('dummy_string' as string) as freshness_error_after\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as freshness_filter\n\n,\n                \n        cast('dummy_string' as string) as relation_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as meta\n\n,\n                \n        cast('dummy_string' as string) as owner\n\n,\n                \n        cast('dummy_string' as string) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as original_path\n\n,\n                \n        cast('dummy_string' as string) as path\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as source_description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as description\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('dummy_string' as string) as metadata_hash\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_snapshots": {"database": "your-gcp-project", "schema": "elementary", "name": "dbt_snapshots", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_snapshots.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_snapshots.sql", "unique_id": "model.elementary.dbt_snapshots", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_snapshots"], "alias": "dbt_snapshots", "checksum": {"name": "sha256", "checksum": "e9a4dd4bf0b0a9ec362d517a263768f9c09d319b49297618b0e68201241db006"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_snapshots() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Metadata about snapshots in the project, including configuration and properties from the dbt graph. Each row contains information about a single snapshot. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": {"unique_id": {"name": "unique_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "alias": {"name": "alias", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "owner": {"name": "owner", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_macros": {"name": "depends_on_macros", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": "target/run/elementary/models/edr/dbt_artifacts/dbt_snapshots.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "full_refresh": false, "post-hook": ["{{ elementary.upload_dbt_snapshots() }}"], "schema": "elementary"}, "created_at": 1681446636.553478, "relation_name": "`your-gcp-project`.`elementary`.`dbt_snapshots`", "raw_code": "{{\n  config(\n    materialized='incremental',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_snapshots() }}',\n    unique_key='unique_id',\n    on_schema_change='sync_all_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh')\n  )\n}}\n\n{{ elementary.get_dbt_models_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_models_empty_table_query", "macro.elementary.upload_dbt_snapshots"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_snapshots.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as alias\n\n,\n                \n        cast('dummy_string' as string) as checksum\n\n,\n                \n        cast('dummy_string' as string) as materialization\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as meta\n\n,\n                \n        cast('dummy_string' as string) as owner\n\n,\n                \n        cast('dummy_string' as string) as database_name\n\n,\n                \n        cast('dummy_string' as string) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as description\n\n,\n                \n        cast('dummy_string' as string) as name\n\n,\n                \n        cast('dummy_string' as string) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as original_path\n\n,\n                \n        cast('dummy_string' as string) as path\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('dummy_string' as string) as metadata_hash\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_invocations": {"database": "your-gcp-project", "schema": "elementary", "name": "dbt_invocations", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_invocations.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_invocations.sql", "unique_id": "model.elementary.dbt_invocations", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_invocations"], "alias": "dbt_invocations", "checksum": {"name": "sha256", "checksum": "f9b0e2b7cd5f3578d0feade2a08578c5b2d1804a70dd41f2f214f3ed9adfe45e"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {"timestamp_column": "generated_at"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "invocation_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Attributes associated with each dbt invocation. Inserted at the end of each invocation.\n", "columns": {"invocation_id": {"name": "invocation_id", "description": "Primary key of this table.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "run_started_at": {"name": "run_started_at", "description": "Timestamp the invocation was started.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "run_completed_at": {"name": "run_completed_at", "description": "Timestamp the invocation was completed", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "The time this invocation was uploaded to the database.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "command": {"name": "command", "description": "dbt command that was used. For example, run.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "Version of dbt that was used in this invocation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "elementary_version": {"name": "elementary_version", "description": "Version of the elementary package that was used in this invocation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "full_refresh": {"name": "full_refresh", "description": "Whether or not this invocation was executed as a full-refresh.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "invocation_vars": {"name": "invocation_vars", "description": "Dictionary of the variables (and values) that were declared in the invocation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "vars": {"name": "vars", "description": "Dictionary of all variables (and values) in the dbt project. If none were declared at runtime, these are the variables declared in dbt_project yml", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "target_name": {"name": "target_name", "description": "Name of the target used in this invocation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "target_database": {"name": "target_database", "description": "Name of the target database that was used in this invocation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "target_schema": {"name": "target_schema", "description": "Name of the target schema that was used in this invocation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "target_profile_name": {"name": "target_profile_name", "description": "Name of the dbt profile that was used in this invocation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "threads": {"name": "threads", "description": "Number of threads that were used to run this dbt invocation. (This number could impact the performance of a dbt invocation).", "meta": {}, "data_type": "integer", "constraints": [], "quote": null, "tags": []}, "selected": {"name": "selected", "description": "The selected resources in the dbt command. While this is a string in the database, this can easily be converted to an array.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "yaml_selector": {"name": "yaml_selector", "description": "The yaml selector that was passed in this invocation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "job_id": {"name": "job_id", "description": "The ID of a job, defined in the `DBT_JOB_ID` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "job_name": {"name": "job_name", "description": "The name of a job, defined in the `DBT_JOB_NAME` env var.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "job_run_id": {"name": "job_run_id", "description": "The run ID of a job, defined in the `DBT_JOB_RUN_ID` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "env": {"name": "env", "description": "The environment's name, defined in the `DBT_ENV` env var.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "env_id": {"name": "env_id", "description": "The ID of an environment, defined in the `DBT_ENV_ID` env var.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": "The ID of a project, defined in the `DBT_PROJECT_ID` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "cause_category": {"name": "cause_category", "description": "The category of the cause of the invocation. For example, if the invocation was triggered by a schedule, the cause category would be schedule.\nDefined in the `DBT_CAUSE_CATEGORY` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).\n", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "cause": {"name": "cause", "description": "The cause of the invocation. For example, if the invocation was triggered by a manual run, the cause would be _\"Kicked off by Joe.\"_.\nDefined in the `DBT_CAUSE` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).\n", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "pull_request_id": {"name": "pull_request_id", "description": "The ID of a pull request, defined in the `DBT_PULL_REQUEST_ID` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "git_sha": {"name": "git_sha", "description": "The git SHA of the commit that was used in this invocation, defined in the `DBT_GIT_SHA` env var or by the orchestrator (dbt Cloud, GitHub Actions, etc).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "orchestrator": {"name": "orchestrator", "description": "The orchestrator that was used to run this invocation. For example, dbt Cloud, GitHub Actions, etc.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {"timestamp_column": "generated_at"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/run_results.yml", "build_path": "target/run/elementary/models/edr/dbt_artifacts/dbt_invocations.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "invocation_id", "on_schema_change": "append_new_columns", "full_refresh": false, "meta": {"timestamp_column": "generated_at"}, "schema": "elementary"}, "created_at": 1681446636.523565, "relation_name": "`your-gcp-project`.`elementary`.`dbt_invocations`", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    transient=False,\n    unique_key = 'invocation_id',\n    on_schema_change = 'append_new_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh'),\n    meta={\"timestamp_column\": \"generated_at\"},\n  )\n}}\n\n{{ elementary.get_dbt_invocations_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_invocations_empty_table_query"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_invocations.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as string) as invocation_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as job_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as job_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as job_run_id\n\n,\n                \n        cast('dummy_string' as string) as run_started_at\n\n,\n                \n        cast('dummy_string' as string) as run_completed_at\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('dummy_string' as string) as command\n\n,\n                \n        cast('dummy_string' as string) as dbt_version\n\n,\n                \n        cast('dummy_string' as string) as elementary_version\n\n,\n                \n        cast (True as BOOL) as full_refresh\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as invocation_vars\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as vars\n\n,\n                \n        cast('dummy_string' as string) as target_name\n\n,\n                \n        cast('dummy_string' as string) as target_database\n\n,\n                \n        cast('dummy_string' as string) as target_schema\n\n,\n                \n        cast('dummy_string' as string) as target_profile_name\n\n,\n                \n        cast(123456789 as INT64) as threads\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as selected\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as yaml_selector\n\n,\n                \n        cast('dummy_string' as string) as project_id\n\n,\n                \n        cast('dummy_string' as string) as project_name\n\n,\n                \n        cast('dummy_string' as string) as env\n\n,\n                \n        cast('dummy_string' as string) as env_id\n\n,\n                \n        cast('dummy_string' as string) as cause_category\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as cause\n\n,\n                \n        cast('dummy_string' as string) as pull_request_id\n\n,\n                \n        cast('dummy_string' as string) as git_sha\n\n,\n                \n        cast('dummy_string' as string) as orchestrator\n\n,\n                \n        cast('dummy_string' as string) as dbt_user\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_metrics": {"database": "your-gcp-project", "schema": "elementary", "name": "dbt_metrics", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_metrics.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_metrics.sql", "unique_id": "model.elementary.dbt_metrics", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_metrics"], "alias": "dbt_metrics", "checksum": {"name": "sha256", "checksum": "346d0ae98ddf568e9102387d30aa7d9ee4c8c3c3ea58cd254e5e57fcb800f7e9"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_metrics() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Metadata about metics in the project, including configuration and properties from the dbt graph. Each row contains information about a single metric. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": {"unique_id": {"name": "unique_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "label": {"name": "label", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "model": {"name": "model", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "sql": {"name": "sql", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "filters": {"name": "filters", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "time_grains": {"name": "time_grains", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "dimensions": {"name": "dimensions", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_macros": {"name": "depends_on_macros", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": "target/run/elementary/models/edr/dbt_artifacts/dbt_metrics.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "full_refresh": false, "post-hook": ["{{ elementary.upload_dbt_metrics() }}"], "schema": "elementary"}, "created_at": 1681446636.559106, "relation_name": "`your-gcp-project`.`elementary`.`dbt_metrics`", "raw_code": "{{\n  config(\n    materialized='incremental',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_metrics() }}',\n    unique_key='unique_id',\n    on_schema_change='sync_all_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh')\n    )\n}}\n\n{{ elementary.get_dbt_metrics_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_metrics_empty_table_query", "macro.elementary.upload_dbt_metrics"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_metrics.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as name\n\n,\n                \n        cast('dummy_string' as string) as label\n\n,\n                \n        cast('dummy_string' as string) as model\n\n,\n                \n        cast('dummy_string' as string) as type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as sql\n\n,\n                \n        cast('dummy_string' as string) as timestamp\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as filters\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as time_grains\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as dimensions\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as meta\n\n,\n                \n        cast('dummy_string' as string) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as original_path\n\n,\n                \n        cast('dummy_string' as string) as path\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('dummy_string' as string) as metadata_hash\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_seeds": {"database": "your-gcp-project", "schema": "elementary", "name": "dbt_seeds", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_seeds.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_seeds.sql", "unique_id": "model.elementary.dbt_seeds", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_seeds"], "alias": "dbt_seeds", "checksum": {"name": "sha256", "checksum": "8daecb4cb68c55a0ad53ba73468d4537965acf2ccdc5c4343b9e1f4e3ae6f197"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_seeds() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/elementary/models/edr/dbt_artifacts/dbt_seeds.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "full_refresh": false, "post-hook": ["{{ elementary.upload_dbt_seeds() }}"], "schema": "elementary"}, "created_at": 1681446636.301595, "relation_name": "`your-gcp-project`.`elementary`.`dbt_seeds`", "raw_code": "{{\n  config(\n    materialized='incremental',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_seeds() }}',\n    unique_key='unique_id',\n    on_schema_change='sync_all_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh')\n  )\n}}\n\n{{ elementary.get_dbt_seeds_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_seeds_empty_table_query", "macro.elementary.upload_dbt_seeds"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_seeds.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as alias\n\n,\n                \n        cast('dummy_string' as string) as checksum\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as meta\n\n,\n                \n        cast('dummy_string' as string) as owner\n\n,\n                \n        cast('dummy_string' as string) as database_name\n\n,\n                \n        cast('dummy_string' as string) as schema_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as description\n\n,\n                \n        cast('dummy_string' as string) as name\n\n,\n                \n        cast('dummy_string' as string) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as original_path\n\n,\n                \n        cast('dummy_string' as string) as path\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('dummy_string' as string) as metadata_hash\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_artifacts_hashes": {"database": "your-gcp-project", "schema": "elementary", "name": "dbt_artifacts_hashes", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_artifacts_hashes.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_artifacts_hashes.sql", "unique_id": "model.elementary.dbt_artifacts_hashes", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_artifacts_hashes"], "alias": "dbt_artifacts_hashes", "checksum": {"name": "sha256", "checksum": "3291a913ae78e1f04e276f308683bcc28ce096edc9441ea92f35c6e18727aefb"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/elementary/models/edr/dbt_artifacts/dbt_artifacts_hashes.sql", "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "elementary"}, "created_at": 1681446636.314734, "relation_name": "`your-gcp-project`.`elementary`.`dbt_artifacts_hashes`", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\n{% set artifact_models = [\n  \"dbt_models\",\n  \"dbt_tests\",\n  \"dbt_sources\",\n  \"dbt_snapshots\",\n  \"dbt_metrics\",\n  \"dbt_exposures\",\n  \"dbt_seeds\",\n] %}\n\n{% for artifact_model in artifact_models %}\nselect\n  '{{ artifact_model }}' as artifacts_model,\n   metadata_hash\nfrom {{ ref(artifact_model) }}\n{% if not loop.last %} union all {% endif %}\n{% endfor %}\norder by metadata_hash", "language": "sql", "refs": [{"name": "dbt_models", "package": null, "version": null}, {"name": "dbt_tests", "package": null, "version": null}, {"name": "dbt_sources", "package": null, "version": null}, {"name": "dbt_snapshots", "package": null, "version": null}, {"name": "dbt_metrics", "package": null, "version": null}, {"name": "dbt_exposures", "package": null, "version": null}, {"name": "dbt_seeds", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.elementary.dbt_models", "model.elementary.dbt_tests", "model.elementary.dbt_sources", "model.elementary.dbt_snapshots", "model.elementary.dbt_metrics", "model.elementary.dbt_exposures", "model.elementary.dbt_seeds"]}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_artifacts_hashes.sql", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n  'dbt_models' as artifacts_model,\n   metadata_hash\nfrom `your-gcp-project`.`elementary`.`dbt_models`\n union all \n\nselect\n  'dbt_tests' as artifacts_model,\n   metadata_hash\nfrom `your-gcp-project`.`elementary`.`dbt_tests`\n union all \n\nselect\n  'dbt_sources' as artifacts_model,\n   metadata_hash\nfrom `your-gcp-project`.`elementary`.`dbt_sources`\n union all \n\nselect\n  'dbt_snapshots' as artifacts_model,\n   metadata_hash\nfrom `your-gcp-project`.`elementary`.`dbt_snapshots`\n union all \n\nselect\n  'dbt_metrics' as artifacts_model,\n   metadata_hash\nfrom `your-gcp-project`.`elementary`.`dbt_metrics`\n union all \n\nselect\n  'dbt_exposures' as artifacts_model,\n   metadata_hash\nfrom `your-gcp-project`.`elementary`.`dbt_exposures`\n union all \n\nselect\n  'dbt_seeds' as artifacts_model,\n   metadata_hash\nfrom `your-gcp-project`.`elementary`.`dbt_seeds`\n\n\norder by metadata_hash", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_run_results": {"database": "your-gcp-project", "schema": "elementary", "name": "dbt_run_results", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_run_results.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_run_results.sql", "unique_id": "model.elementary.dbt_run_results", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_run_results"], "alias": "dbt_run_results", "checksum": {"name": "sha256", "checksum": "ecee798e20623bd3fe0d1822356a14c63f8a99e251ccf1aff743b0b3759c548d"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {"timestamp_column": "generated_at"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "model_execution_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Run results of dbt invocations, inserted at the end of each invocation. Each row is the invocation result of a single resource (model, test, snapshot, etc). New data is loaded to this model on an on-run-end hook named 'elementary.upload_run_results' from each invocation that produces a result object. This is an incremental model.\n", "columns": {"model_execution_id": {"name": "model_execution_id", "description": "Execution id generated by joining the unique_id of the resource and the invocation_id. This is the unique key of each row in this model.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "unique_id": {"name": "unique_id", "description": "The unique id of the resource (would be similar for all executions of the same resource).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "invocation_id": {"name": "invocation_id", "description": "The unique id of the invocation (would be similar for all resources executed on the same invocation). FK to dbt_invocations.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Resource name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "message": {"name": "message", "description": "Execution results message returned by dbt.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Execution result status (success, error, pass, fail)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "resource_type": {"name": "resource_type", "description": "Resource type (model, test, snapshot, seed, etc)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "execution_time": {"name": "execution_time", "description": "Resource execution duration in seconds.", "meta": {}, "data_type": "float", "constraints": [], "quote": null, "tags": []}, "execute_started_at": {"name": "execute_started_at", "description": "Start time of the execution.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "execute_completed_at": {"name": "execute_completed_at", "description": "End time of the execution.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Start time of resource compile action.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "compile_completed_at": {"name": "compile_completed_at", "description": "End time of resource compile action.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "full_refresh": {"name": "full_refresh", "description": "Was this a full refresh execution.", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "compiled_code": {"name": "compiled_code", "description": "The compiled code (SQL / Python) executed against the database.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "failures": {"name": "failures", "description": "Number of failures in this run.", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": []}, "query_id": {"name": "query_id", "description": "Query ID in the data warehouse, if returned by the adapter (currently only supported in Snowflake, is null for any other adapter).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "thread_id": {"name": "thread_id", "description": "Id of the thread of this resource run.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {"timestamp_column": "generated_at"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/run_results.yml", "build_path": "target/run/elementary/models/edr/dbt_artifacts/dbt_run_results.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "model_execution_id", "on_schema_change": "append_new_columns", "full_refresh": false, "meta": {"timestamp_column": "generated_at"}, "schema": "elementary"}, "created_at": 1681446636.529223, "relation_name": "`your-gcp-project`.`elementary`.`dbt_run_results`", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    transient=False,\n    unique_key = 'model_execution_id',\n    on_schema_change = 'append_new_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh'),\n    meta={\"timestamp_column\": \"generated_at\"},\n  )\n}}\n\n{{ elementary.get_dbt_run_results_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_run_results_empty_table_query"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_run_results.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as string) as model_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as invocation_id\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as message\n\n,\n                \n        cast('dummy_string' as string) as status\n\n,\n                \n        cast('dummy_string' as string) as resource_type\n\n,\n                \n        cast(123456789.99 as FLOAT64) as execution_time\n\n,\n                \n        cast('dummy_string' as string) as execute_started_at\n\n,\n                \n        cast('dummy_string' as string) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as string) as compile_started_at\n\n,\n                \n        cast('dummy_string' as string) as compile_completed_at\n\n,\n                \n        cast(31474836478 as bigint) as rows_affected\n\n,\n                \n        cast (True as BOOL) as full_refresh\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as compiled_code\n\n,\n                \n        cast(31474836478 as bigint) as failures\n\n,\n                \n        cast('dummy_string' as string) as query_id\n\n,\n                \n        cast('dummy_string' as string) as thread_id\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.dbt_exposures": {"database": "your-gcp-project", "schema": "elementary", "name": "dbt_exposures", "resource_type": "model", "package_name": "elementary", "path": "edr/dbt_artifacts/dbt_exposures.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_exposures.sql", "unique_id": "model.elementary.dbt_exposures", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_exposures"], "alias": "dbt_exposures", "checksum": {"name": "sha256", "checksum": "8a682af36a6af01c41098c007da5b2fbe040cc282350e2817269b1b20b0f0e36"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_exposures() }}", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "Metadata about exposures in the project, including configuration and properties from the dbt graph. Each row contains information about a single exposure. Data is loaded every time this model is executed. It is recommended to execute the model every time a change is merged to the project.\n", "columns": {"unique_id": {"name": "unique_id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "owner_email": {"name": "owner_email", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "owner_name": {"name": "owner_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "url": {"name": "url", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_macros": {"name": "depends_on_macros", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "tags": {"name": "tags", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "meta": {"name": "meta", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "path": {"name": "path", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/dbt_artifacts.yml", "build_path": "target/run/elementary/models/edr/dbt_artifacts/dbt_exposures.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "unique_id", "on_schema_change": "sync_all_columns", "full_refresh": false, "post-hook": ["{{ elementary.upload_dbt_exposures() }}"], "schema": "elementary"}, "created_at": 1681446636.5638452, "relation_name": "`your-gcp-project`.`elementary`.`dbt_exposures`", "raw_code": "{{\n  config(\n    materialized='incremental',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_exposures() }}',\n    unique_key='unique_id',\n    on_schema_change='sync_all_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh')\n    )\n}}\n\n{{ elementary.get_dbt_exposures_empty_table_query() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_exposures_empty_table_query", "macro.elementary.upload_dbt_exposures"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/dbt_artifacts/dbt_exposures.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n            select\n            \n                \n        cast('dummy_string' as string) as unique_id\n\n,\n                \n        cast('dummy_string' as string) as name\n\n,\n                \n        cast('dummy_string' as string) as maturity\n\n,\n                \n        cast('dummy_string' as string) as type\n\n,\n                \n        cast('dummy_string' as string) as owner_email\n\n,\n                \n        cast('dummy_string' as string) as owner_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as url\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_macros\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as depends_on_nodes\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as description\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as meta\n\n,\n                \n        cast('dummy_string' as string) as package_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as string) as original_path\n\n,\n                \n        cast('dummy_string' as string) as path\n\n,\n                \n        cast('dummy_string' as string) as generated_at\n\n,\n                \n        cast('dummy_string' as string) as metadata_hash\n\n\n            )\n        select * from empty_table\n        where 1 = 0", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.metrics_anomaly_score": {"database": "your-gcp-project", "schema": "elementary", "name": "metrics_anomaly_score", "resource_type": "model", "package_name": "elementary", "path": "edr/data_monitoring/anomaly_detection/metrics_anomaly_score.sql", "original_file_path": "models/edr/data_monitoring/anomaly_detection/metrics_anomaly_score.sql", "unique_id": "model.elementary.metrics_anomaly_score", "fqn": ["elementary", "edr", "data_monitoring", "anomaly_detection", "metrics_anomaly_score"], "alias": "metrics_anomaly_score", "checksum": {"name": "sha256", "checksum": "abfd27ad29f3a4da67885dfd0c82ed98c043958f705c4258175db6c306d0795e"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This is a view on `data_monitoring_metrics` that runs the same query the anomaly detection tests run to calculate anomaly scores. The purpose of this view is to provide visibility to the results of anomaly detection tests.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/elementary_tests.yml", "build_path": "target/run/elementary/models/edr/data_monitoring/anomaly_detection/metrics_anomaly_score.sql", "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "elementary"}, "created_at": 1681446636.513031, "relation_name": "`your-gcp-project`.`elementary`.`metrics_anomaly_score`", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith data_monitoring_metrics as (\n\n    select * from {{ ref('data_monitoring_metrics') }}\n\n),\n\ntime_window_aggregation as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        updated_at,\n        avg(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_avg,\n        stddev(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_stddev,\n        count(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_set_size,\n        last_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) training_end,\n        first_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_start\n    from data_monitoring_metrics\n    {{ dbt_utils.group_by(12) }}\n),\n\nmetrics_anomaly_score as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        case\n            when training_stddev is null then null\n            when training_stddev = 0 then 0\n            else (metric_value - training_avg) / (training_stddev)\n        end as anomaly_score,\n        metric_value as latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        max(updated_at) as updated_at\n    from time_window_aggregation\n        where\n            metric_value is not null\n            and training_avg is not null\n            and training_set_size >= {{ elementary.get_config_var('min_training_set_size') }}\n            and bucket_end >= {{ elementary.edr_timeadd('day', '-7', elementary.edr_date_trunc('day', elementary.edr_current_timestamp())) }}\n    {{ dbt_utils.group_by(15) }}\n    order by bucket_end desc\n\n\n),\n\nfinal as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        anomaly_score,\n        latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        updated_at,\n        case\n            when abs(anomaly_score) > {{ elementary.get_config_var('anomaly_sensitivity') }} then true\n            else false end\n        as is_anomaly\n    from metrics_anomaly_score\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "data_monitoring_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.elementary.get_config_var", "macro.elementary.edr_current_timestamp", "macro.elementary.edr_date_trunc", "macro.elementary.edr_timeadd"], "nodes": ["model.elementary.data_monitoring_metrics"]}, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/anomaly_detection/metrics_anomaly_score.sql", "compiled": true, "compiled_code": "\n\nwith data_monitoring_metrics as (\n\n    select * from `your-gcp-project`.`elementary`.`data_monitoring_metrics`\n\n),\n\ntime_window_aggregation as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        updated_at,\n        avg(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_avg,\n        stddev(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_stddev,\n        count(metric_value) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_set_size,\n        last_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) training_end,\n        first_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by bucket_start asc rows between unbounded preceding and current row) as training_start\n    from data_monitoring_metrics\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n),\n\nmetrics_anomaly_score as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        case\n            when training_stddev is null then null\n            when training_stddev = 0 then 0\n            else (metric_value - training_avg) / (training_stddev)\n        end as anomaly_score,\n        metric_value as latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        max(updated_at) as updated_at\n    from time_window_aggregation\n        where\n            metric_value is not null\n            and training_avg is not null\n            and training_set_size >= 14\n            and bucket_end >= \n    timestamp_add(cast(timestamp_trunc(\n        cast(current_timestamp as timestamp),\n        day\n    ) as TIMESTAMP), INTERVAL -7 day)\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n    order by bucket_end desc\n\n\n),\n\nfinal as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        dimension,\n        dimension_value,\n        metric_name,\n        anomaly_score,\n        latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        updated_at,\n        case\n            when abs(anomaly_score) > 3 then true\n            else false end\n        as is_anomaly\n    from metrics_anomaly_score\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.anomaly_threshold_sensitivity": {"database": "your-gcp-project", "schema": "elementary", "name": "anomaly_threshold_sensitivity", "resource_type": "model", "package_name": "elementary", "path": "edr/data_monitoring/anomaly_detection/anomaly_threshold_sensitivity.sql", "original_file_path": "models/edr/data_monitoring/anomaly_detection/anomaly_threshold_sensitivity.sql", "unique_id": "model.elementary.anomaly_threshold_sensitivity", "fqn": ["elementary", "edr", "data_monitoring", "anomaly_detection", "anomaly_threshold_sensitivity"], "alias": "anomaly_threshold_sensitivity", "checksum": {"name": "sha256", "checksum": "b0e4310abc62902b98a6ad6fd465713d5aeb5e884b52594e8a1b2ff6429b1b2d"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "bind": false, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This is a view on `metrics_anomaly_score` that calculates if values of metrics from latest runs would have been considered anomalies in different anomaly scores. This can help you decide if there is a need to adjust the `anomaly_score_threshold`.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/elementary_tests.yml", "build_path": "target/run/elementary/models/edr/data_monitoring/anomaly_detection/anomaly_threshold_sensitivity.sql", "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "elementary"}, "created_at": 1681446636.5132349, "relation_name": "`your-gcp-project`.`elementary`.`anomaly_threshold_sensitivity`", "raw_code": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith metrics_anomaly_score as (\n\n    select * from {{ ref('metrics_anomaly_score') }}\n\n),\n\nscore_sensitivity as (\n\n    select\n        full_table_name,\n        column_name,\n        metric_name,\n        latest_metric_value,\n        training_avg as metric_avg,\n        training_stddev as metric_stddev,\n        anomaly_score,\n        case when abs(anomaly_score) >= 1.5 then true else false end as {{ elementary.edr_quote_column('is_anomaly_1_5') }},\n        case when abs(anomaly_score) >= 2 then true else false end as {{ elementary.edr_quote_column('is_anomaly_2') }},\n        case when abs(anomaly_score) >= 2.5 then true else false end as {{ elementary.edr_quote_column('is_anomaly_2_5') }},\n        case when abs(anomaly_score) >= 3 then true else false end as {{ elementary.edr_quote_column('is_anomaly_3') }},\n        case when abs(anomaly_score) >= 3.5 then true else false end as {{ elementary.edr_quote_column('is_anomaly_3_5') }},\n        case when abs(anomaly_score) >= 4 then true else false end as {{ elementary.edr_quote_column('is_anomaly_4') }},\n        case when abs(anomaly_score) >= 4.5 then true else false end as {{ elementary.edr_quote_column('is_anomaly_4_5') }}\n    from metrics_anomaly_score\n    where abs(anomaly_score) >= 1.5\n\n)\n\nselect * from score_sensitivity", "language": "sql", "refs": [{"name": "metrics_anomaly_score", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.edr_quote_column"], "nodes": ["model.elementary.metrics_anomaly_score"]}, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/anomaly_detection/anomaly_threshold_sensitivity.sql", "compiled": true, "compiled_code": "\n\nwith metrics_anomaly_score as (\n\n    select * from `your-gcp-project`.`elementary`.`metrics_anomaly_score`\n\n),\n\nscore_sensitivity as (\n\n    select\n        full_table_name,\n        column_name,\n        metric_name,\n        latest_metric_value,\n        training_avg as metric_avg,\n        training_stddev as metric_stddev,\n        anomaly_score,\n        case when abs(anomaly_score) >= 1.5 then true else false end as `is_anomaly_1_5`,\n        case when abs(anomaly_score) >= 2 then true else false end as `is_anomaly_2`,\n        case when abs(anomaly_score) >= 2.5 then true else false end as `is_anomaly_2_5`,\n        case when abs(anomaly_score) >= 3 then true else false end as `is_anomaly_3`,\n        case when abs(anomaly_score) >= 3.5 then true else false end as `is_anomaly_3_5`,\n        case when abs(anomaly_score) >= 4 then true else false end as `is_anomaly_4`,\n        case when abs(anomaly_score) >= 4.5 then true else false end as `is_anomaly_4_5`\n    from metrics_anomaly_score\n    where abs(anomaly_score) >= 1.5\n\n)\n\nselect * from score_sensitivity", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.schema_columns_snapshot": {"database": "your-gcp-project", "schema": "elementary", "name": "schema_columns_snapshot", "resource_type": "model", "package_name": "elementary", "path": "edr/data_monitoring/schema_changes/schema_columns_snapshot.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/schema_columns_snapshot.sql", "unique_id": "model.elementary.schema_columns_snapshot", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "schema_columns_snapshot"], "alias": "schema_columns_snapshot", "checksum": {"name": "sha256", "checksum": "4026dd4e8a55d4d5811bdb27cd4214398607ed24bc5b3940ee40dbb4b42a4f2f"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {"timestamp_column": "detected_at"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "column_state_id", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Stores the schema details for tables that are monitored with elementary schema changes test. In order to compare current schema to previous state, we must store the previous state. The data is from a view that queries the data warehouse information schema. This is an incremental table.\n", "columns": {}, "meta": {"timestamp_column": "detected_at"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/elementary_tests.yml", "build_path": "target/run/elementary/models/edr/data_monitoring/schema_changes/schema_columns_snapshot.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "column_state_id", "enabled": true, "full_refresh": false, "meta": {"timestamp_column": "detected_at"}, "schema": "elementary"}, "created_at": 1681446636.5136268, "relation_name": "`your-gcp-project`.`elementary`.`schema_columns_snapshot`", "raw_code": "{{\n  config(\n    materialized='incremental',\n    unique_key = 'column_state_id',\n    enabled = target.type != 'databricks' and target.type != 'spark' | as_bool(),\n    full_refresh=elementary.get_config_var('elementary_full_refresh'),\n    meta={\"timestamp_column\": \"detected_at\"}\n  )\n}}\n\n{{ elementary.empty_schema_columns_snapshot() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.empty_schema_columns_snapshot"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/schema_changes/schema_columns_snapshot.sql", "compiled": true, "compiled_code": "\n\n\n    with empty_table as (\n            select\n            \n                \n        cast('dummy_string' as string) as column_state_id\n\n,\n                \n        cast('dummy_string' as string) as full_column_name\n\n,\n                \n        cast('dummy_string' as string) as full_table_name\n\n,\n                \n        cast('dummy_string' as string) as column_name\n\n,\n                \n        cast('dummy_string' as string) as data_type\n\n,\n                \n        cast (True as BOOL) as is_new\n\n,\n                cast('2091-02-17' as TIMESTAMP) as detected_at\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.data_monitoring_metrics": {"database": "your-gcp-project", "schema": "elementary", "name": "data_monitoring_metrics", "resource_type": "model", "package_name": "elementary", "path": "edr/data_monitoring/data_monitoring/data_monitoring_metrics.sql", "original_file_path": "models/edr/data_monitoring/data_monitoring/data_monitoring_metrics.sql", "unique_id": "model.elementary.data_monitoring_metrics", "fqn": ["elementary", "edr", "data_monitoring", "data_monitoring", "data_monitoring_metrics"], "alias": "data_monitoring_metrics", "checksum": {"name": "sha256", "checksum": "4654d1519d81eca2b622d05e7fd6a0c85fea9126025078173a6b99ff3418bbd2"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {"timestamp_column": "updated_at"}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Elementary anomaly detection tests monitor metrics such as volume, freshness and data quality metrics. This incremental table is used to store the metrics over time. On each anomaly detection test, the test queries this table for historical metrics, and compares to the latest values. The table is updated with new metrics on the on-run-end named handle_test_results that is executed at the end of dbt test invocations.\n", "columns": {}, "meta": {"timestamp_column": "updated_at"}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/elementary_tests.yml", "build_path": "target/run/elementary/models/edr/data_monitoring/data_monitoring/data_monitoring_metrics.sql", "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "id", "on_schema_change": "append_new_columns", "full_refresh": false, "meta": {"timestamp_column": "updated_at"}, "schema": "elementary"}, "created_at": 1681446636.512811, "relation_name": "`your-gcp-project`.`elementary`.`data_monitoring_metrics`", "raw_code": "{{\n  config(\n    materialized='incremental',\n    unique_key='id',\n    on_schema_change='append_new_columns',\n    full_refresh=elementary.get_config_var('elementary_full_refresh'),\n    meta={\"timestamp_column\": \"updated_at\"}\n  )\n}}\n\n{{ elementary.empty_data_monitoring_metrics() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.empty_data_monitoring_metrics"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/data_monitoring/data_monitoring_metrics.sql", "compiled": true, "compiled_code": "\n\n\n    with empty_table as (\n            select\n            \n                \n        cast('dummy_string' as string) as id\n\n,\n                \n        cast('dummy_string' as string) as full_table_name\n\n,\n                \n        cast('dummy_string' as string) as column_name\n\n,\n                \n        cast('dummy_string' as string) as metric_name\n\n,\n                \n        cast(123456789.99 as FLOAT64) as metric_value\n\n,\n                \n        cast('dummy_string' as string) as source_value\n\n,\n                cast('2091-02-17' as TIMESTAMP) as bucket_start\n\n,\n                cast('2091-02-17' as TIMESTAMP) as bucket_end\n\n,\n                \n        cast(123456789 as INT64) as bucket_duration_hours\n\n,\n                cast('2091-02-17' as TIMESTAMP) as updated_at\n\n,\n                \n        cast('dummy_string' as string) as dimension\n\n,\n                \n        cast('dummy_string' as string) as dimension_value\n\n,\n                \n        cast('dummy_string' as string) as metric_properties\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.filtered_information_schema_columns": {"database": "your-gcp-project", "schema": "elementary", "name": "filtered_information_schema_columns", "resource_type": "model", "package_name": "elementary", "path": "edr/metadata_store/filtered_information_schema_columns.sql", "original_file_path": "models/edr/metadata_store/filtered_information_schema_columns.sql", "unique_id": "model.elementary.filtered_information_schema_columns", "fqn": ["elementary", "edr", "metadata_store", "filtered_information_schema_columns"], "alias": "filtered_information_schema_columns", "checksum": {"name": "sha256", "checksum": "8b0602cbf990730afd02271c018d6843414aaff35c5d6e191c8711e570178d7b"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Queries the columns view from the information schema of the schemas in the project. This view is generated using an adapter specific macro, as information schema is different between platforms. This is a view to make the work with the information schema more convinient.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/elementary_tests.yml", "build_path": "target/run/elementary/models/edr/metadata_store/filtered_information_schema_columns.sql", "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true, "schema": "elementary"}, "created_at": 1681446636.513827, "relation_name": "`your-gcp-project`.`elementary`.`filtered_information_schema_columns`", "raw_code": "{{\n  config(\n    materialized = 'view',\n    enabled = target.type != 'databricks' and target.type != 'spark' | as_bool()\n  )\n}}\n\n{% set configured_schemas = elementary.get_configured_schemas_from_graph() %}\n\nwith filtered_information_schema_columns as (\n\n    {%- if configured_schemas | length > 0 -%}\n        {{ elementary.union_macro_queries(configured_schemas, elementary.get_columns_from_information_schema) }}\n    {%- else %}\n        {{ elementary.empty_table([('full_table_name', 'string'), ('database_name', 'string'), ('schema_name', 'string'), ('table_name', 'string'), ('column_name', 'string'), ('data_type', 'string')]) }}\n    {%- endif %}\n\n)\n\nselect *\nfrom filtered_information_schema_columns\nwhere full_table_name is not null", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_configured_schemas_from_graph", "macro.elementary.empty_table"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/metadata_store/filtered_information_schema_columns.sql", "compiled": true, "compiled_code": "\n\n\n\nwith filtered_information_schema_columns as (\n        with empty_table as (\n            select\n            \n                \n        cast('dummy_string' as string) as full_table_name\n\n,\n                \n        cast('dummy_string' as string) as database_name\n\n,\n                \n        cast('dummy_string' as string) as schema_name\n\n,\n                \n        cast('dummy_string' as string) as table_name\n\n,\n                \n        cast('dummy_string' as string) as column_name\n\n,\n                \n        cast('dummy_string' as string) as data_type\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n\n)\n\nselect *\nfrom filtered_information_schema_columns\nwhere full_table_name is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.elementary.filtered_information_schema_tables": {"database": "your-gcp-project", "schema": "elementary", "name": "filtered_information_schema_tables", "resource_type": "model", "package_name": "elementary", "path": "edr/metadata_store/filtered_information_schema_tables.sql", "original_file_path": "models/edr/metadata_store/filtered_information_schema_tables.sql", "unique_id": "model.elementary.filtered_information_schema_tables", "fqn": ["elementary", "edr", "metadata_store", "filtered_information_schema_tables"], "alias": "filtered_information_schema_tables", "checksum": {"name": "sha256", "checksum": "1a3258f05108afa595c79c53308305e9369b46902d2d8c6f28c5fb0bfa75561a"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Queries the tables and schemas views from the information schema of the schemas in the project. This view is generated using an adapter specific macro, as information schema is different between platforms. This is a view to make the work with the information schema more convinient.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "elementary://models/elementary_tests.yml", "build_path": "target/run/elementary/models/edr/metadata_store/filtered_information_schema_tables.sql", "deferred": false, "unrendered_config": {"materialized": "view", "enabled": true, "schema": "elementary"}, "created_at": 1681446636.51403, "relation_name": "`your-gcp-project`.`elementary`.`filtered_information_schema_tables`", "raw_code": "{{\n  config(\n    materialized = 'view',\n    enabled = target.type != 'databricks' and target.type != 'spark' | as_bool()\n  )\n}}\n\n{% set configured_schemas = elementary.get_configured_schemas_from_graph() %}\n\nwith filtered_information_schema_tables as (\n\n    {%- if configured_schemas | length > 0 -%}\n        {{ elementary.union_macro_queries(configured_schemas, elementary.get_tables_from_information_schema) }}\n    {%- else %}\n        {{ elementary.empty_table([('full_table_name', 'string'), ('full_schema_name', 'string'), ('database_name', 'string'), ('schema_name', 'string'), ('table_name', 'string')]) }}\n    {%- endif %}\n\n)\n\nselect *\nfrom filtered_information_schema_tables\nwhere schema_name is not null", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.get_configured_schemas_from_graph", "macro.elementary.empty_table"], "nodes": []}, "compiled_path": "target/compiled/elementary/models/edr/metadata_store/filtered_information_schema_tables.sql", "compiled": true, "compiled_code": "\n\n\n\nwith filtered_information_schema_tables as (\n        with empty_table as (\n            select\n            \n                \n        cast('dummy_string' as string) as full_table_name\n\n,\n                \n        cast('dummy_string' as string) as full_schema_name\n\n,\n                \n        cast('dummy_string' as string) as database_name\n\n,\n                \n        cast('dummy_string' as string) as schema_name\n\n,\n                \n        cast('dummy_string' as string) as table_name\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n\n)\n\nselect *\nfrom filtered_information_schema_tables\nwhere schema_name is not null", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "operation.elementary.elementary-on-run-start-0": {"database": "your-gcp-project", "schema": "elementary", "name": "elementary-on-run-start-0", "resource_type": "operation", "package_name": "elementary", "path": "hooks/elementary-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.elementary.elementary-on-run-start-0", "fqn": ["elementary", "hooks", "elementary-on-run-start-0"], "alias": "elementary-on-run-start-0", "checksum": {"name": "sha256", "checksum": "e2ea1d5699854e0fac5d905b5a0cbbc6526f91f0448edfe42a6a0fa801b43196"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "elementary"}, "created_at": 1681446636.4447339, "relation_name": null, "raw_code": "{{ elementary.on_run_start() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.on_run_start"], "nodes": []}, "compiled_path": "target/compiled/elementary/./dbt_project.yml/hooks/elementary-on-run-start-0.sql", "compiled": true, "compiled_code": "\n  \n  \n\n  \n\n  \n    \n  \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "index": 0}, "operation.elementary.elementary-on-run-end-0": {"database": "your-gcp-project", "schema": "elementary", "name": "elementary-on-run-end-0", "resource_type": "operation", "package_name": "elementary", "path": "hooks/elementary-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.elementary.elementary-on-run-end-0", "fqn": ["elementary", "hooks", "elementary-on-run-end-0"], "alias": "elementary-on-run-end-0", "checksum": {"name": "sha256", "checksum": "e2ea1d5699854e0fac5d905b5a0cbbc6526f91f0448edfe42a6a0fa801b43196"}, "config": {"enabled": true, "alias": null, "schema": "elementary", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "elementary"}, "created_at": 1681446636.4499478, "relation_name": null, "raw_code": "{{ elementary.on_run_end() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.elementary.on_run_end"], "nodes": []}, "compiled_path": "target/compiled/elementary/./dbt_project.yml/hooks/elementary-on-run-end-0.sql", "compiled": true, "compiled_code": "\n  \n  \n\n  \n    \n  \n    \n\n    \n    \n    \n      \n        \n      \n    \n      \n        \n      \n    \n      \n        \n      \n    \n      \n        \n      \n    \n      \n        \n      \n    \n      \n        \n      \n    \n      \n        \n      \n    \n  \n\n  \n\n  \n    \n  \n\n  \n    \n  \n\n  \n    \n  \n  \n\n  \n  \n  \n  \n  \n\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "index": 0}, "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "unique_customers_customer_id", "resource_type": "test", "package_name": "jaffle_shop", "path": "unique_customers_customer_id.sql", "original_file_path": "models/schema.yml", "unique_id": "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1", "fqn": ["jaffle_shop", "unique_customers_customer_id"], "alias": "unique_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/jaffle_shop/models/schema.yml/unique_customers_customer_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1681446636.4757829, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.elementary.materialize_test", "macro.dbt.materialization_test_default"], "nodes": ["model.jaffle_shop.customers"]}, "compiled_path": "target/compiled/jaffle_shop/models/schema.yml/unique_customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_id as unique_field\n  from `your-gcp-project`.`jaffle_shop`.`customers`\n  where customer_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.customers", "attached_node": "model.jaffle_shop.customers"}, "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('customers')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "not_null_customers_customer_id", "resource_type": "test", "package_name": "jaffle_shop", "path": "not_null_customers_customer_id.sql", "original_file_path": "models/schema.yml", "unique_id": "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d", "fqn": ["jaffle_shop", "not_null_customers_customer_id"], "alias": "not_null_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/jaffle_shop/models/schema.yml/not_null_customers_customer_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1681446636.476736, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.elementary.materialize_test", "macro.dbt.materialization_test_default"], "nodes": ["model.jaffle_shop.customers"]}, "compiled_path": "target/compiled/jaffle_shop/models/schema.yml/not_null_customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `your-gcp-project`.`jaffle_shop`.`customers`\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.customers", "attached_node": "model.jaffle_shop.customers"}, "test.jaffle_shop.not_null_customers_no_such_column.3f636d79eb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "no_such_column", "model": "{{ get_where_subquery(ref('customers')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "not_null_customers_no_such_column", "resource_type": "test", "package_name": "jaffle_shop", "path": "not_null_customers_no_such_column.sql", "original_file_path": "models/schema.yml", "unique_id": "test.jaffle_shop.not_null_customers_no_such_column.3f636d79eb", "fqn": ["jaffle_shop", "not_null_customers_no_such_column"], "alias": "not_null_customers_no_such_column", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681446636.477618, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.elementary.materialize_test"], "nodes": ["model.jaffle_shop.customers"]}, "compiled_path": "target/compiled/jaffle_shop/models/schema.yml/not_null_customers_no_such_column.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect no_such_column\nfrom `your-gcp-project`.`jaffle_shop`.`customers`\nwhere no_such_column is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "no_such_column", "file_key_name": "models.customers", "attached_node": "model.jaffle_shop.customers"}, "test.jaffle_shop.unique_orders_order_id.fed79b3a6e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "unique_orders_order_id", "resource_type": "test", "package_name": "jaffle_shop", "path": "unique_orders_order_id.sql", "original_file_path": "models/schema.yml", "unique_id": "test.jaffle_shop.unique_orders_order_id.fed79b3a6e", "fqn": ["jaffle_shop", "unique_orders_order_id"], "alias": "unique_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681446636.478487, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.jaffle_shop.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_id", "file_key_name": "models.orders", "attached_node": "model.jaffle_shop.orders"}, "test.jaffle_shop.not_null_orders_order_id.cf6c17daed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "not_null_orders_order_id", "resource_type": "test", "package_name": "jaffle_shop", "path": "not_null_orders_order_id.sql", "original_file_path": "models/schema.yml", "unique_id": "test.jaffle_shop.not_null_orders_order_id.cf6c17daed", "fqn": ["jaffle_shop", "not_null_orders_order_id"], "alias": "not_null_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681446636.479338, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "order_id", "file_key_name": "models.orders", "attached_node": "model.jaffle_shop.orders"}, "test.jaffle_shop.not_null_orders_customer_id.c5f02694af": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "not_null_orders_customer_id", "resource_type": "test", "package_name": "jaffle_shop", "path": "not_null_orders_customer_id.sql", "original_file_path": "models/schema.yml", "unique_id": "test.jaffle_shop.not_null_orders_customer_id.c5f02694af", "fqn": ["jaffle_shop", "not_null_orders_customer_id"], "alias": "not_null_orders_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681446636.480352, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.orders", "attached_node": "model.jaffle_shop.orders"}, "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('customers')", "field": "customer_id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "relationships_orders_customer_id__customer_id__ref_customers_", "resource_type": "test", "package_name": "jaffle_shop", "path": "relationships_orders_customer_id__customer_id__ref_customers_.sql", "original_file_path": "models/schema.yml", "unique_id": "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2", "fqn": ["jaffle_shop", "relationships_orders_customer_id__customer_id__ref_customers_"], "alias": "relationships_orders_customer_id__customer_id__ref_customers_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681446636.4812071, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customers", "package": null, "version": null}, {"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.jaffle_shop.customers", "model.jaffle_shop.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.orders", "attached_node": "model.jaffle_shop.orders"}, "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "accepted_values_orders_status__placed__shipped__completed__return_pending__returned", "resource_type": "test", "package_name": "jaffle_shop", "path": "accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758.sql", "original_file_path": "models/schema.yml", "unique_id": "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3", "fqn": ["jaffle_shop", "accepted_values_orders_status__placed__shipped__completed__return_pending__returned"], "alias": "accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758"}, "created_at": 1681446636.4867861, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_orders_1ce6ab157c285f7cd2ac656013faf758\") }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.jaffle_shop.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "status", "file_key_name": "models.orders", "attached_node": "model.jaffle_shop.orders"}, "test.jaffle_shop.not_null_orders_amount.106140f9fd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "not_null_orders_amount", "resource_type": "test", "package_name": "jaffle_shop", "path": "not_null_orders_amount.sql", "original_file_path": "models/schema.yml", "unique_id": "test.jaffle_shop.not_null_orders_amount.106140f9fd", "fqn": ["jaffle_shop", "not_null_orders_amount"], "alias": "not_null_orders_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681446636.491484, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "amount", "file_key_name": "models.orders", "attached_node": "model.jaffle_shop.orders"}, "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_card_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "not_null_orders_credit_card_amount", "resource_type": "test", "package_name": "jaffle_shop", "path": "not_null_orders_credit_card_amount.sql", "original_file_path": "models/schema.yml", "unique_id": "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59", "fqn": ["jaffle_shop", "not_null_orders_credit_card_amount"], "alias": "not_null_orders_credit_card_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681446636.492362, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "credit_card_amount", "file_key_name": "models.orders", "attached_node": "model.jaffle_shop.orders"}, "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "coupon_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "not_null_orders_coupon_amount", "resource_type": "test", "package_name": "jaffle_shop", "path": "not_null_orders_coupon_amount.sql", "original_file_path": "models/schema.yml", "unique_id": "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625", "fqn": ["jaffle_shop", "not_null_orders_coupon_amount"], "alias": "not_null_orders_coupon_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681446636.493216, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "coupon_amount", "file_key_name": "models.orders", "attached_node": "model.jaffle_shop.orders"}, "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "bank_transfer_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "not_null_orders_bank_transfer_amount", "resource_type": "test", "package_name": "jaffle_shop", "path": "not_null_orders_bank_transfer_amount.sql", "original_file_path": "models/schema.yml", "unique_id": "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49", "fqn": ["jaffle_shop", "not_null_orders_bank_transfer_amount"], "alias": "not_null_orders_bank_transfer_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681446636.494213, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "bank_transfer_amount", "file_key_name": "models.orders", "attached_node": "model.jaffle_shop.orders"}, "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "gift_card_amount", "model": "{{ get_where_subquery(ref('orders')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "not_null_orders_gift_card_amount", "resource_type": "test", "package_name": "jaffle_shop", "path": "not_null_orders_gift_card_amount.sql", "original_file_path": "models/schema.yml", "unique_id": "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a", "fqn": ["jaffle_shop", "not_null_orders_gift_card_amount"], "alias": "not_null_orders_gift_card_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681446636.49507, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop.orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "gift_card_amount", "file_key_name": "models.orders", "attached_node": "model.jaffle_shop.orders"}, "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "unique_stg_customers_customer_id", "resource_type": "test", "package_name": "jaffle_shop", "path": "unique_stg_customers_customer_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada", "fqn": ["jaffle_shop", "staging", "unique_stg_customers_customer_id"], "alias": "unique_stg_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/jaffle_shop/models/staging/schema.yml/unique_stg_customers_customer_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1681446636.497687, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.elementary.materialize_test", "macro.dbt.materialization_test_default"], "nodes": ["model.jaffle_shop.stg_customers"]}, "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select customer_id as unique_field\n  from `your-gcp-project`.`jaffle_shop`.`stg_customers`\n  where customer_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_customers", "attached_node": "model.jaffle_shop.stg_customers"}, "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "not_null_stg_customers_customer_id", "resource_type": "test", "package_name": "jaffle_shop", "path": "not_null_stg_customers_customer_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa", "fqn": ["jaffle_shop", "staging", "not_null_stg_customers_customer_id"], "alias": "not_null_stg_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/jaffle_shop/models/staging/schema.yml/not_null_stg_customers_customer_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1681446636.4985778, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_customers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.elementary.materialize_test", "macro.dbt.materialization_test_default"], "nodes": ["model.jaffle_shop.stg_customers"]}, "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_customers_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `your-gcp-project`.`jaffle_shop`.`stg_customers`\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_customers", "attached_node": "model.jaffle_shop.stg_customers"}, "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "unique_stg_orders_order_id", "resource_type": "test", "package_name": "jaffle_shop", "path": "unique_stg_orders_order_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a", "fqn": ["jaffle_shop", "staging", "unique_stg_orders_order_id"], "alias": "unique_stg_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/jaffle_shop/models/staging/schema.yml/unique_stg_orders_order_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1681446636.4995909, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.elementary.materialize_test", "macro.dbt.materialization_test_default"], "nodes": ["model.jaffle_shop.stg_orders"]}, "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select order_id as unique_field\n  from `your-gcp-project`.`jaffle_shop`.`stg_orders`\n  where order_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_orders", "attached_node": "model.jaffle_shop.stg_orders"}, "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "not_null_stg_orders_order_id", "resource_type": "test", "package_name": "jaffle_shop", "path": "not_null_stg_orders_order_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64", "fqn": ["jaffle_shop", "staging", "not_null_stg_orders_order_id"], "alias": "not_null_stg_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/jaffle_shop/models/staging/schema.yml/not_null_stg_orders_order_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1681446636.500437, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.elementary.materialize_test", "macro.dbt.materialization_test_default"], "nodes": ["model.jaffle_shop.stg_orders"]}, "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_orders_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom `your-gcp-project`.`jaffle_shop`.`stg_orders`\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_orders", "attached_node": "model.jaffle_shop.stg_orders"}, "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned", "resource_type": "test", "package_name": "jaffle_shop", "path": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad", "fqn": ["jaffle_shop", "staging", "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned"], "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/jaffle_shop/models/staging/schema.yml/accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql", "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58"}, "created_at": 1681446636.5012999, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58\") }}", "language": "sql", "refs": [{"name": "stg_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.elementary.materialize_test", "macro.dbt.materialization_test_default"], "nodes": ["model.jaffle_shop.stg_orders"]}, "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from `your-gcp-project`.`jaffle_shop`.`stg_orders`\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'placed','shipped','completed','return_pending','returned'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "status", "file_key_name": "models.stg_orders", "attached_node": "model.jaffle_shop.stg_orders"}, "test.jaffle_shop.unique_stg_payments_payment_id.3744510712": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "unique_stg_payments_payment_id", "resource_type": "test", "package_name": "jaffle_shop", "path": "unique_stg_payments_payment_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.jaffle_shop.unique_stg_payments_payment_id.3744510712", "fqn": ["jaffle_shop", "staging", "unique_stg_payments_payment_id"], "alias": "unique_stg_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/jaffle_shop/models/staging/schema.yml/unique_stg_payments_payment_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1681446636.504554, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery", "macro.elementary.materialize_test", "macro.dbt.materialization_test_default"], "nodes": ["model.jaffle_shop.stg_payments"]}, "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/unique_stg_payments_payment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select payment_id as unique_field\n  from `your-gcp-project`.`jaffle_shop`.`stg_payments`\n  where payment_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.stg_payments", "attached_node": "model.jaffle_shop.stg_payments"}, "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "not_null_stg_payments_payment_id", "resource_type": "test", "package_name": "jaffle_shop", "path": "not_null_stg_payments_payment_id.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075", "fqn": ["jaffle_shop", "staging", "not_null_stg_payments_payment_id"], "alias": "not_null_stg_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/jaffle_shop/models/staging/schema.yml/not_null_stg_payments_payment_id.sql", "deferred": false, "unrendered_config": {}, "created_at": 1681446636.5054238, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery", "macro.elementary.materialize_test", "macro.dbt.materialization_test_default"], "nodes": ["model.jaffle_shop.stg_payments"]}, "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/not_null_stg_payments_payment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom `your-gcp-project`.`jaffle_shop`.`stg_payments`\nwhere payment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.stg_payments", "attached_node": "model.jaffle_shop.stg_payments"}, "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["credit_card", "coupon", "bank_transfer", "gift_card"], "column_name": "payment_method", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "namespace": null}, "database": "your-gcp-project", "schema": "dbt_test__audit", "name": "accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card", "resource_type": "test", "package_name": "jaffle_shop", "path": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql", "original_file_path": "models/staging/schema.yml", "unique_id": "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278", "fqn": ["jaffle_shop", "staging", "accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card"], "alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/jaffle_shop/models/staging/schema.yml/accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql", "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef"}, "created_at": 1681446636.5063722, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef\") }}", "language": "sql", "refs": [{"name": "stg_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery", "macro.elementary.materialize_test", "macro.dbt.materialization_test_default"], "nodes": ["model.jaffle_shop.stg_payments"]}, "compiled_path": "target/compiled/jaffle_shop/models/staging/schema.yml/accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        payment_method as value_field,\n        count(*) as n_records\n\n    from `your-gcp-project`.`jaffle_shop`.`stg_payments`\n    group by payment_method\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'credit_card','coupon','bank_transfer','gift_card'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "payment_method", "file_key_name": "models.stg_payments", "attached_node": "model.jaffle_shop.stg_payments"}}, "sources": {}, "macros": {"macro.jaffle_shop.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "jaffle_shop", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "unique_id": "macro.jaffle_shop.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446634.992193, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446634.992533, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446634.992747, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446634.9930098, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    table_options as (\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            JSON_VALUE(option_value) as table_comment\n\n        from {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }}\n        where option_name = 'description'\n    ),\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n        table_options.table_comment,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join table_options using (relation_id)\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446634.996751, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.001409, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.001781, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.002124, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.002381, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n    as (\n      {{ compiled_code }}\n    );\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0039291, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.004172, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0046349, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.004763, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0049531, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0050938, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.005236, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.005378, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.005557, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.005835, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.005989, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.00614, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0065331, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.006896, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0075252, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.007689, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0079591, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.008319, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.008477, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.009282, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.009821, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.010462, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.013639, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.013937, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.015083, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.017171, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by.field), source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.017478, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(is_time_ingestion_partitioning, temporary, relation, compiled_code, language='sql') %}\n  {% if is_time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% endif %}\n  {% if is_time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_ingestion_time_partitioned_table_as_sql(temporary, relation, compiled_code)) %}\n    {{ return(bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query", "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.018091, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.018709, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ declare_dbt_max_partition(this, partition_by, compiled_code, language) +\n           bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, compiled_code, language)\n        }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(dest_columns) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.022648, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.023044, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.023196, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.023322, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        _PARTITIONTIME,\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.024159, "supported_languages": null}, "macro.dbt_bigquery.build_partition_time_exp": {"name": "build_partition_time_exp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.build_partition_time_exp", "macro_sql": "{% macro build_partition_time_exp(partition_by) %}\n  {% if partition_by.data_type == 'timestamp' %}\n    {% set partition_value = partition_by.field %}\n  {% else %}\n    {% set partition_value = 'timestamp(' + partition_by.field + ')' %}\n  {% endif %}\n  {{ return({'value': partition_value, 'field': partition_by.field}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0247412, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.025065, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.027352, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.028469, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0289989, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {%- if partition_by.time_ingestion_partitioning -%}\n          {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, True) }}\n          {%- else -%}\n          {{sql}}\n          {%- endif -%}\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- Because we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"dynamic\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.029748, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {# We run temp table creation in a separated script to move to partitions copy #}\n  {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n    {{ declare_dbt_max_partition(this, partition_by, sql, 'sql') +\n     bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, sql, 'sql')\n  }}\n  {%- endcall %}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt_bigquery.bq_create_table_as", "macro.elementary.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.030447, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        _PARTITIONTIME,\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_by.render_wrapped() }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.031553, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_time_exp, sql, is_nested) %}\n\n  select {{ partition_time_exp['value'] }} as _partitiontime, * EXCEPT({{ partition_time_exp['field'] }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.033334, "supported_languages": null}, "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql": {"name": "create_ingestion_time_partitioned_table_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql", "macro_sql": "{% macro create_ingestion_time_partitioned_table_as_sql(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n  {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  {% set ingestion_time_partition_config_raw = fromjson(tojson(raw_partition_by)) %}\n  {% do ingestion_time_partition_config_raw.update({'field':'_PARTITIONTIME'}) %}\n\n  {%- set ingestion_time_partition_config = adapter.parse_partition_by(ingestion_time_partition_config_raw) -%}\n\n  create or replace table {{ relation }} ({{table_dest_columns_csv}})\n  {{ partition_by(ingestion_time_partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.03427, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.034667, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.034913, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set partition_by = config.get('partition_by', none) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} (_partitiontime, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0353448, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.035563, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0356648, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.035881, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.036042, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.036216, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.036289, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0363898, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.036572, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.036978, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0372071, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.037588, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0380669, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.038233, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0383968, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0386848, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.03885, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.038979, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.039516, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.039694, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0399811, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0401878, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.040802, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.04104, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.041271, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.041501, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.042521, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0427089, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.042853, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0429928, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0431309, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.04349, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.043784, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0441442, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.044561, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.044831, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.048067, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.048235, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0484521, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0491478, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0493052, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.049472, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0508292, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.052165, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.05569, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.055965, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.056132, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0562181, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.056361, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.056472, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.056673, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.057528, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0577128, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.057956, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.058368, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.063948, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.065892, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.066327, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.066632, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.066988, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.067353, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.068809, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.069335, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.069983, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.070216, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.07092, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0762649, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.077871, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0781262, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0790951, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.079356, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.079992, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.080597, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.081429, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0816598, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.081843, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.082127, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.082317, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.082603, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.082783, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.083043, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0832262, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.08337, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.083641, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.088435, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.093305, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0945039, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.09568, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.09653, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0974689, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.097586, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0981, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.098264, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.098397, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(model['columns'])) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.0994308, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.099793, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.100131, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.102636, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1034591, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1036422, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.104058, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.104699, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1048808, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select\n    {% for column in model['columns'] %}\n      {{ column }}{{ \", \" if not loop.last }}\n    {% endfor %}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1051269, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.107578, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.107872, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.108093, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.10954, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.109946, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.110105, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.11028, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.110689, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.113796, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.118138, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.119006, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.119236, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1197, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.119887, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1200142, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.120151, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.120264, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.120416, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1205308, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1209888, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.121173, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.12242, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.122829, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.123203, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.123709, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.123967, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1242518, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.124637, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.124886, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.125228, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.125522, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.125765, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1263092, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.127727, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1283488, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1286411, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.130304, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.131453, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.132185, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.132415, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.13264, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.132716, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1330318, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.133198, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1334379, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1335602, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.133805, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.133908, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.134238, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.134398, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1346161, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1346922, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.134948, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1351502, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.135435, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.135631, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.136215, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1366122, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.136937, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1371021, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.137383, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.13752, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.137769, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.137923, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.138159, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.138318, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.138561, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.138665, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.138946, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.139084, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.139315, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1394172, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1402829, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1404412, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.140658, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.140804, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.140959, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.141106, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.141268, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.14144, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.141599, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.141748, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.141909, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.142051, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.142206, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1423512, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1426299, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.14276, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.143001, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.143102, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.143428, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.143692, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1438348, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.144327, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.14466, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.144872, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1451352, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.145262, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1456242, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.145857, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.146126, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.146256, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1466088, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.146789, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.14695, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.147129, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.147597, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.147744, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.147881, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.147986, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.148149, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.148222, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.148385, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.148608, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.149038, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.149169, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.149327, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.149715, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.152693, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.152857, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.153067, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.153353, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.153592, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.15391, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.15409, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.154297, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.154476, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.154635, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1548312, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.155107, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.155415, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.155967, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.156192, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.156332, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.156526, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.156928, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.157334, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.158936, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.15905, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.159214, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.159328, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.159656, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.159841, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.159939, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.160157, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.160345, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.160564, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.160748, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.160969, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.161688, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.161876, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.162113, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.162344, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.163438, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1640792, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.164242, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.164439, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.164609, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.164872, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.165347, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.166713, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.166965, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.167146, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1672971, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.16747, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.167716, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.167917, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.168202, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.168386, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.168544, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1704571, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.170686, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.170985, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.171159, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql) %}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1712651, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.171438, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      cast(null as {{ col['data_type'] }}) as {{ col['name'] }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.172056, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1723578, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.172535, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1728818, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.173113, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.173697, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.17395, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1748312, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1764119, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.176576, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1773949, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.177873, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.178445, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.178915, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.178988, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1794748, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.17971, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.179986, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1802628, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.180606, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.181083, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.18153, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.182168, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.182475, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.182784, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.18381, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.18488, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.185712, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.186764, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.187417, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.187756, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.188447, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.18928, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.189718, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1901639, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.190749, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1912189, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1917381, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.192106, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1925561, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.193013, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1936069, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.19429, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.194838, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.195175, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1955662, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.195907, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1965241, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1973171, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.198168, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.1990368, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.199748, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.200605, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.201081, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.201372, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2044978, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.206039, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.206306, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.206466, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.206896, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.207171, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.207367, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2076218, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.207788, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.208394, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.209193, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.209862, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.210433, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2106612, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2110112, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.211318, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.211652, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.212276, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2131681, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.213965, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.214369, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2145548, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.21505, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.215689, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.216512, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.216903, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2171788, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2183092, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.219734, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.220963, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.222514, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.222802, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.222938, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.225751, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.229197, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2295449, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2298188, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.230573, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.230792, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2309918, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.23118, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2313411, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.231509, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.231897, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.232141, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.232506, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.233044, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.233375, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2337039, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2352371, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.235601, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.23652, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.237014, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.238053, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.239546, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2405708, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2413812, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.241833, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.242548, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.243896, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.244342, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.244787, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.244971, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.245345, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.245922, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.246359, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.246995, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2473578, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.247493, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.247626, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.24811, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.248898, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.249901, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.250171, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.250721, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.25151, "supported_languages": null}, "macro.elementary.query_test_result_rows": {"name": "query_test_result_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.query_test_result_rows", "macro_sql": "{% macro query_test_result_rows(sample_limit=none) %}\n  {% set query %}\n    with test_results as (\n      {{ sql }}\n    )\n    select * from test_results {% if sample_limit is not none %} limit {{ sample_limit }} {% endif %}\n  {% endset %}\n  {% do return(elementary.agate_to_dicts(elementary.run_query(query))) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.agate_to_dicts", "macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2703109, "supported_languages": null}, "macro.elementary.cache_elementary_test_results_rows": {"name": "cache_elementary_test_results_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.cache_elementary_test_results_rows", "macro_sql": "{% macro cache_elementary_test_results_rows(elementary_test_results_rows) %}\n  {% do elementary.get_cache(\"elementary_test_results\").update({model.unique_id: elementary_test_results_rows}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_cache"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2705102, "supported_languages": null}, "macro.elementary.handle_anomaly_test": {"name": "handle_anomaly_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.handle_anomaly_test", "macro_sql": "{% macro handle_anomaly_test(flattened_test) %}\n  {% set metrics_tables_cache = elementary.get_cache(\"tables\").get(\"metrics\") %}\n  {% set metrics_table = elementary.get_elementary_test_table(elementary.get_elementary_test_table_name(), 'metrics') %}\n  {% if metrics_table %}\n    {% do metrics_tables_cache.append(metrics_table) %}\n  {% endif %}\n\n  {% set anomaly_scores_groups_rows = {} %}\n  {% set anomaly_scores_rows = elementary.query_test_result_rows() %}\n  {% for anomaly_scores_row in anomaly_scores_rows %}\n    {% set anomaly_scores_group = (anomaly_scores_row.full_table_name, anomaly_scores_row.column_name, anomaly_scores_row.metric_name) %}\n    {% do anomaly_scores_groups_rows.setdefault(anomaly_scores_group, []) %}\n    {% do anomaly_scores_groups_rows[anomaly_scores_group].append(anomaly_scores_row) %}\n  {% endfor %}\n\n  {% set elementary_test_results_rows = [] %}\n  {% for anomaly_scores_group, anomaly_scores_rows in anomaly_scores_groups_rows.items() %}\n    {% do elementary.debug_log(\"Found {} anomaly scores for group {}.\".format(anomaly_scores_rows | length, anomaly_scores_group)) %}\n    {% do elementary_test_results_rows.append(elementary.get_anomaly_test_result_row(flattened_test, anomaly_scores_rows)) %}\n  {% endfor %}\n  {% do elementary.cache_elementary_test_results_rows(elementary_test_results_rows) %}\n\n  {% do context.update({\"sql\": elementary.get_anomaly_query(flattened_test)}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_cache", "macro.elementary.get_elementary_test_table", "macro.elementary.get_elementary_test_table_name", "macro.elementary.query_test_result_rows", "macro.elementary.debug_log", "macro.elementary.get_anomaly_test_result_row", "macro.elementary.cache_elementary_test_results_rows", "macro.elementary.get_anomaly_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.27177, "supported_languages": null}, "macro.elementary.handle_schema_changes_test": {"name": "handle_schema_changes_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.handle_schema_changes_test", "macro_sql": "{% macro handle_schema_changes_test(flattened_test) %}\n  {% set schema_snapshots_tables_cache = elementary.get_cache(\"tables\").get(\"schema_snapshots\") %}\n  {% set schema_snapshots_table = elementary.get_elementary_test_table(elementary.get_elementary_test_table_name(), 'schema_changes') %}\n  {% if schema_snapshots_table %}\n    {% do schema_snapshots_tables_cache.append(schema_snapshots_table) %}\n  {% endif %}\n\n  {% set elementary_test_results_rows = [] %}\n  {% set schema_changes_rows = elementary.query_test_result_rows() %}\n  {% for schema_changes_row in schema_changes_rows %}\n    {% do elementary_test_results_rows.append(elementary.get_schema_changes_test_result_row(flattened_test, schema_changes_row, schema_changes_rows)) %}\n  {% endfor %}\n  {% do elementary.cache_elementary_test_results_rows(elementary_test_results_rows) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_cache", "macro.elementary.get_elementary_test_table", "macro.elementary.get_elementary_test_table_name", "macro.elementary.query_test_result_rows", "macro.elementary.get_schema_changes_test_result_row", "macro.elementary.cache_elementary_test_results_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.272542, "supported_languages": null}, "macro.elementary.handle_dbt_test": {"name": "handle_dbt_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.handle_dbt_test", "macro_sql": "{% macro handle_dbt_test(flattened_test) %}\n  {% set result_rows = elementary.query_test_result_rows(sample_limit=elementary.get_config_var('test_sample_row_count')) %}\n  {% set elementary_test_results_row = elementary.get_dbt_test_result_row(flattened_test, result_rows) %}\n  {% do elementary.cache_elementary_test_results_rows([elementary_test_results_row]) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.query_test_result_rows", "macro.elementary.get_config_var", "macro.elementary.get_dbt_test_result_row", "macro.elementary.cache_elementary_test_results_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.272883, "supported_languages": null}, "macro.elementary.get_elementary_test_type": {"name": "get_elementary_test_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.get_elementary_test_type", "macro_sql": "{% macro get_elementary_test_type(flattened_test) %}\n  {% if flattened_test.test_namespace == \"elementary\" %}\n    {% if flattened_test.short_name.endswith(\"anomalies\") %}\n      {% do return(\"anomaly_detection\") %}\n    {% elif flattened_test.short_name.startswith('schema_changes') %}\n      {% do return(\"schema_change\") %}\n    {% endif %}\n  {% endif %}\n  {% do return(\"dbt_test\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.273319, "supported_languages": null}, "macro.elementary.materialize_test": {"name": "materialize_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.materialize_test", "macro_sql": "{% macro materialize_test() %}\n  {% if not elementary.is_elementary_enabled() %}\n    {% do return(none) %}\n  {% endif %}\n\n  {% set flattened_test = elementary.flatten_test(model) %}\n  {% set test_type = elementary.get_elementary_test_type(flattened_test) %}\n  {% set test_type_handler_map = {\n    \"anomaly_detection\": elementary.handle_anomaly_test,\n    \"schema_change\": elementary.handle_schema_changes_test,\n    \"dbt_test\": elementary.handle_dbt_test\n  } %}\n  {% set test_type_handler = test_type_handler_map.get(test_type) %}\n  {% if not test_type_handler %}\n    {% do exceptions.raise_compiler_error(\"Unknown test type: {}\".format(test_type)) %}\n  {% endif %}\n  {% do test_type_handler(flattened_test) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.is_elementary_enabled", "macro.elementary.flatten_test", "macro.elementary.get_elementary_test_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.274038, "supported_languages": null}, "macro.elementary.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.materialization_test_default", "macro_sql": "{% materialization test, default %}\n  {% do elementary.materialize_test() %}\n  {{ return(dbt.materialization_test_default()) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.elementary.materialize_test", "macro.dbt.materialization_test_default"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.274229, "supported_languages": ["sql"]}, "macro.elementary.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.materialization_test_snowflake", "macro_sql": "{% materialization test, adapter=\"snowflake\" %}\n  {% do elementary.materialize_test() %}\n  {%- if dbt.materialization_test_snowflake -%}\n    {{ return(dbt.materialization_test_snowflake()) }}\n  {%- else -%}\n    {{ return(dbt.materialization_test_default()) }}\n  {%- endif -%}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.elementary.materialize_test", "macro.elementary.materialization_test_snowflake", "macro.dbt.materialization_test_default"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.27453, "supported_languages": ["sql"]}, "macro.elementary.get_anomaly_test_result_row": {"name": "get_anomaly_test_result_row", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.get_anomaly_test_result_row", "macro_sql": "{% macro get_anomaly_test_result_row(flattened_test, anomaly_scores_rows) %}\n  {% set latest_row = anomaly_scores_rows[-1] %}\n  {% set full_table_name = elementary.insensitive_get_dict_value(latest_row, 'full_table_name') %}\n  {% set test_params = elementary.insensitive_get_dict_value(flattened_test, 'test_params') %}\n  {% set sensitivity = elementary.insensitive_get_dict_value(test_params, 'sensitivity') or elementary.get_config_var('anomaly_sensitivity') %}\n  {% set backfill_days = elementary.insensitive_get_dict_value(test_params, 'backfill_days') or elementary.get_config_var('backfill_days') %}\n  {% set timestamp_column = elementary.insensitive_get_dict_value(test_params, 'timestamp_column') %}\n  {% set parent_model_unique_id = elementary.insensitive_get_dict_value(flattened_test, 'parent_model_unique_id') %}\n  {% if not timestamp_column %}\n    {% set parent_model_node = elementary.get_node(parent_model_unique_id) %}\n    {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, parent_model_node) %}\n  {% endif %}\n  {% do test_params.update({'sensitivity': sensitivity, 'timestamp_column': timestamp_column, 'backfill_days': backfill_days}) %}\n  {% set column_name = elementary.insensitive_get_dict_value(latest_row, 'column_name') %}\n  {% set metric_name = elementary.insensitive_get_dict_value(latest_row, 'metric_name') %}\n  {% set backfill_days = elementary.insensitive_get_dict_value(test_params, 'backfill_days') %}\n  {% set backfill_period = \"'-\" ~ backfill_days ~ \"'\" %}\n  {% set test_unique_id = elementary.insensitive_get_dict_value(latest_row, 'test_unique_id') %}\n  {% set has_anomaly_score = elementary.insensitive_get_dict_value(latest_row, 'anomaly_score') is not none %}\n  {% if not has_anomaly_score %}\n    {% do elementary.edr_log(\"Not enough data to calculate anomaly scores on `{}`\".format(test_unique_id)) %}\n  {% endif %}\n  {%- set test_results_query -%}\n      select * from ({{ sql }}) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper({{ elementary.const_as_string(full_table_name) }}) and\n        metric_name = {{ elementary.const_as_string(metric_name) }}\n        {%- if column_name %}\n          and upper(column_name) = upper({{ elementary.const_as_string(column_name) }})\n        {%- endif %}\n  {%- endset -%}\n  {% set test_results_description %}\n      {% if has_anomaly_score %}\n          {{ elementary.insensitive_get_dict_value(latest_row, 'anomaly_description') }}\n      {% else %}\n          Not enough data to calculate anomaly score.\n      {% endif %}\n  {% endset %}\n  {% set failures = namespace(data=0) %}\n  {% set filtered_anomaly_scores_rows = [] %}\n  {% for row in anomaly_scores_rows %}\n    {% if row.anomaly_score is not none %}\n      {% do filtered_anomaly_scores_rows.append(row) %}\n      {% if row.is_anomalous %}\n        {% set failures.data = failures.data + 1 %}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set test_result_dict = {\n      'id': elementary.insensitive_get_dict_value(latest_row, 'id'),\n      'data_issue_id': elementary.insensitive_get_dict_value(latest_row, 'metric_id'),\n      'model_unique_id': parent_model_unique_id,\n      'column_name': column_name,\n      'test_type': 'anomaly_detection',\n      'test_sub_type': metric_name,\n      'test_results_description': test_results_description,\n      'other': elementary.insensitive_get_dict_value(latest_row, 'anomalous_value'),\n      'test_results_query': test_results_query,\n      'test_params': test_params,\n      'result_rows': filtered_anomaly_scores_rows,\n      'failures': failures.data\n  } %}\n  {% set elementary_test_row = elementary.get_dbt_test_result_row(flattened_test) %}\n  {% do elementary_test_row.update(test_result_dict) %}\n  {% do return(elementary_test_row) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.insensitive_get_dict_value", "macro.elementary.get_config_var", "macro.elementary.get_node", "macro.elementary.get_timestamp_column", "macro.elementary.edr_log", "macro.elementary.const_as_string", "macro.elementary.get_dbt_test_result_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.277666, "supported_languages": null}, "macro.elementary.get_schema_changes_test_result_row": {"name": "get_schema_changes_test_result_row", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.get_schema_changes_test_result_row", "macro_sql": "{% macro get_schema_changes_test_result_row(flattened_test, schema_changes_row, schema_changes_rows) %}\n  {% set elementary_test_row = elementary.get_dbt_test_result_row(flattened_test, schema_changes_rows) %}\n  {% do elementary_test_row.update(schema_changes_row) %}\n  {% do return(elementary_test_row) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_dbt_test_result_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.277969, "supported_languages": null}, "macro.elementary.get_dbt_test_result_row": {"name": "get_dbt_test_result_row", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/materializations/tests/test.sql", "original_file_path": "macros/edr/materializations/tests/test.sql", "unique_id": "macro.elementary.get_dbt_test_result_row", "macro_sql": "{% macro get_dbt_test_result_row(flattened_test, result_rows=none) %}\n    {% if not result_rows %}\n      {% set result_rows = [] %}\n    {% endif %}\n\n    {% set test_execution_id = elementary.get_node_execution_id(flattened_test) %}\n    {% set parent_model_unique_id = elementary.insensitive_get_dict_value(flattened_test, 'parent_model_unique_id') %}\n    {% set parent_model = elementary.get_node(parent_model_unique_id) %}\n    {% set parent_model_name = elementary.get_table_name_from_node(parent_model) %}\n    {% set test_result_dict = {\n        'id': test_execution_id,\n        'data_issue_id': none,\n        'test_execution_id': test_execution_id,\n        'test_unique_id': elementary.insensitive_get_dict_value(flattened_test, 'unique_id'),\n        'model_unique_id': parent_model_unique_id,\n        'detected_at': elementary.insensitive_get_dict_value(flattened_test, 'generated_at'),\n        'database_name': elementary.insensitive_get_dict_value(flattened_test, 'database_name'),\n        'schema_name': elementary.insensitive_get_dict_value(flattened_test, 'schema_name'),\n        'table_name': parent_model_name,\n        'column_name': elementary.insensitive_get_dict_value(flattened_test, 'test_column_name'),\n        'test_type': elementary.get_elementary_test_type(flattened_test),\n        'test_sub_type': elementary.insensitive_get_dict_value(flattened_test, 'type'),\n        'other': none,\n        'owners': elementary.insensitive_get_dict_value(flattened_test, 'model_owners'),\n        'tags': elementary.insensitive_get_dict_value(flattened_test, 'model_tags') + elementary.insensitive_get_dict_value(flattened_test, 'tags'),\n        'test_results_query': elementary.get_compiled_code(flattened_test),\n        'test_name': elementary.insensitive_get_dict_value(flattened_test, 'name'),\n        'test_params': elementary.insensitive_get_dict_value(flattened_test, 'test_params'),\n        'severity': elementary.insensitive_get_dict_value(flattened_test, 'severity'),\n        'test_short_name': elementary.insensitive_get_dict_value(flattened_test, 'short_name'),\n        'test_alias': elementary.insensitive_get_dict_value(flattened_test, 'alias'),\n        'result_rows': result_rows\n    }%}\n    {% do return(test_result_dict) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_node_execution_id", "macro.elementary.insensitive_get_dict_value", "macro.elementary.get_node", "macro.elementary.get_table_name_from_node", "macro.elementary.get_elementary_test_type", "macro.elementary.get_compiled_code"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.279725, "supported_languages": null}, "macro.elementary.test_schema_changes_from_baseline": {"name": "test_schema_changes_from_baseline", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_schema_changes_from_baseline.sql", "original_file_path": "macros/edr/tests/test_schema_changes_from_baseline.sql", "unique_id": "macro.elementary.test_schema_changes_from_baseline", "macro_sql": "{% test schema_changes_from_baseline(model, fail_on_added=False, enforce_types=False) %}\n    -- depends_on: {{ ref('schema_columns_snapshot') }}\n    -- depends_on: {{ ref('filtered_information_schema_columns') }}\n\n    {%- if execute and flags.WHICH in ['test', 'build'] %}\n        {% set test_table_name = elementary.get_elementary_test_table_name() %}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n\n        {# Get baseline and store it in a table #}\n        {% set baseline_columns = elementary.get_model_baseline_columns(model, enforce_types=enforce_types) %}\n        {% set baseline_table_relation = elementary.create_model_baseline_table(baseline_columns, database_name, schema_name, test_table_name) %}\n\n        {% set full_table_name = elementary.relation_to_full_name(model) %}\n        {% set changes_from_baseline_query = elementary.get_column_changes_from_baseline_query(full_table_name, baseline_table_relation, include_added=fail_on_added) %}\n        {{ changes_from_baseline_query }}\n    {% else %}\n        {# test must run an sql query #}\n        {{ elementary.no_results_query() }}\n    {% endif %}\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.get_elementary_test_table_name", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.get_model_baseline_columns", "macro.elementary.create_model_baseline_table", "macro.elementary.relation_to_full_name", "macro.elementary.get_column_changes_from_baseline_query", "macro.elementary.no_results_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.280952, "supported_languages": null}, "macro.elementary.test_freshness_anomalies": {"name": "test_freshness_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_freshness_anomalies.sql", "original_file_path": "macros/edr/tests/test_freshness_anomalies.sql", "unique_id": "macro.elementary.test_freshness_anomalies", "macro_sql": "{% test freshness_anomalies(model, timestamp_column, sensitivity, backfill_days, where_expression, time_bucket) %}\n  {{ elementary.test_table_anomalies(\n      model=model,\n      table_anomalies=[\"freshness\"],\n      freshness_column=none,\n      timestamp_column=timestamp_column,\n      sensitivity=sensitivity,\n      backfill_days=backfill_days,\n      where_expression=where_expression,\n      time_bucket=time_bucket\n    )\n  }}\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.test_table_anomalies"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.281365, "supported_languages": null}, "macro.elementary.test_all_columns_anomalies": {"name": "test_all_columns_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_all_columns_anomalies.sql", "original_file_path": "macros/edr/tests/test_all_columns_anomalies.sql", "unique_id": "macro.elementary.test_all_columns_anomalies", "macro_sql": "{% test all_columns_anomalies(model, column_anomalies, exclude_prefix, exclude_regexp, timestamp_column, sensitivity, backfill_days, where_expression, time_bucket) %}\n    -- depends_on: {{ ref('monitors_runs') }}\n    -- depends_on: {{ ref('data_monitoring_metrics') }}\n    -- depends_on: {{ ref('alerts_anomaly_detection') }}\n    -- depends_on: {{ ref('metrics_anomaly_score') }}\n    -- depends_on: {{ ref('dbt_run_results') }}\n    {%- if execute and flags.WHICH in ['test', 'build'] %}\n        {% if not time_bucket %}\n          {% set time_bucket = elementary.get_default_time_bucket() %}\n        {% endif %}\n\n        {%- set test_table_name = elementary.get_elementary_test_table_name() %}\n        {{- elementary.debug_log('collecting metrics for test: ' ~ test_table_name) }}\n        {#- creates temp relation for test metrics -#}\n        {%- set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n        {%- set empty_table_query = elementary.empty_data_monitoring_metrics() %}\n        {% set temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'metrics', empty_table_query) %}\n\n        {#- get all columns configuration -#}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {%- if not model_relation %}\n            {{ exceptions.raise_compiler_error(\"Unable to find table `{}`\".format(full_table_name)) }}\n        {%- endif %}\n\n        {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n        {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, model_graph_node) %}\n\n        {% set metric_properties = elementary.construct_metric_properties_dict(timestamp_column=timestamp_column,\n                                                                               where_expression=where_expression,\n                                                                               time_bucket=time_bucket) %}\n\n\n\n\n        {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, metric_properties.timestamp_column) %}\n        {{ elementary.debug_log('timestamp_column - ' ~ metric_properties.timestamp_column) }}\n        {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n        {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, metric_properties.timestamp_column, timestamp_column_data_type) %}\n        {{- elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n        {% if metric_properties.timestamp_column and not is_timestamp %}\n          {% do exceptions.raise_compiler_error(\"Column `{}` is not a timestamp.\".format(metric_properties.timestamp_column)) %}\n        {% endif %}\n\n        {%- set column_objs_and_monitors = elementary.get_all_column_obj_and_monitors(model_relation, column_anomalies) -%}\n        {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=backfill_days) %}\n        {#- execute table monitors and write to temp test table -#}\n        {%- set monitors = [] %}\n        {%- if column_objs_and_monitors | length > 0 %}\n            {{- elementary.test_log('start', full_table_name, 'all columns') }}\n            {%- for column_obj_and_monitors in column_objs_and_monitors %}\n                {%- set column_obj = column_obj_and_monitors['column'] %}\n                {%- set column_monitors = column_obj_and_monitors['monitors'] %}\n                {%- set column_name = column_obj.name -%}\n                {%- set ignore_column = elementary.should_ignore_column(column_name, exclude_regexp, exclude_prefix) -%}\n                {%- if not ignore_column -%}\n                    {%- do monitors.extend(column_monitors) -%}\n                    {%- set min_bucket_start = elementary.edr_quote(elementary.get_test_min_bucket_start(model_graph_node,\n                                                                                                     backfill_days,\n                                                                                                     column_monitors,\n                                                                                                     column_name,\n                                                                                                     metric_properties=metric_properties)) %}\n                    {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n                    {{ elementary.test_log('start', full_table_name, column_name) }}\n                    {%- set column_monitoring_query = elementary.column_monitoring_query(model_relation, min_bucket_start, column_obj, column_monitors, metric_properties) %}\n                    {%- do run_query(elementary.insert_as_select(temp_table_relation, column_monitoring_query)) -%}\n                {%- else -%}\n                    {{ elementary.debug_log('column ' ~ column_name ~ ' is excluded') }}\n                {%- endif -%}\n            {%- endfor %}\n        {%- endif %}\n        {%- set all_columns_monitors = monitors | unique | list %}\n        {#- query if there is an anomaly in recent metrics -#}\n        {%- set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=sensitivity) %}\n        {%- set anomaly_scores_query = elementary.get_anomaly_scores_query(temp_table_relation,\n                                                                           model_graph_node,\n                                                                           sensitivity,\n                                                                           backfill_days,\n                                                                           all_columns_monitors,\n                                                                           columns_only=true,\n                                                                           metric_properties=metric_properties) %}\n        {% set anomaly_scores_test_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'anomaly_scores', anomaly_scores_query) %}\n\n        {{- elementary.test_log('end', full_table_name, 'all columns') }}\n\n        {{ elementary.get_read_anomaly_scores_query() }}\n\n    {%- else %}\n\n        {#- test must run an sql query -#}\n        {{- elementary.no_results_query() }}\n\n    {%- endif %}\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.get_default_time_bucket", "macro.elementary.get_elementary_test_table_name", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.empty_data_monitoring_metrics", "macro.elementary.create_elementary_test_table", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.get_model_graph_node", "macro.elementary.get_timestamp_column", "macro.elementary.construct_metric_properties_dict", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.get_all_column_obj_and_monitors", "macro.elementary.get_test_argument", "macro.elementary.test_log", "macro.elementary.should_ignore_column", "macro.elementary.edr_quote", "macro.elementary.get_test_min_bucket_start", "macro.elementary.column_monitoring_query", "macro.elementary.run_query", "macro.elementary.insert_as_select", "macro.elementary.get_anomaly_scores_query", "macro.elementary.get_read_anomaly_scores_query", "macro.elementary.no_results_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.288099, "supported_languages": null}, "macro.elementary.should_ignore_column": {"name": "should_ignore_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_all_columns_anomalies.sql", "original_file_path": "macros/edr/tests/test_all_columns_anomalies.sql", "unique_id": "macro.elementary.should_ignore_column", "macro_sql": "\n\n{%- macro should_ignore_column(column_name, exclude_regexp, exclude_prefix) -%}\n    {%- set regex_module = modules.re -%}\n    {%- if exclude_regexp -%}\n        {%- set is_match = regex_module.match(exclude_regexp, column_name, regex_module.IGNORECASE) %}\n        {%- if is_match -%}\n            {{ return(True) }}\n        {%- endif -%}\n    {%- endif -%}\n    {% if exclude_prefix %}\n        {%- set exclude_regexp = '^' ~ exclude_prefix ~ '.*' %}\n        {%- set is_match = regex_module.match(exclude_regexp, column_name, regex_module.IGNORECASE) %}\n        {%- if is_match -%}\n            {{ return(True) }}\n        {%- endif -%}\n    {%- endif -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2887821, "supported_languages": null}, "macro.elementary.test_json_schema": {"name": "test_json_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_json_schema.sql", "original_file_path": "macros/edr/tests/test_json_schema.sql", "unique_id": "macro.elementary.test_json_schema", "macro_sql": "{% test json_schema(model, column_name, where_expression) %}\n    {{ config(fail_calc = 'fail_count') }}\n\n    {% if not execute %}\n        {% do return(none) %}\n    {% endif %}\n    {% if not elementary.column_exists_in_relation(model, column_name) %}\n        {% do exceptions.raise_compiler_error(\"Column '{}' does not exist in node '{}'!\".format(column_name, model.name)) %}\n    {% endif %}\n    {% if not kwargs %}\n        {% do exceptions.raise_compiler_error(\"A json schema must be supplied as a part of the test!\") %}\n    {% endif %}\n\n    {{ elementary.test_python(model, elementary.json_schema_python_test, {'column_name': column_name, 'json_schema': kwargs}, where_expression,\n                              packages=['jsonschema']) }}\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.column_exists_in_relation", "macro.elementary.test_python"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.290145, "supported_languages": null}, "macro.elementary.json_schema_python_test": {"name": "json_schema_python_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_json_schema.sql", "original_file_path": "macros/edr/tests/test_json_schema.sql", "unique_id": "macro.elementary.json_schema_python_test", "macro_sql": "{% macro json_schema_python_test(args) %}\nimport json\nimport jsonschema\n\ndef is_valid_json(val, json_schema):\n    try:\n        jsonschema.validate(json.loads(val), json_schema)\n        return True\n    except (json.JSONDecodeError, jsonschema.ValidationError):\n        return False\n\ndef get_column_name_in_df(df, column_name):\n    matching = [col for col in df.columns if col.lower() == column_name.lower()]\n    if len(matching) > 1:\n        # Case matters, switch to case-sensitive match\n        matching = [col for col in df.columns if col == column_name]\n\n    if len(matching) == 0:\n        raise Exception(\"No column with the name: {}\".format(col))\n    return matching[0]\n\ndef test(model_df, ref, session):\n    raw_json_schema = r\"\"\"{{ args.json_schema if args.json_schema is string else tojson(args.json_schema) }}\"\"\"\n    json_schema = json.loads(raw_json_schema)\n\n    model_df = model_df.toPandas()\n    column_name = get_column_name_in_df(model_df, \"{{ args.column_name }}\")\n    model_df[\"is_valid_json\"] = model_df[column_name].apply(lambda val: is_valid_json(val, json_schema))\n\n    return model_df[model_df.is_valid_json == False]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.290424, "supported_languages": null}, "macro.elementary.test_volume_anomalies": {"name": "test_volume_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_volume_anomalies.sql", "original_file_path": "macros/edr/tests/test_volume_anomalies.sql", "unique_id": "macro.elementary.test_volume_anomalies", "macro_sql": "{% test volume_anomalies(model, timestamp_column, sensitivity, backfill_days, where_expression, time_bucket) %}\n  {{ elementary.test_table_anomalies(\n      model=model,\n      table_anomalies=[\"row_count\"],\n      freshness_column=none,\n      timestamp_column=timestamp_column,\n      sensitivity=sensitivity,\n      backfill_days=backfill_days,\n      where_expression=where_expression,\n      time_bucket=time_bucket\n    )\n  }}\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.test_table_anomalies"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2908318, "supported_languages": null}, "macro.elementary.test_dimension_anomalies": {"name": "test_dimension_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_dimension_anomalies.sql", "original_file_path": "macros/edr/tests/test_dimension_anomalies.sql", "unique_id": "macro.elementary.test_dimension_anomalies", "macro_sql": "{% test dimension_anomalies(model, dimensions, where_expression, timestamp_column, sensitivity, backfill_days, time_bucket) %}\n    -- depends_on: {{ ref('monitors_runs') }}\n    -- depends_on: {{ ref('data_monitoring_metrics') }}\n    -- depends_on: {{ ref('alerts_anomaly_detection') }}\n    -- depends_on: {{ ref('metrics_anomaly_score') }}\n    -- depends_on: {{ ref('dbt_run_results') }}\n    {%- if execute and flags.WHICH in ['test', 'build'] %}\n        {% if not dimensions %}\n            {{ exceptions.raise_compiler_error('Dimension anomalies test must get \"dimensions\" as a parameter!') }}\n        {% endif %}\n        {% if not time_bucket %}\n          {% set time_bucket = elementary.get_default_time_bucket() %}\n        {% endif %}\n\n        {% set test_table_name = elementary.get_elementary_test_table_name() %}\n        {{ elementary.debug_log('collecting metrics for test: ' ~ test_table_name) }}\n        {#- creates temp relation for test metrics -#}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n\n        {#- get table configuration -#}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {% if not model_relation %}\n            {{ exceptions.raise_compiler_error(\"Unable to find table `{}`\".format(full_table_name)) }}\n        {% endif %}\n\n        {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n        {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, model_graph_node) %}\n\n        {% set metric_properties = elementary.construct_metric_properties_dict(timestamp_column=timestamp_column,\n                                                                               where_expression=where_expression,\n                                                                               time_bucket=time_bucket) %}\n\n\n\n        {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, metric_properties.timestamp_column) %}\n        {{ elementary.debug_log('timestamp_column - ' ~ metric_properties.timestamp_column) }}\n        {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n        {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, metric_properties.timestamp_column, timestamp_column_data_type) %}\n        {{ elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n        {% if metric_properties.timestamp_column and not is_timestamp %}\n          {% do exceptions.raise_compiler_error(\"Column `{}` is not a timestamp.\".format(metric_properties.timestamp_column)) %}\n        {% endif %}\n\n        {% set dimensions_str = elementary.join_list(dimensions, ', ') %}\n        {{ elementary.debug_log('dimensions - ' ~ dimensions) }}\n        {{ elementary.debug_log('where_expression - ' ~ metric_properties.where_expression) }}\n        {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=backfill_days) %}\n        {%- set min_bucket_start = elementary.edr_quote(elementary.get_test_min_bucket_start(model_graph_node,\n                                                                                         backfill_days,\n                                                                                         column_name=dimensions_str,\n                                                                                         metric_properties=metric_properties)) %}\n        {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n        {#- execute table monitors and write to temp test table -#}\n        {{ elementary.test_log('start', full_table_name) }}\n        {%- set dimension_monitoring_query = elementary.dimension_monitoring_query(model_relation, dimensions, min_bucket_start, metric_properties) %}\n        {{ elementary.debug_log('dimension_monitoring_query - \\n' ~ dimension_monitoring_query) }}\n\n        {% set temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'metrics', dimension_monitoring_query) %}\n\n\n        {#- calculate anomaly scores for metrics -#}\n        {%- set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=sensitivity) %}\n        {% set anomaly_scores_query = elementary.get_anomaly_scores_query(temp_table_relation,\n                                                                          model_graph_node,\n                                                                          sensitivity,\n                                                                          backfill_days,\n                                                                          ['dimension'],\n                                                                          dimensions=dimensions,\n                                                                          metric_properties=metric_properties) %}\n        {{ elementary.debug_log('dimension monitors anomaly scores query - \\n' ~ anomaly_scores_query) }}\n        {% set anomaly_scores_test_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'anomaly_scores', anomaly_scores_query) %}\n        {{ elementary.test_log('end', full_table_name) }}\n\n        {{ elementary.get_anomaly_query() }}\n\n    {% else %}\n\n        {# test must run an sql query #}\n        {{ elementary.no_results_query() }}\n\n    {% endif %}\n\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.get_default_time_bucket", "macro.elementary.get_elementary_test_table_name", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.get_model_graph_node", "macro.elementary.get_timestamp_column", "macro.elementary.construct_metric_properties_dict", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.join_list", "macro.elementary.get_test_argument", "macro.elementary.edr_quote", "macro.elementary.get_test_min_bucket_start", "macro.elementary.test_log", "macro.elementary.dimension_monitoring_query", "macro.elementary.create_elementary_test_table", "macro.elementary.get_anomaly_scores_query", "macro.elementary.get_anomaly_query", "macro.elementary.no_results_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.296663, "supported_languages": null}, "macro.elementary.test_python": {"name": "test_python", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/python.sql", "original_file_path": "macros/edr/tests/python.sql", "unique_id": "macro.elementary.test_python", "macro_sql": "{% test python(model, code_macro, macro_args, where_expression) %}\n  {{ config(fail_calc = 'fail_count') }}\n\n  {% if not execute %}\n    {% do return(none) %}\n  {% endif %}\n\n  {% if not code_macro %}\n    {% do exceptions.raise_compiler_error('A `code_macro` must be provided to a Python test.') %}\n  {% endif %}\n  {% if not macro_args %}\n    {% set macro_args = {} %}\n  {% endif %}\n\n  {% set test_args = kwargs %}\n  {% set test_node = context.model %}\n  {% set model_relation = model.quote(false, false, false) %}\n  {% set elementary_database_name, elementary_schema_name = elementary.get_package_database_and_schema() %}\n  {% set output_table = api.Relation.create(database=elementary_database_name, schema=elementary_schema_name,\n    identifier='pytest_tmp__' ~ test_node.alias).quote(false, false, false) %}\n\n  {# This affects where resources needed for python execution (e.g. stored procedures) are created.\n     By default, dbt uses the audit schema (adds _dbt__test_audit to the model's schema).\n     We prefer to change this behavior and use Elementary's database and schema instead (this also guarantees the test\n     will work for sources).\n     #}\n  {% do test_node.update({'database': elementary_database_name, 'schema': elementary_schema_name}) %}\n\n  {% do test_node.config.update(test_args) %}\n\n  {% if code_macro is string %}\n    {% set user_py_code_macro = context[code_macro] %}\n  {% else %}\n    {% set user_py_code_macro = code_macro %}\n  {% endif %}\n\n  {% if not user_py_code_macro %}\n    {% do exceptions.raise_compiler_error('Unable to find the macro `' ~ code_macro ~ '`.') %}\n  {% endif %}\n  {% set user_py_code = user_py_code_macro(macro_args) %}\n  {% set compiled_py_code = adapter.dispatch('compile_py_code', 'elementary')(model_relation, user_py_code,\n                                                                              output_table, where_expression, code_type='test') %}\n\n  {% do elementary.run_python(test_node, compiled_py_code) %}\n  select fail_count from {{ output_table }}\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.get_package_database_and_schema", "macro.elementary.bigquery__compile_py_code", "macro.elementary.run_python"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.2989771, "supported_languages": null}, "macro.elementary.test_schema_changes": {"name": "test_schema_changes", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_schema_changes.sql", "original_file_path": "macros/edr/tests/test_schema_changes.sql", "unique_id": "macro.elementary.test_schema_changes", "macro_sql": "{% test schema_changes(model) %}\n    -- depends_on: {{ ref('schema_columns_snapshot') }}\n    -- depends_on: {{ ref('filtered_information_schema_columns') }}\n\n    {%- if execute and flags.WHICH in ['test', 'build'] %}\n        {% set test_table_name = elementary.get_elementary_test_table_name() %}\n        {{ elementary.debug_log('collecting metrics for test: ' ~ test_table_name) }}\n        {# creates temp relation for schema columns info #}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n\n        {# get table configuration #}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {% if not model_relation %}\n            {{ exceptions.raise_compiler_error(\"Unable to find table `{}`\".format(full_table_name)) }}\n        {% endif %}\n\n        {#- query current schema and write to temp test table -#}\n        {{ elementary.edr_log('Started testing schema changes on:' ~ full_table_name) }}\n        {%- set column_snapshot_query = elementary.get_columns_snapshot_query(full_table_name) %}\n        {{ elementary.debug_log('column_snapshot_query - \\n' ~ column_snapshot_query) }}\n\n        {% set temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'schema_changes', column_snapshot_query) %}\n\n        {# query if there were schema changes since last execution #}\n        {% set schema_changes_alert_query = elementary.get_columns_changes_from_last_run_query(full_table_name, temp_table_relation) %}\n        {{ elementary.debug_log('schema_changes_alert_query - \\n' ~ schema_changes_alert_query) }}\n        {% set alerts_temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'schema_changes_alerts', schema_changes_alert_query) %}\n        {# return schema changes query as standard test query #}\n        select * from {{ alerts_temp_table_relation }}\n\n    {% else %}\n\n        {# test must run an sql query #}\n        {{ elementary.no_results_query() }}\n\n    {% endif %}\n\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.get_elementary_test_table_name", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.edr_log", "macro.elementary.get_columns_snapshot_query", "macro.elementary.create_elementary_test_table", "macro.elementary.get_columns_changes_from_last_run_query", "macro.elementary.no_results_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.300787, "supported_languages": null}, "macro.elementary.test_column_anomalies": {"name": "test_column_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_column_anomalies.sql", "original_file_path": "macros/edr/tests/test_column_anomalies.sql", "unique_id": "macro.elementary.test_column_anomalies", "macro_sql": "{% test column_anomalies(model, column_name, column_anomalies, timestamp_column, sensitivity, backfill_days, where_expression, time_bucket) %}\n    -- depends_on: {{ ref('monitors_runs') }}\n    -- depends_on: {{ ref('data_monitoring_metrics') }}\n    -- depends_on: {{ ref('alerts_anomaly_detection') }}\n    -- depends_on: {{ ref('metrics_anomaly_score') }}\n    -- depends_on: {{ ref('dbt_run_results') }}\n    {%- if execute and flags.WHICH in ['test', 'build'] %}\n        {% if not time_bucket %}\n          {% set time_bucket = elementary.get_default_time_bucket() %}\n        {% endif %}\n\n        {% set test_table_name = elementary.get_elementary_test_table_name() %}\n        {{ elementary.debug_log('collecting metrics for test: ' ~ test_table_name) }}\n        {#- creates temp relation for test metrics -#}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n\n        {#- get column configuration -#}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {% if not model_relation %}\n            {{ exceptions.raise_compiler_error(\"Unable to find table `{}`\".format(full_table_name)) }}\n        {% endif %}\n\n        {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n        {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, model_graph_node) %}\n\n        {% set metric_properties = elementary.construct_metric_properties_dict(timestamp_column=timestamp_column,\n                                                                               where_expression=where_expression,\n                                                                               time_bucket=time_bucket) %}\n\n        {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, metric_properties.timestamp_column) %}\n        {{ elementary.debug_log('timestamp_column - ' ~ metric_properties.timestamp_column) }}\n        {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n        {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, metric_properties.timestamp_column, timestamp_column_data_type) %}\n        {{ elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n        {% if metric_properties.timestamp_column and not is_timestamp %}\n          {% do exceptions.raise_compiler_error(\"Column `{}` is not a timestamp.\".format(metric_properties.timestamp_column)) %}\n        {% endif %}\n\n        {%- set column_obj_and_monitors = elementary.get_column_obj_and_monitors(model, column_name, column_anomalies) -%}\n        {%- if not column_obj_and_monitors -%}\n            {{ exceptions.raise_compiler_error(\"Unable to find column `{}` in `{}`\".format(column_name, full_table_name)) }}\n        {%- endif -%}\n        {%- set column_monitors = column_obj_and_monitors['monitors'] -%}\n        {%- set column_obj = column_obj_and_monitors['column'] -%}\n        {{ elementary.debug_log('column_monitors - ' ~ column_monitors) }}\n        {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=backfill_days) %}\n        {%- set min_bucket_start = elementary.edr_quote(elementary.get_test_min_bucket_start(model_graph_node,\n                                                                                         backfill_days,\n                                                                                         column_monitors,\n                                                                                         column_name,\n                                                                                         metric_properties=metric_properties)) %}\n        {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n        {#- execute table monitors and write to temp test table -#}\n        {{ elementary.test_log('start', full_table_name, column_name) }}\n        {%- set column_monitoring_query = elementary.column_monitoring_query(model_relation,\n                                                                             min_bucket_start,\n                                                                             column_obj,\n                                                                             column_monitors,\n                                                                             metric_properties) %}\n        {{ elementary.debug_log('column_monitoring_query - \\n' ~ column_monitoring_query) }}\n        {% set temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'metrics', column_monitoring_query) %}\n\n\n        {#- calculate anomaly scores for metrics -#}\n        {%- set temp_table_name = elementary.relation_to_full_name(temp_table_relation) %}\n        {%- set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=sensitivity) %}\n        {% set anomaly_scores_query = elementary.get_anomaly_scores_query(temp_table_relation,\n                                                                          model_graph_node,\n                                                                          sensitivity,\n                                                                          backfill_days,\n                                                                          column_monitors,\n                                                                          column_name,\n                                                                          metric_properties=metric_properties) %}\n        {{ elementary.debug_log('anomaly_score_query - \\n' ~ anomaly_scores_query) }}\n        {% set anomaly_scores_test_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'anomaly_scores', anomaly_scores_query) %}\n        {{ elementary.test_log('end', full_table_name, column_name) }}\n\n        {{ elementary.get_read_anomaly_scores_query() }}\n\n    {%- else %}\n\n        {#- test must run an sql query -#}\n        {{ elementary.no_results_query() }}\n\n    {%- endif %}\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.get_default_time_bucket", "macro.elementary.get_elementary_test_table_name", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.get_model_graph_node", "macro.elementary.get_timestamp_column", "macro.elementary.construct_metric_properties_dict", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.get_column_obj_and_monitors", "macro.elementary.get_test_argument", "macro.elementary.edr_quote", "macro.elementary.get_test_min_bucket_start", "macro.elementary.test_log", "macro.elementary.column_monitoring_query", "macro.elementary.create_elementary_test_table", "macro.elementary.get_anomaly_scores_query", "macro.elementary.get_read_anomaly_scores_query", "macro.elementary.no_results_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3075998, "supported_languages": null}, "macro.elementary.test_event_freshness_anomalies": {"name": "test_event_freshness_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_event_freshness_anomalies.sql", "original_file_path": "macros/edr/tests/test_event_freshness_anomalies.sql", "unique_id": "macro.elementary.test_event_freshness_anomalies", "macro_sql": "{% test event_freshness_anomalies(model, event_timestamp_column, update_timestamp_column, sensitivity, backfill_days, where_expression, time_bucket) %}\n  {% if execute %}\n    {%- if not event_timestamp_column -%}\n      {%- do exceptions.raise_compiler_error('event_timestamp_column must be specified for the event freshness test!') -%}\n    {%- endif -%}\n\n    {%- set event_timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, event_timestamp_column) -%}\n    {%- if not elementary.get_is_column_timestamp(model_relation, event_timestamp_column, event_timestamp_column_data_type) -%}\n      {% do exceptions.raise_compiler_error(\"Column `{}` is not a timestamp.\".format(event_timestamp_column)) %}\n    {%- endif -%}\n  {% endif %}\n\n  {{ elementary.test_table_anomalies(\n      model=model,\n      table_anomalies=[\"event_freshness\"],\n      event_timestamp_column=event_timestamp_column,\n      timestamp_column=update_timestamp_column,\n      sensitivity=sensitivity,\n      backfill_days=backfill_days,\n      where_expression=where_expression,\n      time_bucket=time_bucket\n    )\n  }}\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.test_table_anomalies"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.308608, "supported_languages": null}, "macro.elementary.test_table_anomalies": {"name": "test_table_anomalies", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_table_anomalies.sql", "original_file_path": "macros/edr/tests/test_table_anomalies.sql", "unique_id": "macro.elementary.test_table_anomalies", "macro_sql": "{% test table_anomalies(model, table_anomalies, timestamp_column, sensitivity, backfill_days, where_expression, time_bucket, event_timestamp_column=none,freshness_column=none) %}\n    -- depends_on: {{ ref('monitors_runs') }}\n    -- depends_on: {{ ref('data_monitoring_metrics') }}\n    -- depends_on: {{ ref('alerts_anomaly_detection') }}\n    -- depends_on: {{ ref('metrics_anomaly_score') }}\n    -- depends_on: {{ ref('dbt_run_results') }}\n\n    {%- if execute and flags.WHICH in ['test', 'build'] %}\n        {% if not time_bucket %}\n          {% set time_bucket = elementary.get_default_time_bucket() %}\n        {% endif %}\n        {% set test_table_name = elementary.get_elementary_test_table_name() %}\n        {{ elementary.debug_log('collecting metrics for test: ' ~ test_table_name) }}\n        {#- creates temp relation for test metrics -#}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n\n        {#- get table configuration -#}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {% if not model_relation %}\n            {{ exceptions.raise_compiler_error(\"Unable to find table `{}`\".format(full_table_name)) }}\n        {% endif %}\n\n        {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n        {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, model_graph_node) %}\n\n        {% set metric_properties = elementary.construct_metric_properties_dict(timestamp_column=timestamp_column,\n                                                                               where_expression=where_expression,\n                                                                               time_bucket=time_bucket,\n                                                                               event_timestamp_column=event_timestamp_column,\n                                                                               freshness_column=freshness_column) %}\n\n\n        {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, metric_properties.timestamp_column) %}\n        {{ elementary.debug_log('timestamp_column - ' ~ metric_properties.timestamp_column) }}\n        {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n        {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, metric_properties.timestamp_column, timestamp_column_data_type) %}\n        {{ elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n        {% if timestamp_column and not is_timestamp %}\n          {% do exceptions.raise_compiler_error(\"Column `{}` is not a timestamp.\".format(metric_properties.timestamp_column)) %}\n        {% endif %}\n\n        {%- set table_monitors = elementary.get_final_table_monitors(table_anomalies) %}\n        {{ elementary.debug_log('table_monitors - ' ~ table_monitors) }}\n        {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=backfill_days) %}\n        {%- set min_bucket_start = elementary.edr_quote(elementary.get_test_min_bucket_start(model_graph_node,\n                                                                                         backfill_days,\n                                                                                         table_monitors,\n                                                                                         metric_properties=metric_properties)) %}\n        {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n        {#- execute table monitors and write to temp test table -#}\n        {{ elementary.test_log('start', full_table_name) }}\n        {%- set table_monitoring_query = elementary.table_monitoring_query(model_relation,\n                                                                           min_bucket_start,\n                                                                           table_monitors,\n                                                                           metric_properties=metric_properties) %}\n        {{ elementary.debug_log('table_monitoring_query - \\n' ~ table_monitoring_query) }}\n\n        {% set temp_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'metrics', table_monitoring_query) %}\n\n        {#- calculate anomaly scores for metrics -#}\n        {%- set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=sensitivity) %}\n        {% set anomaly_scores_query = elementary.get_anomaly_scores_query(temp_table_relation,\n                                                                          model_graph_node,\n                                                                          sensitivity,\n                                                                          backfill_days,\n                                                                          table_monitors,\n                                                                          metric_properties=metric_properties) %}\n        {{ elementary.debug_log('table monitors anomaly scores query - \\n' ~ anomaly_scores_query) }}\n        \n        {% set anomaly_scores_test_table_relation = elementary.create_elementary_test_table(database_name, tests_schema_name, test_table_name, 'anomaly_scores', anomaly_scores_query) %}\n        {{ elementary.test_log('end', full_table_name) }}\n\n        {{ elementary.get_read_anomaly_scores_query() }}\n\n    {% else %}\n\n        {# test must run an sql query #}\n        {{ elementary.no_results_query() }}\n\n    {% endif %}\n\n{% endtest %}", "depends_on": {"macros": ["macro.elementary.get_default_time_bucket", "macro.elementary.get_elementary_test_table_name", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.get_model_graph_node", "macro.elementary.get_timestamp_column", "macro.elementary.construct_metric_properties_dict", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.get_final_table_monitors", "macro.elementary.get_test_argument", "macro.elementary.edr_quote", "macro.elementary.get_test_min_bucket_start", "macro.elementary.test_log", "macro.elementary.table_monitoring_query", "macro.elementary.create_elementary_test_table", "macro.elementary.get_anomaly_scores_query", "macro.elementary.get_read_anomaly_scores_query", "macro.elementary.no_results_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.314378, "supported_languages": null}, "macro.elementary.get_test_unique_id": {"name": "get_test_unique_id", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_test_unique_id.sql", "original_file_path": "macros/edr/tests/test_utils/get_test_unique_id.sql", "unique_id": "macro.elementary.get_test_unique_id", "macro_sql": "{% macro get_test_unique_id() %}\n    {% set test_unique_id = model.get('unique_id') %}\n    {{ return(test_unique_id) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.314629, "supported_languages": null}, "macro.elementary.find_normalized_data_type_for_column": {"name": "find_normalized_data_type_for_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/find_normalized_data_type_for_column.sql", "original_file_path": "macros/edr/tests/test_utils/find_normalized_data_type_for_column.sql", "unique_id": "macro.elementary.find_normalized_data_type_for_column", "macro_sql": "{% macro find_normalized_data_type_for_column(model_relation, column_name) %}\n\n{% set columns_from_relation = adapter.get_columns_in_relation(model_relation) %}\n{% if columns_from_relation and columns_from_relation is iterable %}\n    {% for column_obj in columns_from_relation %}\n        {% if column_obj.column | lower == column_name | trim('\\'\\\"\\`') | lower %}\n            {{ return(elementary.normalize_data_type(column_obj.dtype)) }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n{{ return(none) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.normalize_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3153641, "supported_languages": null}, "macro.elementary.get_timestamp_column": {"name": "get_timestamp_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_timestamp_column.sql", "original_file_path": "macros/edr/tests/test_utils/get_timestamp_column.sql", "unique_id": "macro.elementary.get_timestamp_column", "macro_sql": "{% macro get_timestamp_column(timestamp_column, model_node) %}\n    {% if timestamp_column %}\n        {{ return(timestamp_column) }}\n    {% else %}\n        {% set elementary_config = elementary.get_elementary_config_from_node(model_node) %}\n        {% if elementary_config and elementary_config is mapping %}\n            {{ return(elementary_config.get('timestamp_column')) }}\n        {% endif %}\n    {% endif %}\n    {{- return(none) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_elementary_config_from_node"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3159301, "supported_languages": null}, "macro.elementary.create_elementary_test_table": {"name": "create_elementary_test_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/create_elementary_test_table.sql", "original_file_path": "macros/edr/tests/test_utils/create_elementary_test_table.sql", "unique_id": "macro.elementary.create_elementary_test_table", "macro_sql": "{% macro create_elementary_test_table(database_name, schema_name, test_name, table_type, sql_query, is_temp_table=False) %}\n    {% if execute %}\n        {% set temp_table_name = elementary.table_name_with_suffix(test_name, \"__\" ~ table_type) %}\n        {{ elementary.debug_log(table_type ~ ' table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ temp_table_name) }}\n\n        {% set _, temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                   schema=schema_name,\n                                                                   identifier=temp_table_name,\n                                                                   type='table') -%}\n        {% if is_temp_table %}\n            {% set temp_table_relation = dbt.make_temp_relation(temp_table_relation) %}\n        {% endif %}\n\n        {# Cache the test table for easy access later #}\n        {% set cache_key = \"elementary_test_table|\" ~ test_name ~ \"|\" ~ table_type %}\n        {% do elementary.set_cache(cache_key, temp_table_relation) %}\n\n        {# Create the table if it doesn't exist #}\n        {%- do elementary.create_or_replace(is_temp_table, temp_table_relation, sql_query) %}\n\n        {{ return(temp_table_relation) }}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.table_name_with_suffix", "macro.elementary.debug_log", "macro.dbt.get_or_create_relation", "macro.dbt.make_temp_relation", "macro.elementary.set_cache", "macro.elementary.create_or_replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.317209, "supported_languages": null}, "macro.elementary.create_model_baseline_table": {"name": "create_model_baseline_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/create_model_baseline_table.sql", "original_file_path": "macros/edr/tests/test_utils/create_model_baseline_table.sql", "unique_id": "macro.elementary.create_model_baseline_table", "macro_sql": "{% macro create_model_baseline_table(baseline_columns, database_name, schema_name, test_name) %}\n    {% set empty_table_query = elementary.empty_table([('column_name','string'),('data_type','string')]) %}\n    {% set baseline_table_relation = elementary.create_elementary_test_table(database_name, schema_name,\n                                                                             test_name | lower, 'schema_baseline',\n                                                                             empty_table_query, is_temp_table=False) %}\n    {% do elementary.insert_rows(baseline_table_relation, baseline_columns, should_commit=True) %}\n    {% do return(baseline_table_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table", "macro.elementary.create_elementary_test_table", "macro.elementary.insert_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.317896, "supported_languages": null}, "macro.elementary.get_model_graph_node": {"name": "get_model_graph_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_model_graph_node.sql", "original_file_path": "macros/edr/tests/test_utils/get_model_graph_node.sql", "unique_id": "macro.elementary.get_model_graph_node", "macro_sql": "{% macro get_model_graph_node(model_relation) %}\n    {% if execute %}\n        {# model here is actually the test node in the graph #}\n        {% set test_graph_node = model %}\n        {% set test_depends_on_unique_ids = test_graph_node.depends_on.nodes %}\n        {# model relation is the relation object of the model where the test is defined #}\n        {% set relation_name = model_relation.name | lower %}\n        {% set depends_on_nodes = elementary.get_nodes_by_unique_ids(test_depends_on_unique_ids) %}\n        {% if depends_on_nodes %}\n            {% for node in depends_on_nodes %}\n                {% set node_name = node.name | lower %}\n                {% set node_alias = node.get('alias', '') | lower %}\n                {% set node_identifier = node.get('identifier', '') | lower %}\n                {% if node_name == relation_name or node_alias == relation_name or node_identifier == relation_name %}\n                    {{ return(node) }}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_nodes_by_unique_ids"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.319082, "supported_languages": null}, "macro.elementary.get_test_execution_id": {"name": "get_test_execution_id", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_test_execution_id.sql", "original_file_path": "macros/edr/tests/test_utils/get_test_execution_id.sql", "unique_id": "macro.elementary.get_test_execution_id", "macro_sql": "{% macro get_test_execution_id() %}\n    {{ return(elementary.get_node_execution_id(model)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_node_execution_id"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.319263, "supported_languages": null}, "macro.elementary.run_python": {"name": "run_python", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/run_python.sql", "original_file_path": "macros/edr/tests/test_utils/run_python.sql", "unique_id": "macro.elementary.run_python", "macro_sql": "{% macro run_python(graph_node, code) %}\n  {% set macro_stack = context_macro_stack.call_stack %}\n  {% set macro_stack_copy = macro_stack.copy() %}\n  {% do macro_stack.clear() %}\n  {% do macro_stack.extend([[\"materialization\"], \"macro.dbt.statement\"]) %}\n  {% do submit_python_job(graph_node, code) %}\n  {% do macro_stack.clear() %}\n  {% do macro_stack.extend(macro_stack_copy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.319836, "supported_languages": null}, "macro.elementary.get_elementary_test_table_name": {"name": "get_elementary_test_table_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_elementary_test_table_name.sql", "original_file_path": "macros/edr/tests/test_utils/get_elementary_test_table_name.sql", "unique_id": "macro.elementary.get_elementary_test_table_name", "macro_sql": "{% macro get_elementary_test_table_name() %}\n    {% set test_node = model %}\n    {% set test_hash = test_node.unique_id.split(\".\")[-1] %}\n    {% set test_name = test_node.name %}\n    {% do return(\"test_{}_{}\".format(test_hash, test_name)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.320244, "supported_languages": null}, "macro.elementary.get_elementary_test_table": {"name": "get_elementary_test_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_elementary_test_table.sql", "original_file_path": "macros/edr/tests/test_utils/get_elementary_test_table.sql", "unique_id": "macro.elementary.get_elementary_test_table", "macro_sql": "{% macro get_elementary_test_table(test_name, table_type) %}\n    {% if execute %}\n        {% set cache_key = \"elementary_test_table|\" ~ test_name ~ \"|\" ~ table_type %}\n        {{ return(elementary.get_cache(cache_key)) }}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_cache"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.320641, "supported_languages": null}, "macro.elementary.get_anomaly_query": {"name": "get_anomaly_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "original_file_path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "unique_id": "macro.elementary.get_anomaly_query", "macro_sql": "{%- macro get_anomaly_query(flattened_test=none) -%}\n  {%- set query -%}\n    select * from ({{ elementary.get_read_anomaly_scores_query(flattened_test) }}) results\n    where is_anomalous = true\n  {%- endset -%}\n  {{- return(query) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.get_read_anomaly_scores_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.322114, "supported_languages": null}, "macro.elementary.get_read_anomaly_scores_query": {"name": "get_read_anomaly_scores_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "original_file_path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "unique_id": "macro.elementary.get_read_anomaly_scores_query", "macro_sql": "{% macro get_read_anomaly_scores_query(flattened_test=none) %}\n    {% if not flattened_test %}\n      {% set flattened_test = elementary.flatten_test(model) %}\n    {% endif %}\n\n    {% set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=flattened_test.test_params.sensitivity) %}\n    {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=flattened_test.test_params.backfill_days) %}\n    {%- set backfill_period = \"'-\" ~ backfill_days ~ \"'\" %}\n    {%- set anomaly_query -%}\n      with anomaly_scores as (\n        select\n          *,\n          {{ elementary.anomaly_detection_description() }}\n        from {{ elementary.get_elementary_test_table(elementary.get_elementary_test_table_name(), 'anomaly_scores') }}\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\n          case when\n            anomaly_score is not null and\n            {{ elementary.is_score_anomalous_condition(sensitivity) }} and\n            bucket_end >= {{ elementary.edr_timeadd('day', backfill_period, elementary.edr_quote(elementary.get_max_bucket_end())) }} and\n            training_set_size >= {{ elementary.get_config_var('min_training_set_size') }}\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      )\n\n      select\n        metric_value as value,\n        training_avg as average,\n        case when is_anomalous = TRUE then\n         lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value order by bucket_end)\n        else min_metric_value end as min_value,\n        case when is_anomalous = TRUE then\n         lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value order by bucket_end)\n        else max_metric_value end as max_value,\n        bucket_start as start_time,\n        bucket_end as end_time,\n        *\n      from anomaly_scores_with_is_anomalous\n      order by bucket_end, dimension_value\n    {%- endset -%}\n    {{- return(anomaly_query) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.flatten_test", "macro.elementary.get_test_argument", "macro.elementary.anomaly_detection_description", "macro.elementary.get_elementary_test_table", "macro.elementary.get_elementary_test_table_name", "macro.elementary.is_score_anomalous_condition", "macro.elementary.edr_timeadd", "macro.elementary.edr_quote", "macro.elementary.get_max_bucket_end", "macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.32305, "supported_languages": null}, "macro.elementary.is_score_anomalous_condition": {"name": "is_score_anomalous_condition", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "original_file_path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "unique_id": "macro.elementary.is_score_anomalous_condition", "macro_sql": "\n\n{%- macro is_score_anomalous_condition(sensitivity) -%}\n    {%- set spikes_only_metrics = ['freshness', 'event_freshness'] -%}\n\n    case when metric_name IN {{ elementary.strings_list_to_tuple(spikes_only_metrics) }} then\n            anomaly_score > {{ sensitivity }}\n         else\n            abs(anomaly_score) > {{ sensitivity }}\n         end\n{%- endmacro -%}", "depends_on": {"macros": ["macro.elementary.strings_list_to_tuple"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.323296, "supported_languages": null}, "macro.elementary.backfill_result_rows": {"name": "backfill_result_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/backfill_result_rows.sql", "original_file_path": "macros/edr/tests/test_utils/backfill_result_rows.sql", "unique_id": "macro.elementary.backfill_result_rows", "macro_sql": "{% macro backfill_result_rows() %}\n    -- depends_on: {{ ref('elementary_test_results') }}\n    {% if is_incremental() %}\n        {% do return('') %}\n    {% endif %}\n\n    {% set elementary_test_results_relation = ref(\"elementary_test_results\") %}\n    {% set result_row_exists = elementary.get_column_in_relation(elementary_test_results_relation, \"result_rows\") is not none %}\n    {% if not result_row_exists %}\n        {% do return('') %}\n    {% endif %}\n\n    {% set test_result_rows_rows = [] %}\n    {% set backfill_query %}\n        select\n        id,\n        detected_at,\n        result_rows\n        from {{ elementary_test_results_relation }}\n        where {{ elementary.edr_datediff(elementary.edr_cast_as_timestamp('detected_at'), elementary.edr_current_timestamp(), 'day') }} < {{ elementary.get_config_var(\"days_back\") }}\n        and result_rows is not null\n    {% endset %}\n    {% set test_results_with_result_rows = elementary.run_query(backfill_query) %}\n    {% for elementary_test_results_row in test_results_with_result_rows %}\n        {% set result_rows = fromjson(elementary_test_results_row.result_rows) %}\n        {% for result_row in result_rows %}\n            {% do test_result_rows_rows.append({\n                \"elementary_test_results_id\": elementary_test_results_row.id,\n                \"detected_at\": elementary_test_results_row.detected_at.strftime(elementary.get_time_format()),\n                \"result_row\": result_row\n            }) %}\n        {% endfor %}\n    {% endfor %}\n    {% do elementary.insert_rows(this, test_result_rows_rows) %}\n    {% do return('') %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.elementary.get_column_in_relation", "macro.elementary.edr_datediff", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_current_timestamp", "macro.elementary.get_config_var", "macro.elementary.run_query", "macro.elementary.get_time_format", "macro.elementary.insert_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.325334, "supported_languages": null}, "macro.elementary.snowflake__compile_py_code": {"name": "snowflake__compile_py_code", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/compile_py_code.sql", "original_file_path": "macros/edr/tests/test_utils/compile_py_code.sql", "unique_id": "macro.elementary.snowflake__compile_py_code", "macro_sql": "{% macro snowflake__compile_py_code(model, py_code, output_table, where_expression, code_type) %}\nimport pandas\nimport snowflake.snowpark\n\n{{ py_code }}\n\ndef write_output_table(session, output_df, target_relation):\n    output_df.write.mode('overwrite').save_as_table(target_relation, table_type='temporary')\n\ndef get_fail_count(test_output):\n    if isinstance(test_output, int):\n        return test_output\n    if isinstance(test_output, bool):\n        return 0 if test_output else 1\n    if isinstance(test_output, snowflake.snowpark.DataFrame):\n        return test_output.count()\n    if isinstance(test_output, pandas.DataFrame):\n        return len(test_output)\n    raise ValueError('Received invalid return value, expected either DataFrame or a boolean.')\n\ndef get_output_df(model_df, code_type, ref, session):\n    if code_type == \"test\":\n        test_output = test(model_df, ref, session)\n        fail_count = get_fail_count(test_output)\n        return session.createDataFrame([[fail_count]], ['fail_count'])\n    elif code_type == \"function\":\n        res = func(model_df, ref, session)\n        return session.createDataFrame([[res]], ['result'])\n\n    raise Exception(\"Unsupported code type: {}\".format(code_type))\n\ndef main(session):\n    ref = session.table\n    model_df = ref('{{ model }}')\n\n    {% if where_expression %}\n    model_df = model_df.filter(\"\"\"{{ where_expression }}\"\"\")\n    {% endif %}\n\n    output_df = get_output_df(model_df, '{{ code_type }}', ref, session)\n    write_output_table(session, output_df, '{{ output_table }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3265579, "supported_languages": null}, "macro.elementary.bigquery__compile_py_code": {"name": "bigquery__compile_py_code", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/compile_py_code.sql", "original_file_path": "macros/edr/tests/test_utils/compile_py_code.sql", "unique_id": "macro.elementary.bigquery__compile_py_code", "macro_sql": "{% macro bigquery__compile_py_code(model, py_code, output_table, where_expression, code_type) %}\nimport pandas\nimport pyspark.sql\n\n{{ py_code }}\n\ndef write_output_table(session, output_df, target_relation):\n    output_df.write.mode('overwrite').format('bigquery').option('writeMethod', 'direct').option('writeDisposition', 'WRITE_TRUNCATE').save(target_relation)\n\ndef get_fail_count(test_output):\n    if isinstance(test_output, int):\n        return test_output\n    if isinstance(test_output, bool):\n        return 0 if test_output else 1\n    if isinstance(test_output, pyspark.sql.DataFrame):\n        return test_output.count()\n    if isinstance(test_output, pandas.DataFrame):\n        return len(test_output)\n    raise ValueError('Received invalid return value, expected either DataFrame or a boolean.')\n\ndef get_session():\n    session = pyspark.sql.SparkSession.builder.appName('Elementary').getOrCreate()\n    session.conf.set('viewsEnabled', 'true')\n    session.conf.set('temporaryGcsBucket', '{{ target.gcs_bucket }}')\n    return session\n\ndef get_output_df(model_df, code_type, ref, session):\n    if code_type == \"test\":\n        test_output = test(model_df, ref, session)\n        fail_count = get_fail_count(test_output)\n        return session.createDataFrame([[fail_count]], ['fail_count'])\n    elif code_type == \"function\":\n        res = func(model_df, ref, session)\n        return session.createDataFrame([[res]], ['result'])\n\n    raise Exception(\"Unsupported code type: {}\".format(code_type))\n\ndef main():\n    session = get_session()\n    ref = session.read.format('bigquery').load\n    model_df = ref('{{ model }}')\n\n    {% if where_expression %}\n    model_df = model_df.filter(\"\"\"{{ where_expression }}\"\"\")\n    {% endif %}\n\n    output_df = get_output_df(model_df, '{{ code_type }}', ref, session)\n    write_output_table(session, output_df, '{{ output_table }}')\n\nmain()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.326933, "supported_languages": null}, "macro.elementary.default__compile_py_code": {"name": "default__compile_py_code", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/compile_py_code.sql", "original_file_path": "macros/edr/tests/test_utils/compile_py_code.sql", "unique_id": "macro.elementary.default__compile_py_code", "macro_sql": "{% macro default__compile_py_code(model, py_code, output_table, where_expression, code_type) %}\n  {{ exceptions.raise_compiler_error(\"Elementary's Python tests are not yet supported on %s.\" % target.type) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3271239, "supported_languages": null}, "macro.elementary.get_model_baseline_columns": {"name": "get_model_baseline_columns", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_model_baseline_columns.sql", "original_file_path": "macros/edr/tests/test_utils/get_model_baseline_columns.sql", "unique_id": "macro.elementary.get_model_baseline_columns", "macro_sql": "{% macro get_model_baseline_columns(model, enforce_types=False) %}\n    {# Get baseline columns #}\n    {% set model_relation = dbt.load_relation(model) %}\n    {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n\n    {% set baseline = [] %}\n    {% set columns_without_types = [] %}\n    {% for column in model_graph_node[\"columns\"].values() %}\n        {% if \"data_type\" in column %}\n            {% set info_schema_data_type = elementary.get_normalized_data_type(column[\"data_type\"]) %}\n        {% else %}\n            {% set info_schema_data_type = none %}\n        {% endif %}\n        {% set column_info = {\"column_name\": column[\"name\"], \"data_type\": info_schema_data_type } %}\n        {% if column_info[\"data_type\"] is none %}\n            {% do columns_without_types.append(column_info[\"column_name\"]) %}\n        {% endif %}\n        {% do baseline.append(column_info) %}\n    {% endfor %}\n    \n    {% if columns_without_types %}\n        {% if enforce_types %}\n            {% do exceptions.raise_compiler_error(\"Data type not defined for columns `{}` on model `{}` for schema change from baseline test\".format(columns_without_types, model)) %}\n        {% else %}\n            {% do elementary.edr_log(\"Warning - missing data types for columns: \" ~ columns_without_types) %}\n        {% endif %}\n    {% endif %}\n\n    {% do return(baseline) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.elementary.get_model_graph_node", "macro.elementary.get_normalized_data_type", "macro.elementary.edr_log"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3288808, "supported_languages": null}, "macro.elementary.get_elementary_tests_schema": {"name": "get_elementary_tests_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/test_utils/get_elementary_tests_schema.sql", "original_file_path": "macros/edr/tests/test_utils/get_elementary_tests_schema.sql", "unique_id": "macro.elementary.get_elementary_tests_schema", "macro_sql": "{% macro get_elementary_tests_schema(elementary_database, elementary_schema) %}\n    {% set LEGACY_TESTS_SCHEMA_SUFFIX = \"__tests\" %}\n\n    {% set cached_tests_schema_name = elementary.get_cache(\"tests_schema_name\") %}\n    {% if cached_tests_schema_name is not none %}\n        {{ return(cached_tests_schema_name) }}\n    {% endif %}\n\n    {% set tests_schema_suffix = elementary.get_config_var('tests_schema_name') %}\n    {% set tests_schema_name = elementary_schema ~ tests_schema_suffix %}\n\n    {# Backward compatibility - if a tests schema suffix is not defined, but the legacy tests schema exists in the DB,\n       then use it #}\n    {% if not tests_schema_suffix %}\n        {% set legacy_tests_schema_name = elementary_schema ~ LEGACY_TESTS_SCHEMA_SUFFIX %}\n        {% if adapter.check_schema_exists(elementary_database, legacy_tests_schema_name) %}\n            {% set tests_schema_name = legacy_tests_schema_name %}\n        {% endif %}\n    {% endif %}\n\n    {% do elementary.set_cache(\"tests_schema_name\", tests_schema_name) %}\n\n    {{ return(tests_schema_name) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_cache", "macro.elementary.get_config_var", "macro.elementary.set_cache"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3298519, "supported_languages": null}, "macro.elementary.union_metrics_query": {"name": "union_metrics_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/union_metrics_query.sql", "original_file_path": "macros/edr/tests/on_run_end/union_metrics_query.sql", "unique_id": "macro.elementary.union_metrics_query", "macro_sql": "{% macro union_metrics_query(temp_metrics_tables) %}\n    {%- if temp_metrics_tables | length > 0 %}\n        {%- set union_temp_query -%}\n            with union_temps_metrics as (\n            {%- for temp_table in temp_metrics_tables -%}\n                select * from {{ temp_table }}\n                {%- if not loop.last %} union all {% endif %}\n            {%- endfor %}\n            ),\n            metrics_with_duplicates as (\n                select *,\n                    row_number() over (partition by id order by updated_at desc) as row_number\n                from union_temps_metrics\n            )\n            select\n                id,\n                full_table_name,\n                column_name,\n                metric_name,\n                metric_value,\n                source_value,\n                bucket_start,\n                bucket_end,\n                bucket_duration_hours,\n                updated_at,\n                dimension,\n                dimension_value,\n                metric_properties\n            from metrics_with_duplicates\n            where row_number = 1\n        {%- endset %}\n        {{ return(union_temp_query) }}\n    {%- endif %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.330706, "supported_languages": null}, "macro.elementary.union_columns_snapshot_query": {"name": "union_columns_snapshot_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/union_columns_snapshot_query.sql", "original_file_path": "macros/edr/tests/on_run_end/union_columns_snapshot_query.sql", "unique_id": "macro.elementary.union_columns_snapshot_query", "macro_sql": "{% macro union_columns_snapshot_query(temp_columns_snapshot_tables) %}\n    {%- if temp_columns_snapshot_tables | length > 0 %}\n        {%- set union_temp_query -%}\n            with union_temp_columns_snapshot as (\n            {%- for temp_table in temp_columns_snapshot_tables -%}\n                select * from {{ temp_table }}\n                {%- if not loop.last %} union all {% endif %}\n            {%- endfor %}\n            ),\n            columns_snapshot_with_duplicates as (\n                select *,\n                    row_number() over (partition by column_state_id order by detected_at desc) as row_number\n                from union_temp_columns_snapshot\n            )\n            select\n                column_state_id,\n                full_column_name,\n                full_table_name,\n                column_name,\n                data_type,\n                is_new,\n                detected_at\n            from columns_snapshot_with_duplicates\n            where row_number = 1\n        {%- endset %}\n        {{ return(union_temp_query) }}\n    {%- endif %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3314838, "supported_languages": null}, "macro.elementary.handle_tests_results": {"name": "handle_tests_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "unique_id": "macro.elementary.handle_tests_results", "macro_sql": "{% macro handle_tests_results() %}\n    {{ elementary.debug_log(\"Handling test results.\") }}\n    {% set cached_elementary_test_results = elementary.get_cache(\"elementary_test_results\") %}\n    {% set store_result_rows_in_own_table = elementary.get_config_var(\"store_result_rows_in_own_table\") %}\n    {% set elementary_test_results = elementary.get_result_enriched_elementary_test_results(cached_elementary_test_results, render_result_rows=(not store_result_rows_in_own_table)) %}\n    {% if store_result_rows_in_own_table %}\n      {% set test_result_rows = elementary.pop_test_result_rows(elementary_test_results) %}\n    {% endif %}\n    {% set tables_cache = elementary.get_cache(\"tables\") %}\n    {% set test_metrics_tables = tables_cache.get(\"metrics\") %}\n    {% set test_columns_snapshot_tables = tables_cache.get(\"schema_snapshots\") %}\n    {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n    {{ elementary.merge_data_monitoring_metrics(database_name, schema_name, test_metrics_tables) }}\n    {{ elementary.merge_schema_columns_snapshot(database_name, schema_name, test_columns_snapshot_tables) }}\n    {% if elementary_test_results %}\n      {% set elementary_test_results_relation = adapter.get_relation(database=database_name, schema=schema_name, identifier='elementary_test_results') %}\n      {% do elementary.insert_rows(elementary_test_results_relation, elementary_test_results, should_commit=True) %}\n    {% endif %}\n    {% if test_result_rows %}\n      {% set test_result_rows_relation = adapter.get_relation(database=database_name, schema=schema_name, identifier='test_result_rows') %}\n      {% do elementary.insert_rows(test_result_rows_relation, test_result_rows, should_commit=True) %}\n    {% endif %}\n    {{ elementary.debug_log(\"Handled test results successfully.\") }}\n    {{ return('') }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.debug_log", "macro.elementary.get_cache", "macro.elementary.get_config_var", "macro.elementary.get_result_enriched_elementary_test_results", "macro.elementary.pop_test_result_rows", "macro.elementary.get_package_database_and_schema", "macro.elementary.merge_data_monitoring_metrics", "macro.elementary.merge_schema_columns_snapshot", "macro.elementary.insert_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.338177, "supported_languages": null}, "macro.elementary.get_result_enriched_elementary_test_results": {"name": "get_result_enriched_elementary_test_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "unique_id": "macro.elementary.get_result_enriched_elementary_test_results", "macro_sql": "{% macro get_result_enriched_elementary_test_results(cached_elementary_test_results, render_result_rows=false) %}\n  {% set elementary_test_results = [] %}\n\n  {% for result in results | selectattr('node.resource_type', '==', 'test') %}\n    {% set result = result.to_dict() %}\n    {% set elementary_test_results_rows = cached_elementary_test_results.get(result.node.unique_id) %}\n\n    {# Materializing the test failed and therefore was not added to the cache. #}\n    {% if not elementary_test_results_rows %}\n      {% set flattened_test = elementary.flatten_test(result.node) %}\n      {% set elementary_test_results_rows = [elementary.get_dbt_test_result_row(flattened_test)] %}\n    {% endif %}\n\n    {% for elementary_test_results_row in elementary_test_results_rows %}\n      {% set failures = elementary_test_results_row.get(\"failures\", result.failures) %}\n      {% set status = \"pass\" if failures == 0 else result.status %}\n      {% do elementary_test_results_row.update({'status': status, 'failures': failures, 'invocation_id': invocation_id}) %}\n      {% do elementary_test_results_row.setdefault('test_results_description', result.message) %}\n      {% if render_result_rows %}\n        {% do elementary_test_results_row.update({\"result_rows\": elementary.render_result_rows(elementary_test_results_row.result_rows)}) %}\n      {% endif %}\n      {% do elementary_test_results.append(elementary_test_results_row) %}\n    {% endfor %}\n  {% endfor %}\n\n  {% do return(elementary_test_results) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.flatten_test", "macro.elementary.get_dbt_test_result_row", "macro.elementary.render_result_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3395681, "supported_languages": null}, "macro.elementary.merge_data_monitoring_metrics": {"name": "merge_data_monitoring_metrics", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "unique_id": "macro.elementary.merge_data_monitoring_metrics", "macro_sql": "{% macro merge_data_monitoring_metrics(database_name, schema_name, test_metrics_tables) %}\n    {%- if test_metrics_tables %}\n        {%- set test_tables_union_query = elementary.union_metrics_query(test_metrics_tables) -%}\n        {%- set target_relation = adapter.get_relation(database=database_name, schema=schema_name, identifier='data_monitoring_metrics') -%}\n        {% if not target_relation %}\n          {% do exceptions.raise_compiler_error(\"Couldn't find Elementary's models. Please run `dbt run -s elementary`.\") %}\n        {% endif %}\n        {%- set temp_relation = dbt.make_temp_relation(target_relation) -%}\n        {%- if test_tables_union_query %}\n            {{ elementary.debug_log('Running union query from test tables to ' ~ temp_relation.identifier) }}\n            {%- do run_query(dbt.create_table_as(True, temp_relation, test_tables_union_query)) %}\n            {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n            {{ elementary.debug_log('Merging ' ~ temp_relation.identifier ~ ' to ' ~ target_relation.database ~ '.' ~ target_relation.schema ~ '.' ~ target_relation.identifier) }}\n            {%- if target_relation and temp_relation and dest_columns %}\n                {% set merge_sql = elementary.merge_sql(target_relation, temp_relation, 'id', dest_columns) %}\n                {%- do run_query(merge_sql) %}\n                {%- do adapter.commit() -%}\n                {{ elementary.debug_log('Finished merging') }}\n            {%- else %}\n                {{ elementary.debug_log('Error: could not merge to table: ' ~ target_name) }}\n            {%- endif %}\n        {%- endif %}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.union_metrics_query", "macro.dbt.make_temp_relation", "macro.elementary.debug_log", "macro.elementary.run_query", "macro.dbt.create_table_as", "macro.elementary.merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.340829, "supported_languages": null}, "macro.elementary.merge_schema_columns_snapshot": {"name": "merge_schema_columns_snapshot", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "unique_id": "macro.elementary.merge_schema_columns_snapshot", "macro_sql": "{% macro merge_schema_columns_snapshot(database_name, schema_name, test_columns_snapshot_tables) %}\n    {%- if test_columns_snapshot_tables %}\n        {%- set test_tables_union_query = elementary.union_columns_snapshot_query(test_columns_snapshot_tables) -%}\n        {%- set target_relation = adapter.get_relation(database=database_name, schema=schema_name, identifier='schema_columns_snapshot') -%}\n        {% if not target_relation %}\n          {% do exceptions.raise_compiler_error(\"Couldn't find Elementary's models. Please run `dbt run -s elementary`.\") %}\n        {% endif %}\n        {%- set temp_relation = dbt.make_temp_relation(target_relation) -%}\n        {%- if test_tables_union_query %}\n            {{ elementary.debug_log('Running union query from test tables to ' ~ temp_relation.identifier) }}\n            {%- do run_query(dbt.create_table_as(True, temp_relation, test_tables_union_query)) %}\n            {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n            {{ elementary.debug_log('Merging ' ~ temp_relation.identifier ~ ' to ' ~ target_relation.database ~ '.' ~ target_relation.schema ~ '.' ~ target_relation.identifier) }}\n            {%- if target_relation and temp_relation and dest_columns %}\n                {% set merge_sql = elementary.merge_sql(target_relation, temp_relation, 'column_state_id', dest_columns) %}\n                {%- do run_query(merge_sql) %}\n                {%- do adapter.commit() -%}\n                {{ elementary.debug_log('Finished merging') }}\n            {%- else %}\n                {{ elementary.debug_log('Error: could not merge to table: ' ~ target_name) }}\n            {%- endif %}\n        {%- endif %}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.union_columns_snapshot_query", "macro.dbt.make_temp_relation", "macro.elementary.debug_log", "macro.elementary.run_query", "macro.dbt.create_table_as", "macro.elementary.merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.342091, "supported_languages": null}, "macro.elementary.pop_test_result_rows": {"name": "pop_test_result_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "unique_id": "macro.elementary.pop_test_result_rows", "macro_sql": "{% macro pop_test_result_rows(elementary_test_results) %}\n  {% set result_rows = [] %}\n  {% for test_result in elementary_test_results %}\n    {% for result_row in test_result.pop('result_rows', []) %}\n      {% do result_rows.append({\n        \"elementary_test_results_id\": test_result.id,\n        \"detected_at\": test_result.detected_at,\n        \"result_row\": result_row\n      }) %}\n    {% endfor %}\n  {% endfor %}\n  {% do return(result_rows) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.342575, "supported_languages": null}, "macro.elementary.render_result_rows": {"name": "render_result_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "unique_id": "macro.elementary.render_result_rows", "macro_sql": "{% macro render_result_rows(test_result_rows) %}\n  {% set column_size = elementary.get_column_size() %}\n  {% if not column_size or (tojson(test_result_rows) | length) < column_size %}\n    {% do return(test_result_rows) %}\n  {% endif %}\n  {% do return(none) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_column_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.342935, "supported_languages": null}, "macro.elementary.init_elementary_graph": {"name": "init_elementary_graph", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_start/init_elementary_graph.sql", "original_file_path": "macros/edr/tests/on_run_start/init_elementary_graph.sql", "unique_id": "macro.elementary.init_elementary_graph", "macro_sql": "{% macro init_elementary_graph() %}\n  {% do graph.setdefault(\"elementary\", {\n    \"elementary_test_results\": {},\n    \"tests_schema_name\": none,\n    \"tables\": {\n      \"metrics\": [],\n      \"schema_snapshots\": []\n    }\n  }) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3432808, "supported_languages": null}, "macro.elementary.create_elementary_tests_schema": {"name": "create_elementary_tests_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/tests/on_run_start/create_elementary_tests_schema.sql", "original_file_path": "macros/edr/tests/on_run_start/create_elementary_tests_schema.sql", "unique_id": "macro.elementary.create_elementary_tests_schema", "macro_sql": "{% macro create_elementary_tests_schema() %}\n    {% if execute and flags.WHICH in ['test', 'build'] %}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set tests_schema_name = elementary.get_elementary_tests_schema(database_name, schema_name) %}\n        {%- if tests_schema_name != schema_name and not adapter.check_schema_exists(database_name, tests_schema_name) %}\n            {{ elementary.edr_log(\"Creating Elementary's tests schema.\") }}\n            {% set schema_relation = api.Relation.create(database=database_name, schema=tests_schema_name).without_identifier() %}\n            {%- do dbt.create_schema(schema_relation) %}\n            {% do adapter.commit() %}\n        {%- endif %}\n    {% endif %}\n    {{ return('') }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_package_database_and_schema", "macro.elementary.get_elementary_tests_schema", "macro.elementary.edr_log", "macro.dbt.create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.344227, "supported_languages": null}, "macro.elementary.dbt_model_run_result_description": {"name": "dbt_model_run_result_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/dbt_run_results_description.sql", "original_file_path": "macros/edr/alerts/dbt_run_results_description.sql", "unique_id": "macro.elementary.dbt_model_run_result_description", "macro_sql": "{% macro dbt_model_run_result_description() %}\n    'The model ' || name || ' returned ' || status || ' at ' || generated_at || ' on run ' || invocation_id\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.344342, "supported_languages": null}, "macro.elementary.anomaly_detection_description": {"name": "anomaly_detection_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "unique_id": "macro.elementary.anomaly_detection_description", "macro_sql": "{% macro anomaly_detection_description() %}\n    case\n        when dimension is not null then {{ elementary.dimension_metric_description() }}\n        when metric_name = 'freshness' then {{ elementary.freshness_description() }}\n        when column_name is null then {{ elementary.table_metric_description() }}\n        when column_name is not null then {{ elementary.column_metric_description() }}\n        else null\n    end as anomaly_description\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.dimension_metric_description", "macro.elementary.freshness_description", "macro.elementary.table_metric_description", "macro.elementary.column_metric_description"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.345147, "supported_languages": null}, "macro.elementary.freshness_description": {"name": "freshness_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "unique_id": "macro.elementary.freshness_description", "macro_sql": "{% macro freshness_description() %}\n    'Last update was at ' || anomalous_value || ', ' || abs(round({{ elementary.edr_cast_as_numeric('metric_value/3600') }}, 2)) || ' hours ago. Usually the table is updated within ' || abs(round({{ elementary.edr_cast_as_numeric('training_avg/3600') }}, 2)) || ' hours.'\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3453271, "supported_languages": null}, "macro.elementary.table_metric_description": {"name": "table_metric_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "unique_id": "macro.elementary.table_metric_description", "macro_sql": "{% macro table_metric_description() %}\n    'The last ' || metric_name || ' value is ' || round({{ elementary.edr_cast_as_numeric('metric_value') }}, 3) ||\n    '. The average for this metric is ' || round({{ elementary.edr_cast_as_numeric('training_avg') }}, 3) || '.'\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.345501, "supported_languages": null}, "macro.elementary.column_metric_description": {"name": "column_metric_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "unique_id": "macro.elementary.column_metric_description", "macro_sql": "{% macro column_metric_description() %}\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || round({{ elementary.edr_cast_as_numeric('metric_value') }}, 3) ||\n    '. The average for this metric is ' || round({{ elementary.edr_cast_as_numeric('training_avg') }}, 3) || '.'\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.345682, "supported_languages": null}, "macro.elementary.dimension_metric_description": {"name": "dimension_metric_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "unique_id": "macro.elementary.dimension_metric_description", "macro_sql": "{% macro dimension_metric_description() %}\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || round({{ elementary.edr_cast_as_numeric('metric_value') }}, 3) ||\n    '. The average for this metric is ' || round({{ elementary.edr_cast_as_numeric('training_avg') }}, 3) || '.'\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.345865, "supported_languages": null}, "macro.elementary.get_configured_schemas_from_graph": {"name": "get_configured_schemas_from_graph", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/configuration/get_configured_schemas_from_graph.sql", "original_file_path": "macros/edr/system/configuration/get_configured_schemas_from_graph.sql", "unique_id": "macro.elementary.get_configured_schemas_from_graph", "macro_sql": "{% macro get_configured_schemas_from_graph() %}\n    {% set configured_schemas = [] %}\n    {% if execute %}\n        {% for test_node in graph.nodes.values() | selectattr('resource_type', '==', 'test') %}\n            {% set test_metadata = test_node.get('test_metadata') %}\n            {% if test_metadata %}\n                {% set test_name = test_metadata.get('name') %}\n                {% if test_name.startswith('schema_changes') %}\n                    {% set test_depends_on_unique_ids = test_node.depends_on.nodes %}\n                    {% set depends_on_nodes = elementary.get_nodes_by_unique_ids(test_depends_on_unique_ids) %}\n                    {% for node in depends_on_nodes %}\n                        {% set node_package_name = node.get('package_name') %}\n                        {% if node_package_name != 'elementary' %}\n                            {% if adapter.check_schema_exists(node['database'], node['schema']) %}\n                                {% do configured_schemas.append((node['database'], node['schema'])) %}\n                            {% endif %}\n                        {% endif %}\n                    {% endfor %}\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n    {% endif %}\n    {{ return(configured_schemas | unique | list ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_nodes_by_unique_ids"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3476999, "supported_languages": null}, "macro.elementary.is_elementary_enabled": {"name": "is_elementary_enabled", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/configuration/is_elementary_enabled.sql", "original_file_path": "macros/edr/system/configuration/is_elementary_enabled.sql", "unique_id": "macro.elementary.is_elementary_enabled", "macro_sql": "{% macro is_elementary_enabled() %}\n  {% do return(\"elementary\" in graph) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.347884, "supported_languages": null}, "macro.elementary.on_run_start": {"name": "on_run_start", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/hooks/on_run_start.sql", "original_file_path": "macros/edr/system/hooks/on_run_start.sql", "unique_id": "macro.elementary.on_run_start", "macro_sql": "{% macro on_run_start() %}\n  {% set edr_cli_run = elementary.get_config_var('edr_cli_run') %}\n  {% if not execute or edr_cli_run %}\n    {{ return('') }}\n  {% endif %}\n\n  {% do elementary.init_elementary_graph() %}\n\n  {% if flags.WHICH in ['test', 'build'] %}\n    {{ elementary.create_elementary_tests_schema() }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.init_elementary_graph", "macro.elementary.create_elementary_tests_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.348416, "supported_languages": null}, "macro.elementary.on_run_end": {"name": "on_run_end", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/hooks/on_run_end.sql", "original_file_path": "macros/edr/system/hooks/on_run_end.sql", "unique_id": "macro.elementary.on_run_end", "macro_sql": "{% macro on_run_end() %}\n  {% set edr_cli_run = elementary.get_config_var('edr_cli_run') %}\n  {% if not execute or edr_cli_run %}\n    {{ return('') }}\n  {% endif %}\n\n  {% if not elementary.get_config_var('disable_dbt_artifacts_autoupload') %}\n    {{ elementary.upload_dbt_artifacts() }}\n  {% endif %}\n\n  {% if not elementary.get_config_var('disable_run_results') %}\n    {{ elementary.upload_run_results() }}\n  {% endif %}\n\n  {% if flags.WHICH in ['test', 'build'] and not elementary.get_config_var('disable_tests_results') %}\n    {{ elementary.handle_tests_results() }}\n  {% endif %}\n\n  {% if not elementary.get_config_var('disable_dbt_invocation_autoupload') %}\n    {{ elementary.upload_dbt_invocation() }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.upload_dbt_artifacts", "macro.elementary.upload_run_results", "macro.elementary.handle_tests_results", "macro.elementary.upload_dbt_invocation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.349416, "supported_languages": null}, "macro.elementary.get_compiled_model_code_text": {"name": "get_compiled_model_code_text", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_compiled_model_code_text.sql", "original_file_path": "macros/edr/system/system_utils/get_compiled_model_code_text.sql", "unique_id": "macro.elementary.get_compiled_model_code_text", "macro_sql": "{% macro get_compiled_model_code_text(node) %}\n    {% set should_collect_model_sql = elementary.get_config_var('collect_model_sql') %}\n    {% if not should_collect_model_sql %}\n        {{ return(none) }}\n    {% endif %}\n\n    {% set model_sql_max_size = elementary.get_config_var('model_sql_max_size') %}\n    {% set long_string_size = elementary.get_config_var('long_string_size') %}\n    {% set model_sql_size_limit = [model_sql_max_size, long_string_size] | min %}\n    {% set model_code = elementary.get_compiled_code(node) %}\n\n    {# Seeds do not have compiled code. #}\n    {% if not model_code %}\n        {{ return(none) }}\n    {% endif %}\n\n    {% if model_sql_size_limit < model_code | length %}\n        {{ return('Model code is too long - over ' ~ model_sql_size_limit ~ ' bytes') }}\n    {% else %}\n        {{ return(model_code) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_compiled_code"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.350424, "supported_languages": null}, "macro.elementary.get_time_format": {"name": "get_time_format", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/times.sql", "original_file_path": "macros/edr/system/system_utils/times.sql", "unique_id": "macro.elementary.get_time_format", "macro_sql": "{% macro get_time_format() %}\n  {% do return(\"%Y-%m-%d %H:%M:%S\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3507788, "supported_languages": null}, "macro.elementary.run_started_at_as_string": {"name": "run_started_at_as_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/times.sql", "original_file_path": "macros/edr/system/system_utils/times.sql", "unique_id": "macro.elementary.run_started_at_as_string", "macro_sql": "{% macro run_started_at_as_string() %}\n    {% do return(elementary.get_run_started_at().strftime(elementary.get_time_format())) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_run_started_at", "macro.elementary.get_time_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.350959, "supported_languages": null}, "macro.elementary.datetime_now_utc_as_string": {"name": "datetime_now_utc_as_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/times.sql", "original_file_path": "macros/edr/system/system_utils/times.sql", "unique_id": "macro.elementary.datetime_now_utc_as_string", "macro_sql": "{% macro datetime_now_utc_as_string() %}\n    {% do return(modules.datetime.datetime.utcnow().strftime(elementary.get_time_format())) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_time_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3511522, "supported_languages": null}, "macro.elementary.current_timestamp_column": {"name": "current_timestamp_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/times.sql", "original_file_path": "macros/edr/system/system_utils/times.sql", "unique_id": "macro.elementary.current_timestamp_column", "macro_sql": "{% macro current_timestamp_column() %}\n    cast ({{elementary.edr_current_timestamp_in_utc()}} as {{ elementary.edr_type_timestamp() }})\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_current_timestamp_in_utc", "macro.elementary.edr_type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3513012, "supported_languages": null}, "macro.elementary.datetime_now_utc_as_timestamp_column": {"name": "datetime_now_utc_as_timestamp_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/times.sql", "original_file_path": "macros/edr/system/system_utils/times.sql", "unique_id": "macro.elementary.datetime_now_utc_as_timestamp_column", "macro_sql": "{% macro datetime_now_utc_as_timestamp_column() %}\n    cast ('{{ elementary.datetime_now_utc_as_string() }}' as {{ elementary.edr_type_timestamp() }})\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.datetime_now_utc_as_string", "macro.elementary.edr_type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.351448, "supported_languages": null}, "macro.elementary.no_results_query": {"name": "no_results_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/no_results_query.sql", "original_file_path": "macros/edr/system/system_utils/no_results_query.sql", "unique_id": "macro.elementary.no_results_query", "macro_sql": "{% macro no_results_query() %}\n    with nothing as (select 1 as num)\n    select * from nothing where num = 2\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3515542, "supported_languages": null}, "macro.elementary.get_run_started_at": {"name": "get_run_started_at", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_run_started_at.sql", "original_file_path": "macros/edr/system/system_utils/get_run_started_at.sql", "unique_id": "macro.elementary.get_run_started_at", "macro_sql": "{% macro get_run_started_at() %}\n    {% set custom_run_started_at = elementary.get_config_var('custom_run_started_at') %}\n    {% if custom_run_started_at %}\n        {# dbt run_started_at is fromtype datetime, so we convert the given custom time to be datetime as well. #}\n        {{ return(modules.datetime.datetime.fromisoformat(custom_run_started_at)) }}\n    {% else %}\n        {{ return(run_started_at) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.352059, "supported_languages": null}, "macro.elementary.complete_buckets_cte": {"name": "complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.complete_buckets_cte", "macro_sql": "{% macro complete_buckets_cte(time_bucket) %}\n    {{ adapter.dispatch('complete_buckets_cte','elementary')(time_bucket) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.bigquery__complete_buckets_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.355722, "supported_languages": null}, "macro.elementary.spark__complete_buckets_cte": {"name": "spark__complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.spark__complete_buckets_cte", "macro_sql": "{% macro spark__complete_buckets_cte(time_bucket) %}\n    {% set edr_bucket_end_expr = elementary.edr_timeadd(time_bucket.period, time_bucket.count, 'edr_bucket_start') %}\n    {%- set complete_buckets_cte %}\n        select\n          edr_bucket_start,\n          {{ edr_bucket_end_expr }} as edr_bucket_end\n        from (select explode(sequence({{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_min_bucket_start())) }}, {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_max_bucket_end())) }}, interval {{ time_bucket.count }} {{ time_bucket.period }})) as edr_bucket_start)\n        where {{ edr_bucket_end_expr }} <= {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_max_bucket_end())) }}\n    {%- endset %}\n    {{ return(complete_buckets_cte) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_timeadd", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_quote", "macro.elementary.get_min_bucket_start", "macro.elementary.get_max_bucket_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.356349, "supported_languages": null}, "macro.elementary.snowflake__complete_buckets_cte": {"name": "snowflake__complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.snowflake__complete_buckets_cte", "macro_sql": "{% macro snowflake__complete_buckets_cte(time_bucket) -%}\n    {% set edr_bucket_end_expr = elementary.edr_timeadd(time_bucket.period, time_bucket.count, 'edr_bucket_start') %}\n    {%- set complete_buckets_cte %}\n        with timestamps as (\n          select {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_min_bucket_start())) }} as edr_bucket_start\n          union all\n          select {{ edr_bucket_end_expr }} as next_bucket\n          from timestamps\n          where next_bucket < {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_max_bucket_end())) }}\n        )\n        select\n          edr_bucket_start,\n          {{ edr_bucket_end_expr }} as edr_bucket_end\n        from timestamps\n        where {{ edr_bucket_end_expr }} <= {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_max_bucket_end())) }}\n    {%- endset %}\n    {{ return(complete_buckets_cte) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_timeadd", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_quote", "macro.elementary.get_min_bucket_start", "macro.elementary.get_max_bucket_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.356949, "supported_languages": null}, "macro.elementary.bigquery__complete_buckets_cte": {"name": "bigquery__complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.bigquery__complete_buckets_cte", "macro_sql": "{% macro bigquery__complete_buckets_cte(time_bucket) %}\n    {% set edr_bucket_end_expr = elementary.edr_timeadd(time_bucket.period, time_bucket.count, 'edr_bucket_start') %}\n    {%- set complete_buckets_cte %}\n        select\n          edr_bucket_start,\n          {{ edr_bucket_end_expr }} as edr_bucket_end\n        from unnest(generate_timestamp_array({{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_min_bucket_start())) }}, {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_max_bucket_end())) }}, interval {{ time_bucket.count }} {{ time_bucket.period }})) as edr_bucket_start\n        where {{ edr_bucket_end_expr }} <= {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_max_bucket_end())) }}\n    {%- endset %}\n    {{ return(complete_buckets_cte) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_timeadd", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_quote", "macro.elementary.get_min_bucket_start", "macro.elementary.get_max_bucket_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.357585, "supported_languages": null}, "macro.elementary.redshift__complete_buckets_cte": {"name": "redshift__complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.redshift__complete_buckets_cte", "macro_sql": "{% macro redshift__complete_buckets_cte(time_bucket) %}\n    {%- set complete_buckets_cte %}\n      with integers as (\n        select (row_number() over (order by 1)) - 1 as num\n        from pg_catalog.pg_class\n        limit {{ elementary.timediff(time_bucket.period, elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_min_bucket_start())), elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_max_bucket_end()))) }} / {{ time_bucket.count }} + 1\n      )\n      select\n        {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_min_bucket_start())) }} + (num * interval '{{ time_bucket.count }} {{ time_bucket.period }}') as edr_bucket_start,\n        {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_min_bucket_start())) }} + ((num + 1) * interval '{{ time_bucket.count }} {{ time_bucket.period }}') as edr_bucket_end\n      from integers\n      where edr_bucket_end <= {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_max_bucket_end())) }}\n    {%- endset %}\n    {{ return(complete_buckets_cte) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.timediff", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_quote", "macro.elementary.get_min_bucket_start", "macro.elementary.get_max_bucket_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3583639, "supported_languages": null}, "macro.elementary.postgres__complete_buckets_cte": {"name": "postgres__complete_buckets_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/buckets_cte.sql", "unique_id": "macro.elementary.postgres__complete_buckets_cte", "macro_sql": "{% macro postgres__complete_buckets_cte(time_bucket) %}\n    {% set edr_bucket_end_expr = elementary.edr_timeadd(time_bucket.period, time_bucket.count, 'edr_bucket_start') %}\n    {%- set complete_buckets_cte %}\n        select\n          edr_bucket_start,\n          {{ edr_bucket_end_expr }} as edr_bucket_end\n        from generate_series({{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_min_bucket_start())) }}, {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_max_bucket_end())) }}, interval '{{ time_bucket.count }} {{ time_bucket.period }}') edr_bucket_start\n        where {{ edr_bucket_end_expr }} <= {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_max_bucket_end())) }}\n    {%- endset %}\n    {{ return(complete_buckets_cte) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_timeadd", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_quote", "macro.elementary.get_min_bucket_start", "macro.elementary.get_max_bucket_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.358989, "supported_languages": null}, "macro.elementary.get_test_argument": {"name": "get_test_argument", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_test_argument.sql", "original_file_path": "macros/edr/system/system_utils/get_test_argument.sql", "unique_id": "macro.elementary.get_test_argument", "macro_sql": "{% macro get_test_argument(argument_name, value=none) %}\n  {% if value %}\n    {{ return(value) }}\n  {% else %}\n    {{ return(elementary.get_config_var(argument_name)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.359321, "supported_languages": null}, "macro.elementary.get_config_var": {"name": "get_config_var", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_config_var.sql", "original_file_path": "macros/edr/system/system_utils/get_config_var.sql", "unique_id": "macro.elementary.get_config_var", "macro_sql": "{% macro get_config_var(var_name) %}\n  {% set default_config = elementary.get_default_config() %}\n  {% set var_value = var(var_name, default_config.get(var_name)) %}\n  {% if var_value is string %}\n    {% if var_value.lower() == \"true\" %}\n      {% do return(true) %}\n    {% elif var_value.lower() == \"false\" %}\n      {% do return(false) %}\n    {% endif %}\n  {% endif %}\n  {% do return(var_value) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_default_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.360374, "supported_languages": null}, "macro.elementary.get_default_config": {"name": "get_default_config", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_config_var.sql", "original_file_path": "macros/edr/system/system_utils/get_config_var.sql", "unique_id": "macro.elementary.get_default_config", "macro_sql": "{% macro get_default_config(var_name) %}\n    {{ return(adapter.dispatch('get_default_config', 'elementary')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.bigquery__get_default_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.360548, "supported_languages": null}, "macro.elementary.default__get_default_config": {"name": "default__get_default_config", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_config_var.sql", "original_file_path": "macros/edr/system/system_utils/get_config_var.sql", "unique_id": "macro.elementary.default__get_default_config", "macro_sql": "{%- macro default__get_default_config() -%}\n{# We use this macro to define and call vars, as the global vars defined in dbt_project.yml\n   of the package are not accesible at on-run-start and on-run-end #}\n  {% set default_config = {\n    'days_back': 14,\n    'anomaly_sensitivity': 3,\n    'backfill_days': 2,\n    'tests_schema_name': '',\n    'debug_logs': false,\n    'disable_warn_alerts': false,\n    'disable_model_alerts': false,\n    'disable_test_alerts': false,\n    'disable_source_freshness_alerts': false,\n    'disable_run_results': false,\n    'disable_tests_results': false,\n    'disable_dbt_artifacts_autoupload': false,\n    'disable_dbt_invocation_autoupload': false,\n    'disable_skipped_model_alerts': true,\n    'disable_skipped_test_alerts': true,\n    'dbt_artifacts_chunk_size': 5000,\n    'test_sample_row_count': 5,\n    'edr_cli_run': false,\n    'max_int': 2147483647,\n    'custom_run_started_at': none,\n    'edr_monitors': elementary.get_default_monitors(),\n    'long_string_size': 65535,\n    'collect_model_sql': true,\n    'model_sql_max_size': 10240,\n    'query_max_size': 1000000,\n    'insert_rows_method': 'max_query_size',\n    'project_name': none,\n    'elementary_full_refresh': false,\n    'min_training_set_size': 14,\n    'cache_artifacts': true,\n    'store_result_rows_in_own_table': true\n  } %}\n  {{- return(default_config) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.get_default_monitors"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.36154, "supported_languages": null}, "macro.elementary.bigquery__get_default_config": {"name": "bigquery__get_default_config", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_config_var.sql", "original_file_path": "macros/edr/system/system_utils/get_config_var.sql", "unique_id": "macro.elementary.bigquery__get_default_config", "macro_sql": "{%- macro bigquery__get_default_config() -%}\n    {% set default_config = elementary.default__get_default_config() %}\n    {% do default_config.update({'query_max_size': 250000}) %}\n    {{- return(default_config) -}}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.elementary.default__get_default_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3617961, "supported_languages": null}, "macro.elementary.get_elementary_package_version": {"name": "get_elementary_package_version", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_elementary_package_version.sql", "original_file_path": "macros/edr/system/system_utils/get_elementary_package_version.sql", "unique_id": "macro.elementary.get_elementary_package_version", "macro_sql": "{% macro get_elementary_package_version() %}\n  {% set conf = elementary.get_runtime_config() %}\n  {% do return(conf.dependencies[\"elementary\"].version) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_runtime_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.362057, "supported_languages": null}, "macro.elementary.get_runtime_config": {"name": "get_runtime_config", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_runtime_config.sql", "original_file_path": "macros/edr/system/system_utils/get_runtime_config.sql", "unique_id": "macro.elementary.get_runtime_config", "macro_sql": "{% macro get_runtime_config() %}\n  {{ return(builtins.ref.config) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.362218, "supported_languages": null}, "macro.elementary.get_first_env_var": {"name": "get_first_env_var", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/get_first_env_var.sql", "original_file_path": "macros/edr/system/system_utils/get_first_env_var.sql", "unique_id": "macro.elementary.get_first_env_var", "macro_sql": "{% macro get_first_env_var(var_names) %}\n    {% for var_name in var_names %}\n        {% set value = env_var(var_name, \"\") %}\n        {% if value %}\n            {{ return(value) }}\n        {% endif %}\n    {% endfor %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.362636, "supported_languages": null}, "macro.elementary.empty_elementary_test_results": {"name": "empty_elementary_test_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_elementary_test_results", "macro_sql": "{% macro empty_elementary_test_results() %}\n    {{ elementary.empty_table([\n    ('id','long_string'),\n    ('data_issue_id','string'),\n    ('test_execution_id','long_string'),\n    ('test_unique_id','long_string'),\n    ('model_unique_id','long_string'),\n    ('invocation_id', 'string'),\n    ('detected_at','timestamp'),\n    ('database_name','string'),\n    ('schema_name','string'),\n    ('table_name','string'),\n    ('column_name','string'),\n    ('test_type','string'),\n    ('test_sub_type','string'),\n    ('test_results_description','long_string'),\n    ('owners','string'),\n    ('tags','string'),\n    ('test_results_query','long_string'),\n    ('other','string'),\n    ('test_name','long_string'),\n    ('test_params','long_string'),\n    ('severity','string'),\n    ('status','string'),\n    ('failures', 'bigint'),\n    ('test_short_name', 'string'),\n    ('test_alias', 'string'),\n    ('result_rows', 'long_string')\n    ]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.367606, "supported_languages": null}, "macro.elementary.empty_dbt_source_freshness_results": {"name": "empty_dbt_source_freshness_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_dbt_source_freshness_results", "macro_sql": "{% macro empty_dbt_source_freshness_results() %}\n    {{ elementary.empty_table([\n    ('source_freshness_execution_id','string'),\n    ('unique_id','string'),\n    ('max_loaded_at','string'),\n    ('snapshotted_at','string'),\n    ('generated_at', 'string'),\n    ('max_loaded_at_time_ago_in_s','float'),\n    ('status','string'),\n    ('error','string'),\n    ('compile_started_at', 'string'),\n    ('compile_completed_at', 'string'),\n    ('execute_started_at', 'string'),\n    ('execute_completed_at', 'string'),\n    ('invocation_id', 'string')\n    ]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.368216, "supported_languages": null}, "macro.elementary.empty_data_monitoring_metrics": {"name": "empty_data_monitoring_metrics", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_data_monitoring_metrics", "macro_sql": "{% macro empty_data_monitoring_metrics() %}\n    {{ elementary.empty_table([('id','string'),\n                               ('full_table_name','string'),\n                               ('column_name','string'),\n                               ('metric_name','string'),\n                               ('metric_value','float'),\n                               ('source_value','string'),\n                               ('bucket_start','timestamp'),\n                               ('bucket_end','timestamp'),\n                               ('bucket_duration_hours','int'),\n                               ('updated_at','timestamp'),\n                               ('dimension','string'),\n                               ('dimension_value','string'),\n                               ('metric_properties','string')]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3688169, "supported_languages": null}, "macro.elementary.empty_schema_columns_snapshot": {"name": "empty_schema_columns_snapshot", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_schema_columns_snapshot", "macro_sql": "{% macro empty_schema_columns_snapshot() %}\n    {{ elementary.empty_table([('column_state_id','string'),('full_column_name','string'),('full_table_name','string'),('column_name','string'),('data_type','string'),('is_new','boolean'),('detected_at','timestamp')]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.36919, "supported_languages": null}, "macro.elementary.empty_column_monitors_cte": {"name": "empty_column_monitors_cte", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_column_monitors_cte", "macro_sql": "{% macro empty_column_monitors_cte() %}\n    {%- set column_monitors_list = elementary.get_agg_column_monitors() %}\n    {%- set columns_definition = [('column_name', 'string'), ('bucket', 'timestamp')] %}\n    {%- for monitor in column_monitors_list %}\n        {%- do columns_definition.append((monitor,'int'))-%}\n    {%- endfor %}\n    {{ elementary.empty_table(columns_definition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_agg_column_monitors", "macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.369602, "supported_languages": null}, "macro.elementary.empty_table": {"name": "empty_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_table", "macro_sql": "{% macro empty_table(column_name_and_type_list) %}\n\n    {%- set empty_table_query -%}\n        with empty_table as (\n            select\n            {% for column in column_name_and_type_list %}\n                {{ elementary.empty_column(column[0], column[1]) }} {%- if not loop.last -%},{%- endif %}\n            {%- endfor %}\n            )\n        select * from empty_table\n        where 1 = 0\n    {%- endset -%}\n\n    {{- return(empty_table_query)-}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3699682, "supported_languages": null}, "macro.elementary.empty_column": {"name": "empty_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.empty_column", "macro_sql": "{% macro empty_column(column_name, data_type) %}\n\n    {%- set dummy_values = elementary.dummy_values() %}\n\n    {%- if data_type == 'boolean' %}\n        cast ({{ dummy_values['boolean'] }} as {{ elementary.edr_type_bool()}}) as {{ column_name }}\n    {%- elif data_type == 'timestamp' -%}\n        cast('{{ dummy_values['timestamp'] }}' as {{ elementary.edr_type_timestamp() }}) as {{ column_name }}\n    {%- elif data_type == 'int' %}\n        cast({{ dummy_values['int'] }} as {{ elementary.edr_type_int() }}) as {{ column_name }}\n    {%- elif data_type == 'bigint' %}\n        cast({{ dummy_values['bigint'] }} as {{ elementary.edr_type_bigint() }}) as {{ column_name }}\n    {%- elif data_type == 'float' %}\n        cast({{ dummy_values['float'] }} as {{ elementary.edr_type_float() }}) as {{ column_name }}\n    {%- elif data_type == 'long_string' %}\n        cast('{{ dummy_values['long_string'] }}' as {{ elementary.edr_type_long_string() }}) as {{ column_name }}\n    {%- else %}\n        cast('{{ dummy_values['string'] }}' as {{ elementary.edr_type_string() }}) as {{ column_name }}\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.dummy_values", "macro.elementary.edr_type_bool", "macro.elementary.edr_type_timestamp", "macro.elementary.edr_type_int", "macro.elementary.edr_type_bigint", "macro.elementary.edr_type_float", "macro.elementary.edr_type_long_string", "macro.elementary.edr_type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3710139, "supported_languages": null}, "macro.elementary.dummy_values": {"name": "dummy_values", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "unique_id": "macro.elementary.dummy_values", "macro_sql": "{% macro dummy_values() %}\n\n    {%- set dummy_values = {\n     'string': \"dummy_string\",\n     'long_string': \"this_is_just_a_long_dummy_string\",\n     'boolean': 'True',\n     'int': 123456789,\n     'bigint': 31474836478,\n     'float': 123456789.99,\n     'timestamp': \"2091-02-17\"\n    } %}\n\n    {{ return(dummy_values) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.371382, "supported_languages": null}, "macro.elementary.edr_log": {"name": "edr_log", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/logs.sql", "original_file_path": "macros/edr/system/system_utils/logs.sql", "unique_id": "macro.elementary.edr_log", "macro_sql": "{% macro edr_log(msg, info=True) %}\n    {%- if execute %}\n        {% do log('Elementary: ' ~ msg, info=info) %}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.372086, "supported_languages": null}, "macro.elementary.debug_log": {"name": "debug_log", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/logs.sql", "original_file_path": "macros/edr/system/system_utils/logs.sql", "unique_id": "macro.elementary.debug_log", "macro_sql": "{% macro debug_log(msg) %}\n    {%- if execute %}\n        {% set debug_logs_enabled = elementary.get_config_var('debug_logs') %}\n        {% if debug_logs_enabled %}\n            {{ elementary.edr_log(msg) }}\n        {% endif %}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.edr_log"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.372373, "supported_languages": null}, "macro.elementary.test_log": {"name": "test_log", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/logs.sql", "original_file_path": "macros/edr/system/system_utils/logs.sql", "unique_id": "macro.elementary.test_log", "macro_sql": "{% macro test_log(msg_type, table_name, column_name=none) %}\n    {%- if column_name %}\n        {%- set start = 'Started running data monitors on: ' ~ table_name ~ ' ' ~ column_name %}\n        {%- set end = 'Finished running data monitors on: ' ~ table_name ~ ' ' ~ column_name %}\n    {%- else %}\n        {%- set start = 'Started running data monitors on: ' ~ table_name %}\n        {%- set end = 'Finished running data monitors on: ' ~ table_name %}\n    {%- endif %}\n\n    {%- if msg_type == 'start' %}\n        {% do elementary.edr_log(start) %}\n    {%- elif msg_type == 'end' %}\n        {% do elementary.edr_log(end) %}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_log"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.372973, "supported_languages": null}, "macro.elementary.full_table_name": {"name": "full_table_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.full_table_name", "macro_sql": "{% macro full_table_name(alias) -%}\n    {% if alias is defined %}{%- set alias_dot = alias ~ '.' %}{% endif %}\n    upper({{ alias_dot }}database_name || '.' || {{ alias_dot }}schema_name || '.' || {{ alias_dot }}table_name)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3750558, "supported_languages": null}, "macro.elementary.full_schema_name": {"name": "full_schema_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.full_schema_name", "macro_sql": "{% macro full_schema_name() -%}\n    upper(database_name || '.' || schema_name)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.375131, "supported_languages": null}, "macro.elementary.full_column_name": {"name": "full_column_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.full_column_name", "macro_sql": "{% macro full_column_name() -%}\n    upper(database_name || '.' || schema_name || '.' || table_name || '.' || column_name)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.375205, "supported_languages": null}, "macro.elementary.full_name_split": {"name": "full_name_split", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.full_name_split", "macro_sql": "{% macro full_name_split(part_name) %}\n    {{ adapter.dispatch('full_name_split','elementary')(part_name) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.bigquery__full_name_split"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3753622, "supported_languages": null}, "macro.elementary.default__full_name_split": {"name": "default__full_name_split", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.default__full_name_split", "macro_sql": "{% macro default__full_name_split(part_name) %}\n    {%- if part_name == 'database_name' -%}\n        {%- set part_index = 0 -%}\n    {%- elif part_name == 'schema_name' -%}\n        {%- set part_index = 1 -%}\n    {%- elif part_name == 'table_name' -%}\n        {%- set part_index = 2 -%}\n    {%- else -%}\n        {{ return('') }}\n    {%- endif -%}\n    trim(split(full_table_name,'.')[{{ part_index }}],'\"') as {{ part_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3757608, "supported_languages": null}, "macro.elementary.bigquery__full_name_split": {"name": "bigquery__full_name_split", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.bigquery__full_name_split", "macro_sql": "{% macro bigquery__full_name_split(part_name) %}\n    {%- if part_name == 'database_name' -%}\n        {%- set part_index = 0 %}\n    {%- elif part_name == 'schema_name' -%}\n        {%- set part_index = 1 %}\n    {%- elif part_name == 'table_name' -%}\n        {%- set part_index = 2 -%}\n    {%- else -%}\n        {{ return('') }}\n    {%- endif -%}\n    trim(split(full_table_name,'.')[OFFSET({{ part_index }})],'\"') as {{ part_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.376168, "supported_languages": null}, "macro.elementary.postgres__full_name_split": {"name": "postgres__full_name_split", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.postgres__full_name_split", "macro_sql": "{% macro postgres__full_name_split(part_name) %}\n    {%- if part_name == 'database_name' -%}\n        {%- set part_index = 1 -%}\n    {%- elif part_name == 'schema_name' -%}\n        {%- set part_index = 2 -%}\n    {%- elif part_name == 'table_name' -%}\n        {%- set part_index = 3 -%}\n    {%- else -%}\n        {{ return('') }}\n    {%- endif -%}\n    trim(split_part(full_table_name,'.',{{ part_index }}),'\"') as {{ part_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.376576, "supported_languages": null}, "macro.elementary.relation_to_full_name": {"name": "relation_to_full_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.relation_to_full_name", "macro_sql": "{% macro relation_to_full_name(relation) %}\n    {%- if relation.database %}\n        {%- set full_table_name = relation.database | upper ~'.'~ relation.schema | upper ~'.'~ relation.identifier | upper %}\n    {%- else %}\n    {# Databricks doesn't always have a database #}\n        {%- set full_table_name = relation.schema | upper ~'.'~ relation.identifier | upper %}\n    {%- endif %}\n    {{ return(full_table_name) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.376986, "supported_languages": null}, "macro.elementary.model_node_to_full_name": {"name": "model_node_to_full_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.model_node_to_full_name", "macro_sql": "{% macro model_node_to_full_name(model_node) %}\n    {% set identifier = model_node.identifier or model_node.alias %}\n    {%- if model_node.database %}\n        {%- set full_table_name = model_node.database | upper ~'.'~ model_node.schema | upper ~'.'~ identifier | upper %}\n    {%- else %}\n    {# Databricks doesn't always have a database #}\n        {%- set full_table_name = model_node.schema | upper ~'.'~ identifier | upper %}\n    {%- endif %}\n    {{ return(full_table_name) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.377616, "supported_languages": null}, "macro.elementary.configured_schemas_from_graph_as_tuple": {"name": "configured_schemas_from_graph_as_tuple", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "unique_id": "macro.elementary.configured_schemas_from_graph_as_tuple", "macro_sql": "{% macro configured_schemas_from_graph_as_tuple() %}\n\n    {%- set configured_schema_tuples = elementary.get_configured_schemas_from_graph() %}\n    {%- set schemas_list = [] %}\n\n    {%- for configured_schema_tuple in configured_schema_tuples %}\n        {%- set database_name, schema_name = configured_schema_tuple %}\n        {%- set full_schema_name = database_name | upper ~ '.' ~ schema_name | upper %}\n        {%- do schemas_list.append(full_schema_name) -%}\n    {%- endfor %}\n\n    {% set schemas_tuple = elementary.strings_list_to_tuple(schemas_list) %}\n    {{ return(schemas_tuple) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_configured_schemas_from_graph", "macro.elementary.strings_list_to_tuple"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.378106, "supported_languages": null}, "macro.elementary.get_columns_from_information_schema": {"name": "get_columns_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "unique_id": "macro.elementary.get_columns_from_information_schema", "macro_sql": "{% macro get_columns_from_information_schema(schema_tuple) %}\n    {{ return(adapter.dispatch('get_columns_from_information_schema', 'elementary')(schema_tuple)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__get_columns_from_information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3787, "supported_languages": null}, "macro.elementary.default__get_columns_from_information_schema": {"name": "default__get_columns_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "unique_id": "macro.elementary.default__get_columns_from_information_schema", "macro_sql": "{% macro default__get_columns_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n    {% set schema_relation = api.Relation.create(database=database_name, schema=schema_name).without_identifier() %}\n\n    select\n        upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n        upper(table_catalog) as database_name,\n        upper(table_schema) as schema_name,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        data_type\n    from {{ schema_relation.information_schema('COLUMNS') }}\n    where upper(table_schema) = upper('{{ schema_name }}')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.379043, "supported_languages": null}, "macro.elementary.redshift__get_columns_from_information_schema": {"name": "redshift__get_columns_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "unique_id": "macro.elementary.redshift__get_columns_from_information_schema", "macro_sql": "{% macro redshift__get_columns_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n\n    select\n        upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n        upper(table_catalog) as database_name,\n        upper(table_schema) as schema_name,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        data_type\n    from svv_columns\n        where upper(table_schema) = upper('{{ schema_name }}')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.379215, "supported_languages": null}, "macro.elementary.postgres__get_columns_from_information_schema": {"name": "postgres__get_columns_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "unique_id": "macro.elementary.postgres__get_columns_from_information_schema", "macro_sql": "{% macro postgres__get_columns_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n\n    select\n        upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n        upper(table_catalog) as database_name,\n        upper(table_schema) as schema_name,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        data_type\n    from information_schema.columns\n        where upper(table_schema) = upper('{{ schema_name }}')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.37938, "supported_languages": null}, "macro.elementary.get_tables_from_information_schema": {"name": "get_tables_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "unique_id": "macro.elementary.get_tables_from_information_schema", "macro_sql": "{% macro get_tables_from_information_schema(schema_tuple) %}\n    {{ return(adapter.dispatch('get_tables_from_information_schema','elementary')(schema_tuple)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__get_tables_from_information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.380557, "supported_languages": null}, "macro.elementary.default__get_tables_from_information_schema": {"name": "default__get_tables_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "unique_id": "macro.elementary.default__get_tables_from_information_schema", "macro_sql": "{% macro default__get_tables_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n    {% set schema_relation = api.Relation.create(database=database_name, schema=schema_name).without_identifier() %}\n\n    with information_schema_tables as (\n\n        select\n            upper(table_catalog) as database_name,\n            upper(table_schema) as schema_name,\n            upper(table_name) as table_name\n        from {{ schema_relation.information_schema('TABLES') }}\n        where upper(table_schema) = upper('{{ schema_name }}')\n\n    ),\n\n    information_schema_schemata as (\n\n        select\n            upper(catalog_name) as database_name,\n            upper(schema_name) as schema_name\n        from {{ schema_relation.information_schema('SCHEMATA') }}\n        where upper(schema_name) = upper('{{ schema_name }}')\n\n    )\n\n    select\n        case when tables.table_name is not null\n            then {{ elementary.full_table_name('TABLES') }}\n        else null end as full_table_name,\n        upper(schemas.database_name || '.' || schemas.schema_name) as full_schema_name,\n        schemas.database_name as database_name,\n        schemas.schema_name as schema_name,\n        tables.table_name\n    from information_schema_tables as tables\n    full outer join information_schema_schemata as schemas\n    on (tables.database_name = schemas.database_name and tables.schema_name = schemas.schema_name)\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.full_table_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.381037, "supported_languages": null}, "macro.elementary.redshift__get_tables_from_information_schema": {"name": "redshift__get_tables_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "unique_id": "macro.elementary.redshift__get_tables_from_information_schema", "macro_sql": "{% macro redshift__get_tables_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n\n    with information_schema_tables as (\n\n        select\n            upper(table_catalog) as database_name,\n            upper(table_schema) as schema_name,\n            upper(table_name) as table_name\n        from svv_tables\n            where upper(table_schema) = upper('{{ schema_name }}') and upper(table_catalog) = upper('{{ database_name }}')\n\n    )\n\n    select\n        {{ elementary.full_table_name() }} as full_table_name,\n        upper(database_name || '.' || schema_name) as full_schema_name,\n        database_name,\n        schema_name,\n        table_name\n    from information_schema_tables\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.full_table_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.381275, "supported_languages": null}, "macro.elementary.postgres__get_tables_from_information_schema": {"name": "postgres__get_tables_from_information_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "unique_id": "macro.elementary.postgres__get_tables_from_information_schema", "macro_sql": "{% macro postgres__get_tables_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n\n    with information_schema_tables as (\n\n        select\n            upper(table_catalog) as database_name,\n            upper(table_schema) as schema_name,\n            upper(table_name) as table_name\n        from information_schema.tables\n            where upper(table_schema) = upper('{{ schema_name }}') and upper(table_catalog) = upper('{{ database_name }}')\n\n    )\n\n    select\n        {{ elementary.full_table_name() }} as full_table_name,\n        upper(database_name || '.' || schema_name) as full_schema_name,\n        database_name,\n        schema_name,\n        table_name\n    from information_schema_tables\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.full_table_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.381509, "supported_languages": null}, "macro.elementary.upload_dbt_snapshots": {"name": "upload_dbt_snapshots", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_snapshots.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_snapshots.sql", "unique_id": "macro.elementary.upload_dbt_snapshots", "macro_sql": "{%- macro upload_dbt_snapshots(should_commit=false, metadata_hashes=none) -%}\n    {% set relation = elementary.get_elementary_relation('dbt_snapshots') %}\n    {% if execute and relation %}\n        {% set snapshots = graph.nodes.values() | selectattr('resource_type', '==', 'snapshot') %}\n        {% do elementary.upload_artifacts_to_table(relation, snapshots, elementary.flatten_model, should_commit=should_commit, metadata_hashes=metadata_hashes) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.382124, "supported_languages": null}, "macro.elementary.upload_dbt_sources": {"name": "upload_dbt_sources", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "unique_id": "macro.elementary.upload_dbt_sources", "macro_sql": "{%- macro upload_dbt_sources(should_commit=false, metadata_hashes=none) -%}\n    {% set relation = elementary.get_elementary_relation('dbt_sources') %}\n    {% if execute and relation %}\n        {% set sources = graph.sources.values() | selectattr('resource_type', '==', 'source') %}\n        {% do elementary.upload_artifacts_to_table(relation, sources, elementary.flatten_source, should_commit=should_commit, metadata_hashes=metadata_hashes) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.386067, "supported_languages": null}, "macro.elementary.get_dbt_sources_empty_table_query": {"name": "get_dbt_sources_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "unique_id": "macro.elementary.get_dbt_sources_empty_table_query", "macro_sql": "{% macro get_dbt_sources_empty_table_query() %}\n    {% set dbt_sources_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                   ('database_name', 'string'),\n                                                                   ('schema_name', 'string'),\n                                                                   ('source_name', 'string'),\n                                                                   ('name', 'string'),\n                                                                   ('identifier', 'string'),\n                                                                   ('loaded_at_field', 'string'),\n                                                                   ('freshness_warn_after', 'string'),\n                                                                   ('freshness_error_after', 'string'),\n                                                                   ('freshness_filter', 'long_string'),\n                                                                   ('relation_name', 'string'),\n                                                                   ('tags', 'long_string'),\n                                                                   ('meta', 'long_string'),\n                                                                   ('owner', 'string'),\n                                                                   ('package_name', 'string'),\n                                                                   ('original_path', 'long_string'),\n                                                                   ('path', 'string'),\n                                                                   ('source_description', 'long_string'),\n                                                                   ('description', 'long_string'),\n                                                                   ('generated_at', 'string'),\n                                                                   ('metadata_hash', 'string'),\n                                                                   ]) %}\n    {{ return(dbt_sources_empty_table_query) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3870552, "supported_languages": null}, "macro.elementary.flatten_source": {"name": "flatten_source", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "unique_id": "macro.elementary.flatten_source", "macro_sql": "{% macro flatten_source(node_dict) %}\n    {% set freshness_dict = elementary.safe_get_with_default(node_dict, 'freshness', {}) %}\n    {% set source_meta_dict = elementary.safe_get_with_default(node_dict, 'source_meta', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% do meta_dict.update(source_meta_dict) %}\n    {% set owner = meta_dict.get('owner') %}\n    {% set node_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n    {% set tags = elementary.union_lists(node_tags, meta_tags) %}\n    {% set flatten_source_metadata_dict = {\n         'unique_id': node_dict.get('unique_id'),\n         'database_name': node_dict.get('database'),\n         'schema_name': node_dict.get('schema'),\n         'source_name': node_dict.get('source_name'),\n         'name': node_dict.get('name'),\n         'identifier': node_dict.get('identifier'),\n         'loaded_at_field': node_dict.get('loaded_at_field'),\n         'freshness_warn_after': freshness_dict.get('warn_after', {}),\n         'freshness_error_after': freshness_dict.get('error_after', {}),\n         'freshness_filter': freshness_dict.get('filter'),\n         'relation_name': node_dict.get('relation_name'),\n         'tags': tags,\n         'meta': meta_dict,\n         'owner': owner,\n         'package_name': node_dict.get('package_name'),\n         'original_path': node_dict.get('original_file_path'),\n         'path': node_dict.get('path'),\n         'source_description': node_dict.get('source_description'),\n         'description': node_dict.get('description'),\n         'generated_at': elementary.datetime_now_utc_as_string()\n     }%}\n    {% do flatten_source_metadata_dict.update({\"metadata_hash\": elementary.get_artifact_metadata_hash(flatten_source_metadata_dict)}) %}\n    {{ return(flatten_source_metadata_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.union_lists", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.get_artifact_metadata_hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.389078, "supported_languages": null}, "macro.elementary.upload_dbt_models": {"name": "upload_dbt_models", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "unique_id": "macro.elementary.upload_dbt_models", "macro_sql": "{%- macro upload_dbt_models(should_commit=false, metadata_hashes=none) -%}\n    {% set relation = elementary.get_elementary_relation('dbt_models') %}\n    {% if execute and relation %}\n        {% set models = graph.nodes.values() | selectattr('resource_type', '==', 'model') %}\n        {% do elementary.upload_artifacts_to_table(relation, models, elementary.flatten_model, should_commit=should_commit, metadata_hashes=metadata_hashes) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.393177, "supported_languages": null}, "macro.elementary.get_dbt_models_empty_table_query": {"name": "get_dbt_models_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "unique_id": "macro.elementary.get_dbt_models_empty_table_query", "macro_sql": "{% macro get_dbt_models_empty_table_query() %}\n    {% set dbt_models_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                  ('alias', 'string'),\n                                                                  ('checksum', 'string'),\n                                                                  ('materialization', 'string'),\n                                                                  ('tags', 'long_string'),\n                                                                  ('meta', 'long_string'),\n                                                                  ('owner', 'string'),\n                                                                  ('database_name', 'string'),\n                                                                  ('schema_name', 'string'),\n                                                                  ('depends_on_macros', 'long_string'),\n                                                                  ('depends_on_nodes', 'long_string'),\n                                                                  ('description', 'long_string'),\n                                                                  ('name', 'string'),\n                                                                  ('package_name', 'string'),\n                                                                  ('original_path', 'long_string'),\n                                                                  ('path', 'string'),\n                                                                  ('generated_at', 'string'),\n                                                                  ('metadata_hash', 'string'),\n                                                                  ]) %}\n    {{ return(dbt_models_empty_table_query) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.394052, "supported_languages": null}, "macro.elementary.flatten_model": {"name": "flatten_model", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "unique_id": "macro.elementary.flatten_model", "macro_sql": "{% macro flatten_model(node_dict) %}\n    {% set checksum_dict = elementary.safe_get_with_default(node_dict, 'checksum', {}) %}\n    {% set config_dict = elementary.safe_get_with_default(node_dict, 'config', {}) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n\n    {% set config_meta_dict = elementary.safe_get_with_default(config_dict, 'meta', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% do meta_dict.update(config_meta_dict) %}\n    {% set formatted_owner = [] %}\n    {% set raw_owner = meta_dict.get('owner') %}\n    {% if raw_owner is string %}\n        {% set owners = raw_owner.split(',') %}\n        {% for owner in owners %}\n            {% do formatted_owner.append(owner | trim) %}  \n        {% endfor %}\n    {% elif raw_owner is iterable %}\n        {% do formatted_owner.extend(raw_owner) %}\n    {% endif %}\n    {% set config_tags = elementary.safe_get_with_default(config_dict, 'tags', []) %}\n    {% set global_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n    {% set tags = elementary.union_lists(config_tags, global_tags) %}\n    {% set tags = elementary.union_lists(tags, meta_tags) %}\n\n    {% set flatten_model_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'alias': node_dict.get('alias'),\n        'checksum': checksum_dict.get('checksum'),\n        'materialization': config_dict.get('materialized'),\n        'tags': tags,\n        'meta': meta_dict,\n        'owner': formatted_owner,\n        'database_name': node_dict.get('database'),\n        'schema_name': node_dict.get('schema'),\n        'depends_on_macros': depends_on_dict.get('macros', []),\n        'depends_on_nodes': depends_on_dict.get('nodes', []),\n        'description': node_dict.get('description'),\n        'name': node_dict.get('name'),\n        'package_name': node_dict.get('package_name'),\n        'original_path': node_dict.get('original_file_path'),\n        'path': node_dict.get('path'),\n        'generated_at': elementary.datetime_now_utc_as_string()\n    }%}\n    {% do flatten_model_metadata_dict.update({\"metadata_hash\": elementary.get_artifact_metadata_hash(flatten_model_metadata_dict)}) %}\n    {{ return(flatten_model_metadata_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.union_lists", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.get_artifact_metadata_hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.3966138, "supported_languages": null}, "macro.elementary.upload_dbt_seeds": {"name": "upload_dbt_seeds", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_seeds.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_seeds.sql", "unique_id": "macro.elementary.upload_dbt_seeds", "macro_sql": "{%- macro upload_dbt_seeds(should_commit=false, metadata_hashes=none) -%}\n    {% set relation = elementary.get_elementary_relation('dbt_seeds') %}\n    {% if execute and relation %}\n        {% set seeds = graph.nodes.values() | selectattr('resource_type', '==', 'seed') %}\n        {% do elementary.upload_artifacts_to_table(relation, seeds, elementary.flatten_seed, should_commit=should_commit, metadata_hashes=metadata_hashes) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.400217, "supported_languages": null}, "macro.elementary.get_dbt_seeds_empty_table_query": {"name": "get_dbt_seeds_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_seeds.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_seeds.sql", "unique_id": "macro.elementary.get_dbt_seeds_empty_table_query", "macro_sql": "{% macro get_dbt_seeds_empty_table_query() %}\n    {% set dbt_seeds_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                  ('alias', 'string'),\n                                                                  ('checksum', 'string'),\n                                                                  ('tags', 'long_string'),\n                                                                  ('meta', 'long_string'),\n                                                                  ('owner', 'string'),\n                                                                  ('database_name', 'string'),\n                                                                  ('schema_name', 'string'),\n                                                                  ('description', 'long_string'),\n                                                                  ('name', 'string'),\n                                                                  ('package_name', 'string'),\n                                                                  ('original_path', 'long_string'),\n                                                                  ('path', 'string'),\n                                                                  ('generated_at', 'string'),\n                                                                  ('metadata_hash', 'string'),\n                                                                  ]) %}\n    {{ return(dbt_seeds_empty_table_query) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.400973, "supported_languages": null}, "macro.elementary.flatten_seed": {"name": "flatten_seed", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_seeds.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_seeds.sql", "unique_id": "macro.elementary.flatten_seed", "macro_sql": "{% macro flatten_seed(node_dict) %}\n    {% set checksum_dict = elementary.safe_get_with_default(node_dict, 'checksum', {}) %}\n    {% set config_dict = elementary.safe_get_with_default(node_dict, 'config', {}) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n\n    {% set config_meta_dict = elementary.safe_get_with_default(config_dict, 'meta', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% do meta_dict.update(config_meta_dict) %}\n    {% set formatted_owner = [] %}\n    {% set raw_owner = meta_dict.get('owner') %}\n    {% if raw_owner is string %}\n        {% set owners = raw_owner.split(',') %}\n        {% for owner in owners %}\n            {% do formatted_owner.append(owner | trim) %}\n        {% endfor %}\n    {% elif raw_owner is iterable %}\n        {% do formatted_owner.extend(raw_owner) %}\n    {% endif %}\n    {% set config_tags = elementary.safe_get_with_default(config_dict, 'tags', []) %}\n    {% set global_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n    {% set tags = elementary.union_lists(config_tags, global_tags) %}\n    {% set tags = elementary.union_lists(tags, meta_tags) %}\n\n    {% set flatten_seed_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'alias': node_dict.get('alias'),\n        'checksum': checksum_dict.get('checksum'),\n        'tags': tags,\n        'meta': meta_dict,\n        'owner': formatted_owner,\n        'database_name': node_dict.get('database'),\n        'schema_name': node_dict.get('schema'),\n        'description': node_dict.get('description'),\n        'name': node_dict.get('name'),\n        'package_name': node_dict.get('package_name'),\n        'original_path': node_dict.get('original_file_path'),\n        'path': node_dict.get('path'),\n        'generated_at': elementary.datetime_now_utc_as_string()\n    }%}\n    {% do flatten_seed_metadata_dict.update({\"metadata_hash\": elementary.get_artifact_metadata_hash(flatten_seed_metadata_dict)}) %}\n    {{ return(flatten_seed_metadata_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.union_lists", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.get_artifact_metadata_hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.403328, "supported_languages": null}, "macro.elementary.upload_dbt_invocation": {"name": "upload_dbt_invocation", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.upload_dbt_invocation", "macro_sql": "{% macro upload_dbt_invocation() %}\n  {% set relation = elementary.get_elementary_relation('dbt_invocations') %}\n  {% if not execute or not relation %}\n    {{ return('') }}\n  {% endif %}\n\n  {% do elementary.debug_log(\"Uploading dbt invocation.\") %}\n  {% set now_str = elementary.datetime_now_utc_as_string() %}\n  {% set dbt_invocation = {\n      'invocation_id': invocation_id,\n      'run_started_at': elementary.run_started_at_as_string(),\n      'run_completed_at': now_str,\n      'generated_at': now_str,\n      'command': flags.WHICH,\n      'dbt_version': dbt_version,\n      'elementary_version': elementary.get_elementary_package_version(),\n      'full_refresh': flags.FULL_REFRESH,\n      'invocation_vars': elementary.get_invocation_vars(),\n      'vars': elementary.get_all_vars(),\n      'target_name': target.name,\n      'target_database': elementary.target_database(),\n      'target_schema': target.schema,\n      'target_profile_name': target.profile_name,\n      'threads': target.threads,\n      'selected': elementary.get_invocation_select_filter(),\n      'yaml_selector': elementary.get_invocation_yaml_selector(),\n      'project_name': elementary.get_project_name(),\n      'job_id': elementary.get_first_env_var([\"DBT_JOB_ID\", \"DBT_CLOUD_JOB_ID\"]),\n      'job_run_id': elementary.get_first_env_var([\"DBT_JOB_RUN_ID\", \"DBT_CLOUD_RUN_ID\", \"GITHUB_RUN_ID\"]),\n      'job_name': elementary.get_first_env_var([\"DBT_JOB_NAME\"]),\n      'env': elementary.get_first_env_var([\"DBT_ENV\"]),\n      'env_id': elementary.get_first_env_var([\"DBT_ENV_ID\"]),\n      'project_id': elementary.get_first_env_var([\"DBT_PROJECT_ID\", \"DBT_CLOUD_PROJECT_ID\", \"GITHUB_REPOSITORY\"]),\n      'cause_category': elementary.get_first_env_var([\"DBT_CAUSE_CATEGORY\", \"DBT_CLOUD_RUN_REASON_CATEGORY\", \"GITHUB_EVENT_NAME\"]),\n      'cause': elementary.get_first_env_var([\"DBT_CAUSE\", \"DBT_CLOUD_RUN_REASON\"]),\n      'pull_request_id': elementary.get_first_env_var([\"DBT_PULL_REQUEST_ID\", \"DBT_CLOUD_PR_ID\", \"GITHUB_HEAD_REF\"]),\n      'git_sha': elementary.get_first_env_var([\"DBT_GIT_SHA\", \"DBT_CLOUD_GIT_SHA\", \"GITHUB_SHA\"]),\n      'orchestrator': elementary.get_orchestrator(),\n      'dbt_user': elementary.get_first_env_var([\"DBT_USER\"]),\n  } %}\n  {% do elementary.insert_rows(relation, [dbt_invocation], should_commit=true) %}\n  {% do elementary.debug_log(\"Uploaded dbt invocation successfully.\") %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.debug_log", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.run_started_at_as_string", "macro.elementary.get_elementary_package_version", "macro.elementary.get_invocation_vars", "macro.elementary.get_all_vars", "macro.elementary.target_database", "macro.elementary.get_invocation_select_filter", "macro.elementary.get_invocation_yaml_selector", "macro.elementary.get_project_name", "macro.elementary.get_first_env_var", "macro.elementary.get_orchestrator", "macro.elementary.insert_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.410916, "supported_languages": null}, "macro.elementary.get_project_name": {"name": "get_project_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_project_name", "macro_sql": "{% macro get_project_name() %}\n    {% set project_name = elementary.get_config_var(\"project_name\") %}\n    {% if project_name %}\n        {{ return(project_name) }}\n    {% endif %}\n\n    {% set config = elementary.get_runtime_config() %}\n    {% do return(config.project_name) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_runtime_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.411268, "supported_languages": null}, "macro.elementary.get_invocation_select_filter": {"name": "get_invocation_select_filter", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_invocation_select_filter", "macro_sql": "\n\n{%- macro get_invocation_select_filter() -%}\n    {% set config = elementary.get_runtime_config() %}\n    {%- if invocation_args_dict and invocation_args_dict.select -%}\n        {{- return(invocation_args_dict.select) -}}\n    {%- elif config.args and config.args.select -%}\n        {{- return(config.args.select) -}}\n    {%- else -%}\n        {{- return([]) -}}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.get_runtime_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.41165, "supported_languages": null}, "macro.elementary.get_invocation_yaml_selector": {"name": "get_invocation_yaml_selector", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_invocation_yaml_selector", "macro_sql": "{%- macro get_invocation_yaml_selector() -%}\n    {% set config = elementary.get_runtime_config() %}\n    {%- if invocation_args_dict and invocation_args_dict.selector_name -%}\n        {{- return(invocation_args_dict.selector_name) -}}\n    {%- elif config.args and config.args.selector_name -%}\n        {{- return(config.args.selector_name) -}}\n    {%- else -%}\n        {{- return([]) -}}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.get_runtime_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.4120378, "supported_languages": null}, "macro.elementary.get_invocation_vars": {"name": "get_invocation_vars", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_invocation_vars", "macro_sql": "{% macro get_invocation_vars() %}\n    {% set config = elementary.get_runtime_config() %}\n    {% set invocation_vars = {} %}\n    {% if invocation_args_dict and invocation_args_dict.vars %}\n        {% if invocation_args_dict.vars is mapping %}\n            {% set invocation_vars = invocation_args_dict.vars %}\n        {% else %}\n            {% set invocation_vars = fromyaml(invocation_args_dict.vars) %}\n        {% endif %}\n    {% elif config.cli_vars %}\n        {% set invocation_vars = config.cli_vars %}\n    {% endif %}\n    {{ return(elementary.to_primitive(invocation_vars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_runtime_config", "macro.elementary.to_primitive"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.4126248, "supported_languages": null}, "macro.elementary.get_all_vars": {"name": "get_all_vars", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_all_vars", "macro_sql": "\n\n{%- macro get_all_vars() -%}\n    {% set all_vars = {} %}\n    {% set config = elementary.get_runtime_config() %}\n    {%- if config.vars -%}\n        {% do all_vars.update(config.vars.to_dict()) %}\n    {%- endif -%}\n    {% do all_vars.update(elementary.get_invocation_vars()) %}\n    {{- return(all_vars) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.get_runtime_config", "macro.elementary.get_invocation_vars"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.413016, "supported_languages": null}, "macro.elementary.get_orchestrator": {"name": "get_orchestrator", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_orchestrator", "macro_sql": "{% macro get_orchestrator() %}\n  {% set orchestrator_env_map = {\n    \"airflow\": [\"AIRFLOW_HOME\"],\n    \"dbt_cloud\": [\"DBT_CLOUD_PROJECT_ID\"],\n    \"github_actions\": [\"GITHUB_ACTIONS\"],\n  } %}\n  {% for orchestrator, env_vars in orchestrator_env_map.items() %}\n    {% if elementary.get_first_env_var(env_vars) %}\n      {% do return(orchestrator) %}\n    {% endif %}\n  {% endfor %}\n  {% do return(elementary.get_first_env_var([\"DBT_ORCHESTRATOR\"])) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_first_env_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.413549, "supported_languages": null}, "macro.elementary.get_dbt_invocations_empty_table_query": {"name": "get_dbt_invocations_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_invocation.sql", "unique_id": "macro.elementary.get_dbt_invocations_empty_table_query", "macro_sql": "{% macro get_dbt_invocations_empty_table_query() %}\n    {{ return(elementary.empty_table([\n      ('invocation_id', 'long_string'),\n      ('job_id', 'long_string'),\n      ('job_name', 'long_string'),\n      ('job_run_id', 'long_string'),\n      ('run_started_at', 'string'),\n      ('run_completed_at', 'string'),\n      ('generated_at', 'string'),\n      ('command', 'string'),\n      ('dbt_version', 'string'),\n      ('elementary_version', 'string'),\n\t  ('full_refresh', 'boolean'),\n      ('invocation_vars', 'long_string'),\n      ('vars', 'long_string'),\n      ('target_name', 'string'),\n      ('target_database', 'string'),\n      ('target_schema', 'string'),\n      ('target_profile_name', 'string'),\n      ('threads', 'int'),\n      ('selected', 'long_string'),\n      ('yaml_selector', 'long_string'),\n      ('project_id', 'string'),\n      ('project_name', 'string'),\n      ('env', 'string'),\n      ('env_id', 'string'),\n      ('cause_category', 'string'),\n      ('cause', 'long_string'),\n      ('pull_request_id', 'string'),\n      ('git_sha', 'string'),\n      ('orchestrator', 'string'),\n      ('dbt_user', 'string')\n    ])) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.414809, "supported_languages": null}, "macro.elementary.upload_source_freshness": {"name": "upload_source_freshness", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_source_freshness.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_source_freshness.sql", "unique_id": "macro.elementary.upload_source_freshness", "macro_sql": "{% macro upload_source_freshness() %}\n  {% if not flags.Path %}\n    {% do exceptions.raise_compiler_error(\"Unable to upload source freshness using this operation on dbt 1.3.2 onwards.\") %}\n  {% endif %}\n\n  {% set source_freshness_results_relation = ref('dbt_source_freshness_results') %}\n  {% set sources_json_path = flags.Path(elementary.get_runtime_config().target_path).joinpath('sources.json') %}\n  {% if not sources_json_path.exists() %}\n    {% do exceptions.raise_compiler_error('Source freshness artifact (sources.json) does not exist, please run `dbt source freshness`.') %}\n  {% endif %}\n  {% set source_freshess_results_dicts = fromjson(sources_json_path.read_text())['results'] %}\n  {% do elementary.upload_artifacts_to_table(source_freshness_results_relation, source_freshess_results_dicts, elementary.flatten_source_freshness, append=True, should_commit=True) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_runtime_config", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.416378, "supported_languages": null}, "macro.elementary.flatten_source_freshness": {"name": "flatten_source_freshness", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_source_freshness.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_source_freshness.sql", "unique_id": "macro.elementary.flatten_source_freshness", "macro_sql": "{% macro flatten_source_freshness(node_dict) %}\n  {% set compile_timing = {} %}\n  {% set execute_timing = {} %}\n  {% for timing in node_dict['timing'] %}\n    {% if timing['name'] == 'compile' %}\n      {% do compile_timing.update(timing) %}\n    {% elif timing['name'] == 'execute' %}\n      {% do execute_timing.update(timing) %}\n    {% endif %}\n  {% endfor %}\n  {% set flatten_source_freshness_dict = {\n       'source_freshness_execution_id': [invocation_id, node_dict.get('unique_id')] | join('.'),\n       'unique_id': node_dict.get('unique_id'),\n       'max_loaded_at': node_dict.get('max_loaded_at'),\n       'snapshotted_at': node_dict.get('snapshotted_at'),\n       'max_loaded_at_time_ago_in_s': node_dict.get('max_loaded_at_time_ago_in_s'),\n       'status': node_dict.get('status'),\n       'error': node_dict.get('error'),\n       'generated_at': elementary.datetime_now_utc_as_string(),\n       'invocation_id': invocation_id,\n       'compile_started_at': compile_timing.get('started_at'),\n       'compile_completed_at': compile_timing.get('completed_at'),\n       'execute_started_at': execute_timing.get('started_at'),\n       'execute_completed_at': execute_timing.get('completed_at'),\n   } %}\n  {{ return(flatten_source_freshness_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.datetime_now_utc_as_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.41772, "supported_languages": null}, "macro.elementary.get_artifact_metadata_hash": {"name": "get_artifact_metadata_hash", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/get_artifact_metadata_hash.sql", "original_file_path": "macros/edr/dbt_artifacts/get_artifact_metadata_hash.sql", "unique_id": "macro.elementary.get_artifact_metadata_hash", "macro_sql": "{% macro get_artifact_metadata_hash(artifact) %}\n  {% if not local_md5 %}\n    {% do return(none) %}\n  {% endif %}\n\n\n  {% set time_excluded_artifact = artifact.copy() %}\n  {% do time_excluded_artifact.pop(\"generated_at\") %}\n  {% do return(local_md5(time_excluded_artifact | string)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.418179, "supported_languages": null}, "macro.elementary.upload_dbt_artifacts": {"name": "upload_dbt_artifacts", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "unique_id": "macro.elementary.upload_dbt_artifacts", "macro_sql": "{% macro upload_dbt_artifacts() %}\n  {% if execute and results %}\n    {% set model_upload_func_map = {\n      \"dbt_models\": elementary.upload_dbt_models,\n      \"dbt_tests\": elementary.upload_dbt_tests,\n      \"dbt_sources\": elementary.upload_dbt_sources,\n      \"dbt_snapshots\": elementary.upload_dbt_snapshots,\n      \"dbt_metrics\": elementary.upload_dbt_metrics,\n      \"dbt_exposures\": elementary.upload_dbt_exposures,\n      \"dbt_seeds\": elementary.upload_dbt_seeds,\n      }\n    %}\n\n    {% set artifacts_hashes = elementary.get_artifacts_hashes() %}\n    {% do elementary.debug_log(\"Uploading dbt artifacts.\") %}\n    {% for artifacts_model, upload_artifacts_func in model_upload_func_map.items() %}\n      {% if not elementary.get_result_node(artifacts_model) %}\n        {% if elementary.get_elementary_relation(artifacts_model) %}\n          {% do upload_artifacts_func(should_commit=true, metadata_hashes=artifacts_hashes.get(artifacts_model, [])) %}\n        {% endif %}\n      {% else %}\n        {% do elementary.debug_log('[{}] Artifacts already ran.'.format(artifacts_model)) %}\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_artifacts_hashes", "macro.elementary.debug_log", "macro.elementary.get_result_node", "macro.elementary.get_elementary_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.419765, "supported_languages": null}, "macro.elementary.get_artifacts_hashes": {"name": "get_artifacts_hashes", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "unique_id": "macro.elementary.get_artifacts_hashes", "macro_sql": "{% macro get_artifacts_hashes() %}\n    {# The stored hashes are only needed if it can be compared later to the local hashes. #}\n    {% if not local_md5 %}\n        {% do return({}) %}\n    {% endif %}\n\n    {% set database_name, schema_name = elementary.get_package_database_and_schema() %}\n    {% set artifacts_hash_relation = adapter.get_relation(database_name, schema_name, \"dbt_artifacts_hashes\") %}\n    {% if not artifacts_hash_relation %}\n        {% do return({}) %}\n    {% endif %}\n\n    {% set stored_artifacts_query %}\n    select artifacts_model, metadata_hash from {{ artifacts_hash_relation }}\n    order by metadata_hash\n    {% endset %}\n    {% set artifacts_hashes_results = elementary.run_query(stored_artifacts_query) %}\n    {% set artifact_agate_hashes = artifacts_hashes_results.group_by(\"artifacts_model\") %}\n    {% set artifacts_hashes = {} %}\n    {% for artifacts_model, metadata_hashes in artifact_agate_hashes.items() %}\n        {% do artifacts_hashes.update({artifacts_model: metadata_hashes.columns[\"metadata_hash\"]}) %}\n    {% endfor %}\n    {% do return(artifacts_hashes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_package_database_and_schema", "macro.elementary.run_query", "macro.dbt_utils.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.420691, "supported_languages": null}, "macro.elementary.upload_run_results": {"name": "upload_run_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_run_results.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_run_results.sql", "unique_id": "macro.elementary.upload_run_results", "macro_sql": "{% macro upload_run_results() %}\n    {% set relation = elementary.get_elementary_relation('dbt_run_results') %}\n    {% if execute and relation %}\n        {{ elementary.debug_log(\"Uploading run results.\") }}\n        {% do elementary.upload_artifacts_to_table(relation, results, elementary.flatten_run_result, append=True, should_commit=True) %}\n        {{ elementary.debug_log(\"Uploaded run results successfully.\") }}\n    {% endif %}\n    {{ return ('') }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.debug_log", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.424829, "supported_languages": null}, "macro.elementary.get_dbt_run_results_empty_table_query": {"name": "get_dbt_run_results_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_run_results.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_run_results.sql", "unique_id": "macro.elementary.get_dbt_run_results_empty_table_query", "macro_sql": "{% macro get_dbt_run_results_empty_table_query() %}\n    {% set dbt_run_results_empty_table_query = elementary.empty_table([('model_execution_id', 'long_string'),\n                                                                       ('unique_id', 'long_string'),\n                                                                       ('invocation_id', 'string'),\n                                                                       ('generated_at', 'string'),\n                                                                       ('name', 'long_string'),\n                                                                       ('message', 'long_string'),\n                                                                       ('status', 'string'),\n                                                                       ('resource_type', 'string'),\n                                                                       ('execution_time', 'float'),\n                                                                       ('execute_started_at', 'string'),\n                                                                       ('execute_completed_at', 'string'),\n                                                                       ('compile_started_at', 'string'),\n                                                                       ('compile_completed_at', 'string'),\n                                                                       ('rows_affected', 'bigint'),\n                                                                       ('full_refresh', 'boolean'),\n                                                                       ('compiled_code', 'long_string'),\n                                                                       ('failures', 'bigint'),\n                                                                       ('query_id', 'string'),\n                                                                       ('thread_id', 'string')\n                                                                       ]) %}\n    {{ return(dbt_run_results_empty_table_query) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.4257321, "supported_languages": null}, "macro.elementary.flatten_run_result": {"name": "flatten_run_result", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_run_results.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_run_results.sql", "unique_id": "macro.elementary.flatten_run_result", "macro_sql": "{% macro flatten_run_result(run_result) %}\n    {% set run_result_dict = run_result.to_dict() %}\n    {% set node = elementary.safe_get_with_default(run_result_dict, 'node', {}) %}\n    {% set flatten_run_result_dict = {\n        'model_execution_id': elementary.get_node_execution_id(node),\n        'invocation_id': invocation_id,\n        'unique_id': node.get('unique_id'),\n        'name': node.get('name'),\n        'message': run_result_dict.get('message'),\n        'generated_at': elementary.datetime_now_utc_as_string(),\n        'rows_affected': run_result_dict.get('adapter_response', {}).get('rows_affected'),\n        'execution_time': run_result_dict.get('execution_time'),\n        'status': run_result_dict.get('status'),\n        'resource_type': node.get('resource_type'),\n        'execute_started_at': none,\n        'execute_completed_at': none,\n        'compile_started_at': none,\n        'compile_completed_at': none,\n        'full_refresh': flags.FULL_REFRESH,\n        'compiled_code': elementary.get_compiled_model_code_text(node),\n        'failures': run_result_dict.get('failures'),\n        'query_id': run_result_dict.get('adapter_response', {}).get('query_id'),\n        'thread_id': run_result_dict.get('thread_id')\n    }%}\n\n    {% set timings = elementary.safe_get_with_default(run_result_dict, 'timing', []) %}\n    {% if timings %}\n        {% for timing in timings %}\n            {% if timing is mapping %}\n                {% if timing.get('name') == 'execute' %}\n                    {% do flatten_run_result_dict.update({'execute_started_at': timing.get('started_at'), 'execute_completed_at': timing.get('completed_at')}) %}\n                {% elif timing.get('name') == 'compile' %}\n                    {% do flatten_run_result_dict.update({'compile_started_at': timing.get('started_at'), 'compile_completed_at': timing.get('completed_at')}) %}\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n    {% endif %}\n    {{ return(flatten_run_result_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.get_node_execution_id", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.get_compiled_model_code_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.427757, "supported_languages": null}, "macro.elementary.upload_artifacts_to_table": {"name": "upload_artifacts_to_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_artifacts_to_table.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_artifacts_to_table.sql", "unique_id": "macro.elementary.upload_artifacts_to_table", "macro_sql": "{% macro upload_artifacts_to_table(table_relation, artifacts, flatten_artifact_callback, append=False, should_commit=False, metadata_hashes=None) %}\n    {% set flatten_artifact_dicts = [] %}\n    {% for artifact in artifacts %}\n        {% set flatten_artifact_dict = flatten_artifact_callback(artifact) %}\n        {% if flatten_artifact_dict is not none %}\n            {% do flatten_artifact_dicts.append(flatten_artifact_dict) %}\n        {% endif %}\n    {% endfor %}\n\n    {% if metadata_hashes is not none and elementary.get_config_var(\"cache_artifacts\") %}\n        {% set artifacts_hashes = flatten_artifact_dicts | map(attribute=\"metadata_hash\") | sort %}\n        {% if artifacts_hashes == metadata_hashes %}\n            {% do elementary.debug_log(\"[{}] Artifacts did not change.\".format(table_relation.identifier)) %}\n            {% do return(none) %}\n        {% endif %}\n    {% endif %}\n\n    {% if append %}\n        {# In append mode, just insert, and no need to be atomic #}\n        {% do elementary.insert_rows(table_relation, flatten_artifact_dicts, should_commit, elementary.get_config_var('dbt_artifacts_chunk_size')) %}\n    {% else %}\n        {% do elementary.replace_table_data(table_relation, flatten_artifact_dicts) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.debug_log", "macro.elementary.insert_rows", "macro.elementary.replace_table_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.429137, "supported_languages": null}, "macro.elementary.upload_dbt_metrics": {"name": "upload_dbt_metrics", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "unique_id": "macro.elementary.upload_dbt_metrics", "macro_sql": "{%- macro upload_dbt_metrics(should_commit=false, metadata_hashes=none) -%}\n    {% set relation = elementary.get_elementary_relation('dbt_metrics') %}\n    {% if execute and relation %}\n        {% set metrics = graph.metrics.values() | selectattr('resource_type', '==', 'metric') %}\n        {% do elementary.upload_artifacts_to_table(relation, metrics, elementary.flatten_metric, should_commit=should_commit, metadata_hashes=metadata_hashes) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.432608, "supported_languages": null}, "macro.elementary.get_dbt_metrics_empty_table_query": {"name": "get_dbt_metrics_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "unique_id": "macro.elementary.get_dbt_metrics_empty_table_query", "macro_sql": "{% macro get_dbt_metrics_empty_table_query() %}\n    {% set dbt_metrics_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                   ('name', 'string'),\n                                                                   ('label', 'string'),\n                                                                   ('model', 'string'),\n                                                                   ('type', 'string'),\n                                                                   ('sql', 'long_string'),\n                                                                   ('timestamp', 'string'),\n                                                                   ('filters', 'long_string'),\n                                                                   ('time_grains', 'long_string'),\n                                                                   ('dimensions', 'long_string'),\n                                                                   ('depends_on_macros', 'long_string'),\n                                                                   ('depends_on_nodes', 'long_string'),\n                                                                   ('description', 'long_string'),\n                                                                   ('tags', 'long_string'),\n                                                                   ('meta', 'long_string'),\n                                                                   ('package_name', 'string'),\n                                                                   ('original_path', 'long_string'),\n                                                                   ('path', 'string'),\n                                                                   ('generated_at', 'string'),\n                                                                   ('metadata_hash', 'string'),\n                                                                   ]) %}\n    {{ return(dbt_metrics_empty_table_query) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.433543, "supported_languages": null}, "macro.elementary.flatten_metric": {"name": "flatten_metric", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "unique_id": "macro.elementary.flatten_metric", "macro_sql": "{% macro flatten_metric(node_dict) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% set tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set flatten_metric_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'name': node_dict.get('name'),\n        'label': node_dict.get('label'),\n        'model': node_dict.get('model'),\n        'type': node_dict.get('type'),\n        'sql': node_dict.get('sql'),\n        'timestamp': node_dict.get('timestamp'),\n        'filters': node_dict.get('filters', {}),\n        'time_grains': node_dict.get('time_grains', []),\n        'dimensions': node_dict.get('dimensions', []),\n        'depends_on_macros': depends_on_dict.get('macros', []),\n        'depends_on_nodes': depends_on_dict.get('nodes', []),\n        'description': node_dict.get('description'),\n        'tags': tags,\n        'meta': meta_dict,\n        'package_name': node_dict.get('package_name'),\n        'original_path': node_dict.get('original_file_path'),\n        'path': node_dict.get('path'),\n        'generated_at': elementary.datetime_now_utc_as_string()\n    }%}\n    {% do flatten_metric_metadata_dict.update({\"metadata_hash\": elementary.get_artifact_metadata_hash(flatten_metric_metadata_dict)}) %}\n    {{ return(flatten_metric_metadata_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.get_artifact_metadata_hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.435096, "supported_languages": null}, "macro.elementary.upload_dbt_tests": {"name": "upload_dbt_tests", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.upload_dbt_tests", "macro_sql": "{%- macro upload_dbt_tests(should_commit=false, metadata_hashes=none) -%}\n    {% set relation = elementary.get_elementary_relation('dbt_tests') %}\n    {% if execute and relation %}\n        {% set tests = graph.nodes.values() | selectattr('resource_type', '==', 'test') %}\n        {% do elementary.upload_artifacts_to_table(relation, tests, elementary.flatten_test, should_commit=should_commit, metadata_hashes=metadata_hashes) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n\n\n\n", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.4458508, "supported_languages": null}, "macro.elementary.get_dbt_tests_empty_table_query": {"name": "get_dbt_tests_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.get_dbt_tests_empty_table_query", "macro_sql": "{% macro get_dbt_tests_empty_table_query() %}\n    {% set dbt_tests_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                 ('database_name', 'string'),\n                                                                 ('schema_name', 'string'),\n                                                                 ('name', 'string'),\n                                                                 ('short_name', 'string'),\n                                                                 ('alias', 'string'),\n                                                                 ('test_column_name', 'string'),\n                                                                 ('severity', 'string'),\n                                                                 ('warn_if', 'string'),\n                                                                 ('error_if', 'string'),\n                                                                 ('test_params', 'long_string'),\n                                                                 ('test_namespace', 'string'),\n                                                                 ('tags', 'long_string'),\n                                                                 ('model_tags', 'long_string'),\n                                                                 ('model_owners', 'long_string'),\n                                                                 ('meta', 'long_string'),\n                                                                 ('depends_on_macros', 'long_string'),\n                                                                 ('depends_on_nodes', 'long_string'),\n                                                                 ('parent_model_unique_id', 'string'),\n                                                                 ('description', 'long_string'),\n                                                                 ('package_name', 'string'),\n                                                                 ('type', 'string'),\n                                                                 ('original_path', 'long_string'),\n                                                                 ('path', 'string'),\n                                                                 ('generated_at', 'string'),\n                                                                 ('metadata_hash', 'string'),\n                                                                 ]) %}\n    {{ return(dbt_tests_empty_table_query) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.447009, "supported_languages": null}, "macro.elementary.flatten_test": {"name": "flatten_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.flatten_test", "macro_sql": "{% macro flatten_test(node_dict) %}\n    {% set config_dict = elementary.safe_get_with_default(node_dict, 'config', {}) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n\n    {% set test_metadata = elementary.safe_get_with_default(node_dict, 'test_metadata', {}) %}\n    {% set test_namespace = test_metadata.get('namespace') %}\n    {% set test_short_name = elementary.get_test_short_name(node_dict, test_metadata) %}\n\n    {% set default_description = elementary.get_default_description(test_short_name, test_namespace) %}\n\n    {% set config_meta_dict = elementary.safe_get_with_default(config_dict, 'meta', {}) %}\n    {% set meta_dict = {} %}\n    {% if default_description %}\n        {% set meta_dict =  {'description': default_description} %} \n    {% endif %}\n    {% do meta_dict.update(elementary.safe_get_with_default(node_dict, 'meta', {})) %}\n    {% do meta_dict.update(config_meta_dict) %}\n\n    {% set config_tags = elementary.safe_get_with_default(config_dict, 'tags', []) %}\n    {% set global_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n    {% set tags = elementary.union_lists(config_tags, global_tags) %}\n    {% set tags = elementary.union_lists(tags, meta_tags) %}\n\n    {% set test_model_unique_ids = elementary.get_parent_model_unique_ids_from_test_node(node_dict) %}\n    {% set test_model_nodes = elementary.get_nodes_by_unique_ids(test_model_unique_ids) %}\n    {% set test_models_owners = [] %}\n    {% set test_models_tags = [] %}\n    {% for test_model_node in test_model_nodes %}\n        {% set flatten_test_model_node = elementary.flatten_model(test_model_node) %}\n        {% set test_model_owner = flatten_test_model_node.get('owner') %}\n        {% if test_model_owner %}\n            {% if test_model_owner is string %}\n                {% set owners = test_model_owner.split(',') %}\n                {% for owner in owners %}\n                    {% do test_models_owners.append(owner | trim) %}  \n                {% endfor %}\n            {% elif test_model_owner is iterable %}\n                {% do test_models_owners.extend(test_model_owner) %}\n            {% endif %}\n        {% endif %}\n        {% set test_model_tags = flatten_test_model_node.get('tags') %}\n        {% if test_model_tags and test_model_tags is sequence %}\n            {% do test_models_tags.extend(test_model_tags) %}\n        {% endif %}\n    {% endfor %}\n    {% set test_models_owners = test_models_owners | unique | list %}\n    {% set test_models_tags = test_models_tags | unique | list %}\n\n    {% set test_kwargs = elementary.safe_get_with_default(test_metadata, 'kwargs', {}) %}\n\n    {% set primary_test_model_id = namespace(data=none) %}\n    {% if test_model_unique_ids | length == 1 %}\n        {# if only one parent model for this test, simply use this model #}\n        {% set primary_test_model_id.data = test_model_unique_ids[0] %}\n    {% else %}\n      {% set test_model_jinja = test_kwargs.get('model') %}\n      {% if test_model_jinja %}\n        {% set test_model_name_matches = modules.re.findall(\"ref\\(['\\\"](\\w+)['\\\"]\\)\", test_model_jinja) %}\n        {% if test_model_name_matches | length == 1 %}\n          {% set test_model_name = test_model_name_matches[0] %}\n          {% for test_model_unique_id in test_model_unique_ids %}\n              {% set split_test_model_unique_id = test_model_unique_id.split('.') %}\n              {% if split_test_model_unique_id and split_test_model_unique_id | length > 0 %}\n                  {% set test_node_model_name = split_test_model_unique_id[-1] %}\n                  {% if test_node_model_name == test_model_name %}\n                    {% set primary_test_model_id.data = test_model_unique_id %}\n                  {% endif %}\n              {% endif %}\n          {% endfor %}\n        {% endif %}\n      {% endif %}\n    {% endif %}\n\n    {% set primary_test_model_database = none %}\n    {% set primary_test_model_schema = none %}\n    {%- if primary_test_model_id.data is not none -%}\n        {% set tested_model_node = elementary.get_node(primary_test_model_id.data) %}\n        {%- if tested_model_node -%}\n            {% set primary_test_model_database = tested_model_node.get('database') %}\n            {% set primary_test_model_schema = tested_model_node.get('schema') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {%- if primary_test_model_database is none or primary_test_model_schema is none -%}\n        {# This is mainly here to support singular test cases with multiple referred models, in this case the tested node is being used to extract the db and schema #}\n        {% set primary_test_model_database, primary_test_model_schema = elementary.get_model_database_and_schema_from_test_node(node_dict) %}\n    {%- endif -%}\n\n    {% set original_file_path = node_dict.get('original_file_path') %}\n    {% set flatten_test_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'short_name': test_short_name,\n        'alias': node_dict.get('alias'),\n        'test_column_name': node_dict.get('column_name'),\n        'severity': config_dict.get('severity'),\n        'warn_if': config_dict.get('warn_if'),\n        'error_if': config_dict.get('error_if'),\n        'test_params': test_kwargs,\n        'test_namespace': test_namespace,\n        'tags': tags,\n        'model_tags': test_models_tags,\n        'model_owners': test_models_owners,\n        'meta': meta_dict,\n        'database_name': primary_test_model_database,\n        'schema_name': primary_test_model_schema,\n        'depends_on_macros': depends_on_dict.get('macros', []),\n        'depends_on_nodes': depends_on_dict.get('nodes', []),\n        'parent_model_unique_id': primary_test_model_id.data,\n        'description': meta_dict.get('description'),\n        'name': node_dict.get('name'),\n        'package_name': node_dict.get('package_name'),\n        'type': elementary.get_test_type(original_file_path, test_namespace),\n        'original_path': original_file_path,\n        'compiled_code': elementary.get_compiled_code(node_dict),\n        'path': node_dict.get('path'),\n        'generated_at': elementary.datetime_now_utc_as_string()\n    }%}\n    {% do flatten_test_metadata_dict.update({\"metadata_hash\": elementary.get_artifact_metadata_hash(flatten_test_metadata_dict)}) %}\n    {{ return(flatten_test_metadata_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.get_test_short_name", "macro.elementary.get_default_description", "macro.elementary.union_lists", "macro.elementary.get_parent_model_unique_ids_from_test_node", "macro.elementary.get_nodes_by_unique_ids", "macro.elementary.flatten_model", "macro.elementary.get_node", "macro.elementary.get_model_database_and_schema_from_test_node", "macro.elementary.get_test_type", "macro.elementary.get_compiled_code", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.get_artifact_metadata_hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.452514, "supported_languages": null}, "macro.elementary.get_test_type": {"name": "get_test_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.get_test_type", "macro_sql": "{% macro get_test_type(test_path, test_namespace = none) %}\n    {% set test_type = 'generic' %}\n    {%- if test_namespace == 'dbt_expectations' -%}\n        {% set test_type = 'expectation' %}\n    {%- elif 'tests/generic' in test_path or 'macros/' in test_path -%}\n        {% set test_type = 'generic' %}\n    {%- elif 'tests/' in test_path -%}\n        {% set test_type = 'singular' %}\n    {%- endif -%}\n    {{- return(test_type) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.45299, "supported_languages": null}, "macro.elementary.get_test_short_name": {"name": "get_test_short_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.get_test_short_name", "macro_sql": "{% macro get_test_short_name(node_dict, test_metadata) %}\n    {#\n    If there is a custom name it overrides the dbt auto generated long name.\n    This is a best effort to extract custom names.\n    dbt automated name generation -\n        - Generic test long name starts with the generic name or source_generic\n        - Generic tests from packages long name starts with the package_generic or package_source_generic\n    #}\n\n    {% set generic_test_name = test_metadata.get('name') %} {# 'unique', 'relationships', 'volume_anomalies' etc #}\n    {% set test_package_name = test_metadata.get('namespace') %}\n    {% set test_instance_name = node_dict.get('name') %} {# Test custom name or dbt auto generated long name #}\n    {%- if generic_test_name %}\n        {%- if test_package_name %}\n            {% set test_short_name =\n                generic_test_name if (test_instance_name.startswith(test_package_name + '_' + generic_test_name) or test_instance_name.startswith(test_package_name + '_source_' + generic_test_name))\n                else test_instance_name\n            %}\n        {%- else %}\n            {% set test_short_name =\n                generic_test_name if (test_instance_name.startswith(generic_test_name) or test_instance_name.startswith('source_' + generic_test_name))\n                else test_instance_name\n            %}\n        {%- endif %}\n        {{ return(test_short_name) }}\n    {%- else %}\n        {{ return(test_instance_name) }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.453847, "supported_languages": null}, "macro.elementary.get_default_description": {"name": "get_default_description", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "unique_id": "macro.elementary.get_default_description", "macro_sql": "{% macro get_default_description(short_name, test_namespace = none) %}\n    {# Relevant for dbt_expectations 0.8.0 #}\n    {% set dbt_expectations_descriptions_map = {\n        \"expect_column_to_exist\": \"Expect the specified column to exist.\",\n        \"expect_row_values_to_have_recent_data\": \"Expect the model to have rows that are at least as recent as the defined interval prior to the current timestamp. Optionally gives the possibility to apply filters on the results.\",\n        \"expect_grouped_row_values_to_have_recent_data\": \"Expect the model to have grouped rows that are at least as recent as the defined interval prior to the current timestamp. Use this to test whether there is recent data for each grouped row defined by `group_by` (which is a list of columns) and a `timestamp_column`. Optionally gives the possibility to apply filters on the results.\",\n        \"expect_table_column_count_to_be_between\": \"Expect the number of columns in a model to be between two values.\",\n        \"expect_table_column_count_to_equal_other_table\": \"Expect the number of columns in a model to match another model.\",\n        \"expect_table_columns_to_not_contain_set\": \"Expect the columns in a model not to contain a given list.\",\n        \"expect_table_columns_to_contain_set\": \"Expect the columns in a model to contain a given list.\",\n        \"expect_table_column_count_to_equal\": \"Expect the number of columns in a model to be equal to `expected_number_of_columns`.\",\n        \"expect_table_columns_to_match_ordered_list\": \"Expect the columns to exactly match a specified list.\",\n        \"expect_table_columns_to_match_set\": \"Expect the columns in a model to match a given list.\",\n        \"expect_table_row_count_to_be_between\": \"Expect the number of rows in a model to be between two values.\",\n        \"expect_table_row_count_to_equal_other_table\": \"Expect the number of rows in a model match another model.\",\n        \"expect_table_row_count_to_equal_other_table_times_factor\": \"Expect the number of rows in a model to match another model times a preconfigured factor.\",\n        \"expect_table_row_count_to_equal\": \"Expect the number of rows in a model to be equal to expected_number_of_rows.\",\n        \"expect_column_values_to_be_unique\": \"Expect each column value to be unique.\",\n        \"expect_column_values_to_not_be_null\": \"Expect column values to not be null.\",\n        \"expect_column_values_to_be_null\": \"Expect column values to be null.\",\n        \"expect_column_values_to_be_of_type\": \"Expect a column to be of a specified data type.\",\n        \"expect_column_values_to_be_in_type_list\": \"Expect a column to be one of a specified type list.\",\n        \"expect_column_values_to_have_consistent_casing\": \"Expect a column to have consistent casing. By setting `display_inconsistent_columns` to true, the number of inconsistent values in the column will be displayed in the terminal whereas the inconsistent values themselves will be returned if the SQL compiled test is run.\",\n        \"expect_column_values_to_be_in_set\": \"Expect each column value to be in a given set.\",\n        \"expect_column_values_to_be_between\": \"Expect each column value to be between two values.\",\n        \"expect_column_values_to_not_be_in_set\": \"Expect each column value not to be in a given set.\",\n        \"expect_column_values_to_be_increasing\": \"Expect column values to be increasing. If `strictly: True`, then this expectation is only satisfied if each consecutive value is strictly increasing \u2013 equal values are treated as failures.\",\n        \"expect_column_values_to_be_decreasing\": \"Expect column values to be decreasing. If `strictly=True`, then this expectation is only satisfied if each consecutive value is strictly decreasing \u2013 equal values are treated as failures.\",\n        \"expect_column_value_lengths_to_be_between\": \"Expect column entries to be strings with length between a min_value value and a max_value value (inclusive).\",\n        \"expect_column_value_lengths_to_equal\": \"Expect column entries to be strings with length equal to the provided value.\",\n        \"expect_column_values_to_match_regex\": 'Expect column entries to be strings that match a given regular expression. Valid matches can be found anywhere in the string, for example \"[at]+\" will identify the following strings as expected: \"cat\", \"hat\", \"aa\", \"a\", and \"t\", and the following strings as unexpected: \"fish\", \"dog\". Optionally, `is_raw` indicates the `regex` pattern is a \"raw\" string and should be escaped. The default is `False`.',\n        \"expect_column_values_to_not_match_regex\": 'Expect column entries to be strings that do NOT match a given regular expression. The regex must not match any portion of the provided string. For example, \"[at]+\" would identify the following strings as expected: \"fish\u201d, \"dog\u201d, and the following as unexpected: \"cat\u201d, \"hat\u201d. Optionally, `is_raw` indicates the `regex` pattern is a \"raw\" string and should be escaped. The default is `False`.',\n        \"expect_column_values_to_match_regex_list\": 'Expect the column entries to be strings that can be matched to either any of or all of a list of regular expressions. Matches can be anywhere in the string. Optionally, `is_raw` indicates the `regex` patterns are \"raw\" strings and should be escaped. The default is `False`.',\n        \"expect_column_values_to_not_match_regex_list\": 'Expect the column entries to be strings that do not match any of a list of regular expressions. Matches can be anywhere in the string. Optionally, `is_raw` indicates the `regex` patterns are \"raw\" strings and should be escaped. The default is `False`.',\n        \"expect_column_values_to_match_like_pattern\": \"Expect column entries to be strings that match a given SQL like pattern.\",\n        \"expect_column_values_to_not_match_like_pattern\": \"Expect column entries to be strings that do not match a given SQL like pattern.\",\n        \"expect_column_values_to_match_like_pattern_list\": \"Expect the column entries to be strings that match any of a list of SQL like patterns.\",\n        \"expect_column_values_to_not_match_like_pattern_list\": \"Expect the column entries to be strings that do not match any of a list of SQL like patterns.\",\n        \"expect_column_distinct_count_to_equal\": \"Expect the number of distinct column values to be equal to a given value.\",\n        \"expect_column_distinct_count_to_be_greater_than\": \"Expect the number of distinct column values to be greater than a given value.\",\n        \"expect_column_distinct_count_to_be_less_than\": \"Expect the number of distinct column values to be less than a given value.\",\n        \"expect_column_distinct_values_to_be_in_set\": \"Expect the set of distinct column values to be contained by a given set.\",\n        \"expect_column_distinct_values_to_contain_set\": \"Expect the set of distinct column values to contain a given set. In contrast to `expect_column_values_to_be_in_set` this ensures not that all column values are members of the given set but that values from the set must be present in the column.\",\n        \"expect_column_distinct_values_to_equal_set\": \"Expect the set of distinct column values to equal a given set. In contrast to `expect_column_distinct_values_to_contain_set` this ensures not only that a certain set of values are present in the column but that these and only these values are present.\",\n        \"expect_column_distinct_count_to_equal_other_table\": \"Expect the number of distinct column values to be equal to number of distinct values in another model.\",\n        \"expect_column_mean_to_be_between\": \"Expect the column mean to be between a min_value value and a max_value value (inclusive).\",\n        \"expect_column_median_to_be_between\": \"Expect the column median to be between a min_value value and a max_value value (inclusive).\",\n        \"expect_column_quantile_values_to_be_between\": \"Expect specific provided column quantiles to be between provided min_value and max_value values.\",\n        \"expect_column_stdev_to_be_between\": \"Expect the column standard deviation to be between a min_value value and a max_value value. Uses sample standard deviation (normalized by N-1).\",\n        \"expect_column_unique_value_count_to_be_between\": \"Expect the number of unique values to be between a min_value value and a max_value value.\",\n        \"expect_column_proportion_of_unique_values_to_be_between\": \"Expect the proportion of unique values to be between a min_value value and a max_value value. For example, in a column containing [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], there are 4 unique values and 10 total values for a proportion of 0.4.\",\n        \"expect_column_most_common_value_to_be_in_set\": \"Expect the most common value to be within the designated value set.\",\n        \"expect_column_max_to_be_between\": \"Expect the column max to be between a min and max value.\",\n        \"expect_column_min_to_be_between\": \"Expect the column min to be between a min and max value.\",\n        \"expect_column_sum_to_be_between\": \"Expect the column to sum to be between a min and max value.\",\n        \"expect_column_pair_values_A_to_be_greater_than_B\": \"Expect values in column A to be greater than column B.\",\n        \"expect_column_pair_values_to_be_equal\": \"Expect the values in column A to be the same as column B.\",\n        \"expect_column_pair_values_to_be_in_set\": \"Expect paired values from columns A and B to belong to a set of valid pairs. Note: value pairs are expressed as lists within lists\",\n        \"expect_select_column_values_to_be_unique_within_record\": \"Expect the values for each record to be unique across the columns listed. Note that records can be duplicated.\",\n        \"expect_multicolumn_sum_to_equal\": \"Expects that sum of all rows for a set of columns is equal to a specific value\",\n        \"expect_compound_columns_to_be_unique\": \"Expect that the columns are unique together, e.g. a multi-column primary key.\",\n        \"expect_column_values_to_be_within_n_moving_stdevs\": \"A simple anomaly test based on the assumption that differences between periods in a given time series follow a log-normal distribution. Thus, we would expect the logged differences (vs N periods ago) in metric values to be within Z sigma away from a moving average. By applying a list of columns in the `group_by` parameter, you can also test for deviations within a group.\",\n        \"expect_column_values_to_be_within_n_stdevs\": \"Expects (optionally grouped & summed) metric values to be within Z sigma away from the column average\",\n        \"expect_row_values_to_have_data_for_every_n_datepart\": \"Expects model to have values for every grouped `date_part`.\"\n    } %}\n\n    {% set dbt_tests_descriptions_map = {\n        \"not_null\": \"This test validates that there are no `null` values present in a column.\",\n        \"unique\": \"This test validates that there are no duplicate values present in a field.\",\n        \"accepted_values\": \"This test validates that all of the values in a column are present in a supplied list of `values`. If any values other than those provided in the list are present, then the test will fail.\",\n        \"relationships\": 'This test validates that all of the records in a child table have a corresponding record in a parent table. This property is referred to as \"referential integrity\".'\n    } %}\n\n    {% set default_description = none %}\n    {% if test_namespace == 'dbt_expectations' %}\n        {% set default_description = dbt_expectations_descriptions_map.get(short_name) %}\n    {% elif test_namespace == 'dbt' or test_namespace is none %}\n        {% set default_description = dbt_tests_descriptions_map.get(short_name) %}\n    {% endif %}\n\n    {{ return(default_description) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.456276, "supported_languages": null}, "macro.elementary.upload_dbt_exposures": {"name": "upload_dbt_exposures", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "unique_id": "macro.elementary.upload_dbt_exposures", "macro_sql": "{%- macro upload_dbt_exposures(should_commit=false, metadata_hashes=none) -%}\n    {% set relation = elementary.get_elementary_relation('dbt_exposures') %}\n    {% if execute and relation %}\n        {% set exposures = graph.exposures.values() | selectattr('resource_type', '==', 'exposure') %}\n        {% do elementary.upload_artifacts_to_table(relation, exposures, elementary.flatten_exposure, should_commit=should_commit, metadata_hashes=metadata_hashes) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.elementary.get_elementary_relation", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.459467, "supported_languages": null}, "macro.elementary.get_dbt_exposures_empty_table_query": {"name": "get_dbt_exposures_empty_table_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "unique_id": "macro.elementary.get_dbt_exposures_empty_table_query", "macro_sql": "{% macro get_dbt_exposures_empty_table_query() %}\n    {% set dbt_exposures_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                     ('name', 'string'),\n                                                                     ('maturity', 'string'),\n                                                                     ('type', 'string'),\n                                                                     ('owner_email', 'string'),\n                                                                     ('owner_name', 'string'),\n                                                                     ('url', 'long_string'),\n                                                                     ('depends_on_macros', 'long_string'),\n                                                                     ('depends_on_nodes', 'long_string'),\n                                                                     ('description', 'long_string'),\n                                                                     ('tags', 'long_string'),\n                                                                     ('meta', 'long_string'),\n                                                                     ('package_name', 'string'),\n                                                                     ('original_path', 'long_string'),\n                                                                     ('path', 'string'),\n                                                                     ('generated_at', 'string'),\n                                                                     ('metadata_hash', 'string'),\n                                                                     ]) %}\n    {{ return(dbt_exposures_empty_table_query) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.46029, "supported_languages": null}, "macro.elementary.flatten_exposure": {"name": "flatten_exposure", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "unique_id": "macro.elementary.flatten_exposure", "macro_sql": "{% macro flatten_exposure(node_dict) %}\n    {% set owner_dict = elementary.safe_get_with_default(node_dict, 'owner', {}) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% set tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set flatten_exposure_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'name': node_dict.get('name'),\n        'maturity': node_dict.get('maturity'),\n        'type': node_dict.get('type'),\n        'owner_email': owner_dict.get('email'),\n        'owner_name': owner_dict.get('name'),\n        'url': node_dict.get('url'),\n        'depends_on_macros': depends_on_dict.get('macros', []),\n        'depends_on_nodes': depends_on_dict.get('nodes', []),\n        'description': node_dict.get('description'),\n        'tags': tags,\n        'meta': meta_dict,\n        'package_name': node_dict.get('package_name'),\n        'original_path': node_dict.get('original_file_path'),\n        'path': node_dict.get('path'),\n        'generated_at': elementary.datetime_now_utc_as_string()\n      }%}\n    {% do flatten_exposure_metadata_dict.update({\"metadata_hash\": elementary.get_artifact_metadata_hash(flatten_exposure_metadata_dict)}) %}\n    {{ return(flatten_exposure_metadata_dict) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.datetime_now_utc_as_string", "macro.elementary.get_artifact_metadata_hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.461748, "supported_languages": null}, "macro.elementary.construct_metric_properties_dict": {"name": "construct_metric_properties_dict", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/anomaly_detection/construct_metric_properties_dict.sql", "original_file_path": "macros/edr/data_monitoring/anomaly_detection/construct_metric_properties_dict.sql", "unique_id": "macro.elementary.construct_metric_properties_dict", "macro_sql": "{% macro construct_metric_properties_dict(timestamp_column, where_expression, time_bucket, freshness_column=none, event_timestamp_column=none) %}\n  {# each one of the params will go into the returned dictionary, unless \"Undefined\" which would be converted to \"None\" #}\n  {%set d = {'timestamp_column': ( timestamp_column if timestamp_column else None ) ,\n             'where_expression': ( where_expression if where_expression else None ) ,\n             'time_bucket':      ( time_bucket if time_bucket else None )           ,\n             'freshness_column': (freshness_column if freshness_column else None  ) ,\n             'event_timestamp_column':(event_timestamp_column if event_timestamp_column\n                                                              else None           )} %}\n  {% do return(d) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.462416, "supported_languages": null}, "macro.elementary.get_anomaly_scores_query": {"name": "get_anomaly_scores_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/anomaly_detection/get_anomaly_scores_query.sql", "original_file_path": "macros/edr/data_monitoring/anomaly_detection/get_anomaly_scores_query.sql", "unique_id": "macro.elementary.get_anomaly_scores_query", "macro_sql": "{% macro get_anomaly_scores_query(test_metrics_table_relation, model_graph_node, sensitivity, backfill_days, monitors, column_name = none, columns_only = false, dimensions = none, metric_properties = none, data_monitoring_metrics_table=none) %}\n\n    {%- set full_table_name = elementary.model_node_to_full_name(model_graph_node) %}\n    {%- set test_execution_id = elementary.get_test_execution_id() %}\n    {%- set test_unique_id = elementary.get_test_unique_id() %}\n\n    {% if not data_monitoring_metrics_table %}\n        {#  data_monitoring_metrics_table is none except for integration-tests that test the get_anomaly_scores_query macro,\n          and in which case it holds mock history metrics #}\n          {% set data_monitoring_metrics_table = ref('data_monitoring_metrics') %}\n        {% endif %}\n\n\n    {% if elementary.is_incremental_model(model_graph_node) %}\n      {% set latest_full_refresh = elementary.get_latest_full_refresh(model_graph_node) %}\n    {% else %}\n      {% set latest_full_refresh = none %}\n    {% endif %}\n\n    {% set anomaly_scores_query %}\n\n        with data_monitoring_metrics as (\n\n            select * from {{ data_monitoring_metrics_table }}\n            {# We use bucket_end because non-timestamp tests have only bucket_end field. #}\n            where\n                bucket_end >= {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_min_bucket_end())) }}\n                and metric_properties = {{ elementary.dict_to_quoted_json(metric_properties) }}\n                {% if latest_full_refresh %}\n                    and updated_at > {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(latest_full_refresh)) }}\n                {% endif %}\n                and upper(full_table_name) = upper('{{ full_table_name }}')\n                and metric_name in {{ elementary.strings_list_to_tuple(monitors) }}\n                {%- if column_name %}\n                    and upper(column_name) = upper('{{ column_name }}')\n                {%- endif %}\n                {%- if columns_only %}\n                    and column_name is not null\n                {%- endif %}\n                {% if dimensions %}\n                    and dimension = {{ elementary.edr_quote(elementary.join_list(dimensions, '; ')) }}\n                {% endif %}\n        ),\n\n        union_metrics as (\n\n            select * from data_monitoring_metrics\n            union all\n            select * from {{ test_metrics_table_relation }}\n\n        ),\n\n        grouped_metrics_duplicates as (\n\n            select\n                id,\n                full_table_name,\n                column_name,\n                metric_name,\n                metric_value,\n                source_value,\n                bucket_start,\n                bucket_end,\n                bucket_duration_hours,\n                updated_at,\n                dimension,\n                dimension_value,\n                row_number() over (partition by id order by updated_at desc) as row_number\n            from union_metrics\n\n        ),\n\n        grouped_metrics as (\n\n            select\n                id as metric_id,\n                full_table_name,\n                column_name,\n                dimension,\n                dimension_value,\n                metric_name,\n                metric_value,\n                source_value,\n                bucket_start,\n                bucket_end,\n                bucket_duration_hours,\n                updated_at\n            from grouped_metrics_duplicates\n            where row_number = 1\n\n        ),\n\n        time_window_aggregation as (\n\n            select\n                metric_id,\n                full_table_name,\n                column_name,\n                dimension,\n                dimension_value,\n                metric_name,\n                metric_value,\n                source_value,\n                bucket_start,\n                bucket_end,\n                bucket_duration_hours,\n                updated_at,\n                avg(metric_value) over (partition by metric_name, full_table_name, column_name, dimension, dimension_value order by bucket_end asc rows between unbounded preceding and current row) as training_avg,\n                stddev(metric_value) over (partition by metric_name, full_table_name, column_name, dimension, dimension_value order by bucket_end asc rows between unbounded preceding and current row) as training_stddev,\n                count(metric_value) over (partition by metric_name, full_table_name, column_name, dimension, dimension_value order by bucket_end asc rows between unbounded preceding and current row) as training_set_size,\n                last_value(bucket_end) over (partition by metric_name, full_table_name, column_name, dimension, dimension_value order by bucket_end asc rows between unbounded preceding and current row) training_end,\n                first_value(bucket_end) over (partition by metric_name, full_table_name, column_name, dimension, dimension_value order by bucket_end asc rows between unbounded preceding and current row) as training_start\n            from grouped_metrics\n            {{ dbt_utils.group_by(12) }}\n        ),\n\n        anomaly_scores as (\n\n            select\n                {{ elementary.generate_surrogate_key([\n                 'metric_id',\n                 elementary.const_as_string(test_execution_id)\n                ]) }} as id,\n                metric_id,\n                {{ elementary.const_as_string(test_execution_id) }} as test_execution_id,\n                {{ elementary.const_as_string(test_unique_id) }} as test_unique_id,\n                {{ elementary.current_timestamp_column() }} as detected_at,\n                full_table_name,\n                column_name,\n                metric_name,\n                case\n                    when training_stddev is null then null\n                    when training_stddev = 0 then 0\n                    else (metric_value - training_avg) / (training_stddev)\n                end as anomaly_score,\n                {{ sensitivity }} as anomaly_score_threshold,\n                source_value as anomalous_value,\n                bucket_start,\n                bucket_end,\n                metric_value,\n                case \n                    when training_stddev is null then null\n                    else (-1) * {{ sensitivity }} * training_stddev + training_avg\n                end as min_metric_value,\n                case \n                    when training_stddev is null then null\n                    else {{ sensitivity }} * training_stddev + training_avg \n                end as max_metric_value,\n                training_avg,\n                training_stddev,\n                training_set_size,\n                training_start,\n                training_end,\n                dimension,\n                dimension_value\n            from time_window_aggregation\n            where\n                metric_value is not null\n                and training_avg is not null\n        )\n\n        select * from anomaly_scores\n\n    {% endset %}\n    {{ return(anomaly_scores_query) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.model_node_to_full_name", "macro.elementary.get_test_execution_id", "macro.elementary.get_test_unique_id", "macro.elementary.is_incremental_model", "macro.elementary.get_latest_full_refresh", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_quote", "macro.elementary.get_min_bucket_end", "macro.elementary.dict_to_quoted_json", "macro.elementary.strings_list_to_tuple", "macro.elementary.join_list", "macro.dbt_utils.group_by", "macro.elementary.generate_surrogate_key", "macro.elementary.const_as_string", "macro.elementary.current_timestamp_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.46826, "supported_languages": null}, "macro.elementary.row_count": {"name": "row_count", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/table_monitors.sql", "unique_id": "macro.elementary.row_count", "macro_sql": "{% macro row_count() -%}\n    count(*)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.46837, "supported_languages": null}, "macro.elementary.max_length": {"name": "max_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "unique_id": "macro.elementary.max_length", "macro_sql": "{% macro max_length(column_name) -%}\n    max(length({{ column_name }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.468699, "supported_languages": null}, "macro.elementary.min_length": {"name": "min_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "unique_id": "macro.elementary.min_length", "macro_sql": "{% macro min_length(column_name) -%}\n    min(length({{ column_name }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.468797, "supported_languages": null}, "macro.elementary.average_length": {"name": "average_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "unique_id": "macro.elementary.average_length", "macro_sql": "{% macro average_length(column_name) -%}\n    avg(length({{ column_name }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.4688919, "supported_languages": null}, "macro.elementary.missing_count": {"name": "missing_count", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "unique_id": "macro.elementary.missing_count", "macro_sql": "{% macro missing_count(column_name) %}\n    coalesce(sum(case when {{ column_name }} is null then 1 when trim({{ column_name }}, ' ') = '' then 1 when lower({{ column_name }}) = 'null' then 1 else 0 end), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.469027, "supported_languages": null}, "macro.elementary.missing_percent": {"name": "missing_percent", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "unique_id": "macro.elementary.missing_percent", "macro_sql": "{% macro missing_percent(column_name) %}\n    {{ elementary.edr_percent(elementary.missing_count(column_name), elementary.row_count()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_percent", "macro.elementary.missing_count", "macro.elementary.row_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.469203, "supported_languages": null}, "macro.elementary.null_count": {"name": "null_count", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "unique_id": "macro.elementary.null_count", "macro_sql": "{% macro null_count(column_name) %}\n    coalesce(sum(case when {{ column_name }} is null then 1 else 0 end), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.469374, "supported_languages": null}, "macro.elementary.null_percent": {"name": "null_percent", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "unique_id": "macro.elementary.null_percent", "macro_sql": "{% macro null_percent(column_name) %}\n    {{ elementary.edr_percent(elementary.null_count(column_name), elementary.row_count()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_percent", "macro.elementary.null_count", "macro.elementary.row_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.469554, "supported_languages": null}, "macro.elementary.get_available_monitors": {"name": "get_available_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/monitors.sql", "unique_id": "macro.elementary.get_available_monitors", "macro_sql": "{% macro get_available_monitors() %}\n    {% do return({\n      'table': ['row_count', 'freshness'],\n      'column_any_type': ['null_count', 'null_percent'],\n      'column_string': ['min_length', 'max_length', 'average_length', 'missing_count', 'missing_percent'],\n      'column_numeric': ['min', 'max', 'zero_count', 'zero_percent', 'average', 'standard_deviation', 'variance', 'sum']\n    }) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.470218, "supported_languages": null}, "macro.elementary.get_default_monitors": {"name": "get_default_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/monitors.sql", "unique_id": "macro.elementary.get_default_monitors", "macro_sql": "{% macro get_default_monitors() %}\n    {% do return({\n      'table': ['row_count', 'freshness'],\n      'column_any_type': ['null_count', 'null_percent'],\n      'column_string': ['min_length', 'max_length', 'average_length', 'missing_count', 'missing_percent'],\n      'column_numeric': ['min', 'max', 'zero_count', 'zero_percent', 'average', 'standard_deviation', 'variance']\n    }) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.470638, "supported_languages": null}, "macro.elementary.max": {"name": "max", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.max", "macro_sql": "{% macro max(column_name) -%}\n    max(cast({{ column_name }} as {{ elementary.edr_type_float() }}))\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.4713368, "supported_languages": null}, "macro.elementary.min": {"name": "min", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.min", "macro_sql": "{% macro min(column_name) -%}\n    min(cast({{ column_name }} as {{ elementary.edr_type_float() }}))\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.471471, "supported_languages": null}, "macro.elementary.average": {"name": "average", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.average", "macro_sql": "{% macro average(column_name) -%}\n    avg(cast({{ column_name }} as {{ elementary.edr_type_float() }}))\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.4716082, "supported_languages": null}, "macro.elementary.zero_count": {"name": "zero_count", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.zero_count", "macro_sql": "{% macro zero_count(column_name) %}\n    coalesce(sum(case when {{ column_name }} is null then 1 when cast({{ column_name }} as {{ elementary.edr_type_float() }}) = 0 then 1 else 0 end), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.471833, "supported_languages": null}, "macro.elementary.zero_percent": {"name": "zero_percent", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.zero_percent", "macro_sql": "{% macro zero_percent(column_name) %}\n    {{ elementary.edr_percent(elementary.zero_count(column_name), elementary.row_count()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_percent", "macro.elementary.zero_count", "macro.elementary.row_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.472019, "supported_languages": null}, "macro.elementary.standard_deviation": {"name": "standard_deviation", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.standard_deviation", "macro_sql": "{% macro standard_deviation(column_name) -%}\n    stddev(cast({{ column_name }} as {{ elementary.edr_type_float() }}))\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.4721558, "supported_languages": null}, "macro.elementary.variance": {"name": "variance", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.variance", "macro_sql": "{% macro variance(column_name) -%}\n    variance(cast({{ column_name }} as {{ elementary.edr_type_float() }}))\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.472288, "supported_languages": null}, "macro.elementary.sum": {"name": "sum", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "unique_id": "macro.elementary.sum", "macro_sql": "{% macro sum(column_name) -%}\n    sum(cast({{ column_name }} as {{ elementary.edr_type_float() }}))\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.472422, "supported_languages": null}, "macro.elementary.get_last_schema_changes_time": {"name": "get_last_schema_changes_time", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/schema_changes/get_last_schema_changes_time.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_last_schema_changes_time.sql", "unique_id": "macro.elementary.get_last_schema_changes_time", "macro_sql": "{% macro get_last_schema_changes_time() %}\n    -- depends_on: {{ ref('elementary_test_results') }}\n    {%- if execute -%}\n        {%- set last_schema_changes_time_query %}\n            select max(detected_at) as last_alert_time\n            from {{ ref('elementary_test_results') }}\n            where test_type = 'schema_change' and test_sub_type != 'table_added'\n        {%- endset %}\n\n        {%- set last_schema_changes_query_result = elementary.result_value(last_schema_changes_time_query) %}\n\n        {%- if last_schema_changes_query_result %}\n            {{ return(last_schema_changes_query_result) }}\n        {%- else %}\n            {{ return(none) }}\n        {%- endif %}\n    {%- endif -%}\n    {{- return(none) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.result_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.473092, "supported_languages": null}, "macro.elementary.get_columns_snapshot_query": {"name": "get_columns_snapshot_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/schema_changes/get_columns_snapshot_query.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_columns_snapshot_query.sql", "unique_id": "macro.elementary.get_columns_snapshot_query", "macro_sql": "{% macro get_columns_snapshot_query(full_table_name) %}\n\n    {%- set known_columns_query %}\n        select full_column_name from {{ ref('schema_columns_snapshot') }}\n        where detected_at = (select max(detected_at) from {{ ref('schema_columns_snapshot') }} where lower(full_table_name) = lower('{{ full_table_name }}'))\n        and lower(full_table_name) = lower('{{ full_table_name }}')\n    {% endset %}\n\n    {%- set known_tables_query %}\n        select distinct full_table_name from {{ ref('schema_columns_snapshot') }}\n        where detected_at = (select max(detected_at) from {{ ref('schema_columns_snapshot') }} where lower(full_table_name) = lower('{{ full_table_name }}'))\n        and lower(full_table_name) = lower('{{ full_table_name }}')\n    {% endset %}\n\n\n    with information_schema_columns as (\n\n        select * from {{ ref('filtered_information_schema_columns') }}\n        where lower(full_table_name) = lower('{{ full_table_name }}')\n\n    ),\n\n    columns_snapshot as (\n\n        select\n            full_table_name,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            cast(data_type as {{ elementary.edr_type_string() }}) as data_type,\n            {{ elementary.datetime_now_utc_as_timestamp_column() }} as detected_at,\n            case when\n                    {{ elementary.full_column_name() }} not in ({{ known_columns_query }})\n                    and full_table_name in ({{ known_tables_query }})\n                then true\n                else false\n            end as is_new\n        from information_schema_columns\n\n    ),\n\n    columns_snapshot_with_id as (\n\n        select\n            {{ elementary.generate_surrogate_key([\n              'full_table_name',\n              'column_name',\n              'data_type'\n            ]) }} as column_state_id,\n            {{ elementary.full_column_name() }} as full_column_name,\n            full_table_name,\n            column_name,\n            data_type,\n            is_new,\n            detected_at\n        from columns_snapshot\n        group by 1,2,3,4,5,6,7\n\n    )\n\n    select\n        {{ elementary.edr_cast_as_string('column_state_id') }} as column_state_id,\n        {{ elementary.edr_cast_as_string('full_column_name') }} as full_column_name,\n        {{ elementary.edr_cast_as_string('full_table_name') }} as full_table_name,\n        {{ elementary.edr_cast_as_string('column_name') }} as column_name,\n        {{ elementary.edr_cast_as_string('data_type') }} as data_type,\n        {{ elementary.edr_cast_as_bool('is_new') }} as is_new,\n        {{ elementary.edr_cast_as_timestamp('detected_at') }} as detected_at\n    from columns_snapshot_with_id\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_string", "macro.elementary.datetime_now_utc_as_timestamp_column", "macro.elementary.full_column_name", "macro.elementary.generate_surrogate_key", "macro.elementary.edr_cast_as_string", "macro.elementary.edr_cast_as_bool", "macro.elementary.edr_cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.475889, "supported_languages": null}, "macro.elementary.get_columns_changes_from_last_run_query": {"name": "get_columns_changes_from_last_run_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "unique_id": "macro.elementary.get_columns_changes_from_last_run_query", "macro_sql": "{% macro get_columns_changes_from_last_run_query(full_table_name, temp_columns_snapshot_relation) %}\n    {%- set previous_schema_time_query -%}\n        (select max(detected_at) from {{ ref('schema_columns_snapshot') }} where lower(full_table_name) = lower('{{ full_table_name }}'))\n    {%- endset %}\n\n    {% set cur %}\n        {# This is the current snapshot of the columns. #}\n        select full_table_name, column_name, data_type, is_new, detected_at\n        from {{ temp_columns_snapshot_relation }}\n    {% endset %}\n\n    {% set pre %}\n        {# This is the previous snapshot of the columns. #}\n        select full_table_name, column_name, data_type, detected_at\n        from {{ ref('schema_columns_snapshot') }}\n        where lower(full_table_name) = lower('{{ full_table_name }}')\n            and detected_at = {{ previous_schema_time_query }}\n        order by detected_at desc\n    {% endset %}\n\n    {{ elementary.get_columns_changes_query_generic(full_table_name, cur, pre) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_columns_changes_query_generic"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.4781911, "supported_languages": null}, "macro.elementary.get_column_changes_from_baseline_query": {"name": "get_column_changes_from_baseline_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "unique_id": "macro.elementary.get_column_changes_from_baseline_query", "macro_sql": "{% macro get_column_changes_from_baseline_query(full_table_name, model_baseline_relation, include_added=False) %}\n    {% set cur %}\n        with baseline as (\n            select lower(column_name) as column_name, data_type\n            from {{ model_baseline_relation }}\n        )\n\n        select\n            info_schema.full_table_name,\n            lower(info_schema.column_name) as column_name,\n            info_schema.data_type,\n            (baseline.column_name IS NULL) as is_new,\n            {{ elementary.datetime_now_utc_as_timestamp_column() }} as detected_at\n        from {{ ref('filtered_information_schema_columns') }} info_schema\n        left join baseline on (\n            lower(info_schema.column_name) = lower(baseline.column_name)\n        )\n        where lower(info_schema.full_table_name) = lower('{{ full_table_name }}')\n    {% endset %}\n\n    {% set pre %}\n        select\n            {{ elementary.const_as_string(full_table_name) }} as full_table_name,\n            column_name,\n            data_type,\n            {{ elementary.datetime_now_utc_as_timestamp_column() }} as detected_at\n        from {{ model_baseline_relation }}\n    {% endset %}\n\n    {{ elementary.get_columns_changes_query_generic(full_table_name, cur, pre, include_added=include_added) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.datetime_now_utc_as_timestamp_column", "macro.elementary.const_as_string", "macro.elementary.get_columns_changes_query_generic"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.478729, "supported_languages": null}, "macro.elementary.get_columns_changes_query_generic": {"name": "get_columns_changes_query_generic", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_columns_changes_query.sql", "unique_id": "macro.elementary.get_columns_changes_query_generic", "macro_sql": "{% macro get_columns_changes_query_generic(full_table_name, cur, pre, include_added=True) %}\n    {%- set test_execution_id = elementary.get_test_execution_id() %}\n    {%- set test_unique_id = elementary.get_test_unique_id() %}\n\n    with cur as (\n        {{ cur }}\n    ),\n\n    pre as (\n        {{ pre }}\n    ),\n\n    type_changes as (\n\n        {# Finding the columns that have changed type. #}\n        select\n            cur.full_table_name,\n            'type_changed' as change,\n            cur.column_name,\n            cur.data_type as data_type,\n            pre.data_type as pre_data_type,\n            pre.detected_at\n        from cur inner join pre\n            on (lower(cur.full_table_name) = lower(pre.full_table_name) and lower(cur.column_name) = lower(pre.column_name))\n        where pre.data_type IS NOT NULL AND lower(cur.data_type) != lower(pre.data_type)\n\n    ),\n\n    {% if include_added %}\n    columns_added as (\n\n        {# This is the columns that have been added. #}\n        select\n            full_table_name,\n            'column_added' as change,\n            column_name,\n            data_type,\n            {{ elementary.null_string() }} as pre_data_type,\n            detected_at as detected_at\n        from cur\n        where is_new = true\n\n    ),\n    {% endif %}\n\n    columns_removed as (\n\n        {# This is finding the columns that have been removed. #}\n        select\n            pre.full_table_name,\n            'column_removed' as change,\n            pre.column_name as column_name,\n            {{ elementary.null_string() }} as data_type,\n            pre.data_type as pre_data_type,\n            pre.detected_at as detected_at\n        from pre left join cur\n            on (lower(cur.full_table_name) = lower(pre.full_table_name) and lower(cur.column_name) = lower(pre.column_name))\n        where cur.full_table_name is null and cur.column_name is null\n\n    ),\n\n    columns_removed_filter_deleted_tables as (\n\n        {# This is filtering out the columns of tables that have been deleted. #}\n        select\n            removed.full_table_name,\n            removed.change,\n            removed.column_name,\n            removed.data_type,\n            removed.pre_data_type,\n            removed.detected_at\n        from columns_removed as removed join cur\n            on (lower(removed.full_table_name) = lower(cur.full_table_name))\n\n    ),\n\n    all_column_changes as (\n\n        {# Combining the results of the three queries into one table. #}\n        select * from type_changes\n        union all\n        select * from columns_removed_filter_deleted_tables\n        {% if include_added %}\n        union all\n        select * from columns_added\n        {% endif %}\n    ),\n\n    column_changes_test_results as (\n\n        {# This is the query that is creating the test results table, by formatting a description and adding id + detection time #}\n        select\n            {{ elementary.generate_surrogate_key(['full_table_name', 'column_name', 'change', 'detected_at']) }} as data_issue_id,\n            {{ elementary.datetime_now_utc_as_timestamp_column() }} as detected_at,\n            {{ elementary.full_name_split('database_name') }},\n            {{ elementary.full_name_split('schema_name') }},\n            {{ elementary.full_name_split('table_name') }},\n            column_name,\n            'schema_change' as test_type,\n            change as test_sub_type,\n            case\n                when change = 'column_added'\n                    then 'The column \"' || column_name || '\" was added'\n                when change= 'column_removed'\n                    then 'The column \"' || column_name || '\" was removed'\n                when change= 'type_changed'\n                    then 'The type of \"' || column_name || '\" was changed from ' || pre_data_type || ' to ' || data_type\n                else NULL\n            end as test_results_description\n        from all_column_changes\n        {{ dbt_utils.group_by(9) }}\n\n    )\n\n        {# Creating a unique id for each row in the table, and adding execution id #}\n    select {{ elementary.generate_surrogate_key([\n                     'data_issue_id',\n                     elementary.const_as_string(test_execution_id)\n                ]) }} as id,\n        {{ elementary.const_as_string(test_execution_id) }} as test_execution_id,\n        {{ elementary.const_as_string(test_unique_id) }} as test_unique_id,\n        *\n    from column_changes_test_results\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.get_test_execution_id", "macro.elementary.get_test_unique_id", "macro.elementary.null_string", "macro.elementary.generate_surrogate_key", "macro.elementary.datetime_now_utc_as_timestamp_column", "macro.elementary.full_name_split", "macro.dbt_utils.group_by", "macro.elementary.const_as_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.4798799, "supported_languages": null}, "macro.elementary.column_monitoring_query": {"name": "column_monitoring_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/column_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/column_monitoring_query.sql", "unique_id": "macro.elementary.column_monitoring_query", "macro_sql": "{% macro column_monitoring_query(monitored_table_relation, min_bucket_start, column_obj, column_monitors, metric_properties) %}\n    {% set full_table_name_str = elementary.edr_quote(elementary.relation_to_full_name(monitored_table_relation)) %}\n\n    with buckets as (\n        select edr_bucket_start, edr_bucket_end from ({{ elementary.complete_buckets_cte(metric_properties.time_bucket) }}) results\n        {% if min_bucket_start -%}\n          where edr_bucket_start >= {{ elementary.edr_cast_as_timestamp(min_bucket_start) }}\n        {%- endif %}\n    ),\n    {% set timestamp_column = metric_properties.timestamp_column %}\n    filtered_monitored_table as (\n        select {{ column_obj.quoted }}\n            {% if timestamp_column -%}\n             , {{ elementary.get_start_bucket_in_data(timestamp_column, min_bucket_start, metric_properties.time_bucket) }} as start_bucket_in_data\n            {%- else %}\n            , {{ elementary.null_timestamp() }} as start_bucket_in_data\n            {%- endif %}\n        from {{ monitored_table_relation }}\n        where\n        {% if timestamp_column -%}\n            {{ elementary.edr_cast_as_timestamp(timestamp_column) }} >= (select min(edr_bucket_start) from buckets)\n            and {{ elementary.edr_cast_as_timestamp(timestamp_column) }} < (select max(edr_bucket_end) from buckets)\n        {%- else %}\n            true\n        {%- endif %}\n        {% if metric_properties.where_expression %} and {{ metric_properties.where_expression }} {% endif %}\n    ),\n\n    column_monitors as (\n\n        {%- if column_monitors %}\n            {%- set column = column_obj.quoted -%}\n                select\n                    edr_bucket_start,\n                    edr_bucket_end,\n                    {{ elementary.const_as_string(column_obj.name) }} as edr_column_name,\n                    {%- if 'null_count' in column_monitors -%} {{ elementary.null_count(column) }} {%- else -%} null {% endif %} as null_count,\n                    {%- if 'null_percent' in column_monitors -%} {{ elementary.null_percent(column) }} {%- else -%} null {% endif %} as null_percent,\n                    {%- if 'max' in column_monitors -%} {{ elementary.max(column) }} {%- else -%} null {% endif %} as max,\n                    {%- if 'min' in column_monitors -%} {{ elementary.min(column) }} {%- else -%} null {% endif %} as min,\n                    {%- if 'average' in column_monitors -%} {{ elementary.average(column) }} {%- else -%} null {% endif %} as average,\n                    {%- if 'zero_count' in column_monitors -%} {{ elementary.zero_count(column) }} {%- else -%} null {% endif %} as zero_count,\n                    {%- if 'zero_percent' in column_monitors -%} {{ elementary.zero_percent(column) }} {%- else -%} null {% endif %} as zero_percent,\n                    {%- if 'standard_deviation' in column_monitors -%} {{ elementary.standard_deviation(column) }} {%- else -%} null {% endif %} as standard_deviation,\n                    {%- if 'variance' in column_monitors -%} {{ elementary.variance(column) }} {%- else -%} null {% endif %} as variance,\n                    {%- if 'max_length' in column_monitors -%} {{ elementary.max_length(column) }} {%- else -%} null {% endif %} as max_length,\n                    {%- if 'min_length' in column_monitors -%} {{ elementary.min_length(column) }} {%- else -%} null {% endif %} as min_length,\n                    {%- if 'average_length' in column_monitors -%} {{ elementary.average_length(column) }} {%- else -%} null {% endif %} as average_length,\n                    {%- if 'missing_count' in column_monitors -%} {{ elementary.missing_count(column) }} {%- else -%} null {% endif %} as missing_count,\n                    {%- if 'missing_percent' in column_monitors -%} {{ elementary.missing_percent(column) }} {%- else -%} null {% endif %} as missing_percent,\n                    {%- if 'sum' in column_monitors -%} {{ elementary.sum(column) }} {%- else -%} null {% endif %} as sum\n                from filtered_monitored_table left join buckets on (edr_bucket_start = start_bucket_in_data)\n                group by 1,2,3\n        {%- else %}\n            {{ elementary.empty_column_monitors_cte() }}\n        {%- endif %}\n\n    ),\n\n    column_monitors_unpivot as (\n\n        {%- if column_monitors %}\n            {% for monitor in column_monitors %}\n                select edr_column_name, edr_bucket_start, edr_bucket_end, {{ elementary.edr_cast_as_string(elementary.edr_quote(monitor)) }} as metric_name, {{ elementary.edr_cast_as_float(monitor) }} as metric_value from column_monitors where {{ monitor }} is not null\n                {% if not loop.last %} union all {% endif %}\n            {%- endfor %}\n        {%- else %}\n            {{ elementary.empty_table([('edr_column_name','string'),('edr_bucket_start','timestamp'),('edr_bucket_end','timestamp'),('metric_name','string'),('metric_value','float')]) }}\n        {%- endif %}\n\n    ),\n\n    metrics_final as (\n\n        select\n            {{ elementary.edr_cast_as_string(full_table_name_str) }} as full_table_name,\n            edr_column_name as column_name,\n            metric_name,\n            {{ elementary.edr_cast_as_float('metric_value') }} as metric_value,\n            {{ elementary.null_string() }} as source_value,\n            {%- if timestamp_column %}\n                edr_bucket_start as bucket_start,\n                edr_bucket_end as bucket_end,\n                {{ elementary.timediff(\"hour\", \"edr_bucket_start\", \"edr_bucket_end\") }} as bucket_duration_hours,\n            {%- else %}\n                {{ elementary.null_timestamp() }} as bucket_start,\n                {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_max_bucket_end())) }} as bucket_end,\n                {{ elementary.null_int() }} as bucket_duration_hours,\n            {%- endif %}\n            {{ elementary.null_string() }} as dimension,\n            {{ elementary.null_string() }} as dimension_value,\n            {{elementary.dict_to_quoted_json(metric_properties) }} as metric_properties\n        from column_monitors_unpivot\n\n    )\n\n    select\n        {{ elementary.generate_surrogate_key([\n            'full_table_name',\n            'column_name',\n            'metric_name',\n            'bucket_end',\n            'metric_properties'\n        ]) }} as id,\n        full_table_name,\n        column_name,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        {{ elementary.edr_current_timestamp_in_utc() }} as updated_at,\n        dimension,\n        dimension_value,\n        metric_properties\n    from metrics_final\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_quote", "macro.elementary.relation_to_full_name", "macro.elementary.complete_buckets_cte", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.get_start_bucket_in_data", "macro.elementary.null_timestamp", "macro.elementary.const_as_string", "macro.elementary.null_count", "macro.elementary.null_percent", "macro.elementary.max", "macro.elementary.min", "macro.elementary.average", "macro.elementary.zero_count", "macro.elementary.zero_percent", "macro.elementary.standard_deviation", "macro.elementary.variance", "macro.elementary.max_length", "macro.elementary.min_length", "macro.elementary.average_length", "macro.elementary.missing_count", "macro.elementary.missing_percent", "macro.elementary.sum", "macro.elementary.empty_column_monitors_cte", "macro.elementary.edr_cast_as_string", "macro.elementary.edr_cast_as_float", "macro.elementary.empty_table", "macro.elementary.null_string", "macro.elementary.timediff", "macro.elementary.get_max_bucket_end", "macro.elementary.null_int", "macro.elementary.dict_to_quoted_json", "macro.elementary.generate_surrogate_key", "macro.elementary.edr_current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.494161, "supported_languages": null}, "macro.elementary.get_latest_full_refresh": {"name": "get_latest_full_refresh", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/get_latest_full_refresh.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/get_latest_full_refresh.sql", "unique_id": "macro.elementary.get_latest_full_refresh", "macro_sql": "{% macro get_latest_full_refresh(model_node) %}\n    {% set query %}\n        select generated_at from {{ ref('dbt_run_results') }}\n        where\n          unique_id = '{{ model_node.unique_id }}' and\n          full_refresh = true\n        order by generated_at desc\n        limit 1\n    {% endset %}\n    {% do return(elementary.result_value(query)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.result_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.494553, "supported_languages": null}, "macro.elementary.get_start_bucket_in_data": {"name": "get_start_bucket_in_data", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/get_start_bucket_in_data.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/get_start_bucket_in_data.sql", "unique_id": "macro.elementary.get_start_bucket_in_data", "macro_sql": "{% macro get_start_bucket_in_data(timestamp_column, min_bucket_start, time_bucket) %}\n    {% set bucket_start_datediff_expr %}\n      floor({{ elementary.timediff(time_bucket.period, min_bucket_start, elementary.edr_cast_as_timestamp(timestamp_column)) }} / {{ time_bucket.count }}) * {{ time_bucket.count }}\n    {% endset %}\n    {% do return(elementary.edr_cast_as_timestamp(elementary.edr_timeadd(time_bucket.period, elementary.edr_cast_as_int(bucket_start_datediff_expr), min_bucket_start))) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.timediff", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_timeadd", "macro.elementary.edr_cast_as_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.495117, "supported_languages": null}, "macro.elementary.dimension_monitoring_query": {"name": "dimension_monitoring_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/dimension_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/dimension_monitoring_query.sql", "unique_id": "macro.elementary.dimension_monitoring_query", "macro_sql": "{% macro dimension_monitoring_query(monitored_table_relation, dimensions, min_bucket_start, metric_properties) %}\n    {% set metric_name = 'dimension' %}\n    {% set full_table_name_str = elementary.edr_quote(elementary.relation_to_full_name(monitored_table_relation)) %}\n    {% set dimensions_string = elementary.join_list(dimensions, '; ') %}\n    {% set concat_dimensions_sql_expression = elementary.list_concat_with_separator(dimensions, '; ') %}\n\n    {% set timestamp_column = metric_properties.timestamp_column %}\n\n    {% if timestamp_column %}\n        with buckets as (\n          select\n            edr_bucket_start,\n            edr_bucket_end,\n            1 as joiner\n          from ({{ elementary.complete_buckets_cte(metric_properties.time_bucket) }}) results\n          where edr_bucket_start >= {{ elementary.edr_cast_as_timestamp(min_bucket_start) }}\n        ),\n\n        filtered_monitored_table as (\n            select *,\n                   {{ concat_dimensions_sql_expression }} as dimension_value,\n                   {{ elementary.get_start_bucket_in_data(timestamp_column, min_bucket_start, metric_properties.time_bucket) }} as start_bucket_in_data\n            from {{ monitored_table_relation }}\n            where\n                {{ elementary.edr_cast_as_timestamp(timestamp_column) }} >= (select min(edr_bucket_start) from buckets)\n                and {{ elementary.edr_cast_as_timestamp(timestamp_column) }} < (select max(edr_bucket_end) from buckets)\n            {% if metric_properties.where_expression %}\n                and {{ metric_properties.where_expression }}\n            {% endif %}\n        ),\n\n        {# Outdated dimension values are dimensions with all metrics of 0 in the range of the test time #}\n        dimension_values_without_outdated as (\n            select distinct \n                dimension_value,\n                sum(metric_value)\n            from {{ ref('data_monitoring_metrics') }}\n            where full_table_name = {{ full_table_name_str }}\n                and metric_name = {{ elementary.edr_quote(metric_name) }}\n                and dimension = {{ elementary.edr_quote(dimensions_string) }}\n                and {{ elementary.edr_cast_as_timestamp('bucket_end') }} >= {{ elementary.edr_cast_as_timestamp(min_bucket_start) }}\n            group by 1\n            having sum(metric_value) > 0\n        ),\n\n        dimension_values_union as (\n            select distinct *\n            from (\n                select distinct \n                    dimension_value,\n                    1 as joiner\n                from dimension_values_without_outdated\n                union all\n                select distinct\n                    dimension_value,\n                    1 as joiner\n                from filtered_monitored_table\n            ) results\n        ),\n\n        {# Created buckets for each dimension value #}\n        dimensions_buckets as (\n            select edr_bucket_start, edr_bucket_end, dimension_value\n            from buckets left join dimension_values_union on buckets.joiner = dimension_values_union.joiner\n        ),\n\n        {# Calculating the row count for each dimension value's #}\n        filtered_row_count_values as (\n            select \n                start_bucket_in_data,\n                {{ concat_dimensions_sql_expression }} as dimension_value, \n                {{ elementary.edr_cast_as_float(elementary.row_count()) }} as row_count_value\n            from filtered_monitored_table\n            {{ dbt_utils.group_by(2) }}\n        ),\n\n        {# Merging between the row count and the dimensions buckets #}\n        {# This way we make sure that if a dimension has no rows in a day, it will get a metric with value 0 #}\n        row_count_values as (\n            select edr_bucket_start,\n                   edr_bucket_end,\n                   start_bucket_in_data,\n                   dimensions_buckets.dimension_value,\n                   case when start_bucket_in_data is null then\n                       0\n                   else row_count_value end as row_count_value\n            from dimensions_buckets left join filtered_row_count_values on (edr_bucket_start = start_bucket_in_data and dimensions_buckets.dimension_value = filtered_row_count_values.dimension_value)\n        ),\n\n        row_count as (\n            select edr_bucket_start,\n                   edr_bucket_end,\n                   {{ elementary.const_as_string(metric_name) }} as metric_name,\n                   {{ elementary.null_string() }} as source_value,\n                   row_count_value as metric_value,\n                   {{ elementary.const_as_string(dimensions_string) }} as dimension,\n                   dimension_value,\n                   {{elementary.dict_to_quoted_json(metric_properties) }} as metric_properties\n            from row_count_values\n        ),\n\n        metrics_final as (\n\n        select\n            {{ elementary.edr_cast_as_string(full_table_name_str) }} as full_table_name,\n            {{ elementary.null_string() }} as column_name,\n            metric_name,\n            {{ elementary.edr_cast_as_float('metric_value') }} as metric_value,\n            source_value,\n            edr_bucket_start as bucket_start,\n            edr_bucket_end as bucket_end,\n            {{ elementary.timediff(\"hour\", \"edr_bucket_start\", \"edr_bucket_end\") }} as bucket_duration_hours,\n            dimension,\n            dimension_value,\n            metric_properties\n        from\n            row_count\n        where (metric_value is not null and cast(metric_value as {{ elementary.edr_type_int() }}) < {{ elementary.get_config_var('max_int') }}) or\n            metric_value is null\n        )\n\n    {% else %}\n        with filtered_monitored_table as (\n            select *,\n                   {{ concat_dimensions_sql_expression }} as dimension_value\n            from {{ monitored_table_relation }}\n        {% if metric_properties.where_expression %}\n            where {{ metric_properties.where_expression }}\n        {% endif %}\n        ),\n        \n        {# Get all of the dimension anomally metrics that were created for the test until this run #}\n        last_dimension_metrics as (\n            select \n                bucket_end,\n                dimension_value,\n                metric_value\n            from {{ ref('data_monitoring_metrics') }}\n            where full_table_name = {{ full_table_name_str }}\n                and metric_name = {{ elementary.edr_quote(metric_name) }}\n                and dimension = {{ elementary.edr_quote(dimensions_string) }}\n                and {{ elementary.edr_cast_as_timestamp('bucket_end') }} >= {{ elementary.edr_timeadd(metric_properties.time_bucket.period,\n                                                                                              metric_properties.time_bucket.count,\n                                                                                              elementary.edr_cast_as_timestamp(min_bucket_start)) }}\n        ),\n\n        {# Outdated dimension values are dimensions with all metrics of 0 in the range of the test time #}\n        dimension_values_without_outdated as (\n            select\n                bucket_end,\n                dimension_value,\n                metric_value\n            from last_dimension_metrics\n            where dimension_value in (\n                select dimension_value\n                from (\n                    select distinct \n                        dimension_value,\n                        sum(metric_value)\n                    from last_dimension_metrics\n                    group by 1\n                    having sum(metric_value) > 0\n                ) results\n            )\n        ),\n        \n\n        dimension_values_union as (\n            select distinct *\n            from (\n                select distinct \n                    dimension_value,\n                    1 as joiner\n                from dimension_values_without_outdated\n                union all\n                select distinct \n                    dimension_value,\n                    1 as joiner\n                from filtered_monitored_table\n            ) results\n        ),\n\n        {# Create buckets for each day from max(first metric time, min bucket end) until max bucket end #}\n        buckets as (\n          select\n            edr_bucket_start,\n            edr_bucket_end,\n            1 as joiner\n          from ({{ elementary.complete_buckets_cte(metric_properties.time_bucket) }}) results\n          where edr_bucket_start >= {{ elementary.edr_cast_as_timestamp(min_bucket_start) }}\n        ),\n\n        {# Get all of the metrics for all of the dimensions that were create for the test until this run, #}\n        {# \"hydrated\" with metrics with value 0 for dimensions with no row count in the given time range. #}\n        hydrated_last_dimension_metrics as (\n            select \n                edr_bucket_end as bucket_end,\n                dimension_values_union.dimension_value as dimension_value,\n                case when metric_value is not null then metric_value else 0 end as metric_value\n            from buckets left join dimension_values_union on buckets.joiner = dimension_values_union.joiner\n                left outer join dimension_values_without_outdated on (buckets.edr_bucket_end = dimension_values_without_outdated.bucket_end and dimension_values_union.dimension_value = dimension_values_without_outdated.dimension_value)\n        ),\n\n        {# Union between current row count for each dimension, and the \"hydrated\" metrics of the test until this run #}\n        row_count as (\n            select \n                bucket_end,\n                dimension_value,\n                metric_value\n            from hydrated_last_dimension_metrics\n            union all\n            select\n                {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_max_bucket_end())) }} as bucket_end,\n                {{ concat_dimensions_sql_expression }} as dimension_value,\n                {{ elementary.row_count() }} as metric_value\n            from {{ monitored_table_relation }}\n            {% if metric_properties.where_expression %}\n                where {{ metric_properties.where_expression }}\n            {% endif %}\n            {{ dbt_utils.group_by(2) }}\n        ),\n\n        metrics_final as (\n            select\n                {{ elementary.edr_cast_as_string(full_table_name_str) }} as full_table_name,\n                {{ elementary.null_string() }} as column_name,\n                {{ elementary.const_as_string(metric_name) }} as metric_name,\n                {{ elementary.edr_cast_as_float('metric_value') }} as metric_value,\n                {{ elementary.null_string() }} as source_value,\n                {{ elementary.null_timestamp() }} as bucket_start,\n                bucket_end,\n                {{ elementary.null_int() }} as bucket_duration_hours,\n                {{ elementary.const_as_string(dimensions_string) }} as dimension,\n                dimension_value,\n                {{ elementary.dict_to_quoted_json(metric_properties) }} as metric_properties\n            from row_count\n        )\n    {% endif %}\n\n    select\n        {{ elementary.generate_surrogate_key([\n            'full_table_name',\n            'column_name',\n            'metric_name',\n            'dimension',\n            'dimension_value',\n            'bucket_end',\n            'metric_properties']) }} as id,\n        full_table_name,\n        column_name,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        {{ elementary.edr_current_timestamp_in_utc() }} as updated_at,\n        dimension,\n        dimension_value,\n        metric_properties\n    from metrics_final\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_quote", "macro.elementary.relation_to_full_name", "macro.elementary.join_list", "macro.elementary.list_concat_with_separator", "macro.elementary.complete_buckets_cte", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.get_start_bucket_in_data", "macro.elementary.edr_cast_as_float", "macro.elementary.row_count", "macro.dbt_utils.group_by", "macro.elementary.const_as_string", "macro.elementary.null_string", "macro.elementary.dict_to_quoted_json", "macro.elementary.edr_cast_as_string", "macro.elementary.timediff", "macro.elementary.edr_type_int", "macro.elementary.get_config_var", "macro.elementary.edr_timeadd", "macro.elementary.get_max_bucket_end", "macro.elementary.null_timestamp", "macro.elementary.null_int", "macro.elementary.generate_surrogate_key", "macro.elementary.edr_current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.504885, "supported_languages": null}, "macro.elementary.table_monitoring_query": {"name": "table_monitoring_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.table_monitoring_query", "macro_sql": "{% macro table_monitoring_query(monitored_table_relation, min_bucket_start, table_monitors, metric_properties) %}\n\n    {% set full_table_name_str = elementary.edr_quote(elementary.relation_to_full_name(monitored_table_relation)) %}\n    {% set timestamp_column = metric_properties.timestamp_column %}\n\n    with monitored_table as (\n        select * from {{ monitored_table_relation }}\n        {% if metric_properties.where_expression %} where {{ metric_properties.where_expression }} {% endif %}\n    ),\n\n    {% if timestamp_column %}\n        buckets as (\n            select edr_bucket_start, edr_bucket_end from ({{ elementary.complete_buckets_cte(metric_properties.time_bucket) }}) results\n            where edr_bucket_start >= {{ elementary.edr_cast_as_timestamp(min_bucket_start) }}\n        ),\n\n        time_filtered_monitored_table as (\n            select *,\n                   {{ elementary.get_start_bucket_in_data(timestamp_column, min_bucket_start, metric_properties.time_bucket) }} as start_bucket_in_data\n            from monitored_table\n            where\n                {{ elementary.edr_cast_as_timestamp(timestamp_column) }} >= (select min(edr_bucket_start) from buckets)\n                and {{ elementary.edr_cast_as_timestamp(timestamp_column) }} < (select max(edr_bucket_end) from buckets)\n        ),\n    {% endif %}\n\n    metrics as (\n        {{ elementary.get_unified_metrics_query(metrics=table_monitors,\n                                                metric_properties=metric_properties) }}\n    ),\n\n    {% if timestamp_column %}\n        metrics_final as (\n\n        select\n            {{ elementary.edr_cast_as_string(full_table_name_str) }} as full_table_name,\n            {{ elementary.null_string() }} as column_name,\n            metric_name,\n            {{ elementary.edr_cast_as_float('metric_value') }} as metric_value,\n            source_value,\n            edr_bucket_start as bucket_start,\n            edr_bucket_end as bucket_end,\n            {{ elementary.timediff(\"hour\", \"edr_bucket_start\", \"edr_bucket_end\") }} as bucket_duration_hours,\n            {{ elementary.null_string() }} as dimension,\n            {{ elementary.null_string() }} as dimension_value,\n            {{elementary.dict_to_quoted_json(metric_properties) }} as metric_properties\n        from\n            metrics\n        where (metric_value is not null and cast(metric_value as {{ elementary.edr_type_int() }}) < {{ elementary.get_config_var('max_int') }}) or\n            metric_value is null\n        )\n    {% else %}\n        metrics_final as (\n\n        select\n            {{ elementary.edr_cast_as_string(full_table_name_str) }} as full_table_name,\n            {{ elementary.null_string() }} as column_name,\n            metric_name,\n            {{ elementary.edr_cast_as_float('metric_value') }} as metric_value,\n            {{ elementary.null_string() }} as source_value,\n            {{ elementary.null_timestamp() }} as bucket_start,\n            {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(elementary.get_max_bucket_end())) }} as bucket_end,\n            {{ elementary.null_int() }} as bucket_duration_hours,\n            {{ elementary.null_string() }} as dimension,\n            {{ elementary.null_string() }} as dimension_value,\n            {{elementary.dict_to_quoted_json(metric_properties) }} as metric_properties\n        from metrics\n\n        )\n    {% endif %}\n\n    select\n       {{ elementary.generate_surrogate_key([\n                  'full_table_name',\n                  'column_name',\n                  'metric_name',\n                  'bucket_end',\n                  'metric_properties'\n                  ]) }}  as id,\n        full_table_name,\n        column_name,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        {{ elementary.edr_current_timestamp_in_utc() }} as updated_at,\n        dimension,\n        dimension_value,\n        metric_properties\n    from metrics_final\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_quote", "macro.elementary.relation_to_full_name", "macro.elementary.complete_buckets_cte", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.get_start_bucket_in_data", "macro.elementary.get_unified_metrics_query", "macro.elementary.edr_cast_as_string", "macro.elementary.null_string", "macro.elementary.edr_cast_as_float", "macro.elementary.timediff", "macro.elementary.dict_to_quoted_json", "macro.elementary.edr_type_int", "macro.elementary.get_config_var", "macro.elementary.null_timestamp", "macro.elementary.get_max_bucket_end", "macro.elementary.null_int", "macro.elementary.generate_surrogate_key", "macro.elementary.edr_current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.519797, "supported_languages": null}, "macro.elementary.get_unified_metrics_query": {"name": "get_unified_metrics_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.get_unified_metrics_query", "macro_sql": "{% macro get_unified_metrics_query(metrics, metric_properties) %}\n    {%- set included_monitors = {} %}\n    {%- for metric_name in metrics %}\n        {%- set metric_query = elementary.get_metric_query(metric_name, metric_properties) %}\n        {%- if metric_query %}\n            {% do included_monitors.update({metric_name: metric_query}) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {% if not included_monitors %}\n        {% if metric_properties.timestamp_column %}\n            {% do return(elementary.empty_table([('edr_bucket_start','timestamp'),('edr_bucket_end','timestamp'),('metric_name','string'),('source_value','string'),('metric_value','int')])) %}\n        {% else %}\n            {% do return(elementary.empty_table([('metric_name','string'),('metric_value','int')])) %}\n        {% endif %}\n    {% endif %}\n\n    with\n    {%- for metric_name, metric_query in included_monitors.items() %}\n        {{ metric_name }} as (\n            {{ metric_query }}\n        ){% if not loop.last %},{% endif %}\n    {%- endfor %}\n\n    {%- for metric_name in included_monitors %}\n    select * from {{ metric_name }}\n    {% if not loop.last %} union all {% endif %}\n    {%- endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_metric_query", "macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.521039, "supported_languages": null}, "macro.elementary.get_metric_query": {"name": "get_metric_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.get_metric_query", "macro_sql": "{% macro get_metric_query(metric_name, metric_properties) %}\n    {%- set metrics_macro_mapping = {\n        \"row_count\": elementary.row_count_metric_query,\n        \"freshness\": elementary.freshness_metric_query,\n        \"event_freshness\": elementary.event_freshness_metric_query\n    } %}\n\n    {%- set metric_macro = metrics_macro_mapping.get(metric_name) %}\n    {%- if not metric_macro %}\n        {%- do return(none) %}\n    {%- endif %}\n\n    {%- set metric_query = metric_macro(metric_properties) %}\n    {%- if not metric_query %}\n        {%- do return(none) %}\n    {%- endif %}\n\n    {{ metric_query }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.521583, "supported_languages": null}, "macro.elementary.row_count_metric_query": {"name": "row_count_metric_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.row_count_metric_query", "macro_sql": "{% macro row_count_metric_query(metric_properties) %}\n{% if metric_properties.timestamp_column %}\n    with row_count_values as (\n        select edr_bucket_start,\n               edr_bucket_end,\n               start_bucket_in_data,\n               case when start_bucket_in_data is null then\n                   0\n               else {{ elementary.edr_cast_as_float(elementary.row_count()) }} end as row_count_value\n        from buckets left join time_filtered_monitored_table on (edr_bucket_start = start_bucket_in_data)\n        group by 1,2,3\n    )\n\n    select edr_bucket_start,\n           edr_bucket_end,\n           {{ elementary.const_as_string('row_count') }} as metric_name,\n           {{ elementary.null_string() }} as source_value,\n           row_count_value as metric_value\n    from row_count_values\n{% else %}\n    select\n        {{ elementary.const_as_string('row_count') }} as metric_name,\n        {{ elementary.row_count() }} as metric_value\n    from monitored_table\n    group by 1\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_float", "macro.elementary.row_count", "macro.elementary.const_as_string", "macro.elementary.null_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5220008, "supported_languages": null}, "macro.elementary.freshness_metric_query": {"name": "freshness_metric_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.freshness_metric_query", "macro_sql": "{% macro freshness_metric_query(metric_properties) %}\n{% if metric_properties.timestamp_column %}\n    {%- set freshness_column = metric_properties.freshness_column %}\n    {%- if not freshness_column %}\n        {%- set freshness_column = metric_properties.timestamp_column %}\n    {%- endif %}\n\n    -- get ordered consecutive update timestamps in the source data\n    with unique_timestamps as (\n        select distinct {{ elementary.edr_cast_as_timestamp(freshness_column) }} as timestamp_val\n        from monitored_table\n        order by 1\n    ),\n\n    -- compute freshness for every update as the time difference from the previous update\n    consecutive_updates_freshness as (\n        select\n            timestamp_val as update_timestamp,\n            {{ elementary.timediff('second', 'lag(timestamp_val) over (order by timestamp_val)', 'timestamp_val') }} as freshness\n        from unique_timestamps\n        where timestamp_val >= (select min(edr_bucket_start) from buckets)\n    ),\n\n    -- divide the freshness metrics above to buckets\n    bucketed_consecutive_updates_freshness as (\n        select\n            edr_bucket_start, edr_bucket_end, update_timestamp, freshness\n        from buckets cross join consecutive_updates_freshness\n        where update_timestamp >= edr_bucket_start AND update_timestamp < edr_bucket_end\n    ),\n\n    -- we also want to record the freshness at the end of each bucket as an additional point. By this we mean\n    -- the time that passed since the last update in the bucket and the end of the bucket.\n    bucket_end_freshness as (\n        select\n            edr_bucket_start,\n            edr_bucket_end,\n            max(timestamp_val) as update_timestamp,\n            {{ elementary.timediff('second', elementary.edr_cast_as_timestamp('max(timestamp_val)'), \"least(edr_bucket_end, {})\".format(elementary.current_timestamp_column())) }} as freshness\n        from buckets cross join unique_timestamps\n        where timestamp_val < edr_bucket_end\n        group by 1,2\n    ),\n\n    -- create a single table with all the freshness values\n    bucket_all_freshness_metrics as (\n        select * from bucketed_consecutive_updates_freshness\n        union all\n        select * from bucket_end_freshness\n    ),\n\n    -- get all the freshness values, ranked by size (we use partition by and not group by, because we also want to have\n    -- the associated timestamp as source value)\n    bucket_freshness_ranked as (\n        select\n            *,\n            row_number () over (partition by edr_bucket_end order by freshness is null, freshness desc) as row_number\n        from bucket_all_freshness_metrics\n    )\n\n    select\n        edr_bucket_start,\n        edr_bucket_end,\n        {{ elementary.const_as_string('freshness') }} as metric_name,\n        {{ elementary.edr_cast_as_string('update_timestamp') }} as source_value,\n        freshness as metric_value\n    from bucket_freshness_ranked\n    where row_number = 1\n{% else %}\n    {# Update freshness test not supported when timestamp column is not provided #}\n    {# TODO: We can enhance this test for models to use model_run_results in case a timestamp column is not defined #}\n    {% do return(none) %}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_timestamp", "macro.elementary.timediff", "macro.elementary.current_timestamp_column", "macro.elementary.const_as_string", "macro.elementary.edr_cast_as_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5228171, "supported_languages": null}, "macro.elementary.event_freshness_metric_query": {"name": "event_freshness_metric_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "unique_id": "macro.elementary.event_freshness_metric_query", "macro_sql": "{% macro event_freshness_metric_query(metric_properties) %}\n{% set event_timestamp_column = metric_properties.event_timestamp_column %}\n{% set update_timestamp_column = metric_properties.timestamp_column %}\n\n{% if update_timestamp_column %}\n    select\n        edr_bucket_start,\n        edr_bucket_end,\n        {{ elementary.const_as_string('event_freshness') }} as metric_name,\n        {{ elementary.edr_cast_as_string('max({})'.format(event_timestamp_column)) }} as source_value,\n        {{ 'coalesce(max({}), {})'.format(\n                elementary.timediff('second', elementary.edr_cast_as_timestamp(event_timestamp_column), elementary.edr_cast_as_timestamp(update_timestamp_column)),\n                elementary.timediff('second', 'edr_bucket_start', 'edr_bucket_end')\n            ) }} as metric_value\n    from buckets left join time_filtered_monitored_table on (edr_bucket_start = start_bucket_in_data)\n    group by 1,2\n{% else %}\n    select\n        {{ elementary.const_as_string('event_freshness') }} as metric_name,\n        {{ elementary.timediff('second', elementary.edr_cast_as_timestamp(\"max({})\".format(event_timestamp_column)), elementary.edr_quote(elementary.get_run_started_at())) }} as metric_value\n    from monitored_table\n    group by 1\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.const_as_string", "macro.elementary.edr_cast_as_string", "macro.elementary.timediff", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_quote", "macro.elementary.get_run_started_at"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.523614, "supported_languages": null}, "macro.elementary.get_column_obj_and_monitors": {"name": "get_column_obj_and_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "unique_id": "macro.elementary.get_column_obj_and_monitors", "macro_sql": "{% macro get_column_obj_and_monitors(model_relation, column_name, column_tests=none) %}\n\n    {% set column_obj_and_monitors = [] %}\n    {% set column_objects = adapter.get_columns_in_relation(model_relation) %}\n    {% for column_obj in column_objects %}\n        {% if column_obj.name | lower == column_name | lower %}\n            {% set column_monitors = elementary.column_monitors_by_type(column_obj.dtype, column_tests) %}\n            {% set column_item = {'column': column_obj, 'monitors': column_monitors} %}\n            {{ return(column_item) }}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(none) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.column_monitors_by_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5257778, "supported_languages": null}, "macro.elementary.get_all_column_obj_and_monitors": {"name": "get_all_column_obj_and_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "unique_id": "macro.elementary.get_all_column_obj_and_monitors", "macro_sql": "{% macro get_all_column_obj_and_monitors(model_relation, column_tests=none) %}\n\n    {% set column_obj_and_monitors = [] %}\n    {% set column_objects = adapter.get_columns_in_relation(model_relation) %}\n\n    {% for column_obj in column_objects %}\n        {% set column_monitors = elementary.column_monitors_by_type(column_obj.dtype, column_tests) %}\n        {% set column_item = {'column': column_obj, 'monitors': column_monitors} %}\n        {% do column_obj_and_monitors.append(column_item) %}\n    {% endfor %}\n\n    {{ return(column_obj_and_monitors) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.column_monitors_by_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.526322, "supported_languages": null}, "macro.elementary.column_monitors_by_type": {"name": "column_monitors_by_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "unique_id": "macro.elementary.column_monitors_by_type", "macro_sql": "{% macro column_monitors_by_type(data_type, column_tests=none) %}\n    {% set normalized_data_type = elementary.normalize_data_type(data_type) %}\n    {% set monitors = [] %}\n    {% set chosen_monitors = column_tests or elementary.get_agg_column_monitors(only_defaults=true) %}\n    {% set available_monitors = elementary.get_available_monitors() %}\n\n    {% set any_type_monitors = elementary.lists_intersection(chosen_monitors, available_monitors[\"column_any_type\"]) %}\n    {% do monitors.extend(any_type_monitors) %}\n    {% if normalized_data_type == 'numeric' %}\n        {% set numeric_monitors = elementary.lists_intersection(chosen_monitors, available_monitors[\"column_numeric\"]) %}\n        {% do monitors.extend(numeric_monitors) %}\n    {% elif normalized_data_type == 'string' %}\n        {% set string_monitors = elementary.lists_intersection(chosen_monitors, available_monitors[\"column_string\"]) %}\n        {% do monitors.extend(string_monitors) %}\n    {% endif %}\n    {{ return(monitors | unique | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.normalize_data_type", "macro.elementary.get_agg_column_monitors", "macro.elementary.get_available_monitors", "macro.elementary.lists_intersection"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.527294, "supported_languages": null}, "macro.elementary.get_agg_column_monitors": {"name": "get_agg_column_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "unique_id": "macro.elementary.get_agg_column_monitors", "macro_sql": "{% macro get_agg_column_monitors(only_defaults=false) %}\n    {% set agg_column_monitors = [] %}\n    {% if only_defaults %}\n        {% set monitors = elementary.get_default_monitors() %}\n    {% else %}\n        {% set monitors = elementary.get_available_monitors() %}\n    {% endif %}\n    {% do agg_column_monitors.extend(monitors['column_any_type']) %}\n    {% do agg_column_monitors.extend(monitors['column_string']) %}\n    {% do agg_column_monitors.extend(monitors['column_numeric']) %}\n    {{ return(agg_column_monitors) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_default_monitors", "macro.elementary.get_available_monitors"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.52786, "supported_languages": null}, "macro.elementary.get_final_table_monitors": {"name": "get_final_table_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "unique_id": "macro.elementary.get_final_table_monitors", "macro_sql": "{% macro get_final_table_monitors(table_anomalies) %}\n    {%- set final_table_monitors = [] %}\n\n    {%- if table_anomalies and table_anomalies | length > 0 %}\n        {%- set allowed_table_monitors = elementary.get_allowed_table_monitors() %}\n        {%- set final_table_monitors = elementary.lists_intersection(table_anomalies, allowed_table_monitors) %}\n    {%- else %}\n        {%- set final_table_monitors = elementary.get_default_table_monitors() %}\n    {%- endif %}\n    {{ return(final_table_monitors) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_allowed_table_monitors", "macro.elementary.lists_intersection", "macro.elementary.get_default_table_monitors"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.528532, "supported_languages": null}, "macro.elementary.get_default_table_monitors": {"name": "get_default_table_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "unique_id": "macro.elementary.get_default_table_monitors", "macro_sql": "{% macro get_default_table_monitors() %}\n    {%- set default_table_monitors = elementary.get_config_var('edr_monitors')['table'] | list %}\n    {{ return(default_table_monitors) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.528743, "supported_languages": null}, "macro.elementary.get_allowed_table_monitors": {"name": "get_allowed_table_monitors", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "unique_id": "macro.elementary.get_allowed_table_monitors", "macro_sql": "{% macro get_allowed_table_monitors() %}\n    {% do return([\"row_count\", \"freshness\", \"event_freshness\"]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5289102, "supported_languages": null}, "macro.elementary.get_daily_time_bucket": {"name": "get_daily_time_bucket", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/time_bucket.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/time_bucket.sql", "unique_id": "macro.elementary.get_daily_time_bucket", "macro_sql": "{% macro get_daily_time_bucket() %}\n  {% do return({\"period\": \"day\", \"count\": 1}) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.529152, "supported_languages": null}, "macro.elementary.get_default_time_bucket": {"name": "get_default_time_bucket", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/time_bucket.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/time_bucket.sql", "unique_id": "macro.elementary.get_default_time_bucket", "macro_sql": "{% macro get_default_time_bucket() %}\n  {% do return(elementary.get_daily_time_bucket()) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_daily_time_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.529289, "supported_languages": null}, "macro.elementary.is_incremental_model": {"name": "is_incremental_model", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/is_incremental_model.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/is_incremental_model.sql", "unique_id": "macro.elementary.is_incremental_model", "macro_sql": "{% macro is_incremental_model(model_node, source_included=false) %}\n  {% do return(\n    (source_included and model_node.resource_type == \"source\")\n    or\n    (model_node.resource_type == \"model\" and model_node.config.materialized == \"incremental\")\n  ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5296252, "supported_languages": null}, "macro.elementary.get_min_bucket_start": {"name": "get_min_bucket_start", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "unique_id": "macro.elementary.get_min_bucket_start", "macro_sql": "{% macro get_min_bucket_start() %}\n    {% do return((elementary.get_run_started_at() - modules.datetime.timedelta(elementary.get_config_var('days_back'))).strftime(\"%Y-%m-%d 00:00:00\")) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_run_started_at", "macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.531476, "supported_languages": null}, "macro.elementary.get_min_bucket_end": {"name": "get_min_bucket_end", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "unique_id": "macro.elementary.get_min_bucket_end", "macro_sql": "{% macro get_min_bucket_end() %}\n    {% do return((elementary.get_run_started_at() - modules.datetime.timedelta(elementary.get_config_var('days_back') - 1)).strftime(\"%Y-%m-%d 00:00:00\")) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_run_started_at", "macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.531737, "supported_languages": null}, "macro.elementary.get_max_bucket_end": {"name": "get_max_bucket_end", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "unique_id": "macro.elementary.get_max_bucket_end", "macro_sql": "{% macro get_max_bucket_end() %}\n    {% do return(elementary.run_started_at_as_string()) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_started_at_as_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.531876, "supported_languages": null}, "macro.elementary.get_backfill_bucket_start": {"name": "get_backfill_bucket_start", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "unique_id": "macro.elementary.get_backfill_bucket_start", "macro_sql": "{% macro get_backfill_bucket_start(backfill_days) %}\n    {% do return((elementary.get_run_started_at() - modules.datetime.timedelta(backfill_days)).strftime(\"%Y-%m-%d 00:00:00\")) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_run_started_at"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5321019, "supported_languages": null}, "macro.elementary.get_test_min_bucket_start": {"name": "get_test_min_bucket_start", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "unique_id": "macro.elementary.get_test_min_bucket_start", "macro_sql": "{% macro get_test_min_bucket_start(model_graph_node, backfill_days, monitors=none, column_name=none,metric_properties=none) %}\n    {%- set min_bucket_start = elementary.get_min_bucket_start() %}\n    {% if not elementary.is_incremental_model(model_graph_node) %}\n        {% do return(min_bucket_start) %}\n    {% endif %}\n\n    {%- set backfill_bucket_start = elementary.get_backfill_bucket_start(backfill_days) %}\n    {% set full_table_name = elementary.model_node_to_full_name(model_graph_node) %}\n    {%- if monitors %}\n        {%- set monitors_tuple = elementary.strings_list_to_tuple(monitors) %}\n    {%- endif %}\n\n    {%- set min_bucket_start_query %}\n        with min_times as (\n            select min(last_bucket_end) as last_run,\n                {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(min_bucket_start)) }} as min_start,\n                {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(backfill_bucket_start)) }} as backfill_start\n            from {{ ref('monitors_runs') }}\n            where upper(full_table_name) = upper('{{ full_table_name }}')\n              and metric_properties = {{ elementary.dict_to_quoted_json(metric_properties) }}\n            {%- if monitors %}\n                and metric_name in {{ monitors_tuple }}\n            {%- endif %}\n            {%- if column_name %}\n                and upper(column_name) = upper('{{ column_name }}')\n            {%- endif %}\n\n            )\n        select\n            case\n                when last_run is null then min_start\n                when last_run < min_start then min_start\n                when last_run < backfill_start then last_run\n                else backfill_start\n            end as min_start\n        from min_times\n    {%- endset %}\n\n    {%- set min_bucket_start_query_result = elementary.result_value(min_bucket_start_query) %}\n\n    {%- if min_bucket_start_query_result %}\n        {{ return(min_bucket_start_query_result) }}\n    {%- else %}\n        {{ return(min_bucket_start) }}\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_min_bucket_start", "macro.elementary.is_incremental_model", "macro.elementary.get_backfill_bucket_start", "macro.elementary.model_node_to_full_name", "macro.elementary.strings_list_to_tuple", "macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_quote", "macro.elementary.dict_to_quoted_json", "macro.elementary.result_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.533418, "supported_languages": null}, "macro.elementary.get_is_column_timestamp": {"name": "get_is_column_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_is_column_timestamp.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_is_column_timestamp.sql", "unique_id": "macro.elementary.get_is_column_timestamp", "macro_sql": "{% macro get_is_column_timestamp(table_relation,timestamp_column,timestamp_column_data_type) %}\n    {%- if timestamp_column_data_type == 'string' %}\n        {%- set is_timestamp = elementary.try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n    {%- elif timestamp_column_data_type == 'timestamp' %}\n        {%- set is_timestamp = true %}\n    {%- else %}\n        {%- set is_timestamp = false %}\n    {%- endif %}\n    {{ return(is_timestamp) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.try_cast_column_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.533917, "supported_languages": null}, "macro.elementary.log_macro_results": {"name": "log_macro_results", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/log_macro_results.sql", "original_file_path": "macros/utils/log_macro_results.sql", "unique_id": "macro.elementary.log_macro_results", "macro_sql": "{% macro log_macro_results(macro_name, macro_args=none) %}\n    {% if macro_args is none %}\n        {% set macro_args = {} %}\n    {% endif %}\n    {%- set package_and_macro_name = macro_name.split('.') %}\n    {%- if package_and_macro_name | length == 1 %}\n        {% set macro = context[macro_name] %}\n    {%- elif package_and_macro_name | length == 2 %}\n        {%- set package_name, macro_name = package_and_macro_name %}\n        {% set macro = context[package_name][macro_name] %}\n    {%- else %}\n        {% do exceptions.raise_compiler_error(\"Received invalid macro name: {}\".format(macro_name)) %}\n    {% endif %}\n    {% set results = macro(**macro_args) %}\n    {% do elementary.edr_log(tojson(results)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_log"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.534914, "supported_languages": null}, "macro.elementary.edr_percent": {"name": "edr_percent", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/percent_query.sql", "original_file_path": "macros/utils/percent_query.sql", "unique_id": "macro.elementary.edr_percent", "macro_sql": "{% macro edr_percent(value, total) %}\n    {% set value = elementary.edr_cast_as_float(value) %}\n    {% set total = elementary.edr_cast_as_float(total) %}\n    {% set query %}\n      round({{ elementary.edr_cast_as_numeric('{} / nullif({}, 0) * 100.0'.format(value, total)) }}, 3)\n    {% endset %}\n    {% do return(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_float", "macro.elementary.edr_cast_as_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.535397, "supported_languages": null}, "macro.elementary.edr_dateadd": {"name": "edr_dateadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/utils/cross_db_utils/dateadd.sql", "unique_id": "macro.elementary.edr_dateadd", "macro_sql": "{% macro edr_dateadd(datepart, interval, from_date_or_timestamp) %}\n    {% set macro = dbt.dateadd or dbt_utils.dateadd %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `dateadd` macro.\") }}\n    {% endif %}\n    {{ return(macro(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5358222, "supported_languages": null}, "macro.elementary.edr_datediff": {"name": "edr_datediff", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/datediff.sql", "original_file_path": "macros/utils/cross_db_utils/datediff.sql", "unique_id": "macro.elementary.edr_datediff", "macro_sql": "{% macro edr_datediff(first_date, second_date, datepart) %}\n    {% set macro = dbt.datediff or dbt_utils.datediff %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `datediff` macro.\") }}\n    {% endif %}\n    {{ return(macro(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5362408, "supported_languages": null}, "macro.elementary.target_database": {"name": "target_database", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "unique_id": "macro.elementary.target_database", "macro_sql": "{% macro target_database() -%}\n    {{ return(adapter.dispatch('target_database', 'elementary')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.bigquery__target_database"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.536567, "supported_languages": null}, "macro.elementary.default__target_database": {"name": "default__target_database", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "unique_id": "macro.elementary.default__target_database", "macro_sql": "{% macro default__target_database() %}\n    {% do return(target.dbname) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.536695, "supported_languages": null}, "macro.elementary.spark__target_database": {"name": "spark__target_database", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "unique_id": "macro.elementary.spark__target_database", "macro_sql": "{% macro spark__target_database() %}\n    {% do return(target.catalog or none) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.536837, "supported_languages": null}, "macro.elementary.snowflake__target_database": {"name": "snowflake__target_database", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "unique_id": "macro.elementary.snowflake__target_database", "macro_sql": "{% macro snowflake__target_database() %}\n    {% do return(target.database) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.53696, "supported_languages": null}, "macro.elementary.bigquery__target_database": {"name": "bigquery__target_database", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "unique_id": "macro.elementary.bigquery__target_database", "macro_sql": "{% macro bigquery__target_database() %}\n    {% do return(target.project) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.537089, "supported_languages": null}, "macro.elementary.edr_safe_cast": {"name": "edr_safe_cast", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/safe_cast.sql", "original_file_path": "macros/utils/cross_db_utils/safe_cast.sql", "unique_id": "macro.elementary.edr_safe_cast", "macro_sql": "{% macro edr_safe_cast(field, type) %}\n    {{ return(adapter.dispatch('edr_safe_cast', 'elementary') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__edr_safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.537449, "supported_languages": null}, "macro.elementary.default__edr_safe_cast": {"name": "default__edr_safe_cast", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/safe_cast.sql", "original_file_path": "macros/utils/cross_db_utils/safe_cast.sql", "unique_id": "macro.elementary.default__edr_safe_cast", "macro_sql": "{% macro default__edr_safe_cast(field, type) %}\n    {% set macro = dbt.safe_cast or dbt_utils.safe_cast %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `safe_cast` macro.\") }}\n    {% endif %}\n    {{ return(macro(field, type)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.537777, "supported_languages": null}, "macro.elementary.spark__edr_safe_cast": {"name": "spark__edr_safe_cast", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/safe_cast.sql", "original_file_path": "macros/utils/cross_db_utils/safe_cast.sql", "unique_id": "macro.elementary.spark__edr_safe_cast", "macro_sql": "{% macro spark__edr_safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.537905, "supported_languages": null}, "macro.elementary.edr_quote": {"name": "edr_quote", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/quote_column.sql", "original_file_path": "macros/utils/cross_db_utils/quote_column.sql", "unique_id": "macro.elementary.edr_quote", "macro_sql": "{% macro edr_quote(str) %}\n    {% set escaped_str = elementary.escape_special_chars(str) %}\n    {% do return(\"'{}'\".format(escaped_str)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.escape_special_chars"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5383208, "supported_languages": null}, "macro.elementary.dict_to_quoted_json": {"name": "dict_to_quoted_json", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/quote_column.sql", "original_file_path": "macros/utils/cross_db_utils/quote_column.sql", "unique_id": "macro.elementary.dict_to_quoted_json", "macro_sql": "{% macro dict_to_quoted_json(d) %}\n    {% do return(elementary.edr_cast_as_string(elementary.edr_quote(tojson(d, sort_keys=true)))) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_string", "macro.elementary.edr_quote"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.538541, "supported_languages": null}, "macro.elementary.edr_quote_column": {"name": "edr_quote_column", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/quote_column.sql", "original_file_path": "macros/utils/cross_db_utils/quote_column.sql", "unique_id": "macro.elementary.edr_quote_column", "macro_sql": "\n\n{%- macro edr_quote_column(column_name) -%}\n    {% if adapter.quote(column_name[1:-1]) == column_name %}\n        {{ return(column_name) }}\n    {% else %}\n        {% set quoted_column = adapter.quote(column_name) %}\n        {{ return(quoted_column) }}\n    {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.538924, "supported_languages": null}, "macro.elementary.edr_to_char": {"name": "edr_to_char", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "unique_id": "macro.elementary.edr_to_char", "macro_sql": "{% macro edr_to_char(column, format) -%}\n    {{ return(adapter.dispatch('edr_to_char', 'elementary')(column, format)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.bigquery__edr_to_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.539396, "supported_languages": null}, "macro.elementary.default__edr_to_char": {"name": "default__edr_to_char", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "unique_id": "macro.elementary.default__edr_to_char", "macro_sql": "{% macro default__edr_to_char(column, format) %}\n    to_char({{ column }} {%- if format %}, '{{ format }}'){%- else %}, 'YYYY-MM-DD HH:MI:SS'){%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5395908, "supported_languages": null}, "macro.elementary.bigquery__edr_to_char": {"name": "bigquery__edr_to_char", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "unique_id": "macro.elementary.bigquery__edr_to_char", "macro_sql": "{% macro bigquery__edr_to_char(column, format) %}\n    cast({{ column }} as STRING {%- if format %} FORMAT '{{ format }}'){%- else %}){%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.571202, "supported_languages": null}, "macro.elementary.spark__edr_to_char": {"name": "spark__edr_to_char", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "unique_id": "macro.elementary.spark__edr_to_char", "macro_sql": "{% macro spark__edr_to_char(column, format) %}\n    date_format({{ column }} {%- if format %}, '{{ format }}'){%- else %}, 'YYYY-MM-DD HH:MI:SS'){%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.571433, "supported_languages": null}, "macro.elementary.edr_current_timestamp": {"name": "edr_current_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.edr_current_timestamp", "macro_sql": "{% macro edr_current_timestamp() -%}\n    {{ adapter.dispatch('edr_current_timestamp','elementary')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.default__edr_current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.572441, "supported_languages": null}, "macro.elementary.default__edr_current_timestamp": {"name": "default__edr_current_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.default__edr_current_timestamp", "macro_sql": "{% macro default__edr_current_timestamp() -%}\n    {% set macro = dbt.current_timestamp_backcompat or dbt_utils.current_timestamp %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `current_timestamp` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.572741, "supported_languages": null}, "macro.elementary.databricks__edr_current_timestamp": {"name": "databricks__edr_current_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.databricks__edr_current_timestamp", "macro_sql": "{% macro databricks__edr_current_timestamp() -%}\n    {% set macro = dbt.current_timestamp_backcompat or dbt_utils.current_timestamp %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `current_timestamp` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\u00a7\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.573049, "supported_languages": null}, "macro.elementary.spark__edr_current_timestamp": {"name": "spark__edr_current_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.spark__edr_current_timestamp", "macro_sql": "{% macro spark__edr_current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.57313, "supported_languages": null}, "macro.elementary.edr_current_timestamp_in_utc": {"name": "edr_current_timestamp_in_utc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.edr_current_timestamp_in_utc", "macro_sql": "{% macro edr_current_timestamp_in_utc() -%}\n    {{ adapter.dispatch('edr_current_timestamp_in_utc','elementary')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.default__edr_current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.573267, "supported_languages": null}, "macro.elementary.default__edr_current_timestamp_in_utc": {"name": "default__edr_current_timestamp_in_utc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.default__edr_current_timestamp_in_utc", "macro_sql": "{% macro default__edr_current_timestamp_in_utc() -%}\n    {% set macro = dbt.current_timestamp_in_utc_backcompat or dbt_utils.current_timestamp_in_utc %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `current_timestamp_in_utc` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.573548, "supported_languages": null}, "macro.elementary.databricks__edr_current_timestamp_in_utc": {"name": "databricks__edr_current_timestamp_in_utc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.databricks__edr_current_timestamp_in_utc", "macro_sql": "{% macro databricks__edr_current_timestamp_in_utc() -%}\n    {% set macro = dbt.current_timestamp_in_utc_backcompat or dbt_utils.current_timestamp_in_utc %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `current_timestamp_in_utc` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.573836, "supported_languages": null}, "macro.elementary.spark__edr_current_timestamp_in_utc": {"name": "spark__edr_current_timestamp_in_utc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.elementary.spark__edr_current_timestamp_in_utc", "macro_sql": "{% macro spark__edr_current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.573913, "supported_languages": null}, "macro.elementary.edr_time_trunc": {"name": "edr_time_trunc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/time_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/time_trunc.sql", "unique_id": "macro.elementary.edr_time_trunc", "macro_sql": "{% macro edr_time_trunc(date_part, date_expression) -%}\n    {{ return(adapter.dispatch('edr_time_trunc', 'elementary') (date_part, date_expression)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.bigquery__edr_time_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5742662, "supported_languages": null}, "macro.elementary.default__edr_time_trunc": {"name": "default__edr_time_trunc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/time_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/time_trunc.sql", "unique_id": "macro.elementary.default__edr_time_trunc", "macro_sql": "{% macro default__edr_time_trunc(date_part, date_expression) %}\n    date_trunc('{{date_part}}', cast({{ date_expression }} as {{ elementary.edr_type_timestamp() }}))\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.574435, "supported_languages": null}, "macro.elementary.bigquery__edr_time_trunc": {"name": "bigquery__edr_time_trunc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/time_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/time_trunc.sql", "unique_id": "macro.elementary.bigquery__edr_time_trunc", "macro_sql": "{% macro bigquery__edr_time_trunc(date_part, date_expression) %}\n    timestamp_trunc(cast({{ date_expression }} as timestamp), {{ date_part }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.574563, "supported_languages": null}, "macro.elementary.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/generate_surrogate_key.sql", "original_file_path": "macros/utils/cross_db_utils/generate_surrogate_key.sql", "unique_id": "macro.elementary.generate_surrogate_key", "macro_sql": "\n\n\n{%- macro generate_surrogate_key(fields) -%}\n  {% set concat_macro = dbt.concat or dbt_utils.concat %}\n  {% set hash_macro = dbt.hash or dbt_utils.hash %}\n\n  {% set default_null_value = \"\" %}\n  {%- set field_sqls = [] -%}\n  {%- for field in fields -%}\n    {%- do field_sqls.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ elementary.edr_type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n    {%- if not loop.last %}\n        {%- do field_sqls.append(\"'-'\") -%}\n    {%- endif -%}\n  {%- endfor -%}\n  {{ hash_macro(concat_macro(field_sqls)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.575397, "supported_languages": null}, "macro.elementary.timediff": {"name": "timediff", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "unique_id": "macro.elementary.timediff", "macro_sql": "{% macro timediff(timepart, first_timestamp, second_timestamp) -%}\n    {{ return(adapter.dispatch('timediff', 'elementary')(timepart, first_timestamp, second_timestamp)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.bigquery__timediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5757608, "supported_languages": null}, "macro.elementary.default__timediff": {"name": "default__timediff", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "unique_id": "macro.elementary.default__timediff", "macro_sql": "{% macro default__timediff(timepart, first_timestamp, second_timestamp) %}\n    {{ elementary.edr_datediff(first_timestamp, second_timestamp, timepart)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.575937, "supported_languages": null}, "macro.elementary.bigquery__timediff": {"name": "bigquery__timediff", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "unique_id": "macro.elementary.bigquery__timediff", "macro_sql": "{% macro bigquery__timediff(timepart, first_timestamp, second_timestamp) %}\n    timestamp_diff({{ second_timestamp }}, {{ first_timestamp }}, {{ timepart }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.576155, "supported_languages": null}, "macro.elementary.edr_date_trunc": {"name": "edr_date_trunc", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/date_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/date_trunc.sql", "unique_id": "macro.elementary.edr_date_trunc", "macro_sql": "{% macro edr_date_trunc(datepart, date) %}\n    {% set macro = dbt.date_trunc or dbt_utils.date_trunc %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `date_trunc` macro.\") }}\n    {% endif %}\n    {{ return(macro(datepart, date)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.576562, "supported_languages": null}, "macro.elementary.edr_timeadd": {"name": "edr_timeadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "unique_id": "macro.elementary.edr_timeadd", "macro_sql": "{% macro edr_timeadd(date_part, number, timestamp_expression) -%}\n    {{ return(adapter.dispatch('edr_timeadd', 'elementary')(date_part, number, timestamp_expression)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.bigquery__edr_timeadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5771048, "supported_languages": null}, "macro.elementary.default__edr_timeadd": {"name": "default__edr_timeadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "unique_id": "macro.elementary.default__edr_timeadd", "macro_sql": "{% macro default__edr_timeadd(date_part, number, timestamp_expression) %}\n    dateadd({{ date_part }}, {{ number }}, {{ elementary.edr_cast_as_timestamp(timestamp_expression) }})\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.577292, "supported_languages": null}, "macro.elementary.bigquery__edr_timeadd": {"name": "bigquery__edr_timeadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "unique_id": "macro.elementary.bigquery__edr_timeadd", "macro_sql": "{% macro bigquery__edr_timeadd(date_part, number, timestamp_expression) %}\n    timestamp_add({{ elementary.edr_cast_as_timestamp(timestamp_expression) }}, INTERVAL {{ number }} {{ date_part }})\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.577479, "supported_languages": null}, "macro.elementary.postgres__edr_timeadd": {"name": "postgres__edr_timeadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "unique_id": "macro.elementary.postgres__edr_timeadd", "macro_sql": "{% macro postgres__edr_timeadd(date_part, number, timestamp_expression) %}\n    {{ elementary.edr_cast_as_timestamp(timestamp_expression) }} + {{ number }} * INTERVAL '1 {{ date_part }}'\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5776699, "supported_languages": null}, "macro.elementary.redshift__edr_timeadd": {"name": "redshift__edr_timeadd", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "unique_id": "macro.elementary.redshift__edr_timeadd", "macro_sql": "{% macro redshift__edr_timeadd(date_part, number, timestamp_expression) %}\n    dateadd({{ date_part }}, {{ number }}, {{ elementary.edr_cast_as_timestamp(timestamp_expression) }})\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.577852, "supported_languages": null}, "macro.elementary.get_normalized_data_type": {"name": "get_normalized_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/get_normalized_data_type.sql", "original_file_path": "macros/utils/data_types/get_normalized_data_type.sql", "unique_id": "macro.elementary.get_normalized_data_type", "macro_sql": "{% macro get_normalized_data_type(exact_data_type) %}\n    {% if exact_data_type is none %}\n       {{ return (exact_data_type) }}\n    {% endif %}\n    {% set exact_data_type_uppercase = exact_data_type | upper %}\n    {% set result = adapter.dispatch('get_normalized_data_type','elementary')(exact_data_type_uppercase) %}\n    {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.bigquery__get_normalized_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5796638, "supported_languages": null}, "macro.elementary.default__get_normalized_data_type": {"name": "default__get_normalized_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/get_normalized_data_type.sql", "original_file_path": "macros/utils/data_types/get_normalized_data_type.sql", "unique_id": "macro.elementary.default__get_normalized_data_type", "macro_sql": "{% macro default__get_normalized_data_type(exact_data_type) %}\n   {{return (exact_data_type) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5797892, "supported_languages": null}, "macro.elementary.bigquery__get_normalized_data_type": {"name": "bigquery__get_normalized_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/get_normalized_data_type.sql", "original_file_path": "macros/utils/data_types/get_normalized_data_type.sql", "unique_id": "macro.elementary.bigquery__get_normalized_data_type", "macro_sql": "{% macro bigquery__get_normalized_data_type(exact_data_type) %}\n{# BigQuery has no concept of data type synonyms,\n see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types #}\n   {{return (exact_data_type) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5799198, "supported_languages": null}, "macro.elementary.snowflake__get_normalized_data_type": {"name": "snowflake__get_normalized_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/get_normalized_data_type.sql", "original_file_path": "macros/utils/data_types/get_normalized_data_type.sql", "unique_id": "macro.elementary.snowflake__get_normalized_data_type", "macro_sql": "{% macro snowflake__get_normalized_data_type(exact_data_type) %}\n{# understanding Snowflake data type synonyms:\n https://docs.snowflake.com/en/sql-reference/intro-summary-data-types.html #}\n {% set exact_data_type_to_data_type_returned_by_the_info_schema = {'VARCHAR': 'TEXT',\n                'STRING': 'TEXT',\n                'NVARCHAR': 'TEXT',\n                'NUMERIC': 'NUMBER',\n                'DECIMAL': 'NUMBER',\n                'INT':'NUMBER',\n                'INTEGER':'NUMBER',\n                'SMALLINT':'NUMBER',\n                'BIGINT':'NUMBER',\n                'TINYINT':'NUMBER',\n                'BYTEINT':'NUMBER',\n                'REAL': 'FLOAT',\n                'DOUBLE':'FLOAT',\n                'DOUBLE PRECISION': 'FLOAT'\n                }%}\n {%- if exact_data_type in exact_data_type_to_data_type_returned_by_the_info_schema%}\n   {{ return (exact_data_type_to_data_type_returned_by_the_info_schema[exact_data_type])}}\n {%- else %}\n   {{return (exact_data_type) }}\n {%- endif%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.580588, "supported_languages": null}, "macro.elementary.spark__get_normalized_data_type": {"name": "spark__get_normalized_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/get_normalized_data_type.sql", "original_file_path": "macros/utils/data_types/get_normalized_data_type.sql", "unique_id": "macro.elementary.spark__get_normalized_data_type", "macro_sql": "{% macro spark__get_normalized_data_type(exact_data_type) %}\n{# spark also has no concept of data type synonyms :\n   see https://spark.apache.org/docs/latest/sql-ref-datatypes.html #}\n   {{return (exact_data_type) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.580723, "supported_languages": null}, "macro.elementary.redshift__get_normalized_data_type": {"name": "redshift__get_normalized_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/get_normalized_data_type.sql", "original_file_path": "macros/utils/data_types/get_normalized_data_type.sql", "unique_id": "macro.elementary.redshift__get_normalized_data_type", "macro_sql": "{% macro redshift__get_normalized_data_type(exact_data_type) %}\n{# understanding Redshift data type synonyms:\n https://docs.aws.amazon.com/redshift/latest/dg/c_Supported_data_types.html #}\n {% set exact_data_type_to_data_type_returned_by_the_info_schema = {'INT2':\t'SMALLINT',\n                                                                   'INT':\t'INTEGER',\n                                                                   'INT4':\t'INTEGER',\n                                                                   'INT8':\t'BIGINT',\n                                                                   'NUMERIC':\t'DECIMAL',\n                                                                   'FLOAT4':\t'REAL',\n                                                                   'FLOAT8':\t'DOUBLE PRECISION',\n                                                                   'FLOAT':\t'DOUBLE PRECISION',\n                                                                   'BOOL':\t'BOOLEAN',\n                                                                   'CHARACTER':\t'CHAR',\n                                                                   'NCHAR':\t'CHAR',\n                                                                   'BPCHAR':\t'CHAR',\n                                                                   'VARCHAR': 'CHARACTER VARYING',\n                                                                   'NVARCHAR':\t'CHARACTER VARYING',\n                                                                   'TEXT':\t'CHARACTER VARYING',\n                                                                   'TIMESTAMP': 'TIMESTAMP WITHOUT TIME ZONE',\n                                                                   'TIMESTAMPTZ': 'TIMESTAMP WITH TIME ZONE',\n                                                                   'TIME': 'TIME WITHOUT TIME ZONE',\n                                                                   'TIME WITH TIME ZONE':\t'TIMETZ',\n                                                                   'VARBINARY': 'BINARY VARYING',\n                                                                   'VARBYTE': 'BINARY VARYING'} %}\n {%- if exact_data_type in exact_data_type_to_data_type_returned_by_the_info_schema%}\n   {{ return (exact_data_type_to_data_type_returned_by_the_info_schema[exact_data_type])}}\n {%- else %}\n   {{return (exact_data_type) }}\n {%- endif%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.581595, "supported_languages": null}, "macro.elementary.postgres__get_normalized_data_type": {"name": "postgres__get_normalized_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/get_normalized_data_type.sql", "original_file_path": "macros/utils/data_types/get_normalized_data_type.sql", "unique_id": "macro.elementary.postgres__get_normalized_data_type", "macro_sql": "{% macro postgres__get_normalized_data_type(exact_data_type) %}\n{# understanding Postgres data type synonyms:\n https://www.postgresql.org/docs/current/datatype.html #}\n {% set exact_data_type_to_data_type_returned_by_the_info_schema =  {'BIGINT': 'INT8',\n                                                                    'BIGSERIAL': 'SERIAL8',\n                                                                    'BIT VARYING': 'VARBIT',\n                                                                    'BOOLEAN': 'BOOL',\n                                                                    'CHARACTER': 'CHAR',\n                                                                    'CHARACTER VARYING': 'VARCHAR',\n                                                                    'DOUBLE PRECISION': 'FLOAT8',\n                                                                    'INTEGER': 'INT, INT4',\n                                                                    'NUMERIC': 'DECIMAL',\n                                                                    'REAL': 'FLOAT4',\n                                                                    'SMALLINT': 'INT2',\n                                                                    'SMALLSERIAL': 'SERIAL2',\n                                                                    'SERIAL': 'SERIAL4',\n                                                                    'TIME WITH TIME ZONE': 'TIMETZ',\n                                                                    'TIMESTAMP WITH TIME ZONE': 'TIMESTAMPTZ'} %}\n {%- if exact_data_type in exact_data_type_to_data_type_returned_by_the_info_schema%}\n   {{ return (exact_data_type_to_data_type_returned_by_the_info_schema[exact_data_type])}}\n {%- else %}\n   {{return (exact_data_type) }}\n {%- endif%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5823638, "supported_languages": null}, "macro.elementary.to_primitive": {"name": "to_primitive", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/to_primitive.sql", "original_file_path": "macros/utils/data_types/to_primitive.sql", "unique_id": "macro.elementary.to_primitive", "macro_sql": "{% macro to_primitive(val) %}\n  {% if elementary.is_primitive(val) %}\n    {% do return(val) %}\n\n  {% elif val is mapping %}\n    {% set new_dict = {} %}\n    {% for k, v in val.items() %}\n      {% do new_dict.update({k: elementary.to_primitive(v)}) %}\n    {% endfor %}\n    {% do return(new_dict) %}\n\n  {% elif val is iterable %}\n    {% set new_list = [] %}\n    {% for item in val %}\n      {% do new_list.append(elementary.to_primitive(item)) %}\n    {% endfor %}\n    {% do return(new_list) %}\n\n  {% else %}\n    {% do return(val | string) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.is_primitive", "macro.elementary.to_primitive"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5834649, "supported_languages": null}, "macro.elementary.try_cast_column_to_timestamp": {"name": "try_cast_column_to_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "original_file_path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "unique_id": "macro.elementary.try_cast_column_to_timestamp", "macro_sql": "{% macro try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n    {{ return(adapter.dispatch('try_cast_column_to_timestamp', 'elementary')(table_relation, timestamp_column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.default__try_cast_column_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.583914, "supported_languages": null}, "macro.elementary.default__try_cast_column_to_timestamp": {"name": "default__try_cast_column_to_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "original_file_path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "unique_id": "macro.elementary.default__try_cast_column_to_timestamp", "macro_sql": "{% macro default__try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n    {# We try casting for Snowflake, Bigquery and Databricks as these support safe cast and the query will not fail if the cast fails #}\n    {%- set query %}\n        select {{ elementary.edr_safe_cast(timestamp_column, elementary.edr_type_timestamp()) }} as timestamp_column\n        from {{ table_relation }}\n        where {{ timestamp_column }} is not null\n        limit 1\n    {%- endset %}\n\n    {%- set result = elementary.result_value(query) %}\n    {%- if result is not none %}\n        {{ return(true) }}\n    {%- endif %}\n    {{ return(false) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_safe_cast", "macro.elementary.edr_type_timestamp", "macro.elementary.result_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.584373, "supported_languages": null}, "macro.elementary.postgres__try_cast_column_to_timestamp": {"name": "postgres__try_cast_column_to_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "original_file_path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "unique_id": "macro.elementary.postgres__try_cast_column_to_timestamp", "macro_sql": "{% macro postgres__try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n    {{ return(false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5845041, "supported_languages": null}, "macro.elementary.data_type_list": {"name": "data_type_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "unique_id": "macro.elementary.data_type_list", "macro_sql": "{% macro data_type_list(data_type) %}\n    {% set result = adapter.dispatch('data_type_list','elementary')(data_type) %}\n    {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.bigquery__data_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.586693, "supported_languages": null}, "macro.elementary.default__data_type_list": {"name": "default__data_type_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "unique_id": "macro.elementary.default__data_type_list", "macro_sql": "{% macro default__data_type_list(data_type) %}\n\n    {% set string_list = ['character varying','varchar','character','char','text','nchar','bpchar','string'] | list %}\n    {% set numeric_list = ['integer', 'bigint','smallint','decimal','numeric','real','double precision','enum','int2','int4','int','int8','float8','float'] | list %}\n    {% set timestamp_list = ['date', 'timestamp','timestamptz','timestamp without time zone','timestamp with time zone'] | list %}\n\n    {%- if data_type == 'string' %}\n        {{ return(string_list) }}\n    {%- elif data_type == 'numeric' %}\n        {{ return(numeric_list) }}\n    {%- elif data_type == 'timestamp' %}\n        {{ return(timestamp_list) }}\n    {%- else %}\n        {{ return([]) }}\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.587549, "supported_languages": null}, "macro.elementary.bigquery__data_type_list": {"name": "bigquery__data_type_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "unique_id": "macro.elementary.bigquery__data_type_list", "macro_sql": "{% macro bigquery__data_type_list(data_type) %}\n\n    {% set string_list = ['STRING'] | list %}\n    {% set numeric_list = ['INT64','NUMERIC','BIGNUMERIC','FLOAT64','INTEGER'] | list %}\n    {% set timestamp_list = ['DATE','DATETIME','TIMESTAMP'] | list %}\n\n    {%- if data_type == 'string' %}\n        {{ return(string_list) }}\n    {%- elif data_type == 'numeric' %}\n        {{ return(numeric_list) }}\n    {%- elif data_type == 'timestamp' %}\n        {{ return(timestamp_list) }}\n    {%- else %}\n        {{ return([]) }}\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5882082, "supported_languages": null}, "macro.elementary.snowflake__data_type_list": {"name": "snowflake__data_type_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "unique_id": "macro.elementary.snowflake__data_type_list", "macro_sql": "{% macro snowflake__data_type_list(data_type) %}\n\n    {% set string_list = ['VARCHAR','CHAR','CHARACTER','STRING','TEXT'] | list %}\n    {% set numeric_list = ['NUMBER','DECIMAL','NUMERIC','INT','INTEGER','BIGINT','SMALLINT','TINYINT','BYTEINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL'] | list %}\n    {% set timestamp_list = ['DATE','DATETIME','TIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ'] | list %}\n\n    {%- if data_type == 'string' %}\n        {{ return(string_list) }}\n    {%- elif data_type == 'numeric' %}\n        {{ return(numeric_list) }}\n    {%- elif data_type == 'timestamp' %}\n        {{ return(timestamp_list) }}\n    {%- else %}\n        {{ return([]) }}\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5890691, "supported_languages": null}, "macro.elementary.spark__data_type_list": {"name": "spark__data_type_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "unique_id": "macro.elementary.spark__data_type_list", "macro_sql": "{% macro spark__data_type_list(data_type) %}\n\n    {% set string_list = ['string'] | list %}\n    {% set numeric_list = ['int','bigint','smallint','tinyint','float','double','long','short','decimal'] | list %}\n    {% set timestamp_list = ['timestamp','date'] | list %}\n\n    {%- if data_type == 'string' %}\n        {{ return(string_list) }}\n    {%- elif data_type == 'numeric' %}\n        {{ return(numeric_list) }}\n    {%- elif data_type == 'timestamp' %}\n        {{ return(timestamp_list) }}\n    {%- else %}\n        {{ return([]) }}\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.58976, "supported_languages": null}, "macro.elementary.edr_cast_as_timestamp": {"name": "edr_cast_as_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.edr_cast_as_timestamp", "macro_sql": "{%- macro edr_cast_as_timestamp(timestamp_field) -%}\n    cast({{ timestamp_field }} as {{ elementary.edr_type_timestamp() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.590406, "supported_languages": null}, "macro.elementary.edr_cast_as_float": {"name": "edr_cast_as_float", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.edr_cast_as_float", "macro_sql": "{%- macro edr_cast_as_float(column) -%}\n    cast({{ column }} as {{ elementary.edr_type_float() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.590544, "supported_languages": null}, "macro.elementary.edr_cast_as_numeric": {"name": "edr_cast_as_numeric", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.edr_cast_as_numeric", "macro_sql": "{%- macro edr_cast_as_numeric(column) -%}\n    cast({{ column }} as {{ elementary.edr_type_numeric() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.590682, "supported_languages": null}, "macro.elementary.edr_cast_as_int": {"name": "edr_cast_as_int", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.edr_cast_as_int", "macro_sql": "{%- macro edr_cast_as_int(column) -%}\n    cast({{ column }} as {{ elementary.edr_type_int() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5908139, "supported_languages": null}, "macro.elementary.edr_cast_as_string": {"name": "edr_cast_as_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.edr_cast_as_string", "macro_sql": "{%- macro edr_cast_as_string(column) -%}\n    cast({{ column }} as {{ elementary.edr_type_string() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5909472, "supported_languages": null}, "macro.elementary.edr_cast_as_long_string": {"name": "edr_cast_as_long_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.edr_cast_as_long_string", "macro_sql": "{%- macro edr_cast_as_long_string(column) -%}\n    cast({{ column }} as {{ elementary.edr_type_long_string() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_long_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5910861, "supported_languages": null}, "macro.elementary.edr_cast_as_bool": {"name": "edr_cast_as_bool", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.edr_cast_as_bool", "macro_sql": "{%- macro edr_cast_as_bool(column) -%}\n    cast({{ column }} as {{ elementary.edr_type_bool() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5912251, "supported_languages": null}, "macro.elementary.const_as_string": {"name": "const_as_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "unique_id": "macro.elementary.const_as_string", "macro_sql": "{%- macro const_as_string(string) -%}\n    cast('{{ string }}' as {{ elementary.edr_type_string() }})\n{%- endmacro -%}", "depends_on": {"macros": ["macro.elementary.edr_type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.591359, "supported_languages": null}, "macro.elementary.is_primitive": {"name": "is_primitive", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.is_primitive", "macro_sql": "{% macro is_primitive(val) %}\n  {% do return (\n    val is none or\n    val is boolean or\n    val is number or\n    val is string\n  ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.592959, "supported_languages": null}, "macro.elementary.edr_type_bool": {"name": "edr_type_bool", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_bool", "macro_sql": "\n\n{%- macro edr_type_bool() -%}\n    {{ return(adapter.dispatch('edr_type_bool', 'elementary')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.bigquery__edr_type_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.593132, "supported_languages": null}, "macro.elementary.default__edr_type_bool": {"name": "default__edr_type_bool", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.default__edr_type_bool", "macro_sql": "{% macro default__edr_type_bool() %}\n    {% do return(\"boolean\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5932539, "supported_languages": null}, "macro.elementary.bigquery__edr_type_bool": {"name": "bigquery__edr_type_bool", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.bigquery__edr_type_bool", "macro_sql": "{% macro bigquery__edr_type_bool() %}\n    {% do return(\"BOOL\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5933828, "supported_languages": null}, "macro.elementary.edr_type_string": {"name": "edr_type_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_string", "macro_sql": "\n\n\n{%- macro edr_type_string() -%}\n    {{ return(adapter.dispatch('edr_type_string', 'elementary')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.bigquery__edr_type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.593546, "supported_languages": null}, "macro.elementary.default__edr_type_string": {"name": "default__edr_type_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.default__edr_type_string", "macro_sql": "{% macro default__edr_type_string() %}\n    {# Redshift and Postgres #}\n    {% do return(\"varchar(4096)\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.593675, "supported_languages": null}, "macro.elementary.snowflake__edr_type_string": {"name": "snowflake__edr_type_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.snowflake__edr_type_string", "macro_sql": "{% macro snowflake__edr_type_string() %}\n    {# Default max varchar size in Snowflake is 16MB #}\n    {% do return(\"varchar\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.593801, "supported_languages": null}, "macro.elementary.bigquery__edr_type_string": {"name": "bigquery__edr_type_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.bigquery__edr_type_string", "macro_sql": "{% macro bigquery__edr_type_string() %}\n    {# Default max string size in Bigquery is 65K #}\n    {% do return(\"string\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5939279, "supported_languages": null}, "macro.elementary.spark__edr_type_string": {"name": "spark__edr_type_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.spark__edr_type_string", "macro_sql": "{% macro spark__edr_type_string() %}\n    {% do return(\"string\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.594048, "supported_languages": null}, "macro.elementary.edr_type_long_string": {"name": "edr_type_long_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_long_string", "macro_sql": "\n\n\n\n{%- macro edr_type_long_string() -%}\n    {{ return(adapter.dispatch('edr_type_long_string', 'elementary')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.default__edr_type_long_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.594211, "supported_languages": null}, "macro.elementary.default__edr_type_long_string": {"name": "default__edr_type_long_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.default__edr_type_long_string", "macro_sql": "{%- macro default__edr_type_long_string() -%}\n    {# Snowflake, Bigquery, Databricks #}\n    {% do return(elementary.edr_type_string()) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.594351, "supported_languages": null}, "macro.elementary.redshift__edr_type_long_string": {"name": "redshift__edr_type_long_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.redshift__edr_type_long_string", "macro_sql": "{%- macro redshift__edr_type_long_string() -%}\n    {% set long_string = 'varchar(' ~ elementary.get_config_var('long_string_size') ~ ')' %}\n    {{ return(long_string) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.594553, "supported_languages": null}, "macro.elementary.postgres__edr_type_long_string": {"name": "postgres__edr_type_long_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.postgres__edr_type_long_string", "macro_sql": "{%- macro postgres__edr_type_long_string() -%}\n    {% set long_string = 'text' %}\n    {{ return(long_string) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5947032, "supported_languages": null}, "macro.elementary.edr_type_bigint": {"name": "edr_type_bigint", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_bigint", "macro_sql": "{% macro edr_type_bigint() %}\n    {% set macro = dbt.type_bigint or dbt_utils.type_bigint %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `type_bigint` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5949922, "supported_languages": null}, "macro.elementary.edr_type_float": {"name": "edr_type_float", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_float", "macro_sql": "{% macro edr_type_float() %}\n    {% set macro = dbt.type_float or dbt_utils.type_float %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `type_float` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.595281, "supported_languages": null}, "macro.elementary.edr_type_int": {"name": "edr_type_int", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_int", "macro_sql": "{% macro edr_type_int() %}\n    {% set macro = dbt.type_int or dbt_utils.type_int %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `type_int` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5955682, "supported_languages": null}, "macro.elementary.edr_type_timestamp": {"name": "edr_type_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_timestamp", "macro_sql": "{% macro edr_type_timestamp() %}\n    {% set macro = dbt.type_timestamp or dbt_utils.type_timestamp %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `type_timestamp` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.595861, "supported_languages": null}, "macro.elementary.edr_type_numeric": {"name": "edr_type_numeric", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "unique_id": "macro.elementary.edr_type_numeric", "macro_sql": "{% macro edr_type_numeric() %}\n    {% set macro = dbt.type_numeric or dbt_utils.type_numeric %}\n    {% if not macro %}\n        {{ exceptions.raise_compiler_error(\"Did not find a `type_numeric` macro.\") }}\n    {% endif %}\n    {{ return(macro()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.596149, "supported_languages": null}, "macro.elementary.get_column_size": {"name": "get_column_size", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_size.sql", "original_file_path": "macros/utils/data_types/data_size.sql", "unique_id": "macro.elementary.get_column_size", "macro_sql": "{% macro get_column_size() %}\n  {{ return(adapter.dispatch('get_column_size', 'elementary')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.bigquery__get_column_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.596529, "supported_languages": null}, "macro.elementary.default__get_column_size": {"name": "default__get_column_size", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_size.sql", "original_file_path": "macros/utils/data_types/data_size.sql", "unique_id": "macro.elementary.default__get_column_size", "macro_sql": "{% macro default__get_column_size() %}\n  {{ return(elementary.get_config_var('long_string_size')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5966709, "supported_languages": null}, "macro.elementary.postgres__get_column_size": {"name": "postgres__get_column_size", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_size.sql", "original_file_path": "macros/utils/data_types/data_size.sql", "unique_id": "macro.elementary.postgres__get_column_size", "macro_sql": "{% macro postgres__get_column_size() %}\n  {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.596784, "supported_languages": null}, "macro.elementary.snowflake__get_column_size": {"name": "snowflake__get_column_size", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_size.sql", "original_file_path": "macros/utils/data_types/data_size.sql", "unique_id": "macro.elementary.snowflake__get_column_size", "macro_sql": "{% macro snowflake__get_column_size() %}\n  {{ return(16777216) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.596965, "supported_languages": null}, "macro.elementary.bigquery__get_column_size": {"name": "bigquery__get_column_size", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_size.sql", "original_file_path": "macros/utils/data_types/data_size.sql", "unique_id": "macro.elementary.bigquery__get_column_size", "macro_sql": "{% macro bigquery__get_column_size() %}\n  {{ return(10485760) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.59708, "supported_languages": null}, "macro.elementary.redshift__get_column_size": {"name": "redshift__get_column_size", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/data_size.sql", "original_file_path": "macros/utils/data_types/data_size.sql", "unique_id": "macro.elementary.redshift__get_column_size", "macro_sql": "{% macro redshift__get_column_size() %}\n  {{ return(elementary.default__get_column_size()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__get_column_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.597208, "supported_languages": null}, "macro.elementary.normalize_data_type": {"name": "normalize_data_type", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/normalize_data_type.sql", "original_file_path": "macros/utils/data_types/normalize_data_type.sql", "unique_id": "macro.elementary.normalize_data_type", "macro_sql": "{% macro normalize_data_type(data_type) %}\n\n    {# In case data type has precision info - e.g. decimal is in the format decimal(p,s) #}\n    {%- if '(' in data_type %}\n        {%- set data_type = data_type.split('(')[0] %}\n    {%- endif %}\n\n    {%- if data_type is defined and data_type is not none %}\n        {%- if data_type in elementary.data_type_list('string') %}\n            {{ return('string') }}\n        {%- elif data_type in elementary.data_type_list('numeric') %}\n            {{ return('numeric') }}\n        {%- elif data_type in elementary.data_type_list('timestamp') %}\n            {{ return('timestamp') }}\n        {%- else %}\n            {{ return('other') }}\n        {% endif %}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.data_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.59813, "supported_languages": null}, "macro.elementary.null_int": {"name": "null_int", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "unique_id": "macro.elementary.null_int", "macro_sql": "{%- macro null_int() -%}\n    cast(null as {{ elementary.edr_type_int() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.59838, "supported_languages": null}, "macro.elementary.null_timestamp": {"name": "null_timestamp", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "unique_id": "macro.elementary.null_timestamp", "macro_sql": "{%- macro null_timestamp() -%}\n    cast(null as {{ elementary.edr_type_timestamp() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.598495, "supported_languages": null}, "macro.elementary.null_float": {"name": "null_float", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "unique_id": "macro.elementary.null_float", "macro_sql": "{%- macro null_float() -%}\n    cast(null as {{ elementary.edr_type_float() }})\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.elementary.edr_type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.5986052, "supported_languages": null}, "macro.elementary.null_string": {"name": "null_string", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "unique_id": "macro.elementary.null_string", "macro_sql": "{% macro null_string() %}\n    cast(null as {{ elementary.edr_type_string() }})\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.598712, "supported_languages": null}, "macro.elementary.insensitive_get_dict_value": {"name": "insensitive_get_dict_value", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/dict_utils/insensitive_get_dict_value.sql", "original_file_path": "macros/utils/dict_utils/insensitive_get_dict_value.sql", "unique_id": "macro.elementary.insensitive_get_dict_value", "macro_sql": "{% macro insensitive_get_dict_value(dict, key, default) -%}\n    {% set value = elementary.safe_get_with_default(dict, key) %}\n    {%- if value is not none -%}\n        {{- return(value) -}}\n    {%- endif %}\n    {% set value = elementary.safe_get_with_default(dict, key.lower()) %}\n    {%- if value is not none -%}\n        {{- return(value) -}}\n    {%- endif %}\n    {% set value = elementary.safe_get_with_default(dict, key.upper()) %}\n    {%- if value is not none -%}\n        {{- return(value) -}}\n    {%- endif %}\n    {%- if default is defined -%}\n        {{- return(default) -}}\n    {% else %}\n        {{ return(none) }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.599712, "supported_languages": null}, "macro.elementary.safe_get_with_default": {"name": "safe_get_with_default", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/dict_utils/safe_get_with_default_value.sql", "original_file_path": "macros/utils/dict_utils/safe_get_with_default_value.sql", "unique_id": "macro.elementary.safe_get_with_default", "macro_sql": "{% macro safe_get_with_default(dict, key, default) %}\n    {% set value = dict.get(key) %}\n    {% if value is defined and value is not none %}\n        {{ return(value) }}\n    {% endif %}\n    {% if default is defined %}\n        {{ return(default) }}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.600236, "supported_languages": null}, "macro.elementary.get_node_execution_id": {"name": "get_node_execution_id", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_node_execution_id.sql", "original_file_path": "macros/utils/graph/get_node_execution_id.sql", "unique_id": "macro.elementary.get_node_execution_id", "macro_sql": "{% macro get_node_execution_id(node) %}\n    {% set node_execution_id = [invocation_id, node.get('unique_id')] | join('.') %}\n    {{ return(node_execution_id) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.600529, "supported_languages": null}, "macro.elementary.get_compiled_code": {"name": "get_compiled_code", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_compiled_code.sql", "original_file_path": "macros/utils/graph/get_compiled_code.sql", "unique_id": "macro.elementary.get_compiled_code", "macro_sql": "{% macro get_compiled_code(node) %}\n  {% do return(node.get('compiled_code') or node.get('compiled_sql')) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6007638, "supported_languages": null}, "macro.elementary.get_node": {"name": "get_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_node.sql", "original_file_path": "macros/utils/graph/get_node.sql", "unique_id": "macro.elementary.get_node", "macro_sql": "{% macro get_node(node_unique_id) %}\n    {# First let's try to find it in regular nodes #}\n    {%- set node = graph.nodes.get(node_unique_id) -%}\n    {%- if not node -%}\n        {# If not found let's try to find it in source nodes #}\n        {%- set node = graph.sources.get(node_unique_id) -%}\n    {%- endif -%}\n    {{ return(node) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.601152, "supported_languages": null}, "macro.elementary.get_elementary_config_from_node": {"name": "get_elementary_config_from_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_elementary_config_from_node.sql", "original_file_path": "macros/utils/graph/get_elementary_config_from_node.sql", "unique_id": "macro.elementary.get_elementary_config_from_node", "macro_sql": "{% macro get_elementary_config_from_node(node) %}\n    {% set res = {} %}\n    {% set node_config = node.get('config') %}\n    {% if node_config %}\n        {% set elementary_config = node.config.get('elementary') %}\n        {% if elementary_config and elementary_config is mapping %}\n            {% do res.update(elementary_config) %}\n        {% endif %}\n        {% set config_meta = node.config.get('meta') %}\n        {% if config_meta and config_meta is mapping %}\n            {% set elementary_config = config_meta.get('elementary') %}\n            {% if elementary_config and elementary_config is mapping %}\n                {% do res.update(elementary_config) %}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n    {% set node_meta = node.get('meta') %}\n    {% if node_meta and node_meta is mapping %}\n        {% set elementary_config = node_meta.get('elementary') %}\n        {% if elementary_config and elementary_config is mapping %}\n            {% do res.update(elementary_config) %}\n        {% endif %}\n    {% endif %}\n    {{ return(res) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.602714, "supported_languages": null}, "macro.elementary.get_cache": {"name": "get_cache", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_cache.sql", "original_file_path": "macros/utils/graph/get_cache.sql", "unique_id": "macro.elementary.get_cache", "macro_sql": "{% macro get_cache(entry, default=none) %}\n    {% if execute %}\n        {{ return(graph.get(\"elementary\", {}).get(entry, default)) }}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.603091, "supported_languages": null}, "macro.elementary.get_nodes_from_graph": {"name": "get_nodes_from_graph", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_nodes_from_graph.sql", "original_file_path": "macros/utils/graph/get_nodes_from_graph.sql", "unique_id": "macro.elementary.get_nodes_from_graph", "macro_sql": "{% macro get_nodes_from_graph() %}\n    {% set nodes = [] %}\n    {% do nodes.extend(graph.sources.values()) %}\n    {% do nodes.extend(graph.nodes.values()) %}\n    {{ return(nodes) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.603461, "supported_languages": null}, "macro.elementary.get_package_database_and_schema": {"name": "get_package_database_and_schema", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_package_database_and_schema.sql", "original_file_path": "macros/utils/graph/get_package_database_and_schema.sql", "unique_id": "macro.elementary.get_package_database_and_schema", "macro_sql": "{% macro get_package_database_and_schema(package_name='elementary') %}\n    {% if execute %}\n        {% set node_in_package = graph.nodes.values()\n                                 | selectattr(\"resource_type\", \"==\", \"model\")\n                                 | selectattr(\"package_name\", \"==\", package_name) | first %}\n        {% if node_in_package %}\n            {{ return([node_in_package.database, node_in_package.schema]) }}\n        {% endif %}\n    {% endif %}\n    {{ return([none, none]) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.604106, "supported_languages": null}, "macro.elementary.get_parent_model_unique_ids_from_test_node": {"name": "get_parent_model_unique_ids_from_test_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_parent_model_unique_ids_from_test_node.sql", "original_file_path": "macros/utils/graph/get_parent_model_unique_ids_from_test_node.sql", "unique_id": "macro.elementary.get_parent_model_unique_ids_from_test_node", "macro_sql": "{% macro get_parent_model_unique_ids_from_test_node(test_node) %}\n    {% set nodes_in_current_package = [] %}\n    {% set test_depends_on = test_node.get('depends_on') %}\n    {% if test_depends_on %}\n        {% set depends_on_nodes = test_depends_on.get('nodes') %}\n        {% if depends_on_nodes %}\n            {% set current_package_name = test_node.get('package_name') %}\n            {% if current_package_name %}\n                {% set current_package_name = '.' ~ current_package_name ~ '.' %}\n                {% for node in depends_on_nodes %}\n                    {% if current_package_name in node %}\n                        {% do nodes_in_current_package.append(node) %}\n                    {% endif %}\n                {% endfor %}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n    {{ return(nodes_in_current_package) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.605249, "supported_languages": null}, "macro.elementary.get_nodes_by_unique_ids": {"name": "get_nodes_by_unique_ids", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_nodes_by_unique_ids.sql", "original_file_path": "macros/utils/graph/get_nodes_by_unique_ids.sql", "unique_id": "macro.elementary.get_nodes_by_unique_ids", "macro_sql": "{% macro get_nodes_by_unique_ids(unique_ids) %}\n    {% set nodes = []%}\n    {% if execute %}\n        {% if unique_ids and unique_ids is iterable %}\n            {% for unique_id in unique_ids %}\n                {% set node = elementary.get_node(unique_id) %}\n                {% if node %}\n                    {% do nodes.append(node) %}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n    {{ return(nodes) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_node"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.605938, "supported_languages": null}, "macro.elementary.get_table_name_from_node": {"name": "get_table_name_from_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_table_name_from_node.sql", "original_file_path": "macros/utils/graph/get_table_name_from_node.sql", "unique_id": "macro.elementary.get_table_name_from_node", "macro_sql": "{% macro get_table_name_from_node(node) %}\n    {% if node.identifier %}\n        {% set table_name = node.identifier %}\n    {% elif node.alias %}\n        {% set table_name = node.alias %}\n    {% else %}\n        {% set table_name = node.name %}\n    {% endif %}\n    {{ return(table_name) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6063979, "supported_languages": null}, "macro.elementary.column_exists_in_relation": {"name": "column_exists_in_relation", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/column_exists_in_relation.sql", "original_file_path": "macros/utils/graph/column_exists_in_relation.sql", "unique_id": "macro.elementary.column_exists_in_relation", "macro_sql": "{% macro column_exists_in_relation(relation, column_name) %}\n  {% set columns = adapter.get_columns_in_relation(relation) %}\n  {% for column in columns %}\n    {% if column.name.lower() == column_name.lower() %}\n      {% do return(true) %}\n    {% endif %}\n  {% endfor %}\n  {% do return(false) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6068852, "supported_languages": null}, "macro.elementary.get_relation_from_node": {"name": "get_relation_from_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_relation_from_node.sql", "original_file_path": "macros/utils/graph/get_relation_from_node.sql", "unique_id": "macro.elementary.get_relation_from_node", "macro_sql": "{% macro get_relation_from_node(node) %}\n  {% do return(adapter.get_relation(database=node.database,\n                                    schema=node.schema,\n                                    identifier=get_table_name_from_node(node))) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_table_name_from_node"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6071749, "supported_languages": null}, "macro.elementary.get_node_by_name": {"name": "get_node_by_name", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_node_by_name.sql", "original_file_path": "macros/utils/graph/get_node_by_name.sql", "unique_id": "macro.elementary.get_node_by_name", "macro_sql": "{% macro get_node_by_name(name) %}\n    {%- set nodes = get_nodes_from_graph() -%}\n    {% for node in nodes %}\n        {% if node.name == name %}\n            {% do return(node) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_nodes_from_graph"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.60759, "supported_languages": null}, "macro.elementary.get_elementary_relation": {"name": "get_elementary_relation", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_elementary_relation.sql", "original_file_path": "macros/utils/graph/get_elementary_relation.sql", "unique_id": "macro.elementary.get_elementary_relation", "macro_sql": "{% macro get_elementary_relation(identifier) %}\n  {% set elementary_database, elementary_schema = elementary.get_package_database_and_schema() %}\n  {% if this and this.database == elementary_database and this.schema == elementary_schema and this.identifier == identifier %}\n    {% do return(this) %}\n  {% endif %}\n  {% do return(adapter.get_relation(elementary_database, elementary_schema, identifier)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_package_database_and_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6081212, "supported_languages": null}, "macro.elementary.get_result_node": {"name": "get_result_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_result_node.sql", "original_file_path": "macros/utils/graph/get_result_node.sql", "unique_id": "macro.elementary.get_result_node", "macro_sql": "{% macro get_result_node(identifier, package_name='elementary') %}\n  {% for result in results %}\n    {% if result.node.identifier == identifier %}\n      {% if package_name %}\n        {% if result.node.package_name == package_name %}\n          {{ return(result.node) }}\n        {% endif %}\n      {% else %}\n        {{ return(result.node) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.608771, "supported_languages": null}, "macro.elementary.set_cache": {"name": "set_cache", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/set_cache.sql", "original_file_path": "macros/utils/graph/set_cache.sql", "unique_id": "macro.elementary.set_cache", "macro_sql": "{% macro set_cache(entry, val) %}\n    {% if execute %}\n        {% do graph.get(\"elementary\", {}).update({entry: val}) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.609091, "supported_languages": null}, "macro.elementary.get_model_database_and_schema_from_test_node": {"name": "get_model_database_and_schema_from_test_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/graph/get_model_database_and_schema_from_test_node.sql", "original_file_path": "macros/utils/graph/get_model_database_and_schema_from_test_node.sql", "unique_id": "macro.elementary.get_model_database_and_schema_from_test_node", "macro_sql": "{% macro get_model_database_and_schema_from_test_node(test_node) %}\n    {% set test_database = test_node.get('database') %}\n    {% set test_schema = test_node.get('schema') %}\n    {% set config_dict = elementary.safe_get_with_default(test_node, 'config', {}) %}\n    {% set test_schema_sufix = config_dict.get('schema') %}\n    {% if test_schema and test_schema_sufix %}\n        {% set test_schema = test_schema | replace('_' ~ test_schema_sufix, '') %}\n    {% endif %}\n    {{ return([test_database, test_schema]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.safe_get_with_default"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.609808, "supported_languages": null}, "macro.elementary.union_macro_queries": {"name": "union_macro_queries", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/union_macro_queries.sql", "original_file_path": "macros/utils/run_queries/union_macro_queries.sql", "unique_id": "macro.elementary.union_macro_queries", "macro_sql": "{% macro union_macro_queries(param_list, query_macro) %}\n    {% for param in param_list %}\n        ({{ query_macro(param) }})\n        {% if not loop.last %}\n            union all\n        {% endif %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6101298, "supported_languages": null}, "macro.elementary.agate_to_json": {"name": "agate_to_json", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/agate_to_json.sql", "original_file_path": "macros/utils/run_queries/agate_to_json.sql", "unique_id": "macro.elementary.agate_to_json", "macro_sql": "{% macro agate_to_json(agate_table) %}\n    {% set serializable_rows = elementary.agate_to_dicts(agate_table) %}\n    {{ return(tojson(serializable_rows)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.agate_to_dicts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.610384, "supported_languages": null}, "macro.elementary.result_column_to_list": {"name": "result_column_to_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/result_column_to_list.sql", "original_file_path": "macros/utils/run_queries/result_column_to_list.sql", "unique_id": "macro.elementary.result_column_to_list", "macro_sql": "{% macro result_column_to_list(single_column_query) %}\n    {% set query_result = elementary.run_query(single_column_query) %}\n    {% do return(query_result.columns[0]) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6106482, "supported_languages": null}, "macro.elementary.result_value": {"name": "result_value", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/result_value.sql", "original_file_path": "macros/utils/run_queries/result_value.sql", "unique_id": "macro.elementary.result_value", "macro_sql": "{% macro result_value(single_column_query) %}\n    {% set result = elementary.run_query(single_column_query) %}\n    {% if not result %}\n      {% do return(none) %}\n    {% endif %}\n    {% do return(result[0][0]) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6110358, "supported_languages": null}, "macro.elementary.agate_to_dicts": {"name": "agate_to_dicts", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/agate_to_dicts.sql", "original_file_path": "macros/utils/run_queries/agate_to_dicts.sql", "unique_id": "macro.elementary.agate_to_dicts", "macro_sql": "{% macro agate_to_dicts(agate_table) %}\n    {% set column_types = agate_table.column_types %}\n    {% set serializable_rows = [] %}\n    {% for agate_row in agate_table.rows %}\n        {% set serializable_row = {} %}\n        {% for col_name, col_value in agate_row.items() %}\n            {% set serializable_col_value = column_types[loop.index0].jsonify(col_value) %}\n            {% set serializable_col_name = col_name | lower %}\n            {% do serializable_row.update({serializable_col_name: serializable_col_value}) %}\n        {% endfor %}\n        {% do serializable_rows.append(serializable_row) %}\n    {% endfor %}\n    {{ return(serializable_rows) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.611915, "supported_languages": null}, "macro.elementary.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/run_queries/run_query.sql", "original_file_path": "macros/utils/run_queries/run_query.sql", "unique_id": "macro.elementary.run_query", "macro_sql": "{% macro run_query(query, lowercase_column_names=True) %}\n    {% set query_result = dbt.run_query(query) %}\n    {% if lowercase_column_names %}\n        {% set lowercased_column_names = {} %}\n        {% for column_name in query_result.column_names %}\n            {% do lowercased_column_names.update({column_name: column_name.lower()}) %}\n        {% endfor %}\n        {% set query_result = query_result.rename(lowercased_column_names) %}\n    {% endif %}\n    {% do return(query_result) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6125782, "supported_languages": null}, "macro.elementary.create_table_like": {"name": "create_table_like", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_table_like.sql", "original_file_path": "macros/utils/table_operations/create_table_like.sql", "unique_id": "macro.elementary.create_table_like", "macro_sql": "{% macro create_table_like(relation, like_relation, temporary=False) %}\n    {% set empty_table_query = 'SELECT * FROM {} WHERE 1 = 0'.format(like_relation) %}\n    {% do elementary.run_query(dbt.create_table_as(temporary, relation, empty_table_query)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6129138, "supported_languages": null}, "macro.elementary.delete_if_incremental": {"name": "delete_if_incremental", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/delete_if_incremental.sql", "original_file_path": "macros/utils/table_operations/delete_if_incremental.sql", "unique_id": "macro.elementary.delete_if_incremental", "macro_sql": "{% macro delete_if_incremental(where_clause) %}\n\n    {% set query%}\n        delete from {{ this }}\n        where {{ where_clause }}\n    {% endset %}\n\n    {% if is_incremental() %}\n        {% do run_query(query) %}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.613269, "supported_languages": null}, "macro.elementary.remove_rows": {"name": "remove_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/remove_rows.sql", "original_file_path": "macros/utils/table_operations/remove_rows.sql", "unique_id": "macro.elementary.remove_rows", "macro_sql": "{% macro remove_rows(table_name) %}\n\n    {% set remove_rows_query %}\n        delete from {{ table_name }}\n    {% endset %}\n    {% do run_query(remove_rows_query) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.613515, "supported_languages": null}, "macro.elementary.get_columns_and_types": {"name": "get_columns_and_types", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_columns_and_types.sql", "original_file_path": "macros/utils/table_operations/get_columns_and_types.sql", "unique_id": "macro.elementary.get_columns_and_types", "macro_sql": "{% macro get_columns_and_types(table_name, schema_name = none, database_name = none) %}\n\n    {# dbt models can be found with identifier only #}\n    {# for non-dbt tables database_name and schema_name are required #}\n\n    {%- if not database_name %}\n        {%- set database_name = elementary.target_database() %}\n    {%- endif %}\n    {%- if not schema_name %}\n        {%- set schema_name = target.schema %}\n    {%- endif %}\n\n    {%- set columns = [] %}\n\n    {%- set relation = adapter.get_relation(\n          database=database_name,\n          schema=schema_name,\n          identifier=table_name) -%}\n\n    {%- set columns_from_relation = adapter.get_columns_in_relation(relation) -%}\n\n    {% for column in columns_from_relation %}\n        {%- set column_item = {'column_name': column['column'], 'data_type': elementary.normalize_data_type(column['dtype'])} %}\n        {%- do columns.append(column_item) -%}\n    {% endfor %}\n\n    {{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.target_database", "macro.elementary.normalize_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.61467, "supported_languages": null}, "macro.elementary.create_temp_table": {"name": "create_temp_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_temp_table.sql", "original_file_path": "macros/utils/table_operations/create_temp_table.sql", "unique_id": "macro.elementary.create_temp_table", "macro_sql": "{% macro create_temp_table(database_name, schema_name, table_name, sql_query) %}\n    {% set temp_table_exists, temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                               schema=schema_name,\n                                                                               identifier=table_name,\n                                                                               type='table') -%}\n    {% if temp_table_exists %}\n        {% do adapter.drop_relation(temp_table_relation) %}\n        {% do run_query(dbt.create_table_as(True, temp_table_relation, sql_query)) %}\n    {% else %}\n        {% do run_query(dbt.create_table_as(True, temp_table_relation, sql_query)) %}\n    {% endif %}\n    {{ return(temp_table_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.elementary.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6154938, "supported_languages": null}, "macro.elementary.get_row_count": {"name": "get_row_count", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_row_count.sql", "original_file_path": "macros/utils/table_operations/get_row_count.sql", "unique_id": "macro.elementary.get_row_count", "macro_sql": "{% macro get_row_count(full_table_name) %}\n\n    {% set query_row_count %}\n        select count(*) from {{ full_table_name }}\n    {% endset %}\n    {% if execute %}\n        {% set result = run_query(query_row_count).columns[0].values()[0] %}\n    {% endif %}\n    {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.615938, "supported_languages": null}, "macro.elementary.create_or_replace": {"name": "create_or_replace", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "unique_id": "macro.elementary.create_or_replace", "macro_sql": "{% macro create_or_replace(temporary, relation, sql_query) %}\n    {{ return(adapter.dispatch('create_or_replace', 'elementary')(temporary, relation, sql_query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__create_or_replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.616478, "supported_languages": null}, "macro.elementary.default__create_or_replace": {"name": "default__create_or_replace", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "unique_id": "macro.elementary.default__create_or_replace", "macro_sql": "{% macro default__create_or_replace(temporary, relation, sql_query) %}\n    {% do run_query(dbt.create_table_as(temporary, relation, sql_query)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.616684, "supported_languages": null}, "macro.elementary.redshift__create_or_replace": {"name": "redshift__create_or_replace", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "unique_id": "macro.elementary.redshift__create_or_replace", "macro_sql": "{% macro redshift__create_or_replace(temporary, relation, sql_query) %}\n    {% do dbt.drop_relation_if_exists(relation) %}\n    {% do run_query(dbt.create_table_as(temporary, relation, sql_query)) %}\n    {% do adapter.commit() %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.elementary.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.616979, "supported_languages": null}, "macro.elementary.postgres__create_or_replace": {"name": "postgres__create_or_replace", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "unique_id": "macro.elementary.postgres__create_or_replace", "macro_sql": "{% macro postgres__create_or_replace(temporary, relation, sql_query) %}\n    {% do run_query(\"BEGIN\") %}\n    {% do dbt.drop_relation_if_exists(relation) %}\n    {% do run_query(dbt.create_table_as(temporary, relation, sql_query)) %}\n    {% do run_query(\"COMMIT\") %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.run_query", "macro.dbt.drop_relation_if_exists", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.617329, "supported_languages": null}, "macro.elementary.spark__create_or_replace": {"name": "spark__create_or_replace", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "unique_id": "macro.elementary.spark__create_or_replace", "macro_sql": "{% macro spark__create_or_replace(temporary, relation, sql_query) %}\n    {% do dbt.drop_relation_if_exists(relation) %}\n    {% do run_query(dbt.create_table_as(temporary, relation, sql_query)) %}\n    {% do adapter.commit() %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.elementary.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.617622, "supported_languages": null}, "macro.elementary.insert_as_select": {"name": "insert_as_select", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_as_select.sql", "original_file_path": "macros/utils/table_operations/insert_as_select.sql", "unique_id": "macro.elementary.insert_as_select", "macro_sql": "{% macro insert_as_select(table_relation, select_query) %}\n    {# when calling this macro, you need to add depends on ref comment #}\n    {# ref_model and select_query need to have the same columns #}\n\n    {%- set insert_query %}\n        insert into {{ table_relation }}\n        with tmp_table as (\n            {{ select_query }}\n        )\n        select * from tmp_table\n    {%- endset %}\n\n    {{ return(insert_query) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.617954, "supported_languages": null}, "macro.elementary.insert_rows": {"name": "insert_rows", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.insert_rows", "macro_sql": "{% macro insert_rows(table_relation, rows, should_commit=false, chunk_size=5000) %}\n    {% if not rows %}\n      {{ return(none) }}\n    {% endif %}\n\n    {% if not table_relation %}\n        {{ elementary.edr_log('Unable to insert rows to non-existent table. Please run \"dbt run -s elementary\".') }}\n        {{ return(none) }}\n    {% endif %}\n\n    {% set columns = adapter.get_columns_in_relation(table_relation) -%}\n    {% if not columns %}\n        {% set table_name = elementary.relation_to_full_name(table_relation) %}\n        {{ elementary.edr_log('Could not extract columns for table - ' ~ table_name ~ ' (might be a permissions issue)') }}\n        {{ return(none) }}\n    {% endif %}\n\n    {{ elementary.debug_log('Inserting {} rows to table {}'.format(rows | length, table_relation)) }}\n    {% set insert_rows_method = elementary.get_config_var('insert_rows_method') %}\n    {% if insert_rows_method == 'max_query_size' %}\n      {% set insert_rows_queries = elementary.get_insert_rows_queries(table_relation, columns, rows) %}\n      {% set queries_len = insert_rows_queries | length %}\n      {% for insert_query in insert_rows_queries %}\n        {% do elementary.debug_log(\"[{}/{}] Running insert query.\".format(loop.index, queries_len)) %}\n        {% do elementary.run_query(insert_query) %}\n      {% endfor %}\n    {% elif insert_rows_method == 'chunk' %}\n      {% set rows_chunks = elementary.split_list_to_chunks(rows, chunk_size) %}\n      {% for rows_chunk in rows_chunks %}\n        {% set insert_rows_query = elementary.get_chunk_insert_query(table_relation, columns, rows_chunk) %}\n        {% do run_query(insert_rows_query) %}\n      {% endfor %}\n    {% else %}\n      {% do exceptions.raise_compiler_error(\"Specified invalid value for 'insert_rows_method' var.\") %}\n    {% endif %}\n\n    {% if should_commit %}\n      {% do adapter.commit() %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_log", "macro.elementary.relation_to_full_name", "macro.elementary.debug_log", "macro.elementary.get_config_var", "macro.elementary.get_insert_rows_queries", "macro.elementary.run_query", "macro.elementary.split_list_to_chunks", "macro.elementary.get_chunk_insert_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.623561, "supported_languages": null}, "macro.elementary.get_insert_rows_queries": {"name": "get_insert_rows_queries", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.get_insert_rows_queries", "macro_sql": "{% macro get_insert_rows_queries(table_relation, columns, rows, query_max_size=elementary.get_config_var('query_max_size')) -%}\n    {% set insert_queries = [] %}\n    {% set insert_query %}\n       insert into {{ table_relation }}\n         ({%- for column in columns -%}\n           {{- column.name -}} {{- \",\" if not loop.last else \"\" -}}\n         {%- endfor -%}) values\n    {% endset %}\n\n    {% set current_query = namespace(data=insert_query) %}\n    {% for row in rows %}\n      {% set rendered_column_values = [] %}\n      {% for column in columns %}\n        {% set column_value = elementary.insensitive_get_dict_value(row, column.name) %}\n        {% do rendered_column_values.append(elementary.render_value(column_value)) %}\n      {% endfor %}\n      {% set row_sql = \"({})\".format(rendered_column_values | join(\",\")) %}\n      {% set query_with_row = current_query.data + (\",\" if not loop.first else \"\") + row_sql %}\n\n      {% if query_with_row | length > query_max_size %}\n        {% set new_insert_query = insert_query + row_sql %}\n        {# Check if row is too large to fit into an insert query. #}\n        {% if new_insert_query | length > query_max_size %}\n          {% do elementary.debug_log(\"Oversized row for insert_rows: {}\".format(query_with_row)) %}\n          {% do exceptions.raise_compiler_error(\"Row to be inserted exceeds var('query_max_size'). Consider increasing its value.\") %}\n        {% endif %}\n        {% do insert_queries.append(current_query.data) %}\n        {% set current_query.data = new_insert_query %}\n      {% else %}\n        {% set current_query.data = query_with_row %}\n      {% endif %}\n      {% if loop.last %}\n        {% do insert_queries.append(current_query.data) %}\n      {% endif %}\n    {% endfor %}\n\n    {{ return(insert_queries) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.insensitive_get_dict_value", "macro.elementary.render_value", "macro.elementary.debug_log"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.625237, "supported_languages": null}, "macro.elementary.get_chunk_insert_query": {"name": "get_chunk_insert_query", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.get_chunk_insert_query", "macro_sql": "{% macro get_chunk_insert_query(table_relation, columns, rows) -%}\n    {% set insert_rows_query %}\n        insert into {{ table_relation }}\n            ({%- for column in columns -%}\n                {{- column.name -}} {{- \",\" if not loop.last else \"\" -}}\n            {%- endfor -%}) values\n            {% for row in rows -%}\n                ({%- for column in columns -%}\n                    {%- set column_value = elementary.insensitive_get_dict_value(row, column.name, none) -%}\n                    {{ elementary.render_value(column_value) }}\n                    {{- \",\" if not loop.last else \"\" -}}\n                 {%- endfor -%}) {{- \",\" if not loop.last else \"\" -}}\n            {%- endfor -%}\n    {% endset %}\n    {{ return(insert_rows_query) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.insensitive_get_dict_value", "macro.elementary.render_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.625942, "supported_languages": null}, "macro.elementary.escape_special_chars": {"name": "escape_special_chars", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.escape_special_chars", "macro_sql": "{% macro escape_special_chars(string_value) %}\n    {{ return(adapter.dispatch('escape_special_chars', 'elementary')(string_value)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__escape_special_chars"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.626131, "supported_languages": null}, "macro.elementary.default__escape_special_chars": {"name": "default__escape_special_chars", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.default__escape_special_chars", "macro_sql": "\n\n{%- macro default__escape_special_chars(string_value) -%}\n    {{- return(string_value | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace(\"\\n\", \"\\\\n\") | replace(\"\\r\", \"\\\\r\")) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.626403, "supported_languages": null}, "macro.elementary.redshift__escape_special_chars": {"name": "redshift__escape_special_chars", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.redshift__escape_special_chars", "macro_sql": "{%- macro redshift__escape_special_chars(string_value) -%}\n    {{- return(string_value | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace(\"\\n\", \"\\\\n\") | replace(\"\\r\", \"\\\\r\")) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.626676, "supported_languages": null}, "macro.elementary.postgres__escape_special_chars": {"name": "postgres__escape_special_chars", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.postgres__escape_special_chars", "macro_sql": "{%- macro postgres__escape_special_chars(string_value) -%}\n    {{- return(string_value | replace(\"'\", \"''\")) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6268349, "supported_languages": null}, "macro.elementary.render_value": {"name": "render_value", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/insert_rows.sql", "original_file_path": "macros/utils/table_operations/insert_rows.sql", "unique_id": "macro.elementary.render_value", "macro_sql": "{%- macro render_value(value) -%}\n    {%- if value is defined and value is not none -%}\n        {%- if value is number -%}\n            {{- value -}}\n        {%- elif value is string -%}\n            '{{- elementary.escape_special_chars(value) -}}'\n        {%- elif value is mapping or value is sequence -%}\n            '{{- elementary.escape_special_chars(tojson(value)) -}}'\n        {%- else -%}\n            NULL\n        {%- endif -%}\n    {%- else -%}\n        NULL\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.elementary.escape_special_chars"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6273, "supported_languages": null}, "macro.elementary.merge_sql": {"name": "merge_sql", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/merge_sql.sql", "original_file_path": "macros/utils/table_operations/merge_sql.sql", "unique_id": "macro.elementary.merge_sql", "macro_sql": "{% macro merge_sql(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates=none) -%}\n    {{ return(adapter.dispatch('merge_sql', 'elementary')(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.elementary.default__merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.627844, "supported_languages": null}, "macro.elementary.default__merge_sql": {"name": "default__merge_sql", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/merge_sql.sql", "original_file_path": "macros/utils/table_operations/merge_sql.sql", "unique_id": "macro.elementary.default__merge_sql", "macro_sql": "{% macro default__merge_sql(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates) %}\n    {% set macro = dbt.get_merge_sql %}\n    {% if \"incremental_predicates\" in macro.get_macro().arguments %}\n      {% do return(macro(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates)) %}\n    {% endif %}\n    {% do return(macro(target_relation, tmp_relation, unique_key, dest_columns)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6283252, "supported_languages": null}, "macro.elementary.postgres__merge_sql": {"name": "postgres__merge_sql", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/merge_sql.sql", "original_file_path": "macros/utils/table_operations/merge_sql.sql", "unique_id": "macro.elementary.postgres__merge_sql", "macro_sql": "{% macro postgres__merge_sql(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates) %}\n    {% set macro = dbt.get_delete_insert_merge_sql %}\n    {% if \"incremental_predicates\" in macro.get_macro().arguments %}\n      {% do return(macro(target_relation, tmp_relation, unique_key, dest_columns, incremental_predicates)) %}\n    {% endif %}\n    {% do return(macro(target_relation, tmp_relation, unique_key, dest_columns)) %}\n    {{ return(merge_sql) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.628844, "supported_languages": null}, "macro.elementary.get_column_in_relation": {"name": "get_column_in_relation", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_column_in_relation.sql", "original_file_path": "macros/utils/table_operations/get_column_in_relation.sql", "unique_id": "macro.elementary.get_column_in_relation", "macro_sql": "{% macro get_column_in_relation(relation, column_name) %}\n    {% set columns = adapter.get_columns_in_relation(relation) %}\n    {% for column in columns %}\n        {% if column.name == column_name %}\n            {% do return(column) %}\n        {% endif %}\n    {% endfor %}\n    {% do return(none) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.629318, "supported_languages": null}, "macro.elementary.get_relation_max_name_length": {"name": "get_relation_max_name_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "unique_id": "macro.elementary.get_relation_max_name_length", "macro_sql": "{% macro get_relation_max_name_length() %}\n    {{ return(adapter.dispatch('get_relation_max_name_length', 'elementary')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__get_relation_max_name_length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.629663, "supported_languages": null}, "macro.elementary.default__get_relation_max_name_length": {"name": "default__get_relation_max_name_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "unique_id": "macro.elementary.default__get_relation_max_name_length", "macro_sql": "{% macro default__get_relation_max_name_length(temporary, relation, sql_query) %}\n    {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6298041, "supported_languages": null}, "macro.elementary.redshift__get_relation_max_name_length": {"name": "redshift__get_relation_max_name_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "unique_id": "macro.elementary.redshift__get_relation_max_name_length", "macro_sql": "{% macro redshift__get_relation_max_name_length(temporary, relation, sql_query) %}\n    {{ return(127) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.629941, "supported_languages": null}, "macro.elementary.postgres__get_relation_max_name_length": {"name": "postgres__get_relation_max_name_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "unique_id": "macro.elementary.postgres__get_relation_max_name_length", "macro_sql": "{% macro postgres__get_relation_max_name_length(temporary, relation, sql_query) %}\n    {{ return(63) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.630076, "supported_languages": null}, "macro.elementary.spark__get_relation_max_name_length": {"name": "spark__get_relation_max_name_length", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "unique_id": "macro.elementary.spark__get_relation_max_name_length", "macro_sql": "{% macro spark__get_relation_max_name_length(temporary, relation, sql_query) %}\n    {{ return(127) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.630212, "supported_languages": null}, "macro.elementary.replace_table_data": {"name": "replace_table_data", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/replace_table_data.sql", "original_file_path": "macros/utils/table_operations/replace_table_data.sql", "unique_id": "macro.elementary.replace_table_data", "macro_sql": "{% macro replace_table_data(relation, rows) %}\n    {{ return(adapter.dispatch('replace_table_data', 'elementary')(relation, rows)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.default__replace_table_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6308439, "supported_languages": null}, "macro.elementary.default__replace_table_data": {"name": "default__replace_table_data", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/replace_table_data.sql", "original_file_path": "macros/utils/table_operations/replace_table_data.sql", "unique_id": "macro.elementary.default__replace_table_data", "macro_sql": "{% macro default__replace_table_data(relation, rows) %}\n    {% set intermediate_relation = elementary.create_intermediate_relation(relation, rows, temporary=True) %}\n    {% do elementary.run_query(dbt.create_table_as(False, relation, 'select * from {}'.format(intermediate_relation))) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.create_intermediate_relation", "macro.elementary.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6311738, "supported_languages": null}, "macro.elementary.spark__replace_table_data": {"name": "spark__replace_table_data", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/replace_table_data.sql", "original_file_path": "macros/utils/table_operations/replace_table_data.sql", "unique_id": "macro.elementary.spark__replace_table_data", "macro_sql": "{% macro spark__replace_table_data(relation, rows) %}\n    {% do dbt.truncate_relation(relation) %}\n    {% do elementary.insert_rows(relation, rows, should_commit=false, chunk_size=elementary.get_config_var('dbt_artifacts_chunk_size')) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.truncate_relation", "macro.elementary.insert_rows", "macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.631459, "supported_languages": null}, "macro.elementary.postgres__replace_table_data": {"name": "postgres__replace_table_data", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/replace_table_data.sql", "original_file_path": "macros/utils/table_operations/replace_table_data.sql", "unique_id": "macro.elementary.postgres__replace_table_data", "macro_sql": "{% macro postgres__replace_table_data(relation, rows) %}\n    {% set intermediate_relation = elementary.create_intermediate_relation(relation, rows, temporary=True) %}\n\n    {% set query %}\n        begin transaction;\n        delete from {{ relation }};   -- truncate supported in Redshift transactions, but causes an immediate commit\n        insert into {{ relation }} select * from {{ intermediate_relation }};\n        commit;\n    {% endset %}\n    {% do elementary.run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.create_intermediate_relation", "macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.631822, "supported_languages": null}, "macro.elementary.create_intermediate_relation": {"name": "create_intermediate_relation", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/replace_table_data.sql", "original_file_path": "macros/utils/table_operations/replace_table_data.sql", "unique_id": "macro.elementary.create_intermediate_relation", "macro_sql": "{% macro create_intermediate_relation(base_relation, rows, temporary) %}\n    {% if temporary %}\n        {% set int_relation = dbt.make_temp_relation(base_relation) %}\n    {% else %}\n        {# for non temporary relations - make sure the name is unique #}\n        {% set int_suffix = modules.datetime.datetime.utcnow().strftime('__tmp_%Y%m%d%H%M%S%f') %}\n        {% set int_relation = dbt.make_temp_relation(base_relation, suffix=int_suffix).incorporate(type='table') %}\n    {% endif %}\n\n    {% do elementary.create_table_like(int_relation, base_relation, temporary=temporary) %}\n    {% do elementary.insert_rows(int_relation, rows, should_commit=false, chunk_size=elementary.get_config_var('dbt_artifacts_chunk_size')) %}\n\n    {% do return(int_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.elementary.create_table_like", "macro.elementary.insert_rows", "macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.63263, "supported_languages": null}, "macro.elementary.relation_exists": {"name": "relation_exists", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/relation_exists.sql", "original_file_path": "macros/utils/table_operations/relation_exists.sql", "unique_id": "macro.elementary.relation_exists", "macro_sql": "{% macro relation_exists(relation) %}\n    {%- set loaded_relation = load_relation(relation) -%}\n    {% if loaded_relation is not none %}\n        {{ return(True) }}\n    {% endif %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.632972, "supported_languages": null}, "macro.elementary.table_name_with_suffix": {"name": "table_name_with_suffix", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/table_operations/table_name_with_suffix.sql", "original_file_path": "macros/utils/table_operations/table_name_with_suffix.sql", "unique_id": "macro.elementary.table_name_with_suffix", "macro_sql": "{% macro table_name_with_suffix(table_name, suffix) %}\n    {% set relation_max_name_length = elementary.get_relation_max_name_length()  %}\n    {% if relation_max_name_length %}\n        {% set suffix_length = suffix | length %}\n        {% set table_name_with_suffix = table_name[:relation_max_name_length - suffix_length] ~ suffix %}\n    {% else %}\n        {% set table_name_with_suffix = table_name ~ suffix %}\n    {% endif %}\n    {{ return(table_name_with_suffix) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_relation_max_name_length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.633528, "supported_languages": null}, "macro.elementary.list_concat_with_separator": {"name": "list_concat_with_separator", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/sql_utils/list_concat_with_separator.sql", "original_file_path": "macros/utils/sql_utils/list_concat_with_separator.sql", "unique_id": "macro.elementary.list_concat_with_separator", "macro_sql": "{% macro list_concat_with_separator(item_list, separator, handle_nulls = true) %}\n    {% set new_list = [] %}\n    {% for item in item_list %}\n        {% set new_item = item %}\n        {% if handle_nulls %}\n            {% set new_item = \"case when \" ~ elementary.edr_cast_as_string(item) ~ \" is null then 'NULL' else \" ~ elementary.edr_cast_as_string(item) ~ \" end\" %}\n        {% endif %}\n        {% do new_list.append(new_item) %}\n        {% if not loop.last %}\n            {% do new_list.append(elementary.edr_quote(separator)) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(elementary.join_list(new_list, \" || \")) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_string", "macro.elementary.edr_quote", "macro.elementary.join_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.634429, "supported_languages": null}, "macro.elementary.union_lists": {"name": "union_lists", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/list_utils/union_lists.sql", "original_file_path": "macros/utils/list_utils/union_lists.sql", "unique_id": "macro.elementary.union_lists", "macro_sql": "{% macro union_lists(list1, list2) %}\n    {% set union_list = [] %}\n    {% do union_list.extend(list1) %}\n    {% do union_list.extend(list2) %}\n    {{ return(union_list | unique | list) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.634794, "supported_languages": null}, "macro.elementary.strings_list_to_tuple": {"name": "strings_list_to_tuple", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/list_utils/strings_list_to_tuple.sql", "original_file_path": "macros/utils/list_utils/strings_list_to_tuple.sql", "unique_id": "macro.elementary.strings_list_to_tuple", "macro_sql": "{% macro strings_list_to_tuple(strings) %}\n    {%- if strings %}\n        ({% for string in strings %} '{{ string }}' {{ \",\" if not loop.last else \"\" }} {% endfor %})\n    {%- else %}\n        ('')\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6351612, "supported_languages": null}, "macro.elementary.split_list_to_chunks": {"name": "split_list_to_chunks", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/list_utils/split_list_to_chunks.sql", "original_file_path": "macros/utils/list_utils/split_list_to_chunks.sql", "unique_id": "macro.elementary.split_list_to_chunks", "macro_sql": "{% macro split_list_to_chunks(item_list, chunk_size=50) %}\n    {% set chunks = [] %}\n    {% set current_chunk = [] %}\n    {% for item in item_list %}\n        {% set reminder = loop.index0 % chunk_size %}\n        {% if reminder == 0 and current_chunk %}\n            {% do chunks.append(current_chunk.copy()) %}\n            {% do current_chunk.clear() %}\n        {% endif %}\n        {% do current_chunk.append(item) %}\n    {% endfor %}\n    {% if current_chunk %}\n        {% do chunks.append(current_chunk) %}\n    {% endif %}\n    {{ return(chunks) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.636035, "supported_languages": null}, "macro.elementary.join_list": {"name": "join_list", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/list_utils/join_list.sql", "original_file_path": "macros/utils/list_utils/join_list.sql", "unique_id": "macro.elementary.join_list", "macro_sql": "{% macro join_list(item_list, separator) %}\n    {{ return(item_list | join(separator)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.636228, "supported_languages": null}, "macro.elementary.lists_intersection": {"name": "lists_intersection", "resource_type": "macro", "package_name": "elementary", "path": "macros/utils/list_utils/lists_intersection.sql", "original_file_path": "macros/utils/list_utils/lists_intersection.sql", "unique_id": "macro.elementary.lists_intersection", "macro_sql": "{% macro lists_intersection(list_a, list_b) %}\n  {% set new_list = [] %}\n  {% for item in list_a %}\n    {% if item in list_b %}\n      {% do new_list.append(item) %}\n    {% endif %}\n  {% endfor %}\n  {% do return(new_list) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.636657, "supported_languages": null}, "macro.elementary.generate_elementary_cli_profile": {"name": "generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_elementary_cli_profile.sql", "original_file_path": "macros/commands/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.generate_elementary_cli_profile", "macro_sql": "{% macro generate_elementary_cli_profile(method=none) %}\n  {% set elementary_database, elementary_schema = elementary.get_package_database_and_schema() %}\n  {{ log('\\n' ~ adapter.dispatch('generate_elementary_cli_profile')(method, elementary_database, elementary_schema), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_package_database_and_schema", "macro.elementary.bigquery__generate_elementary_cli_profile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6386182, "supported_languages": null}, "macro.elementary.snowflake__generate_elementary_cli_profile": {"name": "snowflake__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_elementary_cli_profile.sql", "original_file_path": "macros/commands/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.snowflake__generate_elementary_cli_profile", "macro_sql": "{% macro snowflake__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nelementary:\n  outputs:\n    default:\n      type: \"{{ target.type }}\"\n      account: \"{{ target.account }}\"\n      user: \"{{ target.user }}\"\n      password: \"<PASSWORD>\"\n      role: \"{{ target.role }}\"\n      warehouse: \"{{ target.warehouse }}\"\n      database: \"{{ elementary_database }}\"\n      schema: \"{{ elementary_schema }}\"\n      threads: {{ target.threads }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6389241, "supported_languages": null}, "macro.elementary.bigquery__generate_elementary_cli_profile": {"name": "bigquery__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_elementary_cli_profile.sql", "original_file_path": "macros/commands/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.bigquery__generate_elementary_cli_profile", "macro_sql": "{% macro bigquery__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nelementary:\n  outputs:\n    default:\n      type: \"{{ target.type }}\"\n      method: \"<AUTH_METHOD>\" # Configure your auth method and add the required fields according to https://docs.getdbt.com/reference/warehouse-setups/bigquery-setup#authentication-methods\n      project: \"{{ elementary_database }}\"\n      {%- if method == 'github-actions' %}\n      keyfile: \"/tmp/bigquery_keyfile.json\" # Do not change this, supply `bigquery-keyfile` in `.github/workflows/elementary.yml`.\n      {%- endif %}\n      dataset: \"{{ elementary_schema }}\"\n      threads: {{ target.threads }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6392121, "supported_languages": null}, "macro.elementary.postgres__generate_elementary_cli_profile": {"name": "postgres__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_elementary_cli_profile.sql", "original_file_path": "macros/commands/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.postgres__generate_elementary_cli_profile", "macro_sql": "{% macro postgres__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nelementary:\n  outputs:\n    default:\n      type: \"{{ target.type }}\"\n      host: \"{{ target.host }}\"\n      port: {{ target.port }}\n      user: \"{{ target.user }}\"\n      password: \"<PASSWORD>\"\n      dbname: \"{{ elementary_database }}\"\n      schema: \"{{ elementary_schema }}\"\n      threads: {{ target.threads }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6394858, "supported_languages": null}, "macro.elementary.databricks__generate_elementary_cli_profile": {"name": "databricks__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_elementary_cli_profile.sql", "original_file_path": "macros/commands/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.databricks__generate_elementary_cli_profile", "macro_sql": "{% macro databricks__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nelementary:\n  outputs:\n    default:\n      type: \"{{ target.type }}\"\n      host: \"{{ target.host }}\"\n      http_path: \"{{ target.http_path }}\"\n      {%- if elementary_database %}\n      catalog: \"{{ elementary_database }}\"\n      {%- endif %}\n      schema: \"{{ elementary_schema }}\"\n      token: \"<TOKEN>\"\n      threads: {{ target.threads }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.63978, "supported_languages": null}, "macro.elementary.spark__generate_elementary_cli_profile": {"name": "spark__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_elementary_cli_profile.sql", "original_file_path": "macros/commands/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.spark__generate_elementary_cli_profile", "macro_sql": "{% macro spark__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nelementary:\n  outputs:\n    default:\n      type: \"databricks\"\n      host: \"{{ target.host }}\"\n      http_path: \"<HTTP PATH>\"\n      {%- if elementary_database %}\n      catalog: \"{{ elementary_database }}\"\n      {% endif %}\n      schema: \"{{ elementary_schema }}\"\n      token: \"<TOKEN>\"\n      threads: {{ target.threads }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.64003, "supported_languages": null}, "macro.elementary.default__generate_elementary_cli_profile": {"name": "default__generate_elementary_cli_profile", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_elementary_cli_profile.sql", "original_file_path": "macros/commands/generate_elementary_cli_profile.sql", "unique_id": "macro.elementary.default__generate_elementary_cli_profile", "macro_sql": "{% macro default__generate_elementary_cli_profile(method, elementary_database, elementary_schema) %}\nAdapter \"{{ target.type }}\" is not supported on Elementary.\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.640162, "supported_languages": null}, "macro.elementary.generate_schema_baseline_test": {"name": "generate_schema_baseline_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_schema_baseline_test.sql", "original_file_path": "macros/commands/generate_schema_baseline_test.sql", "unique_id": "macro.elementary.generate_schema_baseline_test", "macro_sql": "{% macro generate_schema_baseline_test(name=none, include_sources=True, include_models=False, fail_on_added=False, enforce_types=False) %}\n  {% if name %}\n    {{ generate_schema_baseline_test_for_node(name, fail_on_added=fail_on_added, enforce_types=enforce_types) }}\n  {% else %}\n    {{ generate_schema_baseline_test_for_all_nodes(include_sources=include_sources, include_models=include_models,\n                                                   fail_on_added=fail_on_added, enforce_types=enforce_types) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.generate_schema_baseline_test_for_node", "macro.elementary.generate_schema_baseline_test_for_all_nodes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.64199, "supported_languages": null}, "macro.elementary.generate_schema_baseline_test_for_all_nodes": {"name": "generate_schema_baseline_test_for_all_nodes", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_schema_baseline_test.sql", "original_file_path": "macros/commands/generate_schema_baseline_test.sql", "unique_id": "macro.elementary.generate_schema_baseline_test_for_all_nodes", "macro_sql": "{% macro generate_schema_baseline_test_for_all_nodes(include_sources=True, include_models=False, fail_on_added=False, enforce_types=False) %}\n  {% set nodes = elementary.get_nodes_from_graph() %}\n  {% for node in nodes %}\n    {% if node.package_name != 'elementary' and\n          ((include_sources and node.resource_type == 'source') or\n           (include_models and node.resource_type == 'model')) %}\n      {% do print(\"Generating schema changes from baseline test for {} '{}':\".format(node.resource_type, node.name)) %}\n      {{ generate_schema_baseline_test_for_node(node, fail_on_added=fail_on_added, enforce_types=enforce_types) }}\n      {% do print('----------------------------------') %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_nodes_from_graph", "macro.elementary.generate_schema_baseline_test_for_node"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.642758, "supported_languages": null}, "macro.elementary.generate_schema_baseline_test_for_node": {"name": "generate_schema_baseline_test_for_node", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_schema_baseline_test.sql", "original_file_path": "macros/commands/generate_schema_baseline_test.sql", "unique_id": "macro.elementary.generate_schema_baseline_test_for_node", "macro_sql": "{% macro generate_schema_baseline_test_for_node(node, fail_on_added=False, enforce_types=False) %}\n  {% if node is string %}\n    {% set node_name = node %}\n    {% set node = elementary.get_node_by_name(node_name) %}\n\n    {% if not node %}\n      {% do print(\"Could not find any model or source by the name '{}'!\".format(node_name)) %}\n      {% do return(none) %}\n    {% endif %}\n  {% endif %}\n\n  {% if node.resource_type not in [\"source\", \"model\"] %}\n    {% do print(\"Only sources and models are supported for this macro, supplied node type: '{}'\".format(node.resource_type)) %}\n    {% do return(none) %}\n  {% endif %}\n\n  {% set node_relation = get_relation_from_node(node) %}\n  {% if not node_relation %}\n    {% do print(\"Table not found in the DB! Cannot create schema test.\") %}\n    {% do return(none) %}\n  {% endif %}\n\n  {% set columns = adapter.get_columns_in_relation(node_relation) %}\n\n  {% set test_params = {} %}\n  {% if fail_on_added %}\n    {% do test_params.update({\"fail_on_added\": \"true\"}) %}\n  {% endif %}\n  {% if enforce_types %}\n    {% do test_params.update({\"enforce_types\": \"true\"}) %}\n  {% endif %}\n\n  {# Common yaml for sources and models #}\n  {% set common_yaml %}\n  - name: {{ node.name }}\n    columns:\n    {%- for column in columns %}\n      - name: {{ column.name }}\n        data_type: {{ column.dtype }}\n    {% endfor %}\n    tests:\n      - elementary.schema_changes_from_baseline\n      {%- if test_params %}:\n        {%- for param, param_val in test_params.items() %}\n          {{param}}: {{param_val}}\n        {%- endfor -%}\n      {% endif -%}\n  {% endset %}\n\n  {% set full_yaml %}\n  {%- if node.resource_type == 'source' %}\nsources:\n  - name: {{ node.source_name }}\n    tables:\n      {{- common_yaml }}\n  {% else %}\nmodels:\n  {{- common_yaml }}\n  {% endif -%}\n  {% endset %}\n\n  {% do print(full_yaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_node_by_name", "macro.elementary.get_relation_from_node"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.644589, "supported_languages": null}, "macro.elementary.dump_table": {"name": "dump_table", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/dump_table.sql", "original_file_path": "macros/commands/dump_table.sql", "unique_id": "macro.elementary.dump_table", "macro_sql": "{% macro dump_table(model_unique_id, output_path, since=none, days_back=7) %}\n    {% set node = graph.nodes[model_unique_id] %}\n    {% set timestamp_column = node.meta.timestamp_column %}\n    {% set query %}\n        select * from {{ node.relation_name }}\n        {% if timestamp_column %}\n            {% if since %}\n                where {{ timestamp_column }} > {{ elementary.edr_cast_as_timestamp(elementary.edr_quote(since)) }}\n            {% else %}\n                where {{ elementary.edr_datediff(elementary.edr_cast_as_timestamp(timestamp_column), elementary.edr_current_timestamp(), 'day') }} < {{ days_back }}\n            {% endif %}\n        {% endif %}\n    {% endset %}\n    {% set results = elementary.run_query(query) %}\n    {% do results.to_csv(output_path) %}\n    {% do return(results.column_names) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.edr_cast_as_timestamp", "macro.elementary.edr_quote", "macro.elementary.edr_datediff", "macro.elementary.edr_current_timestamp", "macro.elementary.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.645725, "supported_languages": null}, "macro.elementary.generate_json_schema_test": {"name": "generate_json_schema_test", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_json_schema_test.sql", "original_file_path": "macros/commands/generate_json_schema_test.sql", "unique_id": "macro.elementary.generate_json_schema_test", "macro_sql": "{% macro generate_json_schema_test(node_name, column_name) %}\n    {% if target.type not in ['snowflake', 'bigquery'] %}\n      {% do exceptions.raise_compiler_error(\"JSON schema test generation is not supported for target: {}\".format(target.type)) %}\n    {% endif %}\n\n    {% set node = elementary.get_node_by_name(node_name) %}\n    {% if node.resource_type not in [\"source\", \"model\"] %}\n      {% do exceptions.raise_compiler_error(\"Only sources and models are supported for this macro, supplied node type: '{}'\".format(node.resource_type)) %}\n    {% endif %}\n\n    {% set node_relation = get_relation_from_node(node) %}\n    {% if not elementary.column_exists_in_relation(node_relation, column_name) %}\n      {% do exceptions.raise_compiler_error(\"Column '{}' does not exist in {} '{}'!\".format(column_name, node.resource_type, node_name)) %}\n    {% endif %}\n\n    {% set elementary_database_name, elementary_schema_name = elementary.get_package_database_and_schema() %}\n\n    {% do node.config.update({\"packages\": [\"genson\"]}) %}\n    {% do node.update({'database': elementary_database_name, 'schema': elementary_schema_name}) %}\n    {% if node.resource_type == 'source' %}\n      {# Source nodes don't have alias, and submit_python_job expects it #}\n      {% do node.update({'alias': \"jsonschemagen_{}_{}\".format(node.source_name, node.name)}) %}\n    {% endif %}\n\n    {% set output_table = api.Relation.create(database=elementary_database_name, schema=elementary_schema_name,\n        identifier='json_schema_tmp__' ~ node.alias).quote(false, false, false) %}\n\n    {% set gen_json_schema_func = elementary.generate_json_schema_py_func(column_name) %}\n    {% set node_relation = node_relation.quote(false, false, false) %}\n    {% set compiled_py_code = adapter.dispatch('compile_py_code', 'elementary')(node_relation, gen_json_schema_func,\n                                                                                output_table, code_type='function') %}\n\n    {% do elementary.run_python(node, compiled_py_code) %}\n    {% set json_schema = elementary.result_value('select result from {}'.format(output_table)) %}\n    {% if json_schema == 'genson_not_installed' %}\n      {% do exceptions.raise_compiler_error(\"The 'genson' python library is missing from your warehouse.\\n\\n\"\n         \"This macro relies on the 'genson' python library for generating JSON schemas. Please follow dbt's instructions here: \\n\"\n         \"https://docs.getdbt.com/docs/building-a-dbt-project/building-models/python-models#specific-data-warehouses\\n\"\n         \"regarding how to install python packages for a {} warehouse.\".format(target.type)\n      ) %}\n    {% endif %}\n\n    {% if not json_schema %}\n        {% do exceptions.raise_compiler_error(\"Not a valid JSON column: {}\".format(column_name)) %}\n    {% endif %}\n\n    {% set json_schema = fromjson(json_schema) %}\n    {% do json_schema.pop('$schema', None) %}\n\n    {% set testyaml %}\ncolumns:\n  - name: {{ column_name }}\n    tests:\n      - elementary.json_schema:\n          {{ toyaml(json_schema) | indent(10) }}\n    {% endset %}\n\n    {% do print(\"Please add the following test to your {} configuration for the column {}:\".format(node.resource_type, column_name)) %}\n    {% do print(testyaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.elementary.get_node_by_name", "macro.elementary.get_relation_from_node", "macro.elementary.column_exists_in_relation", "macro.elementary.get_package_database_and_schema", "macro.elementary.generate_json_schema_py_func", "macro.elementary.bigquery__compile_py_code", "macro.elementary.run_python", "macro.elementary.result_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.649902, "supported_languages": null}, "macro.elementary.generate_json_schema_py_func": {"name": "generate_json_schema_py_func", "resource_type": "macro", "package_name": "elementary", "path": "macros/commands/generate_json_schema_test.sql", "original_file_path": "macros/commands/generate_json_schema_test.sql", "unique_id": "macro.elementary.generate_json_schema_py_func", "macro_sql": "{% macro generate_json_schema_py_func(column_name) %}\nimport json\ntry:\n    import genson\nexcept ImportError:\n    genson = None\n\ndef get_column_name_in_df(df, column_name):\n    matching = [col for col in df.columns if col.lower() == column_name.lower()]\n    if len(matching) > 1:\n        # Case matters, switch to case-sensitive match\n        matching = [col for col in df.columns if col == column_name]\n\n    if len(matching) == 0:\n        raise Exception(\"No column with the name: {}\".format(col))\n    return matching[0]\n\ndef func(model_df, ref, session):\n    if genson is None:\n        return \"genson_not_installed\"\n\n    model_df = model_df.toPandas()\n    builder = genson.SchemaBuilder()\n    column_name = get_column_name_in_df(model_df, \"{{ column_name }}\")\n    for val in set(model_df[column_name]):\n        if val == \"\" or val is None:\n            continue\n        try:\n            builder.add_object(json.loads(val))\n        except json.JSONDecodeError:\n            # Not a valid json column, no schema\n            return None\n    return builder.to_schema()\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681446635.6500878, "supported_languages": null}}, "docs": {"doc.jaffle_shop.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "jaffle_shop", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.jaffle_shop.__overview__", "block_contents": "## Data Documentation for Jaffle Shop\n\n`jaffle_shop` is a fictional ecommerce store.\n\nThis [dbt](https://www.getdbt.com/) project is for testing out code.\n\nThe source code can be found [here](https://github.com/clrcrl/jaffle_shop)."}, "doc.jaffle_shop.orders_status": {"name": "orders_status", "resource_type": "doc", "package_name": "jaffle_shop", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.jaffle_shop.orders_status", "block_contents": "Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.jaffle_shop.customers": ["model.jaffle_shop.stg_customers", "model.jaffle_shop.stg_orders", "model.jaffle_shop.stg_payments"], "model.jaffle_shop.orders": ["model.jaffle_shop.stg_orders", "model.jaffle_shop.stg_payments"], "model.jaffle_shop.stg_customers": ["seed.jaffle_shop.raw_customers"], "model.jaffle_shop.stg_payments": ["seed.jaffle_shop.raw_payments"], "model.jaffle_shop.stg_orders": ["seed.jaffle_shop.raw_orders"], "seed.jaffle_shop.raw_customers": [], "seed.jaffle_shop.raw_orders": [], "seed.jaffle_shop.raw_payments": [], "model.elementary.snapshot_run_results": ["model.elementary.dbt_run_results", "model.elementary.dbt_snapshots"], "model.elementary.job_run_results": ["model.elementary.dbt_invocations"], "model.elementary.model_run_results": ["model.elementary.dbt_models", "model.elementary.dbt_run_results"], "model.elementary.test_result_rows": ["model.elementary.elementary_test_results", "model.elementary.elementary_test_results", "model.elementary.elementary_test_results"], "model.elementary.elementary_test_results": [], "model.elementary.dbt_source_freshness_results": [], "model.elementary.alerts_dbt_tests": ["model.elementary.elementary_test_results"], "model.elementary.alerts_schema_changes": ["model.elementary.elementary_test_results"], "model.elementary.alerts_dbt_source_freshness": ["model.elementary.dbt_source_freshness_results", "model.elementary.dbt_sources"], "model.elementary.alerts_anomaly_detection": ["model.elementary.elementary_test_results"], "model.elementary.alerts_dbt_models": ["model.elementary.model_run_results", "model.elementary.snapshot_run_results"], "model.elementary.monitors_runs": ["model.elementary.data_monitoring_metrics"], "model.elementary.metadata": [], "model.elementary.dbt_tests": [], "model.elementary.dbt_models": [], "model.elementary.dbt_sources": [], "model.elementary.dbt_snapshots": [], "model.elementary.dbt_invocations": [], "model.elementary.dbt_metrics": [], "model.elementary.dbt_seeds": [], "model.elementary.dbt_artifacts_hashes": ["model.elementary.dbt_exposures", "model.elementary.dbt_metrics", "model.elementary.dbt_models", "model.elementary.dbt_seeds", "model.elementary.dbt_snapshots", "model.elementary.dbt_sources", "model.elementary.dbt_tests"], "model.elementary.dbt_run_results": [], "model.elementary.dbt_exposures": [], "model.elementary.metrics_anomaly_score": ["model.elementary.data_monitoring_metrics"], "model.elementary.anomaly_threshold_sensitivity": ["model.elementary.metrics_anomaly_score"], "model.elementary.schema_columns_snapshot": [], "model.elementary.data_monitoring_metrics": [], "model.elementary.filtered_information_schema_columns": [], "model.elementary.filtered_information_schema_tables": [], "operation.elementary.elementary-on-run-start-0": [], "operation.elementary.elementary-on-run-end-0": [], "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1": ["model.jaffle_shop.customers"], "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d": ["model.jaffle_shop.customers"], "test.jaffle_shop.not_null_customers_no_such_column.3f636d79eb": ["model.jaffle_shop.customers"], "test.jaffle_shop.unique_orders_order_id.fed79b3a6e": ["model.jaffle_shop.orders"], "test.jaffle_shop.not_null_orders_order_id.cf6c17daed": ["model.jaffle_shop.orders"], "test.jaffle_shop.not_null_orders_customer_id.c5f02694af": ["model.jaffle_shop.orders"], "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2": ["model.jaffle_shop.customers", "model.jaffle_shop.orders"], "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3": ["model.jaffle_shop.orders"], "test.jaffle_shop.not_null_orders_amount.106140f9fd": ["model.jaffle_shop.orders"], "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59": ["model.jaffle_shop.orders"], "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625": ["model.jaffle_shop.orders"], "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49": ["model.jaffle_shop.orders"], "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a": ["model.jaffle_shop.orders"], "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada": ["model.jaffle_shop.stg_customers"], "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa": ["model.jaffle_shop.stg_customers"], "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a": ["model.jaffle_shop.stg_orders"], "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64": ["model.jaffle_shop.stg_orders"], "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": ["model.jaffle_shop.stg_orders"], "test.jaffle_shop.unique_stg_payments_payment_id.3744510712": ["model.jaffle_shop.stg_payments"], "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075": ["model.jaffle_shop.stg_payments"], "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": ["model.jaffle_shop.stg_payments"]}, "child_map": {"model.jaffle_shop.customers": ["test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d", "test.jaffle_shop.not_null_customers_no_such_column.3f636d79eb", "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2", "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1"], "model.jaffle_shop.orders": ["test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3", "test.jaffle_shop.not_null_orders_amount.106140f9fd", "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49", "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625", "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59", "test.jaffle_shop.not_null_orders_customer_id.c5f02694af", "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a", "test.jaffle_shop.not_null_orders_order_id.cf6c17daed", "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2", "test.jaffle_shop.unique_orders_order_id.fed79b3a6e"], "model.jaffle_shop.stg_customers": ["model.jaffle_shop.customers", "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa", "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada"], "model.jaffle_shop.stg_payments": ["model.jaffle_shop.customers", "model.jaffle_shop.orders", "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278", "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075", "test.jaffle_shop.unique_stg_payments_payment_id.3744510712"], "model.jaffle_shop.stg_orders": ["model.jaffle_shop.customers", "model.jaffle_shop.orders", "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad", "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64", "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a"], "seed.jaffle_shop.raw_customers": ["model.jaffle_shop.stg_customers"], "seed.jaffle_shop.raw_orders": ["model.jaffle_shop.stg_orders"], "seed.jaffle_shop.raw_payments": ["model.jaffle_shop.stg_payments"], "model.elementary.snapshot_run_results": ["model.elementary.alerts_dbt_models"], "model.elementary.job_run_results": [], "model.elementary.model_run_results": ["model.elementary.alerts_dbt_models"], "model.elementary.test_result_rows": [], "model.elementary.elementary_test_results": ["model.elementary.alerts_anomaly_detection", "model.elementary.alerts_dbt_tests", "model.elementary.alerts_schema_changes", "model.elementary.test_result_rows", "model.elementary.test_result_rows", "model.elementary.test_result_rows"], "model.elementary.dbt_source_freshness_results": ["model.elementary.alerts_dbt_source_freshness"], "model.elementary.alerts_dbt_tests": [], "model.elementary.alerts_schema_changes": [], "model.elementary.alerts_dbt_source_freshness": [], "model.elementary.alerts_anomaly_detection": [], "model.elementary.alerts_dbt_models": [], "model.elementary.monitors_runs": [], "model.elementary.metadata": [], "model.elementary.dbt_tests": ["model.elementary.dbt_artifacts_hashes"], "model.elementary.dbt_models": ["model.elementary.dbt_artifacts_hashes", "model.elementary.model_run_results"], "model.elementary.dbt_sources": ["model.elementary.alerts_dbt_source_freshness", "model.elementary.dbt_artifacts_hashes"], "model.elementary.dbt_snapshots": ["model.elementary.dbt_artifacts_hashes", "model.elementary.snapshot_run_results"], "model.elementary.dbt_invocations": ["model.elementary.job_run_results"], "model.elementary.dbt_metrics": ["model.elementary.dbt_artifacts_hashes"], "model.elementary.dbt_seeds": ["model.elementary.dbt_artifacts_hashes"], "model.elementary.dbt_artifacts_hashes": [], "model.elementary.dbt_run_results": ["model.elementary.model_run_results", "model.elementary.snapshot_run_results"], "model.elementary.dbt_exposures": ["model.elementary.dbt_artifacts_hashes"], "model.elementary.metrics_anomaly_score": ["model.elementary.anomaly_threshold_sensitivity"], "model.elementary.anomaly_threshold_sensitivity": [], "model.elementary.schema_columns_snapshot": [], "model.elementary.data_monitoring_metrics": ["model.elementary.metrics_anomaly_score", "model.elementary.monitors_runs"], "model.elementary.filtered_information_schema_columns": [], "model.elementary.filtered_information_schema_tables": [], "operation.elementary.elementary-on-run-start-0": [], "operation.elementary.elementary-on-run-end-0": [], "test.jaffle_shop.unique_customers_customer_id.c5af1ff4b1": [], "test.jaffle_shop.not_null_customers_customer_id.5c9bf9911d": [], "test.jaffle_shop.not_null_customers_no_such_column.3f636d79eb": [], "test.jaffle_shop.unique_orders_order_id.fed79b3a6e": [], "test.jaffle_shop.not_null_orders_order_id.cf6c17daed": [], "test.jaffle_shop.not_null_orders_customer_id.c5f02694af": [], "test.jaffle_shop.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2": [], "test.jaffle_shop.accepted_values_orders_status__placed__shipped__completed__return_pending__returned.be6b5b5ec3": [], "test.jaffle_shop.not_null_orders_amount.106140f9fd": [], "test.jaffle_shop.not_null_orders_credit_card_amount.d3ca593b59": [], "test.jaffle_shop.not_null_orders_coupon_amount.ab90c90625": [], "test.jaffle_shop.not_null_orders_bank_transfer_amount.7743500c49": [], "test.jaffle_shop.not_null_orders_gift_card_amount.413a0d2d7a": [], "test.jaffle_shop.unique_stg_customers_customer_id.c7614daada": [], "test.jaffle_shop.not_null_stg_customers_customer_id.e2cfb1f9aa": [], "test.jaffle_shop.unique_stg_orders_order_id.e3b841c71a": [], "test.jaffle_shop.not_null_stg_orders_order_id.81cfe2fe64": [], "test.jaffle_shop.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": [], "test.jaffle_shop.unique_stg_payments_payment_id.3744510712": [], "test.jaffle_shop.not_null_stg_payments_payment_id.c19cc50075": [], "test.jaffle_shop.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": []}, "group_map": {}}
